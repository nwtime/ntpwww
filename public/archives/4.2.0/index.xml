<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NTP: Network Time Protocol – 4.2.0</title>
    <link>/archives/4.2.0/</link>
    <description>Recent content in 4.2.0 on NTP: Network Time Protocol</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/archives/4.2.0/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Archives: </title>
      <link>/archives/4.2.0/toc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/toc/</guid>
      <description>
        
        
        

&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;4.2.8p15 is the latest stable and recommended version of NTP. Click &lt;a href=&#34;/archives/4.2.8-series&#34;&gt;here&lt;/a&gt; to read the latest version of the docs.&lt;/p&gt;
&lt;p&gt;4.2.0 is a historical release that was &lt;a href=&#34;https://lists.ntp.org/pipermail/announce/2003-October/000006.html&#34;&gt;released on October 15, 2003&lt;/a&gt;. Click &lt;a href=&#34;/archives/4.2.0&#34;&gt;here&lt;/a&gt; to read the 4.2.0 version of the docs.&lt;/p&gt;

&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Archives: Access Control Options</title>
      <link>/archives/4.2.0/accopt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/accopt/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/pogo6.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;from &lt;em&gt;Pogo&lt;/em&gt;, Walt Kelly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The skunk watches for intruders and sprays.&lt;/p&gt;
&lt;p&gt;Last update: 03:02 AM UTC Monday, October 13, 2003&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/accopt/#access-control-support&#34;&gt;Access Control Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/accopt/#the-kiss-of-death-packet&#34;&gt;The Kiss-of-Death Packet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/accopt/#access-control-commands&#34;&gt;Access Control Commands&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;access-control-support&#34;&gt;Access Control Support&lt;/h4&gt;
&lt;p&gt;The &lt;tt&gt;ntpd&lt;/tt&gt; daemon implements a general purpose address/mask based restriction list. The list contains address/match entries sorted first by increasing address values and then by increasing mask values. A match occurs when the bitwise AND of the mask and the packet source address is equal to the bitwise AND of the mask and address in the list. The list is searched in order with the last match found defining the restriction flags associated with the entry. Additional information and examples can be found in the &lt;a href=&#34;/archives/4.2.0/notes&#34;&gt;Notes on Configuring NTP and Setting up a NTP Subnet&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;The restriction facility was implemented in conformance with the access policies for the original NSFnet backbone time servers. Later the facility was expanded to deflect cryptographic and clogging attacks. While this facility may be useful for keeping unwanted or broken or malicious clients from congesting innocent servers, it should not be considered an alternative to the NTP authentication facilities. Source address based restrictions are easily circumvented by a determined cracker.&lt;/p&gt;
&lt;p&gt;Clients can be denied service because they are explicitly included in the restrict list created by the &lt;tt&gt;restrict&lt;/tt&gt; command or implicitly as the result of cryptographic or rate limit violations. Cryptographic violations include certificate or identity verification failure; rate limit violations generally result from defective NTP implementations that send packets at abusive rates. Some violations cause denied service only for the offending packet, others cause denied service for a timed period and others cause the denied service for an indefinite period. When a client or network is denied access for an indefinite period, the only way at present to remove the restrictions is by restarting the server.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;the-kiss-of-death-packet&#34;&gt;The Kiss-of-Death Packet&lt;/h4&gt;
&lt;p&gt;Ordinarily, packets denied service are simply dropped with no further action except incrementing statistics counters. Sometimes a more proactive response is needed, such as a server message that explicitly requests the client to stop sending and leave a message for the system operator. A special packet format has been created for this purpose called the &amp;ldquo;kiss-o&#39;-death&amp;rdquo; (KoD) packet. KoD packets have the leap bits set unsynchronized and stratum set to zero and the reference identifier field set to a four-byte ASCII code. If the &lt;tt&gt;noserve&lt;/tt&gt; or &lt;tt&gt;notrust&lt;/tt&gt; flag of the matching restrict list entry is set, the code is &amp;ldquo;DENY&amp;rdquo;; if the &lt;tt&gt;limited&lt;/tt&gt; flag is set and the rate limit is exceeded, the code is &amp;ldquo;RATE&amp;rdquo;. Finally, if a cryptographic violation occurs, the code is &amp;ldquo;CRYP&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;A client receiving a KoD performs a set of sanity checks to minimize security exposure, then updates the stratum and reference identifier peer variables, sets the access denied (TEST4) bit in the peer flash variable and sends a message to the log. As long as the TEST4 bit is set, the client will send no further packets to the server. The only way at present to recover from this condition is to restart the protocol at both the client and server. This happens automatically at the client when the association times out. It will happen at the server only if the server operator cooperates.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;access-control-commands&#34;&gt;Access Control Commands&lt;/h4&gt;
&lt;dt id=&#34;discard&#34;&gt;&lt;tt&gt;discard [ average _avg_ ][ minimum _min_ ] [ monitor _prob_ ]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Set the parameters of the &lt;tt&gt;limited&lt;/tt&gt; facility which protects the server from client abuse. The &lt;tt&gt;average&lt;/tt&gt; subcommand specifies the minimum average packet spacing, while the &lt;tt&gt;minimum&lt;/tt&gt; subcommand specifies the minimum packet spacing. Packets that violate these minima are discarded and a kiss-o&#39;-death packet returned if enabled. The default minimum average and minimum are 5 and 2, respectively. The monitor subcommand specifies the probability of discard for packets that overflow the rate-control window.&lt;/p&gt;
&lt;dt id=&#34;restrict&#34;&gt;&lt;tt&gt;restrict _address_ [mask _mask_] [_flag_][...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The &lt;tt&gt;&lt;em&gt;address&lt;/em&gt;&lt;/tt&gt; argument expressed in dotted-quad form is the address of a host or network. Alternatively, the &lt;tt&gt;address&lt;/tt&gt; argument can be a valid host DNS name. The &lt;tt&gt;mask&lt;/tt&gt; argument expressed in dotted-quad form defaults to &lt;tt&gt;255.255.255.255&lt;/tt&gt;, meaning that the &lt;tt&gt;address&lt;/tt&gt; is treated as the address of an individual host. A default entry (address &lt;tt&gt;0.0.0.0&lt;/tt&gt;, mask &lt;tt&gt;0.0.0.0&lt;/tt&gt;) is always included and is always the first entry in the list. Note that text string &lt;tt&gt;default&lt;/tt&gt;, with no mask option, may be used to indicate the default entry.&lt;/p&gt;
&lt;p&gt;In the current implementation, &lt;tt&gt;flag&lt;/tt&gt; always restricts access, i.e., an entry with no flags indicates that free access to the server is to be given. The flags are not orthogonal, in that more restrictive flags will often make less restrictive ones redundant. The flags can generally be classed into two catagories, those which restrict time service and those which restrict informational queries and attempts to do run-time reconfiguration of the server. One or more of the following flags may be specified:&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;ignore&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Deny packets of all kinds, including &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; queries.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;kod&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    If this flag is set when an access violation occurs, a kiss-o&#39;-death (KoD) packet is sent. KoD packets are rate limited to no more than one per second. If another KoD packet occurs within one second after the last one, the packet is dropped.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;limited&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Deny service if the packet spacing violates the lower limits specified in the &lt;tt&gt;discard&lt;/tt&gt; command. A history of clients is kept using the monitoring capability of &lt;tt&gt;ntpd&lt;/tt&gt;. Thus, monitoring is always active as long as there is a restriction entry with the &lt;tt&gt;limited&lt;/tt&gt; flag.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;lowpriotrap&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Declare traps set by matching hosts to be low priority. The number of traps a server can maintain is limited (the current limit is 3). Traps are usually assigned on a first come, first served basis, with later trap requestors being denied service. This flag modifies the assignment algorithm by allowing low priority traps to be overridden by later requests for normal priority traps.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;nomodify&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Deny &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; queries which attempt to modify the state of the server (i.e., run time reconfiguration). Queries which return information are permitted.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;noquery&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Deny &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; queries. Time service is not affected.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;nopeer&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Deny packets which would result in mobilizing a new association.  This includes broadcast, symmetric-active and manycast client packets when a configured association does not exist.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;noserve&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Deny all packets except &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; queries.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;notrap&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Decline to provide mode 6 control message trap service to matching hosts. The trap service is a subsystem of the &lt;tt&gt;ntpdc&lt;/tt&gt; control message protocol which is intended for use by remote event logging programs.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;notrust&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Deny packets unless the packet is cryptographically authenticated.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;ntpport&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;non-ntpport&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    This is actually a match algorithm modifier, rather than a restriction flag. Its presence causes the restriction entry to be matched only if the source port in the packet is the standard NTP UDP port (123). Both &lt;tt&gt;ntpport&lt;/tt&gt; and &lt;tt&gt;non-ntpport&lt;/tt&gt; may be specified. The &lt;tt&gt;ntpport&lt;/tt&gt; is considered more specific and is sorted later in the list.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;version&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Deny packets that do not match the current NTP version.&lt;/p&gt;
&lt;p&gt;Default restriction list entries with the flags &lt;tt&gt;ignore, interface, ntpport&lt;/tt&gt;, for each of the local host&amp;rsquo;s interface addresses are inserted into the table at startup to prevent the server from attempting to synchronize to its own time. A default entry is also always present, though if it is otherwise unconfigured; no flags are associated with the default entry (i.e., everything besides your own NTP server is unrestricted).&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Association Management</title>
      <link>/archives/4.2.0/assoc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/assoc/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice51.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Make sure who your friends are.&lt;/p&gt;
&lt;p&gt;Last update: 03:03 AM UTC Monday, October 13, 2003&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/assoc/#association-modes&#34;&gt;Association Modes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/assoc/#clientserver-mode&#34;&gt;Client/Server Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/assoc/#symmetric-activepassive-mode&#34;&gt;Symmetric Active/Passive Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/assoc/#broadcastmulticast-modes&#34;&gt;Broadcast/Multicast Modes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/assoc/#multicasting&#34;&gt;Multicasting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/assoc/#manycasting&#34;&gt;Manycasting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/assoc/#burst-modes&#34;&gt;Burst Modes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;association-modes&#34;&gt;Association Modes&lt;/h4&gt;
&lt;p&gt;NTP Version 4 (NTPv4) incorporates new features and refinements to the NTP Version 3 (NTPv3) algorithms; however, it continues the tradition of backwards compatibility with older versions. A number of new operating modes for automatic server discovery and improved accuracy in occasionally connected networks are provided. Following is an overview of the new features; additional information is available on the &lt;a href=&#34;/archives/4.2.0/confopt&#34;&gt;Configuration Options&lt;/a&gt; and &lt;a href=&#34;/archives/4.2.0/authopt&#34;&gt;Authentication Options&lt;/a&gt; pages and in the papers, reports, memoranda and briefings at &lt;a href=&#34;http://www.ntp.org&#34;&gt;www.ntp.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are two types of associations: persistent associations, which result from configuration file commands, and ephemeral associations, which result from protocol operations described below. A persistent association is never demobilized, although it may become dormant when the associated server becomes unreachable. An ephemeral association is mobilized when a message arrives from a server; for instance, a symmetric passive association is mobilized upon arrival of a symmetric active message. A broadcast client association is mobilized upon arrival of a broadcast server message, while a Manycast client association is mobilized upon arrival of a Manycast server message.&lt;/p&gt;
&lt;p&gt;Ordinarily, successful mobilization of an ephemeral association requires the server to be cryptographically authenticated to the dependent client. This can be done using either symmetric-key or public-key cryptography, as described in the &lt;a href=&#34;/archives/4.2.0/authopt&#34;&gt;Authentication Options&lt;/a&gt; page. The cryptographic means insure an unbroken chain of trust between the dependent client and the primary servers at the root of the synchronization subnet. We call this chain the &lt;em&gt;provenance&lt;/em&gt; of the client and define new vocabulary as to proventicate a client or provide proventic credentials. Once mobilized, ephemeral associations are demobilized when either (a) the server becomes unreachable or (b) the server refreshes the key media without notifying the client.&lt;/p&gt;
&lt;p&gt;There are three principal modes of operation: client/server, symmetric active/passive and broadcast. In addition, there are two modes using IP multicast support: multicast and manycast. These modes are selected based on the scope of service, intended flow of time and proventic values and means of configuration. Following is a summary of the operations in each mode.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;clientserver-mode&#34;&gt;Client/Server Mode&lt;/h4&gt;
&lt;p&gt;Client/server mode is probably the most common configuration in the Internet today. It operates in the classic remote-procedure-call (RPC) paradigm with stateless servers. In this mode a client sends a request to the server and expects a reply at some future time. In some contexts this would be described as a &amp;ldquo;pull&amp;rdquo; operation, in that the client pulls the time and proventic values from the server. A client is configured in client mode using the &lt;tt&gt;server&lt;/tt&gt; (sic) command and specifying the server IPv4 or IPv6 DNS name or address; the server requires no prior configuration. The original NTPv3 authentication scheme is applicable in this mode, as well as the new NTPv4 Autokey proventication scheme. In addition, two burst modes described below can be used in appropriate cases.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;symmetric-activepassive-mode&#34;&gt;Symmetric Active/Passive Mode&lt;/h4&gt;
&lt;p&gt;Symmetric active/passive mode is intended for configurations where a clique of low-stratum peers operate as mutual backups for each other. Each peer operates with one or more primary reference sources, such as a radio clock, or a subset of secondary servers known to be reliable and proventicated. Should one of the peers lose all reference sources or simply cease operation, the other peers will automatically reconfigure so that time and proventication values can flow from the surviving peers to all the others in the clique. In some contexts this would be described as a &amp;ldquo;push-pull&amp;rdquo; operation, in that the peer either pulls or pushes the time and proventic values depending on the particular configuration.&lt;/p&gt;
&lt;p&gt;Symmetric peers operate with their sources in some NTP mode and with each other in symmetric mode. A peer is configured in symmetric active mode using the &lt;tt&gt;peer&lt;/tt&gt; command and specifying the other peer IPv4 or IPv6 DNS name or address. The other peer can also be configured in symmetric active mode in a similar way. However, if the other peer is not specifically configured in this way, a symmetric passive association is mobilized upon arrival of a symmetric active message. Since an intruder can impersonate a symmetric active peer and inject false time values, symmetric mode should always be cryptographically validated. The original NTPv3 authentication scheme is applicable in this mode, as well as the new NTPv4 Autokey proventication scheme.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;broadcastmulticast-modes&#34;&gt;Broadcast/Multicast Modes&lt;/h4&gt;
&lt;p&gt;IPv4 broadcast mode in both NTPv3 and NTPv4 is limited to directly connected subnets such as Ethernets which support broadcast technology. Ordinarily, this technology does not operate beyond the first hop router or gateway. In IPv6 and where service is intended beyond the local subnet, IP multicasting can be used where supported by the operating system and the routers support the Internet Group Management Protocol (IGMP). Most current kernels and available routers do support IP multicast technology, although service providers are sometimes reluctant to deploy it.&lt;/p&gt;
&lt;p&gt;IPv4 broadcast mode is intended for configurations involving one or a few servers and a possibly very large client population on the same subnet. A broadcast server is configured using the &lt;tt&gt;broadcast&lt;/tt&gt; command and a IPv4 local subnet broadcast address. A broadcast client is configured using the &lt;tt&gt;broadcastclient&lt;/tt&gt; command, in which case it responds to broadcast messages received on any interface. Since an intruder can impersonate a broadcast server and inject false time values, this mode should always be cryptographically validated. The original NTPv3 authentication scheme is applicable in this mode, as well as the new NTPv4 Autokey proventication scheme.&lt;/p&gt;
&lt;p&gt;The server generates broadcast messages continuously at intervals specified by the &lt;tt&gt;minpoll&lt;/tt&gt; keyword and with a time-to-live span specified by the &lt;tt&gt;ttl&lt;/tt&gt; keyword. A broadcast client responds to the first message received by waiting a short interval to avoid implosion at the server. Then, the client polls the server in burst mode in order to quickly set the host clock and validate the source. This normally results in a volley of eight client/server cycles at 2-s intervals during which both the synchronization and cryptographic protocols run concurrently. Following the volley, the client computes the offset between the apparent broadcast time and the (unicast) client time. This offset is used to compensate for the propagation time between the broadcast server and client. Once the offset is computed, the server continues as before and the client sends no further messages. If for some reason the broadcast server does not respond to client messages, the client will time out the volley and continue in listen-only mode with a default propagation delay.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;multicasting&#34;&gt;Multicasting&lt;/h4&gt;
&lt;p&gt;Multicasting can be used to extend the scope of a timekeeping subnet in two ways: multicasting and manycasting. A general discussion of IP multicast technology is beyond the scope of this page. In simple terms a host or router sending to a IPv4 or IPv6 multicast group address expects all hosts or routers listening on this address to receive the message. There is no intrinsic limit on the number of senders or receivers and senders can be receivers and vice versa. The IANA has assigned multicast group address IPv4 224.0.1.1 and IPv6 FF05::101 (site local) to NTP, but these addresses should be used only where the multicast span can be reliably constrained to protect neighbor networks. In general, administratively scoped IPv4 group addresses should be used, as described in RFC-2365, or GLOP group addresses, as described in RFC-2770.&lt;/p&gt;
&lt;p&gt;A multicast server is configured using the &lt;tt&gt;broadcast&lt;/tt&gt; command, but with a multicast group address instead of a broadcast address. A multicast client is configured using the &lt;tt&gt;multicastclient&lt;/tt&gt; command with a multicast group address. However, there is a subtle difference between IPv4 broadcasting and multicasting. IPv4 broadcasting is specific to each interface and local subnet address. If more than one interface is attached to a machine, a separate &lt;tt&gt;broadcast&lt;/tt&gt; command applies to each one separately. This provides a way to limit exposure in a firewall, for example. For IPv6 the same distinction can be made using link-local prefix FF02 for each interface and site-local FF05 for all interfaces.&lt;/p&gt;
&lt;p&gt;IP multicasting is a different paradigm. By design, multicast messages travel from the sender via a shortest-path or shared tree to the receivers, which may require these messages emit from one or all interfaces, but carry a common source address. However, it is possible to configure multiple multicast group addresses using multiple &lt;tt&gt;broadcast&lt;/tt&gt; or &lt;tt&gt;multicastclient&lt;/tt&gt; commands. Other than these particulars, multicast messages are processed just like broadcast messages. Note that the calibration feature in broadcast mode is extremely important, since IP multicast messages can travel far different paths through the IP routing fabric than ordinary IP unicast messages.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;manycasting&#34;&gt;Manycasting&lt;/h4&gt;
&lt;p&gt;Manycasting is a automatic discovery and configuration paradigm new to NTPv4. It is intended as a means for a multicast client to troll the nearby network neighborhood to find cooperating manycast servers, validate them using cryptographic means and evaluate their time values with respect to other servers that might be lurking in the vicinity. The intended result is that each manycast client mobilizes client associations with some number of the &amp;ldquo;best&amp;rdquo; of the nearby anycast servers, yet automatically reconfigures to sustain this number of servers should one or another fail. Additional information is on the &lt;a href=&#34;/archives/4.2.0/manyopt&#34;&gt;Automatic NTP Configuration Options&lt;/a&gt; page.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;burst-modes&#34;&gt;Burst Modes&lt;/h4&gt;
&lt;p&gt;There are two burst modes where a single poll event triggers a burst of eight packets at 2-s intervals instead of the usual one. The &lt;tt&gt;burst&lt;/tt&gt; mode sends a burst when the server is reachable, while the &lt;tt&gt;iburst&lt;/tt&gt; mode sends a burst when the server is unreachable. Each mode is independently of the other and both can be used if necessary. The &lt;tt&gt;calldelay&lt;/tt&gt; command can be used to increase the interval between the first and second packets in the burst in order to allow a modem to complete a call. Received server packets update the clock filter, which selects the best (most accurate) time values. When the last packet in the burst is sent, the next received packet updates the system variables and sets the system clock in the usual manner, as if only a single client/server cycle had occurred. The result is not only a rapid and reliable setting of the system clock, but a considerable reduction in network jitter.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;iburst&lt;/tt&gt; keyword is used where it is important to set the clock quickly when an association is first mobilized or first becomes reachable or when the network attachment requires an initial calling or training procedure. The burst is initiated only when the server first becomes reachable and results in good accuracy with intermittent connections typical of PPP and ISDN services. Outlyers due to initial dial-up delays, etc., are avoided and the client sets the clock within a few seconds after the first message.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;burst&lt;/tt&gt; keyword can be configured in cases of excessive network jitter or when the network attachment requires an initial calling or training procedure. The burst is initiated at each poll interval when the server is reachable. The burst does produce additional network overhead and can cause trouble if used indiscriminately. It should only be used where the poll interval is expected to settle to values at or above 1024 s.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Authentication Options</title>
      <link>/archives/4.2.0/authopt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/authopt/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice44.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/%7emills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Our resident cryptographer; now you see him, now you don&amp;rsquo;t.&lt;/p&gt;
&lt;p&gt;Last update: 	03:05 AM UTC Monday, October 13, 2003&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/authopt/#authentication-support&#34;&gt;Authentication Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/authopt/#symmetric-key-cryptography&#34;&gt;Symmetric Key Cryptography&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/authopt/#public-key-cryptography&#34;&gt;Public Key Cryptography&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/authopt/#operation&#34;&gt;Operation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/authopt/#key-management&#34;&gt;Key Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/authopt/#authentication-commands&#34;&gt;Authentication Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/authopt/#error-codes&#34;&gt;Error Codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/authopt/#files&#34;&gt;Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/authopt/#leapseconds-table&#34;&gt;Leapseconds Table&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;authentication-support&#34;&gt;Authentication Support&lt;/h4&gt;
&lt;p&gt;Authentication support allows the NTP client to verify that the server is in fact known and trusted and not an intruder intending accidentally or on purpose to masquerade as that server. The NTPv3 specification RFC-1305 defines a scheme which provides cryptographic authentication of received NTP packets. Originally, this was done using the Data Encryption Standard (DES) algorithm operating in Cipher Block Chaining (CBC) mode, commonly called DES-CBC. Subsequently, this was replaced by the RSA Message Digest 5 (MD5) algorithm using a private key, commonly called keyed-MD5. Either algorithm computes a message digest, or one-way hash, which can be used to verify the server has the correct private key and key identifier.&lt;/p&gt;
&lt;p&gt;NTPv4 retains the NTPv3 scheme, properly described as symmetric key cryptography, and, in addition, provides a new Autokey scheme based on public key cryptography. Public key cryptography is generally considered more secure than symmetric key cryptography, since the security is based on a private value which is generated by each host and never revealed. With the exception of the group key described later, all key distribution and management functions involve only public values, which considerably simplifies key distribution and storage. Public key management is based on X.509 certificates, which can be provided by commercial services or produced by utility programs in the OpenSSL software library or the NTPv4 distribution.&lt;/p&gt;
&lt;p&gt;While the algorithms for symmetric key cryptography are included in the NTPv4 distribution, public key cryptography requires the OpenSSL software library to be installed before building the NTP distribution. Directions for doing that are on the &lt;a href=&#34;/archives/4.2.0/build&#34;&gt;Building and Installing the Distribution&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;Authentication is configured separately for each association using the &lt;tt&gt;key&lt;/tt&gt; or &lt;tt&gt;autokey&lt;/tt&gt; subcommand on the &lt;tt&gt;peer&lt;/tt&gt;, &lt;tt&gt;server&lt;/tt&gt;, &lt;tt&gt;broadcast&lt;/tt&gt; and &lt;tt&gt;manycastclient&lt;/tt&gt; configuration commands as described in the &lt;a href=&#34;/archives/4.2.0/confopt&#34;&gt;Configuration Options&lt;/a&gt; page. The authentication options described below specify the locations of the key files, if other than default, which symmetric keys are trusted and the interval between various operations, if other than default.&lt;/p&gt;
&lt;p&gt;Authentication is always enabled, although ineffective if not configured as described below. If a NTP packet arrives including a message authentication code (MAC), it is accepted only if it passes all cryptographic checks. The checks require correct key ID, key value and message digest. If the packet has been modified in any way or replayed by an intruder, it will fail one or more of these checks and be discarded. Furthermore, the Autokey scheme requires a preliminary protocol exchange to obtain the server certificate, verify its credentials and initialize the protocol.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;auth&lt;/tt&gt; flag controls whether new associations or remote configuration commands require cryptographic authentication. This flag can be set or reset by the &lt;tt&gt;enable&lt;/tt&gt; and &lt;tt&gt;disable&lt;/tt&gt; commands and also by remote configuration commands sent by a &lt;tt&gt;ntpdc&lt;/tt&gt; program running on another machine. If this flag is enabled, which is the default case, new broadcast/manycast client and symmetric passive associations and remote configuration commands must be cryptographically authenticated using either symmetric key or public key cryptography. If this flag is disabled, these operations are effective even if not cryptographic authenticated. It should be understood that operating with the &lt;tt&gt;auth&lt;/tt&gt; flag disabled invites a significant vulnerability where a rogue hacker can masquerade as a truechimer and seriously disrupt system timekeeping. It is important to note that this flag has no purpose other than to allow or disallow a new association in response to new broadcast and symmetric active messages and remote configuration commands and, in particular, the flag has no effect on the authentication process itself.&lt;/p&gt;
&lt;p&gt;An attractive alternative where multicast support is available is manycast mode, in which clients periodically troll for servers as described in the &lt;a href=&#34;/archives/4.2.0/manyopt&#34;&gt;Automatic NTP Configuration Options&lt;/a&gt; page. Either symmetric key or public key cryptographic authentication can be used in this mode. The principle advantage of manycast mode is that potential servers need not be configured in advance, since the client finds them during regular operation, and the configuration files for all clients can be identical.&lt;/p&gt;
&lt;p&gt;The security model and protocol schemes for both symmetric key and public key cryptography are summarized below; further details are in the briefings, papers and reports at the NTP project page linked from &lt;a href=&#34;http://www.ntp.org&#34;&gt;www.ntp.org&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;symmetric-key-cryptography&#34;&gt;Symmetric Key Cryptography&lt;/h4&gt;
&lt;p&gt;The original RFC-1305 specification allows any one of possibly 65,534 keys, each distinguished by a 32-bit key identifier, to authenticate an association. The servers and clients involved must agree on the key and key identifier to authenticate NTP packets. Keys and related information are specified in a key file, usually called &lt;tt&gt;ntp.keys&lt;/tt&gt;, which must be distributed and stored using secure means beyond the scope of the NTP protocol itself. Besides the keys used for ordinary NTP associations, additional keys can be used as passwords for the &lt;a href=&#34;/archives/4.2.0/ntpq&#34;&gt;ntpq&lt;/a&gt; and &lt;a href=&#34;/archives/4.2.0/ntpdc&#34;&gt;ntpdc&lt;/a&gt; utility programs.&lt;/p&gt;
&lt;p&gt;When &lt;tt&gt;ntpd&lt;/tt&gt; is first started, it reads the key file specified in the &lt;tt&gt;keys&lt;/tt&gt; configuration command and installs the keys in the key cache. However, individual keys must be activated with the &lt;tt&gt;trustedkey&lt;/tt&gt; command before use. This allows, for instance, the installation of possibly several batches of keys and then activating or deactivating each batch remotely using &lt;tt&gt;ntpdc&lt;/tt&gt;. This also provides a revocation capability that can be used if a key becomes compromised. The &lt;tt&gt;requestkey&lt;/tt&gt; command selects the key used as the password for the &lt;tt&gt;ntpdc&lt;/tt&gt; utility, while the &lt;tt&gt;controlkey&lt;/tt&gt; command selects the key used as the password for the &lt;tt&gt;ntpq&lt;/tt&gt; utility.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;public-key-cryptography&#34;&gt;Public Key Cryptography&lt;/h4&gt;
&lt;p&gt;NTPv4 supports the original NTPv3 symmetric key scheme described in RFC-1305 and in addition the Autokey protocol, which is based on public key cryptography. The Autokey Version 2 protocol described on the &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/proto.html&#34;&gt;Autokey Protocol&lt;/a&gt; page verifies packet integrity using MD5 message digests and verifies the source with digital signatures and any of several digest/signature schemes. Optional identity schemes described on the &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/ident.html&#34;&gt;Identity Schemes&lt;/a&gt; page and based on cryptographic challenge/response algorithms are also available. Using these schemes provides strong security against replay with or without modification, spoofing, masquerade and most forms of clogging attacks.&lt;/p&gt;
&lt;p&gt;The cryptographic means necessary for all Autokey operations is provided by the OpenSSL software library. This library is available from &lt;a href=&#34;https://www.openssl.org&#34;&gt;https://www.openssl.org&lt;/a&gt; and can be installed using the procedures outlined in the &lt;a href=&#34;/archives/4.2.0/build&#34;&gt;Building and Installing the Distribution&lt;/a&gt; page. Once installed, the configure and build process automatically detects the library and links the library routines required.&lt;/p&gt;
&lt;p&gt;The Autokey protocol has several modes of operation corresponding to the various NTP modes supported. Most modes use a special cookie which can be computed independently by the client and server, but encrypted in transmission. All modes use in addition a variant of the S-KEY scheme, in which a pseudo-random key list is generated and used in reverse order. These schemes are described along with an executive summary, current status, briefing slides and reading list on the &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/autokey.html&#34;&gt;Autonomous Authentication&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;The specific cryptographic environment used by Autokey servers and clients is determined by a set of files and soft links generated by the &lt;a href=&#34;/archives/4.2.0/keygen&#34;&gt;ntp-keygen&lt;/a&gt; program. This includes a required host key file, required host certificate file and optional sign key file, leapsecond file and identity scheme files. The digest/signature scheme is specified in the X.509 certificate along with the matching sign key. There are several schemes available in the OpenSSL software library, each identified by a specific string such as &lt;tt&gt;md5WithRSAEncryption&lt;/tt&gt;, which stands for the MD5 message digest with RSA encryption scheme. The current NTP distribution supports all the schemes in the OpenSSL library, including those based on RSA and DSA digital signatures.&lt;/p&gt;
&lt;p&gt;NTP secure groups can be used to define cryptographic compartments and security hierarchies. It is important that every host in the group be able to construct a certificate trail to one or more trusted hosts in the same group. Each group host runs the Autokey protocol to obtain the certificates for all hosts along the trail to one or more trusted hosts. This requires the configuration file in all hosts to be engineered so that, even under anticipated failure conditions, the NTP subnet will form such that every group host can find a trail to at least one trusted host.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;naming-and-addressing&#34;&gt;Naming and Addressing&lt;/h4&gt;
&lt;p&gt;It is important to note that Autokey does not use DNS to resolve addresses, since DNS can&amp;rsquo;t be completely trusted until the name servers have synchronized clocks. The cryptographic name used by Autokey to bind the host identity credentials and cryptographic values must be independent of interface, network and any other naming convention. The name appears in the host certificate in either or both the subject and issuer fields, so protection against DNS compromise is essential.&lt;/p&gt;
&lt;p&gt;By convention, the name of an Autokey host is the name returned by the Unix &lt;tt&gt;gethostname()&lt;/tt&gt; system call or equivalent in other systems. By the system design model, there are no provisions to allow alternate names or aliases. However, this is not to say that DNS aliases, different names for each interface, etc., are constrained in any way.&lt;/p&gt;
&lt;p&gt;It is also important to note that Autokey verifies authenticity using the host name, network address and public keys, all of which are bound together by the protocol specifically to deflect masquerade attacks. For this reason Autokey includes the source and destination IP addresses in message digest computations and so the same addresses must be available at both the server and client. For this reason operation with network address translation schemes is not possible. This reflects the intended robust security model where government and corporate NTP servers are operated outside firewall perimeters.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;operation&#34;&gt;Operation&lt;/h4&gt;
&lt;p&gt;A specific combination of authentication scheme (none, symmetric key, public key) and identity scheme is called a cryptotype, although not all combinations are compatible. There may be management configurations where the clients, servers and peers may not all support the same cryptotypes. A secure NTPv4 subnet can be configured in many ways while keeping in mind the principles explained above and in this section. Note however that some cryptotype combinations may successfully interoperate with each other, but may not represent good security practice.&lt;/p&gt;
&lt;p&gt;The cryptotype of an association is determined at the time of mobilization, either at configuration time or some time later when a message of appropriate cryptotype arrives. When mobilized by a &lt;tt&gt;server&lt;/tt&gt; or &lt;tt&gt;peer&lt;/tt&gt; configuration command and no &lt;tt&gt;key&lt;/tt&gt; or &lt;tt&gt;autokey&lt;/tt&gt; subcommands are present, the association is not authenticated; if the &lt;tt&gt;key&lt;/tt&gt; subcommand is present, the association is authenticated using the symmetric key ID specified; if the &lt;tt&gt;autokey&lt;/tt&gt; subcommand is present, the association is authenticated using Autokey.&lt;/p&gt;
&lt;p&gt;When multiple identity schemes are supported in the Autokey protocol, the first message exchange determines which one is used. The client request message contains bits corresponding to which schemes it has available. The server response message contains bits corresponding to which schemes it has available. Both server and client match the received bits with their own and select a common scheme.&lt;/p&gt;
&lt;p&gt;Following the principle that time is a public value, a server responds to any client packet that matches its cryptotype capabilities. Thus, a server receiving an unauthenticated packet will respond with an unauthenticated packet, while the same server receiving a packet of a cryptotype it supports will respond with packets of that cryptotype. However, unconfigured broadcast or manycast client associations or symmetric passive associations will not be mobilized unless the server supports a cryptotype compatible with the first packet received. By default, unauthenticated associations will not be mobilized unless overridden in a decidedly dangerous way.&lt;/p&gt;
&lt;p&gt;Some examples may help to reduce confusion. Client Alice has no specific cryptotype selected. Server Bob has both a symmetric key file and minimal Autokey files. Alice&amp;rsquo;s unauthenticated messages arrive at Bob, who replies with unauthenticated messages. Cathy has a copy of Bob&amp;rsquo;s symmetric key file and has selected key ID 4 in messages to Bob. Bob verifies the message with his key ID 4. If it&amp;rsquo;s the same key and the message is verified, Bob sends Cathy a reply authenticated with that key. If verification fails, Bob sends Cathy a thing called a crypto-NAK, which tells her something broke. She can see the evidence using the &lt;tt&gt;ntpq&lt;/tt&gt; program.&lt;/p&gt;
&lt;p&gt;Denise has rolled her own host key and certificate. She also uses one of the identity schemes as Bob. She sends the first Autokey message to Bob and they both dance the protocol authentication and identity steps. If all comes out okay, Denise and Bob continue as described above.&lt;/p&gt;
&lt;p&gt;It should be clear from the above that Bob can support all the girls at the same time, as long as he has compatible authentication and identity credentials. Now, Bob can act just like the girls in his own choice of servers; he can run multiple configured associations with multiple different servers (or the same server, although that might not be useful). But, wise security policy might preclude some cryptotype combinations; for instance, running an identity scheme with one server and no authentication with another might not be wise.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;key-management&#34;&gt;Key Management&lt;/h4&gt;
&lt;p&gt;The cryptographic values used by the Autokey protocol are incorporated as a set of files generated by the &lt;a href=&#34;/archives/4.2.0/keygen&#34;&gt;ntp-keygen&lt;/a&gt; utility program, including symmetric key, host key and public certificate files, as well as sign key, identity parameters and leapseconds files. Alternatively, host and sign keys and certificate files can be generated by the OpenSSL utilities and certificates can be imported from public certificate authorities. Note that symmetric keys are necessary for the &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; utility programs. The remaining files are necessary only for the Autokey protocol.&lt;/p&gt;
&lt;p&gt;Certificates imported from OpenSSL or public certificate authorities have certain limitations. The certificate should be in ASN.1 syntax, X.509 Version 3 format and encoded in PEM, which is the same format used by OpenSSL. The overall length of the certificate encoded in ASN.1 must not exceed 1024 bytes. The subject distinguished name field (&lt;tt&gt;CN&lt;/tt&gt;) is the fully qualified name of the host on which it is used; the remaining subject fields are ignored. The certificate extension fields must not contain either a subject key identifier or a issuer key identifier field; however, an extended key usage field for a trusted host must contain the value &lt;tt&gt;trustRoot;&lt;/tt&gt;. Other extension fields are ignored.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;authentication-commands&#34;&gt;Authentication Commands&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;autokey [_logsec_]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the interval between regenerations of the session key list used with the Autokey protocol. Note that the size of the key list for each association depends on this interval and the current poll interval. The default interval is 12 (4096 s or about 1.1 hours). For poll intervals above the specified interval, a session key list with a single entry will be regenerated for every message sent.&lt;/p&gt;
&lt;dt id=&#34;controlkey&#34;&gt;&lt;tt&gt;controlkey _key_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the key identifier to use with the &lt;a href=&#34;/archives/4.2.0/ntpq&#34;&gt;&lt;tt&gt;ntpq&lt;/tt&gt;&lt;/a&gt; utility, which uses the standard protocol defined in RFC-1305. The &lt;tt&gt;&lt;em&gt;key&lt;/em&gt;&lt;/tt&gt; argument is the key identifier for a trusted key, where the value can be in the range 1 to 65534, inclusive.&lt;/p&gt;
&lt;dt id=&#34;crypto&#34;&gt;&lt;tt&gt;crypto [cert _file_] [leap _file_] [randfile _file_] [host _file_] [sign _file_] [gq _file_] [gqpar _file_] [iffpar _file_] [mvpar _file_] [pw _password_]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command requires the OpenSSL library. It activates public key cryptography, selects the message digest and signature encryption scheme and loads the required private and public values described above. If one or more files are left unspecified, the default names are used as described above. Unless the complete path and name of the file are specified, the location of a file is relative to the keys directory specified in the &lt;tt&gt;keysdir&lt;/tt&gt; command or default &lt;tt&gt;/usr/local/etc&lt;/tt&gt;. Following are the subcommands:&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;cert &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Specifies the location of the required host public certificate file. This overrides the link &lt;tt&gt;ntpkey_cert_hostname&lt;/tt&gt; in the keys directory.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;gqpar &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Specifies the location of the client GQ parameters file. This overrides the link &lt;tt&gt;ntpkey_gq_hostname&lt;/tt&gt; in the keys directory.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;host &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;    &lt;/p&gt;
&lt;p&gt;    Specifies the location of the required host key file. This overrides the link &lt;tt&gt;ntpkey_key_hostname&lt;/tt&gt; in the keys directory.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;iffpar &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Specifies the location of the optional IFF parameters file.This overrides the link &lt;tt&gt;ntpkey_iff_hostname&lt;/tt&gt; in the keys directory.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;leap &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Specifies the location of the optional leapsecond file. This overrides the link &lt;tt&gt;ntpkey_leap&lt;/tt&gt; in the keys directory.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;mvpar &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Specifies the location of the client MV parameters file. This overrides the link &lt;tt&gt;ntpkey_mv_hostname&lt;/tt&gt; in the keys directory.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;pw &lt;em&gt;password&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Specifies the password to decrypt files containing private keys and identity parameters. This is required only if these files have been encrypted.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;randfile &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Specifies the location of the random seed file used by the OpenSSL library. The defaults are described in the main text above.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;sign &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Specifies the location of the optional sign key file. This overrides the link &lt;tt&gt;ntpkey_sign_hostname&lt;/tt&gt; in the keys directory. If this file is not found, the host key is also the sign key.&lt;/p&gt;
&lt;dt id=&#34;keys&#34;&gt;&lt;tt&gt;keys _keyfile_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the complete path to the MD5 key file containing the keys and key identifiers used by &lt;tt&gt;ntpd&lt;/tt&gt;, &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; when operating with symmetric key cryptography. This is the same operation as the &lt;tt&gt;-k&lt;/tt&gt; command line option.&lt;/p&gt;
&lt;dt id=&#34;keysdir&#34;&gt;&lt;tt&gt;keysdir _path_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command specifies the default directory path for cryptographic keys, parameters and certificates. The default is &lt;tt&gt;/usr/local/etc/&lt;/tt&gt;.&lt;/p&gt;
&lt;dt id=&#34;requestkey&#34;&gt;&lt;tt&gt;requestkey _key_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the key identifier to use with the &lt;a href=&#34;/archives/4.2.0/ntpdc&#34;&gt;&lt;tt&gt;ntpdc&lt;/tt&gt;&lt;/a&gt; program, which uses a proprietary protocol specific to this implementation of &lt;tt&gt;ntpd&lt;/tt&gt;. The &lt;tt&gt;&lt;em&gt;key&lt;/em&gt;&lt;/tt&gt; argument is a key identifier for the trusted key, where the value can be in the range 1 to 65534, inclusive.&lt;/p&gt;
&lt;dt id=&#34;revoke&#34;&gt;&lt;tt&gt;revoke [_logsec_]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the interval between re-randomization of certain cryptographic values used by the Autokey scheme, as a power of 2 in seconds. These values need to be updated frequently in order to deflect brute-force attacks on the algorithms of the scheme; however, updating some values is a relatively expensive operation. The default interval is 16 (65,536 s or about 18 hours). For poll intervals above the specified interval, the values will be updated for every message sent.&lt;/p&gt;
&lt;dt id=&#34;trustedkey&#34;&gt;&lt;tt&gt;trustedkey [_key_] [...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the key identifiers which are trusted for the purposes of authenticating peers with symmetric key cryptography, as well as keys used by the &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; programs. The authentication procedures require that both the local and remote servers share the same key and key identifier for this purpose, although different keys can be used with different servers. The &lt;tt&gt;key&lt;/tt&gt; arguments are 32-bit unsigned integers with values from 1 to 65,534.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;error-codes&#34;&gt;Error Codes&lt;/h4&gt;
&lt;p&gt;The following error codes are reported via the NTP control and monitoring protocol trap mechanism.&lt;/p&gt;
&lt;dt&gt;101 bad field format or length&lt;/dt&gt;
&lt;p&gt;The packet has invalid version, length or format.&lt;/p&gt;
&lt;dt&gt;102 bad timestamp&lt;/dt&gt;
&lt;p&gt;The packet timestamp is the same or older than the most recent received. This could be due to a replay or a server clock time step.&lt;/p&gt;
&lt;dt&gt;103 bad filestamp&lt;/dt&gt;
&lt;p&gt;The packet filestamp is the same or older than the most recent received. This could be due to a replay or a key file generation error.&lt;/p&gt;
&lt;dt&gt;104 bad or missing public key&lt;/dt&gt;
&lt;p&gt;The public key is missing, has incorrect format or is an unsupported type.&lt;/p&gt;
&lt;dt&gt;105 unsupported digest type&lt;/dt&gt;
&lt;p&gt;The server requires an unsupported digest/signature scheme.&lt;/p&gt;
&lt;dt&gt;106 unsupported identity type&lt;/dt&gt;
&lt;p&gt;The client or server has requested an identity scheme the other does not support.&lt;/p&gt;
&lt;dt&gt;107 bad signature length&lt;/dt&gt;
&lt;p&gt;The signature length does not match the current public key.&lt;/p&gt;
&lt;dt&gt;108 signature not verified&lt;/dt&gt;
&lt;p&gt;The message fails the signature check. It could be bogus or signed by a different private key.&lt;/p&gt;
&lt;dt&gt;109 certificate not verified&lt;/dt&gt;
&lt;p&gt;The certificate is invalid or signed with the wrong key.&lt;/p&gt;
&lt;dt&gt;110 host certificate expired&lt;/dt&gt;
&lt;p&gt;The old server certificate has expired.&lt;/p&gt;
&lt;dt&gt;111 bad or missing cookie&lt;/dt&gt;
&lt;p&gt;The cookie is missing, corrupted or bogus.&lt;/p&gt;
&lt;dt&gt;112 bad or missing leapseconds table&lt;/dt&gt;
&lt;p&gt;The leapseconds table is missing, corrupted or bogus.&lt;/p&gt;
&lt;dt&gt;113 bad or missing certificate&lt;/dt&gt;
&lt;p&gt;The certificate is missing, corrupted or bogus.&lt;/p&gt;
&lt;dt&gt;114 bad or missing group key&lt;/dt&gt;
&lt;p&gt;The identity key is missing, corrupt or bogus.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;files&#34;&gt;Files&lt;/h4&gt;
&lt;p&gt;See the &lt;a href=&#34;/archives/4.2.0/keygen&#34;&gt;&lt;tt&gt;ntp-keygen&lt;/tt&gt;&lt;/a&gt; page.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;leapseconds-table&#34;&gt;Leapseconds Table&lt;/h4&gt;
&lt;p&gt;The NIST provides a file documenting the epoch for all historic occasions of leap second insertion since 1972. The leapsecond table shows each epoch of insertion along with the offset of International Atomic Time (TAI) with respect to Coordinated Universal Time (UTC), as disseminated by NTP. The table can be obtained directly from NIST national time servers using &lt;tt&gt;ftp&lt;/tt&gt; as the ASCII file &lt;tt&gt;pub/leap-seconds&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;While not strictly a security function, the Autokey protocol provides means to securely retrieve the leapsecond table from a server or peer. Servers load the leapsecond table directly from the file specified in the &lt;tt&gt;crypto&lt;/tt&gt; command, with default &lt;tt&gt;ntpkey_leap&lt;/tt&gt;, while clients can obtain the table indirectly from the servers using the Autokey protocol. Once loaded, the table can be provided on request to other clients and servers.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Automatic NTP Configuration Options</title>
      <link>/archives/4.2.0/manyopt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/manyopt/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice51.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/%7emills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Make sure who your friends are.&lt;/p&gt;
&lt;p&gt;Last update: 03:13 AM UTC Monday, October 13, 2003&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/manyopt/#manycasting&#34;&gt;Manycasting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/manyopt/#manycast-interactions-with-autokey&#34;&gt;Manycast Interactions with Autokey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/manyopt/#manycast-options&#34;&gt;Manycast Options&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;manycasting&#34;&gt;Manycasting&lt;/h4&gt;
&lt;p&gt;Manycasting is a automatic discovery and configuration paradigm new to NTPv4. It is intended as a means for a multicast client to troll the nearby network neighborhood to find cooperating manycast servers, validate them using cryptographic means and evaluate their time values with respect to other servers that might be lurking in the vicinity. The intended result is that each manycast client mobilizes client associations with some number of the &amp;ldquo;best&amp;rdquo; of the nearby manycast servers, yet automatically reconfigures to sustain this number of servers should one or another fail.&lt;/p&gt;
&lt;p&gt;Note that the manycasting paradigm does not coincide with the anycast paradigm described in RFC-1546, which is designed to find a single server from a clique of servers providing the same service. The manycast paradigm is designed to find a plurality of redundant servers satisfying defined optimality criteria.&lt;/p&gt;
&lt;p&gt;Manycasting can be used with either symmetric key or public key cryptography. The public key infrastructure (PKI) offers the best protection against compromised keys and is generally considered stronger, at least with relatively large key sizes. It is implemented using the Autokey protocol and the OpenSSL cryptographic library available from &lt;a href=&#34;https://www.openssl.org&#34;&gt;https://www.openssl.org&lt;/a&gt;. The library can also be used with other NTPv4 modes as well and is highly recommended, especially for broadcast modes.&lt;/p&gt;
&lt;p&gt;A persistent manycast client association is configured using the &lt;tt&gt;manycastclient&lt;/tt&gt; command, which is similar to the &lt;tt&gt;server&lt;/tt&gt; command but with a multicast (IPv4 class D or IPv6 prefix &lt;tt&gt;FF&lt;/tt&gt;) group address. The IANA has designated IPv4 address 224.1.1.1 and IPv6 address FF05::101 (site local) for NTP. When more servers are needed, it broadcasts manycast client messages to this address at the minimum feasible rate and minimum feasible time-to-live (TTL) hops, depending on how many servers have already been found. There can be as many manycast client associations as different group address, each one serving as a template for a future ephemeral unicast client/server association.&lt;/p&gt;
&lt;p&gt;Manycast servers configured with the &lt;tt&gt;manycastserver&lt;/tt&gt; command listen on the specified group address for manycast client messages. Note the distinction between manycast client, which actively broadcasts messages, and manycast server, which passively responds to them. If a manycast server is in scope of the current TTL and is itself synchronized to a valid source and operating at a stratum level equal to or lower than the manycast client, it replies to the manycast client message with an ordinary unicast server message.&lt;/p&gt;
&lt;p&gt;The manycast client receiving this message mobilizes an ephemeral client/server association according to the matching manycast client template, but only if cryptographically authenticated and the server stratum is less than or equal to the client stratum. Authentication is explicitly required and either symmetric key or public key (Autokey) can be used. Then, the client polls the server at its unicast address in burst mode in order to reliably set the host clock and validate the source. This normally results in a volley of eight client/server at 2-s intervals during which both the synchronization and cryptographic protocols run concurrently. Following the volley, the client runs the NTP intersection and clustering algorithms, which act to discard all but the &amp;ldquo;best&amp;rdquo; associations according to stratum and synchronization distance. The surviving associations then continue in ordinary client/server mode.&lt;/p&gt;
&lt;p&gt;The manycast client polling strategy is designed to reduce as much as possible the volume of manycast client messages and the effects of implosion due to near-simultaneous arrival of manycast server messages. The strategy is determined by the &lt;tt&gt;manycastclient&lt;/tt&gt;, &lt;tt&gt;tos&lt;/tt&gt; and &lt;tt&gt;ttl&lt;/tt&gt; configuration commands. The manycast poll interval is normally eight times the system poll interval, which starts out at the &lt;tt&gt;minpoll&lt;/tt&gt; value specified in the &lt;tt&gt;manycastclient&lt;/tt&gt;, command and, under normal circumstances, increments to the &lt;tt&gt;maxpolll&lt;/tt&gt; value specified in this command. Initially, the TTL is set at the minimum hops specified by the &lt;tt&gt;ttl&lt;/tt&gt; command. At each retransmission the TTL is increased until reaching the maximum hops specified by this command or a sufficient number client associations have been found. Further retransmissions use the same TTL.&lt;/p&gt;
&lt;p&gt;The quality and reliability of the suite of associations discovered by the manycast client is determined by the NTP mitigation algorithms and the &lt;tt&gt;minclock&lt;/tt&gt; and &lt;tt&gt;minsane&lt;/tt&gt; values specified in the &lt;tt&gt;tos&lt;/tt&gt; configuration command. At least &lt;tt&gt;minsane&lt;/tt&gt; candidate servers must be available and the mitigation algorithms produce at least &lt;tt&gt;minclock&lt;/tt&gt; survivors in order to synchronize the clock. Byzantine agreement principles require at least four candidates in order to correctly discard a single falseticker. For legacy purposes, &lt;tt&gt;minsane&lt;/tt&gt; defaults to 1 and &lt;tt&gt;minclock&lt;/tt&gt; defaults to 3. For manycast service &lt;tt&gt;minsane&lt;/tt&gt; should be explicitly set to 4. assuming at least that number of servers are available.&lt;/p&gt;
&lt;p&gt;If at least &lt;tt&gt;minclock&lt;/tt&gt; servers are found, the manycast poll interval is immediately set to eight times &lt;tt&gt;maxpoll&lt;/tt&gt;. If less than &lt;tt&gt;minclock&lt;/tt&gt; servers are found when the TTL has reached the maximum hops, the manycast poll interval is doubled. For each transmission after that, the poll interval is doubled again until reaching the maximum of eight times &lt;tt&gt;maxpoll&lt;/tt&gt;. Further transmissions use the same poll interval and TTL values. Note that while all this is going on, each client/server association found is operating normally it the system poll interval.&lt;/p&gt;
&lt;p&gt;Administratively scoped multicast boundaries are normally specified by the network router configuration and, in the case of IPv6, the link/site scope prefix. By default, the increment for TTL hops is 32 starting from 31; however, the &lt;tt&gt;ttl&lt;/tt&gt; configuration command can be used to modify the values to match the scope rules.&lt;/p&gt;
&lt;p&gt;It is often useful to narrow the range of acceptable servers which can be found by manycast client associations. Because manycast servers respond only when the client stratum is equal to or greater than the server stratum, primary (stratum 1) servers fill find only primary servers in TTL range, which is probably the most common objective. However, unless configured otherwise, all manycast clients in TTL range will eventually find all primary servers in TTL range, which is probably not the most common objective in large networks. The &lt;tt&gt;tos&lt;/tt&gt; command can be used to modify this behavior. Servers with stratum below &lt;tt&gt;floor&lt;/tt&gt; or above &lt;tt&gt;ceiling&lt;/tt&gt; specified in the &lt;tt&gt;tos&lt;/tt&gt; command are strongly discouraged during the selection process; however, these servers may be temporally accepted if the number of servers within TTL range is less than &lt;tt&gt;minclock&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The above actions occur for each manycast client message, which repeats at the designated poll interval. However, once the ephemeral client association is mobilized, subsequent manycast server replies are discarded, since that would result in a duplicate association. If during a poll interval the number of client associations falls below &lt;tt&gt;minclock&lt;/tt&gt;, all manycast client prototype associations are reset to the initial poll interval and TTL hops and operation resumes from the beginning. It is important to avoid frequent manycast client messages, since each one requires all manycast servers in TTL range to respond. The result could well be an implosion, either minor or major, depending on the number of servers in range. The recommended value for &lt;tt&gt;maxpoll&lt;/tt&gt; is 12 (4,096 s).&lt;/p&gt;
&lt;p&gt;It is possible and frequently useful to configure a host as both manycast client and manycast server. A number of hosts configured this way and sharing a common group address will automatically organize themselves in an optimum configuration based on stratum and synchronization distance. For example, consider an NTP subnet of two primary servers and a hundred or more dependent clients. With two exceptions, all servers and clients have identical configuration files including both &lt;tt&gt;multicastclient&lt;/tt&gt; and &lt;tt&gt;multicastserver&lt;/tt&gt; commands using, for instance, multicast group address 239.1.1.1. The only exception is that each primary server configuration file must include commands for the primary reference source such as a GPS receiver.&lt;/p&gt;
&lt;p&gt;The remaining configuration files for all secondary servers and clients have the same contents, except for the &lt;tt&gt;tos&lt;/tt&gt; command, which is specific for each stratum level. For stratum 1 and stratum 2 servers, that command is not necessary. For stratum 3 and above servers the &lt;tt&gt;floor&lt;/tt&gt; value is set to the intended stratum number. Thus, all stratum 3 configuration files are identical, all stratum 4 files are identical and so forth.&lt;/p&gt;
&lt;p&gt;Once operations have stabilized in this scenario, the primary servers will find the primary reference source and each other, since they both operate at the same stratum (1), but not with any secondary server or client, since these operate at a higher stratum. The secondary servers will find the servers at the same stratum level. If one of the primary servers loses its GPS receiver, it will continue to operate as a client and other clients will time out the corresponding association and re-associate accordingly.&lt;/p&gt;
&lt;p&gt;Some administrators prefer to avoid running &lt;tt&gt;ntpd&lt;/tt&gt; continuously and run either &lt;tt&gt;ntpdate&lt;/tt&gt; or &lt;tt&gt;ntpd -q&lt;/tt&gt; as a cron job. In either case the servers must be configured in advance and the program fails if none are available when the cron job runs. A really slick application of manycast is with &lt;tt&gt;ntpd -q&lt;/tt&gt;. The program wakes up, scans the local landscape looking for the usual suspects, selects the best from among the rascals, sets the clock and then departs. Servers do not have to be configured in advance and all clients throughout the network can have the same configuration file.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;manycast-interactions-with-autokey&#34;&gt;Manycast Interactions with Autokey&lt;/h4&gt;
&lt;p&gt;Each time a manycast client sends a client mode packet to a multicast group address, all manycast servers in scope generate a reply including the host name and status word. The manycast clients then run the Autokey protocol, which collects and verifies all certificates involved. Following the burst interval all but three survivors are cast off, but the certificates remain in the local cache. It often happens that several complete signing trails from the client to the primary servers are collected in this way.&lt;/p&gt;
&lt;p&gt;About once an hour or less often if the poll interval exceeds this, the client regenerates the Autokey key list. This is in general transparent in client/server mode. However, about once per day the server private value used to generate cookies is refreshed along with all manycast client associations. In this case all cryptographic values including certificates is refreshed. If a new certificate has been generated since the last refresh epoch, it will automatically revoke all prior certificates that happen to be in the certificate cache. At the same time, the manycast scheme starts all over from the beginning and the expanding ring shrinks to the minimum and increments from there while collecting all servers in scope.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;manycast-options&#34;&gt;Manycast Options&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;tos [ ceiling _ceiling_ | cohort {0 | 1} | floor _floor_ | minclock _minclock_ | minsane _minsane_ ]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command affects the clock selection and clustering algorithms. It can be used to select the quality and quantity of peers used to synchronize the system clock and is most useful in manycast mode. The variables operate as follows:&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;ceiling &lt;em&gt;ceiling&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Peers with strata above &lt;em&gt;ceiling&lt;/em&gt; will be discarded if there are at least &lt;em&gt;&lt;tt&gt;minclock&lt;/tt&gt;&lt;/em&gt; peers remaining. This value defaults to 15, but can be changed to any number from 1 to 15.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;cohort { 0 | 1 }&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    This is a binary flag which enables (0) or disables (1) manycast server replies to manycast clients with the same stratum level. This is useful to reduce implosions where large numbers of clients with the same stratum level are present. The default is to enable these replies.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;floor &lt;em&gt;floor&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Peers with strata below &lt;em&gt;floor&lt;/em&gt; will be discarded if there are at least &lt;em&gt;minclock&lt;/em&gt; peers remaining. This value defaults to 1, but can be changed to any number from 1 to 15.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;maxdist &lt;em&gt;maxdistance&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;minclock &lt;em&gt;minclock&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    The clustering algorithm repeatedly casts out outlyer associations until no more than &lt;em&gt;minclock&lt;/em&gt; associations remain. This value defaults to 3, but can be changed to any number from 1 to the number of configured sources.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;minsane &lt;em&gt;minsane&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    This is the minimum number of candidates available to the clock selection algorithm in order to produce one or more truechimers for the clustering algorithm. If fewer than this number are available, the clock is undisciplined and allowed to run free. The default is 1 for legacy purposes. However, according to principles of Byzantine agreement, &lt;em&gt;minsane&lt;/em&gt; should be at least 4 in order to detect and discard a single falseticker.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;ttl _hop_ ...&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command specifies a list of TTL values in increasing order. Up to 8 values can be specified. In manycast mode these values are used in turn in an expanding-ring search. The default is eight multiples of 32 starting at 31.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Building and Installing the Distribution</title>
      <link>/archives/4.2.0/build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/build/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/beaver.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/%7emills/pictures.html&#34;&gt;from &lt;em&gt;Pogo&lt;/em&gt;, Walt Kelly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For putting out compiler fires.&lt;/p&gt;
&lt;p&gt;Last update: 03:06 AM UTC Monday, October 13, 2003&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/build/#building-and-installing-the-distribution&#34;&gt;Building and Installing the Distribution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/build/#building-and-installing-under-unix&#34;&gt;Building and Installing under Unix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/build/#compilation&#34;&gt;Compilation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/build/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/build/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/build/#if-you-have-problems&#34;&gt;If You Have Problems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/build/#additional-ttmakett-commands&#34;&gt;Additional &lt;tt&gt;make&lt;/tt&gt; Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/build/#building-and-installing-under-windows-nt&#34;&gt;Building and Installing Under Windows NT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;building-and-installing-the-distribution&#34;&gt;Building and Installing the Distribution&lt;/h4&gt;
&lt;p&gt;As a practical matter, every computer architecture and operating system version seems to be different than any other. The device drivers may be different, the input/output system may be idiosyncratic and the libraries may have different semantics. It is not possible in a software distribution such as this one to support every individual system with a common set of binaries, even with the same system but different versions. Therefore, it is necessary to individually configure the software build for each system and version, both at compile time and at run time. In almost all cases, these procedures are completely automatic and all the newbie user need do is type &lt;code&gt;configure&lt;/code&gt;, &lt;code&gt;make&lt;/code&gt; and &lt;code&gt;install&lt;/code&gt; in that order and the autoconfigure system does the rest. There are some exceptions, as noted below and on the &lt;a href=&#34;/archives/4.2.0/hints&#34;&gt;Hints and Kinks&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;If available, the OpenSSL library from &lt;a href=&#34;https://www.openssl.org&#34;&gt;https://www.openssl.org&lt;/a&gt; is used to support public key cryptography. The library must be built and installed prior to building NTPv4. The procedures for doing that are included in the OpenSSL documentation. The library is found during the normal NTPv4 configure phase and the interface routines compiled automatically. Only the &lt;tt&gt;libcrypto.a&lt;/tt&gt; library and associated header files are used. If the library is not available or disabled, this step is not required.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;building-and-installing-under-unix&#34;&gt;Building and Installing Under Unix&lt;/h4&gt;
&lt;p&gt;Make sure that you have all necessary tools for building executables. These tools include &lt;tt&gt;cc/gcc&lt;/tt&gt;, &lt;tt&gt;make&lt;/tt&gt;, &lt;tt&gt;awk&lt;/tt&gt;, &lt;tt&gt;sed&lt;/tt&gt;, &lt;tt&gt;tr&lt;/tt&gt;, &lt;tt&gt;sh&lt;/tt&gt;, &lt;tt&gt;grep&lt;/tt&gt;, &lt;tt&gt;egrep&lt;/tt&gt; and a few others. Not all of these tools exist in the standard distribution of modern Unix versions (compilers are likely to be an add-on product). If this is the case, consider using the GNU tools and &lt;tt&gt;gcc&lt;/tt&gt; compiler. For a successful build, all of these tools should be accessible via the current path.&lt;/p&gt;
&lt;p&gt;The first thing to do is uncompress the distribution and extract the source tree. In the distribution base directory use the &lt;tt&gt;./configure&lt;/tt&gt; command to perform an automatic configuration procedure. This command inspects the hardware and software environment and tests for the presence of system header files and the contents of these files to determine if certain features are present. When one or more of these features are present, the code is compiled to use them; if not, no special code is compiled. However, even if the code is compiled to use these features, the code does a special test at run time to see if one or more are actually present and avoids using them if not present. In such cases a warning message is sent to the system log, but the daemon should still work properly.&lt;/p&gt;
&lt;p&gt;The default build normally includes the debugging code, which can be useful in diagnosing problems found in initial test, and all reference clock drivers known to work with each machine and operating system. Unless memory space is at a premium, this is a sensible strategy and greatly simplifies debugging and support. If you need to delete either the debugging code or one or all reference clock drivers to save space, see the &lt;a href=&#34;/archives/4.2.0/config&#34;&gt;Configuration Options&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;If your site supports multiple architectures and uses NFS to share files, you can use a single source tree to compile executables for all architectures. While running on a target architecture machine and in the distribution base directory create a subdirectory using a command like &lt;tt&gt;mkdir A.&lt;code&gt;config.guess&lt;/code&gt;&lt;/tt&gt;, which will create an architecture-specific directory with name peculiar to the architecture and operating system. Then change to this directory and emit a &lt;tt&gt;../configure&lt;/tt&gt; command. The remaining steps are the same whether building in the base directory or in the subdirectory.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;compilation&#34;&gt;Compilation&lt;/h4&gt;
&lt;p&gt;Use the &lt;tt&gt;make&lt;/tt&gt; command to compile all source modules, construct the libraries and link the distribution. Expect few or no warnings using &lt;tt&gt;cc&lt;/tt&gt; and a moderate level of warnings using &lt;tt&gt;gcc&lt;/tt&gt;. &lt;strong&gt;Note:&lt;/strong&gt; On some Unix platforms &lt;tt&gt;gcc&lt;/tt&gt; may show quite a few complaints about system header files and type inconsistencies, especially with pointer variables. This is usually the case when the system header files are not up to ANSI standards or &lt;tt&gt;gcc&lt;/tt&gt; expectations, when &lt;tt&gt;gcc&lt;/tt&gt; is not installed properly, or when operating system updates and patches are applied and &lt;tt&gt;gcc&lt;/tt&gt; is not reinstalled. While the autoconfigure process is quite thorough, the Unix programming cultures of the various workstation makers still remain idiosyncratic.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;installation&#34;&gt;Installation&lt;/h4&gt;
&lt;p&gt;As root, use the &lt;tt&gt;make install&lt;/tt&gt; command to install the binaries in the destination directory. Most commonly, these programs are installed in &lt;tt&gt;/usr/local/bin&lt;/tt&gt;, but this can be overridden during configuration. You must of course have write permission on the install in the destination directory. This includes the following programs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpd&#34;&gt;ntpd - Network Time Protocol (NTP) daemon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpq&#34;&gt;ntpq - standard NTP query program&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpdc&#34;&gt;ntpdc - special NTP query program&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpdate&#34;&gt;ntpdate - set the date and time via NTP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntptrace&#34;&gt;ntptrace - trace a chain of NTP servers back to the primary source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the precision time kernel modifications are present, the following program is installed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntptime&#34;&gt;ntptime - read kernel time variables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the public key authentication functions are present, the following program is installed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/keygen&#34;&gt;ntp-keygen - generate public and private keys&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In some systems that include the capability to edit kernel variables, the following program is installed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/tickadj&#34;&gt;tickadj - set time-related kernel variables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cryptographic support, both symmetric and public key, requires one or more key files, commonly installed in &lt;tt&gt;/usr/local/etc&lt;/tt&gt;. Public key cryptography requires a random seed file, usually called &lt;tt&gt;.rnd&lt;/tt&gt;, installed in a dark place such as the root directory or &lt;tt&gt;/etc&lt;/tt&gt;. Directions for generating keys is on the &lt;a href=&#34;/archives/4.2.0/authopt&#34;&gt;Authentication Options&lt;/a&gt; page.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;configuration&#34;&gt;Configuration&lt;/h4&gt;
&lt;p&gt;You are now ready to configure the daemon and start it. You will need to create a NTP configuration file &lt;tt&gt;ntp.conf&lt;/tt&gt; and a cryptographic key file &lt;tt&gt;ntp.keys&lt;/tt&gt;. The latter file is necessary only for remote configuration support, if needed. Newbies should see the &lt;a href=&#34;/archives/4.2.0/quick&#34;&gt;Quick Start&lt;/a&gt; page for orientation. Seasoned veterans can start with the &lt;a href=&#34;/archives/4.2.0/ntpd&#34;&gt;ntpd - Network Time Protocol (NTP) daemon&lt;/a&gt; page and move on to the specific configuration option pages from there. A tutorial on NTP subnet design and configuration options is in the &lt;a href=&#34;/archives/4.2.0/notes&#34;&gt;Notes on Configuring NTP and Setting up a NTP Subnet&lt;/a&gt; page.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;if-you-have-problems&#34;&gt;If You Have Problems&lt;/h4&gt;
&lt;p&gt;If you have problems peculiar to the particular hardware and software environment (e.g. operating system-specific issues), browse the &lt;a href=&#34;/archives/4.2.0/hints&#34;&gt;Hints and Kinks&lt;/a&gt; page. For other problems a tutorial on debugging technique is in the &lt;a href=&#34;/archives/4.2.0/debug&#34;&gt;NTP Debugging Technique&lt;/a&gt; page. As always, the first line of general assistance is the NTP web site &lt;a href=&#34;http://www.ntp.org&#34;&gt;www.ntp.org&lt;/a&gt; and the FAQ resident there. Requests for assistance of a general nature and of interest to other timekeepers should be sent to the NTP newsgroup comp.protocols.time.ntp. Bug reports of a specific nature should be sent to &lt;a href=&#34;mailto:bugs@ntp.org&#34;&gt;bugs@ntp.org&lt;/a&gt;. Bug reports of a specific nature on features implemented by the programmer corps mentioned in the &lt;a href=&#34;/archives/4.2.0/copyright&#34;&gt;Copyright&lt;/a&gt; page should be sent directly to the implementor listed in that page, with copy to &lt;a href=&#34;mailto:bugs@ntp.org&#34;&gt;bugs@ntp.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please include the version of the source distribution (e.g., ntp-4.0.70a) in your bug report, as well as billboards from the relevant utility programs and debug trace, if available. Please include the output of &lt;tt&gt;config.guess&lt;/tt&gt; in your bug report. It will look something like:&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;pdp11-dec-fuzzos3.4&lt;/tt&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;additional-ttmakett-commands&#34;&gt;Additional &lt;tt&gt;make&lt;/tt&gt; commands&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;make clean&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Cleans out object files, programs and temporary files.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;make distclean&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Does the work of &lt;tt&gt;clean&lt;/tt&gt;, but cleans out all directories in preparation for a new distribution release.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;make dist&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Does the work of &lt;tt&gt;make distclean&lt;/tt&gt;, but constructs compressed tar files for distribution. You must have GNU automake to perform this function.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;building-and-installing-under-windows-nt&#34;&gt;Building and Installing under Windows NT&lt;/h4&gt;
&lt;p&gt;See &lt;a href=&#34;/archives/hints/winnt&#34;&gt;Windows NT Hints&lt;/a&gt; for directions to compile the sources and install the executables.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Configuration Options</title>
      <link>/archives/4.2.0/config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/config/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/pogo3a.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;from &lt;em&gt;Pogo&lt;/em&gt;, Walt Kelly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Gnu autoconfigure tools are in the backpack.&lt;/p&gt;
&lt;p&gt;Last update: 03:07 AM UTC Monday, October 13, 2003&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/config/#basic-configuration-options---the-ttconfigurett-utility&#34;&gt;Basic Configuration Options - the &lt;tt&gt;configure&lt;/tt&gt; utility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/config/#options&#34;&gt;Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/config/#directory-and-file-names&#34;&gt;Directory and File Names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/config/#host-type&#34;&gt;Host Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/config/#optional-packages&#34;&gt;Optional Packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/config/#optional-features&#34;&gt;Optional Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/config/#radio-clocks&#34;&gt;Radio Clocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/config/#parse-clocks&#34;&gt;PARSE Clocks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;basic-configuration-options---the-ttconfigurett-utility&#34;&gt;Basic Configuration Options - the &lt;tt&gt;configure&lt;/tt&gt; utility&lt;/h4&gt;
&lt;p&gt;The following options are for compiling and installing a working version of the NTP distribution. In most cases, the build process is completely automatic. In some cases where memory space is at a premium, or the binaries are to be installed in a different place, it is possible to tailor the configuration to remove such features as reference clock driver support, debugging support, and so forth.&lt;/p&gt;
&lt;p&gt;Configuration options are specified as arguments to the &lt;tt&gt;configure&lt;/tt&gt; script. Following is a summary of the current options, as of the 4.0.99m version:&lt;/p&gt;
&lt;p&gt;Usage: &lt;tt&gt;configure [options] [host]&lt;/tt&gt;&lt;/p&gt;
&lt;h4 id=&#34;options&#34;&gt;Options&lt;/h4&gt;
&lt;p&gt;Defaults are in brackets after descriptions.&lt;/p&gt;
&lt;p&gt;Configuration:&lt;/p&gt;
&lt;pre&gt; --cache-file=FILE      cache test results in FILE
 --help                 print this message
 --no-create            do not create output files
 --quiet, --silent      do not print `checking...&#39; messages
 --version              print the version of autoconf that created configure
&lt;/pre&gt;
&lt;h4 id=&#34;directory-and-file-names&#34;&gt;Directory and File Names&lt;/h4&gt;
&lt;pre&gt; --prefix=PREFIX        install architecture-independent files in PREFIX [/usr/local]
 --exec-prefix=EPREFIX  install architecture-dependent files in EPREFIX [same as prefix]
 --bindir=DIR           user executables in DIR [EPREFIX/bin]
 --sbindir=DIR          system admin executables in DIR [EPREFIX/sbin]
 --libexecdir=DIR       program executables in DIR [EPREFIX/libexec]
 --datadir=DIR          read-only architecture-independent data in DIR [PREFIX/share]
 --sysconfdir=DIR       read-only single-machine data in DIR [PREFIX/etc]
 --sharedstatedir=DIR   modifiable architecture-independent data in DIR [PREFIX/com]
 --localstatedir=DIR    modifiable single-machine data in DIR [PREFIX/var]
 --libdir=DIR           object code libraries in DIR [EPREFIX/lib]
 --includedir=DIR       C header files in DIR [PREFIX/include]
 --oldincludedir=DIR    C header files for non-gcc in DIR [/usr/include]
 --infodir=DIR          info documentation in DIR [PREFIX/info]
 --mandir=DIR           man documentation in DIR [PREFIX/man]
 --srcdir=DIR           find the sources in DIR [configure dir or ..]
 --x-includes=DIR       X include files are in DIR
 --x-libraries=DIR      X library files are in DIR
 --program-prefix=PREFIX           prepend PREFIX to installed program names
 --program-suffix=SUFFIX           append SUFFIX to installed program names
 --program-transform-name=PROGRAM  run sed PROGRAM on installed program names
&lt;/pre&gt;
&lt;h4 id=&#34;host-type&#34;&gt;Host Type&lt;/h4&gt;
&lt;pre&gt; --build=BUILD          configure for building on BUILD [BUILD=HOST]
 --host=HOST            configure for HOST [guessed]
 --target=TARGET        configure for TARGET [TARGET=HOST]
&lt;/pre&gt;
&lt;h4 id=&#34;optional-packages&#34;&gt;Optional Packages&lt;/h4&gt;
&lt;pre&gt; --with-PACKAGE[=ARG]   use PACKAGE [ARG=yes]
 --without-PACKAGE      do not use PACKAGE (same as --with-PACKAGE=no)

 openssl-libdir=DIR     OpenSSL object code libraries in DIR [/usr/lib/usr/local/lib/usr/local/ssl/lib]
 openssl-incdir=DIR     OpenSSL header files in DIR [/usr/include/usr/local/include/usr/local/ssl/include]
 crypto=autokey         Use autokey cryptography
 crypto=rsaref          Use the RSAREF library
 electricfence          Compile with ElectricFence malloc debugger
&lt;/pre&gt;
&lt;h4 id=&#34;optional-features&#34;&gt;Optional Features&lt;/h4&gt;
&lt;pre&gt; --disable-FEATURE      do not include FEATURE (same as
 --enable-FEATURE=no)
 --enable-FEATURE[=ARG] include FEATURE [ARG=yes]

 accurate-adjtime       The adjtime() call is accurate
 clockctl               use /dev/clockctl (non root control of system clock)
 debugging              Include debugging code [enable]
 des                    Include support for DES keys [enable]
 dst-minutes=VALUE      Minutes per DST adjustment [60]
 gdt-surveying          Include GDT survey code [disable]
 hourly-todr-sync       If we should sync TODR hourly
 kernel-fll-bug         If we should avoid a (Solaris) kernel FLL bug
 kmem                   Read /dev/kmem for &#39;tick&#39; and/or &#39;tickadj&#39;
 md5                    Include support for MD5 keys [enable]
 ntpdate-step           If ntpdate should step the time
 slew-always            Always slew the time
 step-slew              Step and slew the time
 tick=VALUE             Force a value for &#39;tick&#39;
 tickadj=VALUE          Force a value for &#39;tickadj&#39;
 udp-wildcard           Use UDP wildcard delivery
&lt;/pre&gt;
&lt;h4 id=&#34;radio-clocks&#34;&gt;Radio Clocks&lt;/h4&gt;
&lt;p&gt;These are ordinarily enabled, if supported by the machine and operating system:&lt;/p&gt;
&lt;pre&gt; all-clocks             Include drivers for all suitable non-PARSE clocks [enable]
 ACTS                   NIST dialup clock
 ARBITER                Arbiter 1088A/B GPS receiver
 ARCRON_MSF             Arcron MSF receiver
 AS2201                 Austron 2200A or 2201A GPS receiver
 ATOM                   ATOM PPS interface
 AUDIO-CHU              CHU audio decoder
 BANCOMM                Datum/Bancomm BC635/VME interface (requires an explicit --enable-BANCOMM request)
 CHRONOLOG              Chrono-log K-series WWVB receiver
 CHU                    CHU modem decoder
 DATUM                  Datum Programmable Time System
 DUMBCLOCK              Dumb generic hh:mm:ss local clock
 FG                     Forum Graphic GPS
 GPSVME                 TrueTime GPS receiver with VME interface (requires an explicit --enable-GPSVME request)
 HEATH                  HeathKit GC-1000 Most Accurate Clock
 HOPFPCI                HOPF 6039 PCI board
 HOPFSERIAL             HOPF serial clock device
 HPGPS                  HP 58503A GPS Time &amp; Frequency receiver
 IRIG                   IRIG (Audio) Clock
 JUPITER                Rockwell Jupiter GPS receiver
 LEITCH                 Leitch CSD 5300 Master Clock System Driver
 LOCAL-CLOCK            Local clock driver
 MSFEES                 EES M201 MSF receiver
 MX4200                 Magnavox MX4200 GPS receiver
 NMEA                   NMEA GPS receiver
 ONCORE                 Motorola VP/UT Oncore GPS receiver
 PALISADE               Palisade clock
 PCF                    Conrad parallel port radio clock
 PST                    PST/Traconex 1020 WWV/H receiver
 PTBACTS                PTB dialup clock support
 SHM                    Clock attached through shared memory (requires an explicit --enable-SHM request)
 SPECTRACOM             Spectracom 8170/Netclock/2 WWVB receiver
 TRAK                   TRAK 8810 GPS station clock
 TPRO                   KSI/Odetics TPRO/S IRIG Interface
 TRUETIME               Kinemetrics/TrueTime (generic) receiver
 ULINK                  Ultralink WWVB receiver
 USNO                   US Naval Observatory dialup clock
 WWV                    WWV audio receiver
&lt;/pre&gt;
&lt;h4 id=&#34;parse-clocks&#34;&gt;PARSE Clocks&lt;/h4&gt;
&lt;pre&gt; parse-clocks           Include drivers for all suitable PARSE clocks [enable]
 COMPUTIME              Diem Computime Radio Clock
 DCF7000                ELV/DCF7000 Clock
 HOPF6021               HOPF 6021 Radio Clock support
 MEINBERG               Meinberg clocks
 RAWDCF                 DCF77 raw time code
 RCC8000                RCC 8000 Radio Clock support
 SCHMID                 SCHMID DCF77 clock support
 TRIMTAIP               Trimble GPS/TAIP Protocol
 TRIMTSIP               Trimble GPS/TSIP Protocol
 VARITEXT               VARITEXT clock
 WHARTON                Wharton 400A Series clock
&lt;/pre&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Copyright Notice</title>
      <link>/archives/4.2.0/copyright/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/copyright/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/sheepb.jpg&#34; alt=&#34;jpg&#34;&gt; &amp;ldquo;Clone me,&amp;rdquo; says Dolly sheepishly&lt;/p&gt;
&lt;p&gt;Last update: 15:44 UTC Tuesday, July 15, 2003&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The following copyright notice applies to all files collectively called the Network Time Protocol Version 4 Distribution. Unless specifically declared otherwise in an individual file, this notice applies as if the text was explicitly included in the file.&lt;/p&gt;
&lt;pre&gt;***********************************************************************
*                                                                     *
* Copyright (c) David L. Mills 1992-2003                              *
*                                                                     *
* Permission to use, copy, modify, and distribute this software and   *
* its documentation for any purpose and without fee is hereby         *
* granted, provided that the above copyright notice appears in all    *
* copies and that both the copyright notice and this permission       *
* notice appear in supporting documentation, and that the name        *
* University of Delaware not be used in advertising or publicity      *
* pertaining to distribution of the software without specific,        *
* written prior permission. The University of Delaware makes no       *
* representations about the suitability this software for any         *
* purpose. It is provided &#34;as is&#34; without express or implied          *
* warranty.                                                           *
*                                                                     *
***********************************************************************
&lt;/pre&gt;
&lt;p&gt;The following individuals contributed in part to the Network Time Protocol Distribution Version 4 and are acknowledged as authors of this work.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20mark_andrews@isc.org&#34;&gt;Mark Andrews &lt;a href=&#34;mailto:mark_andrews@isc.org&#34;&gt;mark_andrews@isc.org&lt;/a&gt;&lt;/a&gt; Leitch atomic clock controller&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20altmeier@atlsoft.de&#34;&gt;Bernd Altmeier &lt;a href=&#34;mailto:altmeier@atlsoft.de&#34;&gt;altmeier@atlsoft.de&lt;/a&gt;&lt;/a&gt; hopf Elektronik serial line and PCI-bus devices&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20vbais@mailman1.intel.co&#34;&gt;Viraj Bais &lt;a href=&#34;mailto:vbais@mailman1.intel.com&#34;&gt;vbais@mailman1.intel.com&lt;/a&gt;&lt;/a&gt; and &lt;a href=&#34;mailto:%20kirkwood@striderfm.intel.com&#34;&gt;Clayton Kirkwood &lt;a href=&#34;mailto:kirkwood@striderfm.intel.com&#34;&gt;kirkwood@striderfm.intel.com&lt;/a&gt;&lt;/a&gt; port to WindowsNT 3.5&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20michael.barone@lmco.com&#34;&gt;Michael Barone &amp;lt;michael,barone@lmco.com&amp;gt;&lt;/a&gt; GPSVME fixes&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20Jean-Francois.Boudreault@viagenie.qc.ca&#34;&gt;Jean-Francois Boudreault &lt;a href=&#34;mailto:Jean-Francois.Boudreault@viagenie.qc.ca&#34;&gt;Jean-Francois.Boudreault@viagenie.qc.ca&lt;/a&gt;&lt;/a&gt;IPv6 support&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20karl@owl.HQ.ileaf.com&#34;&gt;Karl Berry &lt;a href=&#34;mailto:karl@owl.HQ.ileaf.com&#34;&gt;karl@owl.HQ.ileaf.com&lt;/a&gt;&lt;/a&gt; syslog to file option&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20greg.brackley@bigfoot.com&#34;&gt;Greg Brackley &lt;a href=&#34;mailto:greg.brackley@bigfoot.com&#34;&gt;greg.brackley@bigfoot.com&lt;/a&gt;&lt;/a&gt; Major rework of WINNT port. Clean up recvbuf and iosignal code into separate modules.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20Marc.Brett@westgeo.com&#34;&gt;Marc Brett &lt;a href=&#34;mailto:Marc.Brett@westgeo.com&#34;&gt;Marc.Brett@westgeo.com&lt;/a&gt;&lt;/a&gt; Magnavox GPS clock driver&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20Piete.Brooks@cl.cam.ac.uk&#34;&gt;Piete Brooks &lt;a href=&#34;mailto:Piete.Brooks@cl.cam.ac.uk&#34;&gt;Piete.Brooks@cl.cam.ac.uk&lt;/a&gt;&lt;/a&gt; MSF clock driver, Trimble PARSE support&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20reg@dwf.com&#34;&gt;Reg Clemens &lt;a href=&#34;mailto:reg@dwf.com&#34;&gt;reg@dwf.com&lt;/a&gt;&lt;/a&gt; Oncore driver (Current maintainer)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20clift@ml.csiro.au&#34;&gt;Steve Clift &lt;a href=&#34;mailto:clift@ml.csiro.au&#34;&gt;clift@ml.csiro.au&lt;/a&gt;&lt;/a&gt; OMEGA clock driver&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:casey@csc.co.za&#34;&gt;Casey Crellin &lt;a href=&#34;mailto:casey@csc.co.za&#34;&gt;casey@csc.co.za&lt;/a&gt;&lt;/a&gt; vxWorks (Tornado) port and help with target configuration&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20Sven_Dietrich@trimble.COM&#34;&gt;Sven Dietrich &lt;a href=&#34;mailto:sven_dietrich@trimble.com&#34;&gt;sven_dietrich@trimble.com&lt;/a&gt;&lt;/a&gt; Palisade reference clock driver, NT adj. residuals, integrated Greg&amp;rsquo;s Winnt port.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20dundas@salt.jpl.nasa.gov&#34;&gt;John A. Dundas III &lt;a href=&#34;mailto:dundas@salt.jpl.nasa.gov&#34;&gt;dundas@salt.jpl.nasa.gov&lt;/a&gt;&lt;/a&gt; Apple A/UX port&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20duwe@immd4.informatik.uni-erlangen.de&#34;&gt;Torsten Duwe &lt;a href=&#34;mailto:duwe@immd4.informatik.uni-erlangen.de&#34;&gt;duwe@immd4.informatik.uni-erlangen.de&lt;/a&gt;&lt;/a&gt; Linux port&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20dennis@mrbill.canet.ca&#34;&gt;Dennis Ferguson &lt;a href=&#34;mailto:dennis@mrbill.canet.ca&#34;&gt;dennis@mrbill.canet.ca&lt;/a&gt;&lt;/a&gt; foundation code for NTP Version 2 as specified in RFC-1119&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20jhay@icomtek.csir.co.za&#34;&gt;John Hay &amp;lt;jhay@@icomtek.csir.co.za&amp;gt;&lt;/a&gt; IPv6 support and testing&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20glenn@herald.usask.ca&#34;&gt;Glenn Hollinger &lt;a href=&#34;mailto:glenn@herald.usask.ca&#34;&gt;glenn@herald.usask.ca&lt;/a&gt;&lt;/a&gt; GOES clock driver&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20iglesias@uci.edu&#34;&gt;Mike Iglesias &lt;a href=&#34;mailto:iglesias@uci.edu&#34;&gt;iglesias@uci.edu&lt;/a&gt;&lt;/a&gt; DEC Alpha port&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20jagubox.gsfc.nasa.gov&#34;&gt;Jim Jagielski &lt;a href=&#34;mailto:jim@jagubox.gsfc.nasa.gov&#34;&gt;jim@jagubox.gsfc.nasa.gov&lt;/a&gt;&lt;/a&gt; A/UX port&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20jbj@chatham.usdesign.com&#34;&gt;Jeff Johnson &lt;a href=&#34;mailto:jbj@chatham.usdesign.com&#34;&gt;jbj@chatham.usdesign.com&lt;/a&gt;&lt;/a&gt; massive prototyping overhaul&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:Hans.Lambermont@nl.origin-it.com&#34;&gt;Hans Lambermont &lt;a href=&#34;mailto:Hans.Lambermont@nl.origin-it.com&#34;&gt;Hans.Lambermont@nl.origin-it.com&lt;/a&gt;&lt;/a&gt; or &lt;a href=&#34;mailto:H.Lambermont@chello.nl&#34;&gt;&lt;a href=&#34;mailto:H.Lambermont@chello.nl&#34;&gt;H.Lambermont@chello.nl&lt;/a&gt;&lt;/a&gt; ntpsweep&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20phk@FreeBSD.ORG&#34;&gt;Poul-Henning Kamp &lt;a href=&#34;mailto:phk@FreeBSD.ORG&#34;&gt;phk@FreeBSD.ORG&lt;/a&gt;&lt;/a&gt; Oncore driver (Original author)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www4.informatik.uni-erlangen.de/%7ekardel&#34;&gt;Frank Kardel&lt;/a&gt; &lt;a href=&#34;mailto:%20Frank.Kardel@informatik.uni-erlangen.de&#34;&gt;&lt;a href=&#34;mailto:Frank.Kardel@informatik.uni-erlangen.de&#34;&gt;Frank.Kardel@informatik.uni-erlangen.de&lt;/a&gt;&lt;/a&gt; PARSE &lt;GENERIC&gt; driver (14 reference clocks), STREAMS modules for PARSE, support scripts, syslog cleanup&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20jones@hermes.chpc.utexas.edu&#34;&gt;William L. Jones &lt;a href=&#34;mailto:jones@hermes.chpc.utexas.edu&#34;&gt;jones@hermes.chpc.utexas.edu&lt;/a&gt;&lt;/a&gt; RS/6000 AIX modifications, HPUX modifications&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20dkatz@cisco.com&#34;&gt;Dave Katz &lt;a href=&#34;mailto:dkatz@cisco.com&#34;&gt;dkatz@cisco.com&lt;/a&gt;&lt;/a&gt; RS/6000 AIX port&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20leres@ee.lbl.gov&#34;&gt;Craig Leres &lt;a href=&#34;mailto:leres@ee.lbl.gov&#34;&gt;leres@ee.lbl.gov&lt;/a&gt;&lt;/a&gt; 4.4BSD port, ppsclock, Magnavox GPS clock driver&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20lindholm@ucs.ubc.ca&#34;&gt;George Lindholm &lt;a href=&#34;mailto:lindholm@ucs.ubc.ca&#34;&gt;lindholm@ucs.ubc.ca&lt;/a&gt;&lt;/a&gt; SunOS 5.1 port&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20louie@ni.umd.edu&#34;&gt;Louis A. Mamakos &lt;a href=&#34;mailto:louie@ni.umd.edu&#34;&gt;louie@ni.umd.edu&lt;/a&gt;&lt;/a&gt; MD5-based authentication&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20thorinn@diku.dk&#34;&gt;Lars H. Mathiesen &lt;a href=&#34;mailto:thorinn@diku.dk&#34;&gt;thorinn@diku.dk&lt;/a&gt;&lt;/a&gt; adaptation of foundation code for Version 3 as specified in RFC-1305&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20mayer@ntp.org&#34;&gt;Danny Mayer &lt;a href=&#34;mailto:mayer@ntp.org&#34;&gt;mayer@ntp.org&lt;/a&gt;&lt;/a&gt;Network I/O, Windows Port, Code Maintenance&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20mills@udel.edu&#34;&gt;David L. Mills &lt;a href=&#34;mailto:mills@udel.edu&#34;&gt;mills@udel.edu&lt;/a&gt;&lt;/a&gt; Version 4 foundation: clock discipline, authentication, precision kernel; clock drivers: Spectracom, Austron, Arbiter, Heath, ATOM, ACTS, KSI/Odetics; audio clock drivers: CHU, WWV/H, IRIG&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20moeller@gwdgv1.dnet.gwdg.de&#34;&gt;Wolfgang Moeller &lt;a href=&#34;mailto:moeller@gwdgv1.dnet.gwdg.de&#34;&gt;moeller@gwdgv1.dnet.gwdg.de&lt;/a&gt;&lt;/a&gt; VMS port&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20mogul@pa.dec.com&#34;&gt;Jeffrey Mogul &lt;a href=&#34;mailto:mogul@pa.dec.com&#34;&gt;mogul@pa.dec.com&lt;/a&gt;&lt;/a&gt; ntptrace utility&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20tmoore@fievel.daytonoh.ncr.com&#34;&gt;Tom Moore &lt;a href=&#34;mailto:tmoore@fievel.daytonoh.ncr.com&#34;&gt;tmoore@fievel.daytonoh.ncr.com&lt;/a&gt;&lt;/a&gt; i386 svr4 port&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20kamal@whence.com&#34;&gt;Kamal A Mostafa &lt;a href=&#34;mailto:kamal@whence.com&#34;&gt;kamal@whence.com&lt;/a&gt;&lt;/a&gt; SCO OpenServer port&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20derek@toybox.demon.co.uk&#34;&gt;Derek Mulcahy &lt;a href=&#34;mailto:derek@toybox.demon.co.uk&#34;&gt;derek@toybox.demon.co.uk&lt;/a&gt;&lt;/a&gt; and &lt;a href=&#34;mailto:%20d@hd.org&#34;&gt;Damon Hart-Davis &lt;a href=&#34;mailto:d@hd.org&#34;&gt;d@hd.org&lt;/a&gt;&lt;/a&gt; ARCRON MSF clock driver&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20Rainer.Pruy@informatik.uni-erlangen.de&#34;&gt;Rainer Pruy &lt;a href=&#34;mailto:Rainer.Pruy@informatik.uni-erlangen.de&#34;&gt;Rainer.Pruy@informatik.uni-erlangen.de&lt;/a&gt;&lt;/a&gt; monitoring/trap scripts, statistics file handling&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20dirce@zk3.dec.com&#34;&gt;Dirce Richards &lt;a href=&#34;mailto:dirce@zk3.dec.com&#34;&gt;dirce@zk3.dec.com&lt;/a&gt;&lt;/a&gt; Digital UNIX V4.0 port&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20wsanchez@apple.com&#34;&gt;Wilfredo Sánchez &lt;a href=&#34;mailto:wsanchez@apple.com&#34;&gt;wsanchez@apple.com&lt;/a&gt;&lt;/a&gt; added support for NetInfo&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20mrapple@quack.kfu.com&#34;&gt;Nick Sayer &lt;a href=&#34;mailto:mrapple@quack.kfu.com&#34;&gt;mrapple@quack.kfu.com&lt;/a&gt;&lt;/a&gt; SunOS streams modules&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20jack@innovativeinternet.com&#34;&gt;Jack Sasportas &lt;a href=&#34;mailto:jack@innovativeinternet.com&#34;&gt;jack@innovativeinternet.com&lt;/a&gt;&lt;/a&gt; Saved a Lot of space on the stuff in the html/pic/ subdirectory&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20schnitz@unipress.com&#34;&gt;Ray Schnitzler &lt;a href=&#34;mailto:schnitz@unipress.com&#34;&gt;schnitz@unipress.com&lt;/a&gt;&lt;/a&gt; Unixware1 port&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20shields@tembel.org&#34;&gt;Michael Shields &lt;a href=&#34;mailto:shields@tembel.org&#34;&gt;shields@tembel.org&lt;/a&gt;&lt;/a&gt; USNO clock driver&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20pebbles.jpl.nasa.gov&#34;&gt;Jeff Steinman &lt;a href=&#34;mailto:jss@pebbles.jpl.nasa.gov&#34;&gt;jss@pebbles.jpl.nasa.gov&lt;/a&gt;&lt;/a&gt; Datum PTS clock driver&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20harlan@pfcs.com&#34;&gt;Harlan Stenn &lt;a href=&#34;mailto:harlan@pfcs.com&#34;&gt;harlan@pfcs.com&lt;/a&gt;&lt;/a&gt; GNU automake/autoconfigure makeover, various other bits (see the ChangeLog)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20ken@sdd.hp.com&#34;&gt;Kenneth Stone &lt;a href=&#34;mailto:ken@sdd.hp.com&#34;&gt;ken@sdd.hp.com&lt;/a&gt;&lt;/a&gt; HP-UX port&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20ajit@ee.udel.edu&#34;&gt;Ajit Thyagarajan &lt;a href=&#34;mailto:ajit@ee.udel.edu&#34;&gt;ajit@ee.udel.edu&lt;/a&gt;&lt;/a&gt;IP multicast/anycast support&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20tsuruoka@nc.fukuoka-u.ac.jp&#34;&gt;Tomoaki TSURUOKA &lt;a href=&#34;mailto:tsuruoka@nc.fukuoka-u.ac.jp&#34;&gt;tsuruoka@nc.fukuoka-u.ac.jp&lt;/a&gt;&lt;/a&gt;TRAK clock driver&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20vixie@vix.com&#34;&gt;Paul A Vixie &lt;a href=&#34;mailto:vixie@vix.com&#34;&gt;vixie@vix.com&lt;/a&gt;&lt;/a&gt; TrueTime GPS driver, generic TrueTime clock driver&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;mailto:%20Ulrich.Windl@rz.uni-regensburg.de&#34;&gt;Ulrich Windl &lt;a href=&#34;mailto:Ulrich.Windl@rz.uni-regensburg.de&#34;&gt;Ulrich.Windl@rz.uni-regensburg.de&lt;/a&gt;&lt;/a&gt; corrected and validated HTML documents according to the HTML DTD&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Debugging Reference Clock Drivers</title>
      <link>/archives/4.2.0/rdebug/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/rdebug/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/oz2.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;from &lt;em&gt;The Wizard of Oz&lt;/em&gt;, L. Frank Baum&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Call the girls and they&amp;rsquo;ll sweep your bugs.&lt;/p&gt;
&lt;p&gt;Last update: 21:31 UTC Sunday, January 26, 2003&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The &lt;a href=&#34;/archives/4.2.0/ntpq&#34;&gt;&lt;tt&gt;ntpq&lt;/tt&gt;&lt;/a&gt; and &lt;a href=&#34;/archives/4.2.0/ntpdc&#34;&gt;&lt;tt&gt;ntpdc&lt;/tt&gt;&lt;/a&gt; utility programs can be used to debug reference clocks, either on the server itself or from another machine elsewhere in the network. The server is compiled, installed and started using the configuration file described in the &lt;a href=&#34;/archives/4.2.0/ntpd&#34;&gt;&lt;tt&gt;ntpd&lt;/tt&gt;&lt;/a&gt; page and its dependencies. If the clock appears in the &lt;tt&gt;ntpq&lt;/tt&gt; utility and &lt;tt&gt;pe&lt;/tt&gt; command, no errors have occurred and the daemon has started, opened the devices specified and waiting for peers and radios to come up. If not, the first thing to look for are error messages on the system log. These are usually due to improper configuration, missing links or multiple instances of the daemon.&lt;/p&gt;
&lt;p&gt;It normally takes a minute or so for evidence to appear that the clock is running and the driver is operating correctly. The first indication is a nonzero value in the &lt;tt&gt;reach&lt;/tt&gt; column in the &lt;tt&gt;pe&lt;/tt&gt; billboard. If nothing appears after a few minutes, the next step is to be sure the RS232 messages, if used, are getting to and from the clock. The most reliable way to do this is with an RS232 tester and to look for data flashes as the driver polls the clock and/or as data arrive from the clock. Our experience is that the overwhelming fraction of problems occurring during installation are due to problems such as miswired connectors or improperly configured device links at this stage.&lt;/p&gt;
&lt;p&gt;If RS232 messages are getting to and from the clock, the variables of interest can be inspected using the &lt;tt&gt;ntpq&lt;/tt&gt; program and various commands described on the documentation page. First, use the &lt;tt&gt;pe&lt;/tt&gt; and &lt;tt&gt;as&lt;/tt&gt; commands to display billboards showing the peer configuration and association IDs for all peers, including the radio clock. The assigned clock address should appear in the &lt;tt&gt;pe&lt;/tt&gt; billboard and the association ID for it at the same relative line position in the &lt;tt&gt;as&lt;/tt&gt; billboard.&lt;/p&gt;
&lt;p&gt;Additional information is available with the &lt;tt&gt;rv&lt;/tt&gt; and &lt;tt&gt;clockvar&lt;/tt&gt; commands, which take as argument the association ID shown in the &lt;tt&gt;as&lt;/tt&gt; billboard. The &lt;tt&gt;rv&lt;/tt&gt; command with no argument shows the system variables, while the &lt;tt&gt;rv&lt;/tt&gt; command with association ID argument shows the peer variables for the clock, as well as other peers of interest. The &lt;tt&gt;clockvar&lt;/tt&gt; command with argument shows the peer variables specific to reference clock peers, including the clock status, device name, last received timecode (if relevant), and various event counters. In addition, a subset of the &lt;tt&gt;fudge&lt;/tt&gt; parameters is included. The poll and error counters in the &lt;tt&gt;clockvar&lt;/tt&gt; billboard are useful debugging aids. The &lt;tt&gt;poll&lt;/tt&gt; counts the poll messages sent to the clock, while the &lt;tt&gt;noreply&lt;/tt&gt;, &lt;tt&gt;badformat&lt;/tt&gt; and &lt;tt&gt;baddate&lt;/tt&gt; count various errors. Check the timecode to be sure it matches what the driver expects. This may require consulting the clock hardware reference manual, which is probably pretty dusty at this stage.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;ntpdc&lt;/tt&gt; utility program can be used for detailed inspection of the clock driver status. The most useful are the &lt;tt&gt;clockstat&lt;/tt&gt; and &lt;tt&gt;clkbug&lt;/tt&gt; commands described in the document page. While these commands permit getting quite personal with the particular driver involved, their use is seldom necessary, unless an implementation bug shows up. If all else fails, turn on the debugging trace using two &lt;tt&gt;-d&lt;/tt&gt; flags in the &lt;tt&gt;ntpd&lt;/tt&gt; startup command line. Most drivers will dump status at every received message in this case. While the displayed trace can be intimidating, this provides the most detailed and revealing indicator of how the driver and clock are performing and where bugs might lurk.&lt;/p&gt;
&lt;p&gt;Most drivers write a message to the &lt;tt&gt;clockstats&lt;/tt&gt; file as each timecode or surrogate is received from the radio clock. By convention, this is the last ASCII timecode (or ASCII gloss of a binary-coded one) received from the radio clock. This file is managed by the &lt;tt&gt;filegen&lt;/tt&gt; facility described in the &lt;tt&gt;ntpd&lt;/tt&gt; page and requires specific commands in the configuration file. This forms a highly useful record to discover anomalies during regular operation of the clock. The scripts included in the &lt;tt&gt;./scripts/stats&lt;/tt&gt; directory can be run from a &lt;tt&gt;cron&lt;/tt&gt; job to collect and summarize these data on a daily or weekly basis. The summary files have proven inspirational to detect infrequent misbehavior due to clock implementation bugs in some radios.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: External Clock Discipline and the Local Clock Driver</title>
      <link>/archives/4.2.0/extern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/extern/</guid>
      <description>
        
        
        &lt;p&gt;Last update: 15:41 UTC Sunday, February 02, 2003&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The NTPv4 implementation includes provisions for an external clock, where the system clock is implemented by some external hardware device. One implementation might take the form of a bus peripheral with a high resolution counter disciplined by a GPS receiver, for example. Another implementation might involve another synchronization protocol, such as the Digital Time Synchronization Service (DTSS), where the system time is disciplined to this protocol and NTP clients of the server obtain synchronization indirectly via the server. A third implementation might be a completely separate clock discipline algorithm and synchronization protocol, such as the &lt;tt&gt;Lockclock&lt;/tt&gt; algorithm used with NIST Automated Computer Time Service (ACTS) modem synchronized time.&lt;/p&gt;
&lt;p&gt;When external clocks are used in conjunction with NTP service, some way needs to be provided for the external clock driver and NTP daemon &lt;tt&gt;ntpd&lt;/tt&gt; to communicate and determine which discipline is in control. This is necessary in order to provide backup, for instance if the external clock or protocol were to fail and synchronization service fall back to other means, such as a local reference clock or another NTP server. In addition, when the external clock and driver are in control, some means needs to be provided for the clock driver to pass on status information and error statistics to the NTP daemon.&lt;/p&gt;
&lt;p&gt;Control and monitoring functions for the external clock and driver are implemented using the &lt;a href=&#34;/archives/drivers/driver1&#34;&gt;Local Clock (type 1) driver&lt;/a&gt; and the &lt;tt&gt;ntp_adjtime()&lt;/tt&gt; system call. This system call is implemented by special kernel provisions included in the kernel of several operating systems, including Solaris, Tru64, FreeBSD and Linux, and possibly others. When the external clock is disabled or not implemented, the system call is used to pass time and frequency information, as well as error statistics, to the kernel. Besides disciplining the system time, the same interface can be used by other applications to determine the operating parameters of the discipline.&lt;/p&gt;
&lt;p&gt;When the external clock is enabled, &lt;tt&gt;ntpd&lt;/tt&gt; does not discipline the system clock, nor does it maintain the error statistics. In this case, the external clock and driver do this using mechanisms unknown to &lt;tt&gt;ntpd&lt;/tt&gt;; however, in this case the kernel state variables are retrieved at 64-s intervals by the Local Clock driver and used by the clock selection and mitigation algorithms to determine the system variables presented to other NTP clients and peers. In this way, downstream clients and servers in the NTP subnet can make an intelligent choice when more than one server is available.&lt;/p&gt;
&lt;p&gt;In order to implement a reliable mitigation between ordinary NTP sources and the external clock source, a protocol is necessary between the local clock driver and the external clock driver. This is implemented using Boolean variables and certain bits in the kernel clock status word. The Boolean variables include the following:&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;ntp_enable&lt;/tt&gt; set/reset by the &lt;tt&gt;enable&lt;/tt&gt; command. enables ntp clock discipline&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;ntp_control&lt;/tt&gt; set during initial configuration if kernel support is available&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;kern_enable&lt;/tt&gt; set/reset by the &lt;tt&gt;enable&lt;/tt&gt; command&lt;/p&gt;
&lt;p&gt;If the &lt;tt&gt;kern_enable&lt;/tt&gt; switch is set, the daemon computes the offset, frequency, maximum error, estimated error, time constand and status bits, then provides them to the kernel via &lt;tt&gt;ntp_adjtime()&lt;/tt&gt;. If this switch is not set, these values are not passed to the kernel; however, the daemon retrieves their present values and uses them in place of the values computed by the daemon.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;pps_update&lt;/tt&gt; bit set in the protocol routine if the prefer peer has survived and has offset less than 128 ms; otherwise set to zero.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;pps_control&lt;/tt&gt; Updated to the current time by kernel support if the PPS signal is enabled and working correctly. Set to zero in the adjust routine if the interval since the last update exceeds 120 s.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;ntp_enable&lt;/tt&gt; and &lt;tt&gt;kern_enable&lt;/tt&gt; are set by the configuration module. Normally, both switches default on, so the daemon can control the time and the kernel discipline can be used, if available. The &lt;tt&gt;pps_update&lt;/tt&gt; switch is set by the protocol module when it believes the PPS provider source is legitimate and operating within nominals. The &lt;tt&gt;ntp_control&lt;/tt&gt; switch is set during configuration by interrogating the kernel. If both the &lt;tt&gt;kern_enable&lt;/tt&gt; and &lt;tt&gt;ntp_control&lt;/tt&gt; switches are set, the daemon disciplines the clock via the kernel and the internal daemon discipline is disabled.&lt;/p&gt;
&lt;p&gt;The external clock driver controls the system time and clock selection in the following way. Normally, the driver adjusts the kernel time using the &lt;tt&gt;ntp_adjtime()&lt;/tt&gt; system call in the same way as the daemon. In the case where the kernel discipline is to be used intact, the clock offset is provided in this call and the loop operates as specified. In the case where the driver steers only the frequency, the offset is specified as zero.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Hints and Kinks</title>
      <link>/archives/4.2.0/hints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/hints/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice35.gif&#34; alt=&#34;gif&#34;&gt; &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mother in law has all the answers.&lt;/p&gt;
&lt;p&gt;Last update: 20:27 UTC Monday, December 02, 2002&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This is an index for a set of troubleshooting notes contained in individual text files in the &lt;tt&gt;./hints&lt;/tt&gt; directory. They were supplied by various volunteers in the form of mail messages, patches or just plain word of mouth. Each note applies to a specific computer and operating system and gives information found useful in setting up the NTP distribution or site configuration. The notes are very informal and subject to errors; no attempt has been made to verify the accuracy of the information contained in them.&lt;/p&gt;
&lt;p&gt;Additions or corrections to this list or the information contained in the notes is solicited. The most useful submissions include the name of the computer manufacturer (and model numbers where appropriate), operating system (specific version(s) where appropriate), problem description, problem solution and submitter&amp;rsquo;s name and electric address. If the submitter is willing to continue debate on the problem, please so advise. See the &lt;a href=&#34;/archives/hints/toc&#34;&gt;directory listing&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: How to build new PARSE clocks</title>
      <link>/archives/4.2.0/parsenew/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/parsenew/</guid>
      <description>
        
        
        &lt;p&gt;Here is an attempt to sketch out what you need to do in order to add another clock to the parse driver: Currently the implementation is being cleaned up - so not all information in here is completely correct. Refer to the included code where in doubt.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Prerequisites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Does the system you want the clock connect to have the include files termio.h or termios.h ? (You need that for the parse driver)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What to do:&lt;/p&gt;
&lt;p&gt;Make a conversion module (&lt;code&gt;libparse/clk_\*.c&lt;/code&gt;)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What is the time code format ?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Find year, month, day, hour, minute, second, status (synchronised or not), possibly time zone information (you need to give the offset to UTC). You will have to convert the data from a string into a struct clocktime:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;pre&amp;gt;      struct clocktime                /* clock time broken up from time code */
          {
        long day;
        long month;
        long year;
        long hour;
        long minute;
        long second;
        long usecond;
        long utcoffset;       /* in seconds */
        time_t utcoffset;     /* true utc time instead of date/time */
        long flags;           /* current clock status */
          };
    &amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Conversion is usually simple and straight forward. For the flags following values can be OR&amp;rsquo;ed together:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;pre&amp;gt;     PARSEB_ANNOUNCE           switch time zone warning (informational only)
         PARSEB_POWERUP            no synchronisation - clock confused (must set then)
         PARSEB_NOSYNC             timecode currently not confirmed (must set then)
                                   usually on reception error when there is still a
                                   chance the the generated time is still ok.

         PARSEB_DST                DST in effect (informational only)
         PARSEB_UTC                timecode contains UTC time (informational only)
         PARSEB_LEAPADD            LEAP addition warning (prior to leap happening - must set when imminent)
                       also used for time code that do not encode the
                       direction (as this is currently the default).
         PARSEB_LEAPDEL            LEAP deletion warning (prior to leap happening - must set when imminent)
         PARSEB_ALTERNATE          backup transmitter (informational only)
         PARSEB_POSITION           geographic position available (informational only)
         PARSEB_LEAPSECOND         actual leap second (this time code is the leap
                                   second - informational only)
    &amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These are feature flags denoting items that are supported by the clock:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;pre&amp;gt;     PARSEB_S_LEAP             supports LEAP - might set PARSEB_LEAP
         PARSEB_S_ANTENNA          supports ANTENNA - might set PARSEB_ALTERNATE
         PARSEB_S_PPS              supports PPS time stamping
         PARSEB_S_POSITION         supports position information (GPS)
       &amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the utctime field is non zero this value will be take as time code value. This allows for conversion routines that already have the utc time value. The utctime field gives the seconds since Jan 1st 1970, 0:00:00. The useconds field gives the respective usec value. The fields for date and time (down to second resolution) will be ignored.&lt;/p&gt;
&lt;p&gt;Conversion is done in the &lt;code&gt;cvt_\*&lt;/code&gt; routine in &lt;code&gt;parse/clk_\*.c&lt;/code&gt; files, look in them for examples. The basic structure is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;pre&amp;gt;     struct clockformat &amp;lt;yourclock&amp;gt;_format = {
           lots of fields for you to fill out (see below)
         };

         static cvt_&amp;lt;yourclock&amp;gt;()
           ...
         {
           if (&amp;lt;I do not recognize my time code&amp;gt;) {
             return CVT_NONE;
           } else {
             if (&amp;lt;conversion into clockformat is ok&amp;gt;) {
               &amp;lt;set all necessary flags&amp;gt;;
               return CVT_OK;
             } else {
               return CVT_FAIL|CVT_BADFMT;
             }
           }
    &amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The struct clockformat is the interface to the rest of the parse driver - it holds all information necessary for finding the clock message and doing the appropriate time stamping.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;pre&amp;gt;struct clockformat
    {
      u_long (*input)();
      /* input routine - your routine - cvt_&amp;lt;yourclock&amp;gt; */
      u_long (*convert)();
      /* conversion routine - your routine - cvt_&amp;lt;yourclock&amp;gt; */
      /* routine for handling RS232 sync events (time stamps) - usually sync_simple */
      u_long (*syncpps)(); 
      /* PPS input routine - usually pps_one */
      void           *data;
      /* local parameters - any parameters/data/configuration info your conversion
         routine might need */
      char           *name;
      /* clock format name - Name of the time code */
      unsigned short  length;
      /* maximum length of data packet for your clock format */
      u_long   flags;
     /* information for the parser what to look for */
    };
    &amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above should have given you some hints on how to build a &lt;code&gt;clk_\*.c&lt;/code&gt; file with the time code conversion. See the examples and pick a clock closest to yours and tweak the code to match your clock.&lt;/p&gt;
&lt;p&gt;In order to make your &lt;code&gt;clk_\*.c&lt;/code&gt; file usable a reference to the clockformat structure must be put into &lt;code&gt;parse_conf.c&lt;/code&gt;.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;TTY setup and initialisation/configuration will be done in &lt;code&gt;ntpd/refclock_parse.c&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Find out the exact tty settings for your clock (baud rate, parity, stop bits, character size, &amp;hellip;) and note them in terms of &lt;code&gt;termio\*.h&lt;/code&gt; c_cflag macros.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;ntpd/refclock_parse.c&lt;/code&gt; fill out a new the struct clockinfo element (that allocates a new &amp;ldquo;IP&amp;rdquo; address - see comments) (see all the other clocks for example).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;pre&amp;gt;   struct clockinfo
         {
          u_long  cl_flags;             /* operation flags (io modes) */
         PARSE_F_PPSPPS       use loopfilter PPS code (CIOGETEV)
         PARSE_F_PPSONSECOND  PPS pulses are on second
         usually flags stay 0 as they are used only for special setups

        void  (*cl_poll)();           /* active poll routine */
             The routine to call when the clock needs data sent to it in order to
             get a time code from the clock (e.g. Trimble clock)

        int   (*cl_init)();           /* active poll init routine */
             The routine to call for very special initializations.

        void  (*cl_event)();          /* special event handling (e.g. reset clock) */
             What to do, when an event happens - used to re-initialize clocks on timeout.

        void  (*cl_end)();            /* active poll end routine */
             The routine to call to undo any special initialisation (free memory/timers)

        void   *cl_data;              /* local data area for &amp;quot;poll&amp;quot; mechanism */
             local data for polling routines

        u_fp    cl_rootdelay;         /* rootdelay */
             NTP rootdelay estimate (usually 0)

             u_long  cl_basedelay;         /* current offset - unsigned l_fp
                                                  fractional part (fraction) by
                                                  which the RS232 time code is
                                                  delayed from the actual time. */

        u_long  cl_ppsdelay;          /* current PPS offset - unsigned l_fp fractional
             time (fraction) by which the PPS time stamp is delayed (usually 0)
       part */

        char   *cl_id;                /* ID code (usually &amp;quot;DCF&amp;quot;) */
             Refclock id - (max 4 chars)

        char   *cl_description;       /* device name */
             Name of this device.

        char   *cl_format;            /* fixed format */
             If the data format cann not ne detected automatically this is the name
         as in clk_*.c clockformat.

        u_char  cl_type;              /* clock type (ntp control) */
             Type if clock as in clock status word (ntp control messages) - usually 0

        u_long  cl_maxunsync;         /* time to trust oscillator after losing synch
      */
             seconds a clock can be trusted after losing synchronisation.

        u_long  cl_speed;             /* terminal input &amp;amp; output baudrate */
        u_long  cl_cflag;             /* terminal io flags */
        u_long  cl_iflag;             /* terminal io flags */
        u_long  cl_oflag;             /* terminal io flags */
        u_long  cl_lflag;             /* terminal io flags */
             termio*.h tty modes.

        u_long  cl_samples;           /* samples for median filter */
        u_long  cl_keep;              /* samples for median filter to keep */
             median filter parameters - smoothing and rejection of bad samples
      } clockinfo[] = {
      ...,&amp;lt;other clocks&amp;gt;,...
      { &amp;lt; your parameters&amp;gt; },
      };

    &amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well, this is very sketchy, I know. But I hope it helps a little bit. The best way is to look which clock comes closest to your and tweak that code.&lt;/p&gt;
&lt;p&gt;Two sorts of clocks are used with parse. Clocks that automatically send their time code (once a second) do not need entries in the poll routines because they send the data all the time. The second sort are the clocks that need a command sent to them in order to reply with a time code (like the Trimble clock).&lt;/p&gt;
&lt;p&gt;For questions: &lt;a href=&#34;mailto:%20kardel@acm.org&#34;&gt;kardel@acm.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please include an exact description on how your clock works. (initialisation, TTY modes, strings to be sent to it, responses received from the clock).&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: How to Write a Reference Clock Driver</title>
      <link>/archives/4.2.0/howto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/howto/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/pogo4.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/%7emills/pictures.html&#34;&gt;from &lt;em&gt;Pogo&lt;/em&gt;, Walt Kelly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You need a little magic.&lt;/p&gt;
&lt;p&gt;Last update: 03:11 AM UTC Monday, October 13, 2003&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/howto/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/howto/#conventions-fudge-factors-and-flags&#34;&gt;Conventions, Fudge Factors and Flags&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/howto/#files-which-need-to-be-changed&#34;&gt;Files Which Need to be Changed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/howto/#interface-routine-overview&#34;&gt;Interface Routine Overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;NTP reference clock support maintains the fiction that the clock is actually an ordinary peer in the NTP tradition, but operating at a synthetic stratum of zero. The entire suite of algorithms used to filter the received data, select the best clocks or peers and combine them to produce a system clock correction operate just like ordinary NTP peers. In this way, defective clocks can be detected and removed from the peer population. As no packets are exchanged with a reference clock; however, the transmit, receive and packet procedures are replaced with separate code to simulate them.&lt;/p&gt;
&lt;p&gt;It is important to understand how the NTP clock driver interface works. The driver assumes three timescales: standard time maintained by a distant laboratory such as USNO or NIST, reference time maintained by the external radio and the system time maintained by NTP. The radio synchronizes reference time and frequency to standard time via radio, satellite or modem. As the transmission means may not always be reliable, most radios continue to provide clock updates for some time after signal loss using an internal reference oscillator. In such cases the radio may or may not reveal the time since last synchronized and/or the estimated time error.&lt;/p&gt;
&lt;p&gt;All three timescales run &lt;em&gt;only&lt;/em&gt; in Coordinated Universal Time (UTC), 24-hour format, and are not adjusted for local timezone or standard/daylight time. The local timezone, standard/daylight indicator and year, if provided, are ignored. However, it is important to determine whether a leap second is to be inserted in the UTC timescale in the near future so NTP can insert it in the system timescale at the appropriate epoch.&lt;/p&gt;
&lt;p&gt;The NTP clock driver synchronizes the system time and frequency to the radio via serial or parallel port, PPS signal or other means. The driver routinely checks the radio timecode string or status indicators to determine whether it is operating correctly or not. If it is, the driver decodes the radio timecode in days, hours, minutes, seconds and nanoseconds and provides these data with the NTP receive timestamp corresponding to the on-time epoch of the timecode. The driver interface computes the difference between the timecode time and NTP timestamp and saves the difference in a circular buffer for later processing. Once each poll interval, usually 64 s, the driver provides ancillary data including leap bits and last reference time to the interface. The interface processes the circular buffer using a median/trimmed mean algorithm to extract the best estimate and provides this and the ancillary data to the clock filter as with ordinary NTP peers.&lt;/p&gt;
&lt;p&gt;The audio drivers are designed to look like a typical external radio in that the reference oscillator is derived from the audio codec oscillator and separate from the system clock oscillator. In the WWV and IRIG drivers, the codec oscillator is disciplined in frequency to the standard timescale via radio or local sources and can be assumed to have the same reliability and accuracy as an external radio. In these cases the driver continues to provide updates to the clock filter even if the WWV or IRIG signals are lost. However, the interface is provided the last reference time when the signals were received and increases the dispersion as expected with an ordinary peer.&lt;/p&gt;
&lt;p&gt;The best way to understand how the clock drivers work is to study the &lt;tt&gt;ntp_refclock.c&lt;/tt&gt; module and one of the drivers already implemented, such as &lt;tt&gt;refclock_wwvb.c&lt;/tt&gt;. Routines &lt;tt&gt;refclock_transmit()&lt;/tt&gt; and &lt;tt&gt;refclock_receive()&lt;/tt&gt; maintain the peer variables in a state analogous to a network peer and pass received data on through the clock filters. Routines &lt;tt&gt;refclock_peer()&lt;/tt&gt; and &lt;tt&gt;refclock_unpeer()&lt;/tt&gt; initialize and terminate reference clock associations, should this ever be necessary. A set of utility routines is included to open serial devices, process sample data, edit input lines to extract embedded timestamps and to perform various debugging functions.&lt;/p&gt;
&lt;p&gt;The main interface used by these routines is the &lt;tt&gt;refclockproc&lt;/tt&gt; structure, which contains for most drivers the decimal equivalents of the year, day, month, hour, second and nanosecond decoded from the radio timecode. Additional information includes the receive timestamp, reference timestamp, exception reports, statistics tallies, etc. The support routines are passed a pointer to the &lt;tt&gt;peer&lt;/tt&gt; structure, which is used for all peer-specific processing and contains a pointer to the &lt;tt&gt;refclockproc&lt;/tt&gt; structure, which in turn contains a pointer to the unit structure, if used. For legacy purposes, a table &lt;tt&gt;typeunit[type][unit]&lt;/tt&gt; contains the peer structure pointer for each configured clock type and unit. This structure should not be used for new implementations.&lt;/p&gt;
&lt;p&gt;The reference clock interface supports auxiliary functions to support in-stream timestamping, pulse-per-second (PPS) interfacing and precision time kernel support. In most cases the drivers do not need to be aware of them, since they are detected at autoconfigure time and loaded automatically when the device is opened. These include the &lt;tt&gt;tty_clk&lt;/tt&gt; STREAMS module and &lt;tt&gt;ppsapi&lt;/tt&gt; PPS interface described in the &lt;a href=&#34;/archives/4.2.0/ldisc&#34;&gt;Line Disciplines and Streams Modules&lt;/a&gt; page. The &lt;tt&gt;tty_clk&lt;/tt&gt; module reduces latency errors due to the operating system and serial port code in slower systems. The &lt;tt&gt;ppsapi&lt;/tt&gt; PPS interface replaces the &lt;tt&gt;ppsclock&lt;/tt&gt; STREAMS module and is expected to become the IETF standard cross-platform interface for PPS signals. In either case, the PPS signal can be connected via a level converter/pulse generator described in the &lt;a href=&#34;/archives/4.2.0/pps&#34;&gt;Pulse-per-second (PPS) Signal Interfacing&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;Radio and modem reference clocks by convention have addresses in the form &lt;tt&gt;127.127.&lt;em&gt;t&lt;/em&gt;.&lt;em&gt;u&lt;/em&gt;&lt;/tt&gt;, where &lt;em&gt;t&lt;/em&gt; is the clock type and &lt;em&gt;u&lt;/em&gt; in the range 0-3 is used to distinguish multiple instances of clocks of the same type. Most clocks require a serial or parallel port or special bus peripheral. The particular device is normally specified by adding a soft link &lt;tt&gt;/dev/device_d_d&lt;/tt&gt; to the particular hardware device involved, where &lt;tt&gt;&lt;em&gt;d&lt;/em&gt;&lt;/tt&gt; corresponds to the unit number.&lt;/p&gt;
&lt;p&gt;By convention, reference clock drivers are named in the form &lt;tt&gt;refclock__xxxx_.c&lt;/tt&gt;, where _xxxx_ is a unique string. Each driver is assigned a unique type number, long-form driver name, short-form driver name and device name. The existing assignments are in the &lt;a href=&#34;/archives/4.2.0/refclock&#34;&gt;Reference Clock Drivers&lt;/a&gt; page and its dependencies. All drivers supported by the particular hardware and operating system are automatically detected in the autoconfigure phase and conditionally compiled. They are configured when the daemon is started according to the configuration file, as described in the &lt;a href=&#34;/archives/4.2.0/config&#34;&gt;Configuration Options&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;The standard clock driver interface includes a set of common support routines some of which do such things as start and stop the device, open the serial port, and establish special functions such as PPS signal support. Other routines read and write data to the device and process time values. Most drivers need only a little customizing code to, for instance, transform idiosyncratic timecode formats to standard form, poll the device as necessary, and handle exception conditions. A standard interface is available for remote debugging and monitoring programs, such as &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt;, as well as the &lt;tt&gt;filegen&lt;/tt&gt; facility, which can be used to record device status on a continuous basis.&lt;/p&gt;
&lt;p&gt;The general organization of a typical clock driver includes a receive-interrupt routine to read a timecode from the I/O buffer and convert to internal format, generally in days, hours, minutes, seconds and fraction. Some timecode formats include provisions for leap-second warning and determine the clock hardware and software health. The interrupt routine then calls &lt;tt&gt;refclock_process()&lt;/tt&gt; with these data and the timestamp captured at the on-time character of the timecode. This routine saves each sample as received in a circular buffer, which can store from a few up to 60 samples, in cases where the timecodes arrive one per second.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;refclock_transmit()&lt;/tt&gt; routine in the interface is called by the system at intervals defined by the poll interval in the peer structure, generally 64 s. This routine in turn calls the transmit poll routine in the driver. In the intended design, the driver calls the &lt;tt&gt;refclock_receive()&lt;/tt&gt; to process the offset samples that have accumulated since the last poll and produce the final offset and variance. The samples are processed by recursively discarding median outlyers until about 60 percent of samples remain, then averaging the surviving samples. When a reference clock must be explicitly polled to produce a timecode, the driver can reset the poll interval so that the poll routine is called a specified number of times at 1-s intervals.&lt;/p&gt;
&lt;p&gt;The interface code and this documentation have been developed over some time and required not a little hard work converting old drivers, etc. Should you find success writing a driver for a new radio or modem service, please consider contributing it to the common good. Send the driver file itself and patches for the other files to Dave Mills (&lt;a href=&#34;mailto:mills@udel.edu&#34;&gt;mills@udel.edu&lt;/a&gt;).&lt;/p&gt;
&lt;h4 id=&#34;conventions-fudge-factors-and-flags&#34;&gt;Conventions, Fudge Factors and Flags&lt;/h4&gt;
&lt;p&gt;Most drivers support manual or automatic calibration for systematic offset bias using values encoded in the &lt;tt&gt;fudge&lt;/tt&gt; configuration command. By convention, the &lt;tt&gt;time1&lt;/tt&gt; value defines the calibration offset in seconds. For those drivers that support statistics collection using the &lt;tt&gt;filegen&lt;/tt&gt; utility and the &lt;tt&gt;clockstats&lt;/tt&gt; file, the &lt;tt&gt;flag4&lt;/tt&gt; switch enables the utility. When a PPS signal is available, a special automatic calibration facility is provided. If the &lt;tt&gt;flag1&lt;/tt&gt; switch is set and the PPS signal is actively disciplining the system time, the calibration value is automatically adjusted to maintain a residual offset of zero. Should the PPS signal or the prefer peer fail, the adjustment is frozen and the remaining drivers continue to discipline the system clock with a minimum of residual error.&lt;/p&gt;
&lt;h4 id=&#34;files-which-need-to-be-changed&#34;&gt;Files Which Need to be Changed&lt;/h4&gt;
&lt;p&gt;A new reference clock implementation needs to supply, in addition to the driver itself, several changes to existing files.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;./include/ntp.h&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The reference clock type defines are used in many places. Each driver is assigned a unique type number. Unused numbers are clearly marked in the list. A unique &lt;tt&gt;REFCLK__xxxx_&lt;/tt&gt; identification code should be recorded in the list opposite its assigned type number.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;./libntp/clocktypes.c&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The &lt;tt&gt;./libntp/clktype&lt;/tt&gt; array is used by certain display functions. A unique short-form name of the driver should be entered together with its assigned identification code.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;./ntpd/ntp_control.c&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The &lt;tt&gt;clocktypes&lt;/tt&gt; array is used for certain control message displays functions. It should be initialized with the reference clock class assigned to the driver, as per the NTP specification RFC-1305. See the &lt;tt&gt;./include/ntp_control.h&lt;/tt&gt; header file for the assigned classes.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;./ntpd/refclock_conf.c&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This file contains a list of external structure definitions which are conditionally defined. A new set of entries should be installed similar to those already in the table. The &lt;tt&gt;refclock_conf&lt;/tt&gt; array is a set of pointers to transfer vectors in the individual drivers. The external name of the transfer vector should be initialized in correspondence with the type number.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;./configure.in&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This is a configuration file used by the autoconfigure scheme. Add lines similar to the following:&lt;/p&gt;
&lt;pre&gt;  AC_MSG_CHECKING(FOO clock_description)
  AC_ARG_ENABLE(FOO,
      AC_HELP_STRING([--enable-FOO], [x clock_description]),
      [ntp_ok=$enableval], [ntp_ok=$ntp_eac])
  if test &#34;$ntp_ok&#34; = &#34;yes&#34;; then
      ntp_refclock=yes
      AC_DEFINE(CLOCK_FOO, 1, [Foo clock?])
  fi
  AC_MSG_RESULT($ntp_ok)
&lt;/pre&gt;
&lt;p&gt;(Note that &lt;tt&gt;$ntp_eac&lt;/tt&gt; is the value from &lt;tt&gt;&amp;ndash;{dis,en}able-all-clocks&lt;/tt&gt; for non-PARSE clocks and &lt;tt&gt;$ntp_eacp&lt;/tt&gt; is the value from &lt;tt&gt;&amp;ndash;{dis,en}able-parse-clocks&lt;/tt&gt; for PARSE clocks. See the documentation on the autoconf and automake tools from the GNU distributions.)&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;./ntpd/Makefile.am&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This is the makefile prototype used by the autoconfigure scheme. Add the driver file name to the entries already in the &lt;tt&gt;ntpd_SOURCES&lt;/tt&gt; list.&lt;/p&gt;
&lt;p&gt;Do the following sequence of commands:&lt;/p&gt;
&lt;pre&gt;  autoreconf
  configure
&lt;/pre&gt;
&lt;p&gt;or simply run &lt;tt&gt;make&lt;/tt&gt;, which will do this command sequence automatically.&lt;/p&gt;
&lt;h4 id=&#34;interface-routine-overview&#34;&gt;Interface Routine Overview&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;refclock_newpeer&lt;/tt&gt; - initialize and start a reference clock&lt;/dt&gt;
&lt;p&gt;This routine allocates and initializes the interface structure which supports a reference clock in the form of an ordinary NTP peer. A driver-specific support routine completes the initialization, if used. Default peer variables which identify the clock and establish its reference ID and stratum are set here. It returns one if success and zero if the clock address is invalid or already running, insufficient resources are available or the driver declares a bum rap.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;refclock_unpeer&lt;/tt&gt; - shut down a clock&lt;/dt&gt;
&lt;p&gt;This routine is used to shut down a clock and return its resources to the system.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;refclock_transmit&lt;/tt&gt; - simulate the transmit procedure&lt;/dt&gt;
&lt;p&gt;This routine implements the NTP transmit procedure for a reference clock. This provides a mechanism to call the driver at the NTP poll interval, as well as provides a reachability mechanism to detect a broken radio or other madness.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;refclock_sample&lt;/tt&gt; - process a pile of samples from the clock&lt;/dt&gt;
&lt;p&gt;This routine converts the timecode in the form days, hours, minutes, seconds, milliseconds/microseconds to internal timestamp format. It then calculates the difference from the receive timestamp and assembles the samples in a shift register. It implements a recursive median filter to suppress spikes in the data, as well as determine a rough dispersion estimate. A configuration constant time adjustment &lt;tt&gt;fudgetime1&lt;/tt&gt; can be added to the final offset to compensate for various systematic errors. The routine returns one if success and zero if failure due to invalid timecode data or very noisy offsets.&lt;/p&gt;
&lt;p&gt;Note that no provision is included for the year, as provided by some (but not all) radio clocks. Ordinarily, the year is implicit in the Unix file system and hardware/software clock support, so this is ordinarily not a problem. Nevertheless, the absence of the year should be considered more a bug than a feature and may be supported in future.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;refclock_receive&lt;/tt&gt; - simulate the receive and packet procedures&lt;/dt&gt;
&lt;p&gt;This routine simulates the NTP receive and packet procedures for a reference clock. This provides a mechanism in which the ordinary NTP filter, selection and combining algorithms can be used to suppress misbehaving radios and to mitigate between them when more than one is available for backup.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;refclock_gtlin&lt;/tt&gt; - groom next input line and extract timestamp&lt;/dt&gt;
&lt;p&gt;This routine processes the timecode received from the clock and removes the parity bit and control characters. If a timestamp is present in the timecode, as produced by the &lt;tt&gt;tty_clk&lt;/tt&gt; line discipline/streams module, it returns that as the timestamp; otherwise, it returns the buffer timestamp. The routine return code is the number of characters in the line.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;refclock_open&lt;/tt&gt; - open serial port for reference clock&lt;/dt&gt;
&lt;p&gt;This routine opens a serial port for I/O and sets default options. It returns the file descriptor if success and zero if failure.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;refclock_ioctl&lt;/tt&gt; - set serial port control functions&lt;/dt&gt;
&lt;p&gt;This routine attempts to hide the internal, system-specific details of serial ports. It can handle POSIX (&lt;tt&gt;termios&lt;/tt&gt;), SYSV (&lt;tt&gt;termio&lt;/tt&gt;) and BSD (&lt;tt&gt;sgtty&lt;/tt&gt;) interfaces with varying degrees of success. The routine sets up the &lt;tt&gt;tty_clk, chu_clk&lt;/tt&gt; and &lt;tt&gt;ppsclock&lt;/tt&gt; streams module/line discipline, if compiled in the daemon and requested in the call. The routine returns one if success and zero if failure.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;refclock_control&lt;/tt&gt; - set and/or return clock values&lt;/dt&gt;
&lt;p&gt;This routine is used mainly for debugging. It returns designated values from the interface structure that can be displayed using ntpdc and the clockstat command. It can also be used to initialize configuration variables, such as &lt;tt&gt;fudgetimes, fudgevalues,&lt;/tt&gt; reference ID and stratum.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;refclock_buginfo&lt;/tt&gt; - return debugging info&lt;/dt&gt;
&lt;p&gt;This routine is used mainly for debugging. It returns designated values from the interface structure that can be displayed using &lt;tt&gt;ntpdc&lt;/tt&gt; and the &lt;tt&gt;clkbug&lt;/tt&gt; command.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;/archives/pic/pogo1a.gif&#34; alt=&#34;gif&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Kernel Model for Precision Timekeeping</title>
      <link>/archives/4.2.0/kern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/kern/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice61.gif&#34; alt=&#34;gif&#34;&gt; &lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;from &lt;em&gt;Pogo&lt;/em&gt;, Walt Kelly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Alice finds the kernel a house of cards.&lt;/p&gt;
&lt;p&gt;Last update: 20:26 UTC Monday, December 02, 2002&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The technical report &lt;sup&gt;&lt;a href=&#34;#myfootnote2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, which is a major revision and update of RFC-1589 &lt;sup&gt;&lt;a href=&#34;#myfootnote3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;, describes an engineering model for a precision time-of-day function for a generic operating system. The model is based on the principles of disciplined oscillators using phase-lock loops (PLL) and frequency-lock loops (FLL) often found in the engineering literature. The model uses a hybrid PLL/FLL discipline algorithm implemented in the kernel. The algorithm, which is very similar to the algorithm implemented in the NTP daemon, provides automatic time and frequency steering with update intervals from a few seconds to tens of minutes.&lt;/p&gt;
&lt;p&gt;The hybrid PLL/FLL code described in &lt;sup&gt;&lt;a href=&#34;#myfootnote2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; is included in Solaris and Digital/Compaq/HP Tru64. It includes two system calls &lt;tt&gt;ntp_gettime()&lt;/tt&gt; and &lt;tt&gt;ntp_adjtime()&lt;/tt&gt; and can discipline the system clock with microsecond resolution. However, newer hardware and kernels with the same system calls can discipline the clock with nanosecond resolution. The new code described in &lt;sup&gt;&lt;a href=&#34;#myfootnote1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; is available for Linux, FreeBSD, SunOS and Tru64; however, only the Linux and FreeBSD implementations, which do not include licensed code, are readily available. The software and documentation, including a simulator used to verify correct behavior, but not involving licensed code, is available at &lt;a href=&#34;https://www.eecis.udel.edu/~ntp/ntp_spool/software/nanokernel.tar.gz&#34;&gt;nanokernel.tar.gz&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The model also changes the way the system clock is adjusted in time and frequency relative to an external precision timing source, such as described in the &lt;a href=&#34;/archives/4.2.0/pps&#34;&gt;Pulse-per-second (PPS) Signal Interfacing&lt;/a&gt; page. The NTP software daemon uses the PPS to provide synchronization limited in principle only by the accuracy and stability of the external timing source.&lt;/p&gt;
&lt;h4 id=&#34;footnotes&#34;&gt;Footnotes&lt;/h4&gt;
&lt;p&gt;&lt;a name=&#34;myfootnote1&#34;&gt;1&lt;/a&gt; Mills, D.L., and P.-H. Kamp. The nanokernel. &lt;em&gt;Proc. Precision Time and Time Interval (PTTI) Applications and Planning Meeting&lt;/em&gt; (Reston VA, November 2000). Paper: &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/database/papers/nano/nano2.ps&#34;&gt;PostScript&lt;/a&gt; | &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/database/papers/nano/nano2.pdf&#34;&gt;PDF&lt;/a&gt;, Slides: &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/database/brief/nano/nano.ps&#34;&gt;PostScript&lt;/a&gt; | &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/database/brief/nano/nano.pdf&#34;&gt;PDF&lt;/a&gt; | &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/database/brief/nano/nano.ppt&#34;&gt;PowerPoint&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;myfootnote2&#34;&gt;2&lt;/a&gt;  Mills, D.L. Unix kernel modifications for precision time synchronization. Electrical Engineering Department Report 94-10-1, University of Delaware, October 1994, 24 pp. Abstract: &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/database/reports/kern/kerna.ps&#34;&gt;PostScript&lt;/a&gt; | &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/database/reports/kern/kerna.pdf&#34;&gt;PDF&lt;/a&gt;, Body: &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/database/reports/kern/kernb.ps&#34;&gt;PostScript&lt;/a&gt; | &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/database/reports/kern/kernb.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;myfootnote3&#34;&gt;3&lt;/a&gt;  Mills, D.L. A kernel model for precision timekeeping. Network Working Group Report RFC-1589, University of Delaware, March 1994. 31 pp. &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/database/rfc/rfc1589.txt&#34;&gt;ASCII&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Line Disciplines and Streams Modules</title>
      <link>/archives/4.2.0/ldisc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/ldisc/</guid>
      <description>
        
        
        &lt;p&gt;Last update: Monday, January 20, 2003&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ldisc/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ldisc/#tttty_clktt-line-disciplinestreams-module&#34;&gt;&lt;tt&gt;tty_clk&lt;/tt&gt; Line Discipline/Streams Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ldisc/#tttiocdcdtimestamptt-ioctl-in-freebsd&#34;&gt;&lt;tt&gt;TIOCDCDTIMESTAMP&lt;/tt&gt; ioctl in FreeBSD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ldisc/#ttppsclocktt-streams-module-deprecated&#34;&gt;&lt;tt&gt;ppsclock&lt;/tt&gt; Streams Module (deprecated)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ldisc/#tttiocsppstt-and-tttiocgetppsevtt-ioctls-in-solaris&#34;&gt;&lt;tt&gt;TIOCSPPS&lt;/tt&gt; and &lt;tt&gt;TIOCGETPPSEV&lt;/tt&gt; ioctls in Solaris&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ldisc/#tttty_chutt-line-disciplinestreams-module-deprecated&#34;&gt;&lt;tt&gt;tty_chu&lt;/tt&gt; Line Discipline/Streams Module (deprecated)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;Most radio and modem clocks used for a primary (stratum-1) NTP server utilize serial ports operating at speeds of 9600 baud or greater. The intrinsic delay and jitter contributed by the serial port hardware and software driver can accumulate up to a millisecond in newer Unix systems and tens of milliseconds in older ones. In order to reduce the effects of delay and jitter, a set of special line disciplines, stream modules and operating system calls (&lt;tt&gt;ioctls&lt;/tt&gt;) can be configured in some Unix kernels. These routines intercept special characters or signals provided by the radio or modem clock and save a timestamp for later processing.&lt;/p&gt;
&lt;p&gt;The routines provide two important functions. Some insert a timestamp in the receive data stream upon occurrence of a designated character or characters at the serial interface. This can be used to timestamp an on-time character produced by a radio clock, for example. Other routines support an application program interface for pulse-per-second (PPS) signals generated by some radio clocks and laboratory instruments. These routines are normally accessed through the PPSAPI application program interface described below.&lt;/p&gt;
&lt;p&gt;The routines can be compiled in the kernel in older BSD-derived systems, or installed as System V streams modules and either compiled in the kernel or dynamically loaded when required. In either case, they require minor changes in some kernel files and in the NTP daemon &lt;tt&gt;ntpd&lt;/tt&gt;. The streams modules can be pushed and popped from the streams stack using conventional System V streams program primitives. Note that some Unix kernels do not support line disciplines and some do not support System V streams. The routines described here are known to work correctly with the Unix kernels called out in the descriptions, but have not been tested for other kernels.&lt;/p&gt;
&lt;h4 id=&#34;tttty_clktt-line-disciplinestreams-module&#34;&gt;&lt;tt&gt;tty_clk&lt;/tt&gt; Line Discipline/Streams Module&lt;/h4&gt;
&lt;p&gt;This routine intercepts characters received from the serial port and passes unchanged all except a set of designated characters to the generic serial port discipline. For each of the exception characters, the character is inserted in the receiver buffer followed by a local timestamp in Unix &lt;tt&gt;timeval&lt;/tt&gt; format. Both &lt;tt&gt;select()&lt;/tt&gt; and &lt;tt&gt;SIGIO&lt;/tt&gt; are supported by the routine. Support for this routine is automatically detected during the NTP build process and interface code compiled as necessary.&lt;/p&gt;
&lt;p&gt;There are two versions of the &lt;tt&gt;tty_clk&lt;/tt&gt; routine. The &lt;tt&gt;tty_clk.c&lt;/tt&gt; line discipline is designed for older BSD systems and is compiled in the kernel. The &lt;tt&gt;tty_clk_STREAMS.c&lt;/tt&gt; is designed for System V streams, in which case it can be either compiled in the kernel or dynamically loaded. Since these programs are small, unobtrusive, and do nothing unless specifically enabled by an application program, it probably doesn&amp;rsquo;t matter which version is chosen. Instructions on how to configure and build a kernel supporting either of these routines is in the &lt;tt&gt;README&lt;/tt&gt; file in the &lt;tt&gt;./kernel&lt;/tt&gt; directory.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;tty_clk&lt;/tt&gt; routine defines a new ioctl &lt;tt&gt;CLK_SETSTR&lt;/tt&gt;, which takes a pointer to a string of no more than 32 characters. Until the first &lt;tt&gt;CLK_SETSTR&lt;/tt&gt; is performed, the routine will simply pass through characters. Once it is passed a string by &lt;tt&gt;CLK_SETSTR&lt;/tt&gt;, any character in that string will be immediately followed by a timestamp in Unix &lt;tt&gt;timeval&lt;/tt&gt; format. You can change the string whenever you want by doing another &lt;tt&gt;CLK_SETSTR&lt;/tt&gt;. The character must be an exact, 8 bit match. The character &lt;code&gt;\000&lt;/code&gt; cannot, be used, as it is the string terminator. Passing an empty string to &lt;tt&gt;CLK_SETSTR&lt;/tt&gt; turns off timestamping. Passing &lt;tt&gt;NULL&lt;/tt&gt; may produce surprising results.&lt;/p&gt;
&lt;h4 id=&#34;tttiocdcdtimestamptt-ioctl-in-freebsd&#34;&gt;&lt;tt&gt;TIOCDCDTIMESTAMP&lt;/tt&gt; ioctl in FreeBSD&lt;/h4&gt;
&lt;p&gt;This ioctl is included in FreeBSD 2.2 and later. It causes a timestamp to be inserted in the serial port receive data stream when the data carrier detect (DCD) signal is asserted. This is useful for those radio clocks that indicate the on-time epoch by means of a modem control signal. It is not recommended that this be used for PPS timestamps, as this function is available using the PPS application program interface included in FreeBSD 3.4 and later.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;TIOCDCDTIMESTAMP&lt;/tt&gt; ioctl() is detected and compiled automatically on FreeBSD systems if available. With FreeBSD 2.2 the measured delay between activation of the DCD signal and the time the timestamp is captured on a 66MHz 486DX2 is 19 &lt;font face=&#34;Symbol&#34;&gt;m&lt;/font&gt;s and on a 100MHz Pentium is 6 &lt;font face=&#34;Symbol&#34;&gt;m&lt;/font&gt;s.&lt;/p&gt;
&lt;h4 id=&#34;ttppsclocktt-streams-module-deprecated&#34;&gt;&lt;tt&gt;ppsclock&lt;/tt&gt; Streams Module (deprecated)&lt;/h4&gt;
&lt;p&gt;This routine is a streams module which causes a timestamp to be captured when the DCD signal is asserted. It is normally used in connection with a PPS signal generated by some radio clocks. However, it is normally used only by the PPSAPI interface and SunOS 4.1.3 and should be avoided in other contexts. Instructions on how to configure and build a kernel supporting either of these routines is in the &lt;tt&gt;README&lt;/tt&gt; file in the &lt;tt&gt;./kernel&lt;/tt&gt; directory.&lt;/p&gt;
&lt;p&gt;The ppsclock streams module implements the &lt;tt&gt;CIOGETEV&lt;/tt&gt; ioctl, which takes a pointer to the structure&lt;/p&gt;
&lt;pre&gt;struct ppsclockev {
     struct timeval tv;
     u_int serial;
};
&lt;/pre&gt;
&lt;p&gt;The &lt;tt&gt;ppsclock&lt;/tt&gt; module is pushed on the streams stack of the serial port connected to the DCD line. At each positive-going edge of the PPS signal, the routine latches the current local timestamp and increments a counter. At each &lt;tt&gt;CIOGETEV&lt;/tt&gt; ioctl call, the current values of the timestamp and counter are returned in the &lt;tt&gt;ppsclockev&lt;/tt&gt; structure.&lt;/p&gt;
&lt;h4 id=&#34;tttiocsppstt-and-tttiocgetppsevtt-ioctls-in-solaris&#34;&gt;&lt;tt&gt;TIOCSPPS&lt;/tt&gt; and &lt;tt&gt;TIOCGETPPSEV&lt;/tt&gt; ioctls in Solaris&lt;/h4&gt;
&lt;p&gt;These ioctls are included in Solaris 2.4 and later. They implement the same function as the &lt;tt&gt;ppsclock&lt;/tt&gt; streams module, but are implemented as integrated system calls independent of the streams facility. They are normally used in connection with a pulse-per-second (PPS) signal generated by some radio clocks. However, these ioctls are normally used only by the PPSAPI interface and should be avoided in other contexts. See the Sun documentation for the calling sequence and return values.&lt;/p&gt;
&lt;p&gt;Users are cautioned that these ioctls function improperly in Solaris versions prior to 2.8 with patch Generic_108528-02.&lt;/p&gt;
&lt;h4 id=&#34;tttty_chutt-line-disciplinestreams-module-deprecated&#34;&gt;&lt;tt&gt;tty_chu&lt;/tt&gt; Line Discipline/Streams Module (deprecated)&lt;/h4&gt;
&lt;p&gt;This routine is a special purpose line discipline for receiving a special timecode broadcast by Canadian time and frequency standard station CHU. It has been removed from the distribution since its function has been replaced by the &lt;a href=&#34;/archives/drivers/driver7&#34;&gt;Radio CHU Audio Demodulator/Decoder (type 7)&lt;/a&gt; clock driver.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Miscellaneous Options</title>
      <link>/archives/4.2.0/miscopt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/miscopt/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/boom3.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;from &lt;em&gt;Pogo&lt;/em&gt;, Walt Kelly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We have three, now looking for more.&lt;/p&gt;
&lt;p&gt;Last update: 01:50 UTC Friday, May 02, 2003&lt;/p&gt;
&lt;hr&gt;
&lt;dt&gt;&lt;tt&gt;broadcastdelay _seconds_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The broadcast and multicast modes require a special calibration to determine the network delay between the local and remote servers. Ordinarily, this is done automatically by the initial protocol exchanges between the client and server. In some cases, the calibration procedure may fail due to network or server access controls, for example. This command specifies the default delay to be used under these circumstances. Typically (for Ethernet), a number between 0.003 and 0.007 seconds is appropriate. The default when this command is not used is 0.004 seconds.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;calldelay _delay_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This option controls the delay in seconds between the first and second packets sent in burst or iburst mode to allow additional time for a modem or ISDN call to complete.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;driftfile _driftfile_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command specifies the complete path and name of the file used to record the frequency of the local clock oscillator. This is the same operation as the &lt;tt&gt;-f&lt;/tt&gt; command linke option. If the file exists, it is read at startup in order to set the initial frequency and then updated once per hour with the current frequency computed by the daemon. If the file name is specified, but the file itself does not exist, the starts with an initial frequency of zero and creates the file when writing it for the first time. If this command is not given, the daemon will always start with an initial frequency of zero.&lt;/p&gt;
&lt;p&gt;The file format consists of a single line containing a single floating point number, which records the frequency offset measured in parts-per-million (PPM). The file is updated by first writing the current drift value into a temporary file and then renaming this file to replace the old version. This implies that &lt;tt&gt;ntpd&lt;/tt&gt; must have write permission for the directory the drift file is located in, and that file system links, symbolic or otherwise, should be avoided.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;enable [ auth | bclient | calibrate | kernel | monitor | ntp | pps | stats]&lt;/tt&gt;  
&lt;tt&gt;disable [ auth | bclient | calibrate | kernel | monitor | ntp | pps | stats ]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Provides a way to enable or disable various system options. Flags not mentioned are unaffected. Note that all of these flags can be controlled remotely using the &lt;a href=&#34;/archives/4.2.0/ntpdc&#34;&gt;&lt;tt&gt;ntpdc&lt;/tt&gt;&lt;/a&gt; utility program.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;auth&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Enables the server to synchronize with unconfigured peers only if the peer has been correctly authenticated using either public key or private key cryptography. The default for this flag is enable.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;bclient&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Enables the server to listen for a message from a broadcast or multicast server, as in the &lt;tt&gt;multicastclient&lt;/tt&gt; command with default address. The default for this flag is disable.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;calibrate&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Enables the calibrate feature for reference clocks. The default for this flag is disable.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;kernel&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Enables the kernel time discipline, if available. The default for this flag is enable if support is available, otherwise disable.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;monitor&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Enables the monitoring facility. See the &lt;tt&gt;ntpdc&lt;/tt&gt; program and the &lt;tt&gt;monlist&lt;/tt&gt; command or further information. The default for this flag is enable.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;ntp&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Enables time and frequency discipline. In effect, this switch opens and closes the feedback loop, which is useful for testing. The default for this flag is enable.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;pps&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Enables the pulse-per-second (PPS) signal when frequency and time is disciplined by the precision time kernel modifications. See the &lt;a href=&#34;/archives/4.2.0/kern&#34;&gt;A Kernel Model for Precision Timekeeping&lt;/a&gt; page for further information. The default for this flag is disable.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;stats&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Enables the statistics facility. See the &lt;a href=&#34;/archives/4.2.0/monopt&#34;&gt;Monitoring Options&lt;/a&gt; page for further information. The default for this flag is disable&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;includefile _includefile_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command allows additional configuration commands to be included from a separate file. Include files may be nested to a depth of five; upon reaching the end of any include file, command processing resumes in the previous configuration file. This option is useful for sites that run &lt;tt&gt;ntpd&lt;/tt&gt; on multiple hosts, with (mostly) common options (e.g., a restriction list).&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;logconfig _configkeyword_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command controls the amount and type of output written to the system &lt;tt&gt;syslog&lt;/tt&gt; facility or the alternate &lt;tt&gt;logfile&lt;/tt&gt; log file. All &lt;em&gt;&lt;tt&gt;configkeyword&lt;/tt&gt;&lt;/em&gt; keywords can be prefixed with &lt;tt&gt;=&lt;/tt&gt;, &lt;tt&gt;+&lt;/tt&gt; and &lt;tt&gt;-&lt;/tt&gt;, where &lt;tt&gt;=&lt;/tt&gt; sets the &lt;tt&gt;syslogmask&lt;/tt&gt;, &lt;tt&gt;+&lt;/tt&gt; adds and &lt;tt&gt;-&lt;/tt&gt; removes messages. &lt;tt&gt;syslog messages&lt;/tt&gt; can be controlled in four classes (&lt;tt&gt;clock&lt;/tt&gt;, &lt;tt&gt;peer&lt;/tt&gt;, &lt;tt&gt;sys&lt;/tt&gt; and &lt;tt&gt;sync&lt;/tt&gt;). Within these classes four types of messages can be controlled: informational messages (&lt;tt&gt;info&lt;/tt&gt;), event messages (&lt;tt&gt;events&lt;/tt&gt;), statistics messages (&lt;tt&gt;statistics&lt;/tt&gt;) and status messages (&lt;tt&gt;status&lt;/tt&gt;).&lt;/p&gt;
&lt;p&gt;Configuration keywords are formed by concatenating the message class with the event class. The &lt;tt&gt;all&lt;/tt&gt; prefix can be used instead of a message class. A message class may also be followed by the &lt;tt&gt;all&lt;/tt&gt; keyword to enable/disable all messages of the respective message class. By default, &lt;tt&gt;logconfig&lt;/tt&gt; output is set to &lt;tt&gt;allsync&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Thus, a minimal log configuration could look like this:&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;logconfig=syncstatus +sysevents&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    This would just list the synchronizations state of &lt;tt&gt;ntpd&lt;/tt&gt; and the major system events. For a simple reference server, the following minimum message configuration could be useful:&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;logconfig=allsync +clockall&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    This configuration will list all clock information and synchronization information. All other events and messages about peers, system events and so on is suppressed.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;logfile _logfile_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command specifies the location of an alternate log file to be used instead of the default system &lt;tt&gt;syslog&lt;/tt&gt; facility. This is the same operation as the &lt;tt&gt;-l&lt;/tt&gt; command line option.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;setvar _variable_ [default]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command adds an additional system variable. These variables can be used to distribute additional information such as the access policy. If the variable of the form &lt;tt&gt;&lt;em&gt;name&lt;/em&gt; = &lt;em&gt;value&lt;/em&gt;&lt;/tt&gt; is followed by the &lt;tt&gt;default&lt;/tt&gt; keyword, the variable will be listed as part of the default system variables (&lt;tt&gt;ntpq rv&lt;/tt&gt; command). These additional variables serve informational purposes only. They are not related to the protocol other that they can be listed. The known protocol variables will always override any variables defined via the &lt;tt&gt;setvar&lt;/tt&gt; mechanism. There are three special variables that contain the names of all variable of the same group. The &lt;tt&gt;sys_var_list&lt;/tt&gt; holds the names of all system variables. The &lt;tt&gt;peer_var_list&lt;/tt&gt; holds the names of all peer variables and the &lt;tt&gt;clock_var_list&lt;/tt&gt; holds the names of the reference clock variables.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;tinker [ allan _allan_ | dispersion _dispersion_ | freq _freq_ | huffpuff _huffpuff_ | panic _panic_ | step _step_ | stepout _stepout_ ]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command can be used to alter several system variables in very exceptional circumstances. It should occur in the configuration file before any other configuration options. The default values of these variables have been carefully optimized for a wide range of network speeds and reliability expectations. In general, they interact in intricate ways that are hard to predict and some combinations can result in some very nasty behavior. Very rarely is it necessary to change the default values; but, some folks can&amp;rsquo;t resist twisting the knobs anyway and this command is for them. Emphasis added: twisters are on their own and can expect no help from the support group.&lt;/p&gt;
&lt;p&gt;The variables operate as follows:&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;allan &lt;em&gt;allan&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    The argument becomes the new value for the Allan intercept, which is a parameter of the PLL/FLL clock discipline algorithm. The value in log2 seconds defaults to 7 (1024 s), which is also the lower limit.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;dispersion &lt;em&gt;dispersion&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    The argument becomes the new value for the dispersion increase rate, normally .000015 s/s.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;freq &lt;em&gt;freq&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    The argument becomes the initial value of the frequency offset in parts-per-million. This overrides the value in the frequency file, if present, and avoids the initial training state if it is not.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;huffpuff &lt;em&gt;huffpuff&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    The argument becomes the new value for the experimental huff-n&#39;-puff filter span, which determines the most recent interval the algorithm will search for a minimum delay. The lower limit is 900 s (15 m), but a more reasonable value is 7200 (2 hours). There is no default, since the filter is not enabled unless this command is given.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;panic &lt;em&gt;panic&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    The argument is the panic threshold, by default 1000 s. If set to zero, the panic sanity check is disabled and a clock offset of any value will be accepted.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;step &lt;em&gt;step&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    The argument is the step threshold, by default 0.128 s. It can be set to any positive number in seconds. If set to zero, step adjustments will never occur. &lt;strong&gt;Note:&lt;/strong&gt; The kernel time discipline is disabled if the step threshold is set to zero or greater than the default.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;stepout &lt;em&gt;stepout&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    The argument is the stepout timeout, which by default is 900 s. It can be set to any positive number in seconds. If set to zero, the stepout pulses will not be suppressed.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;trap _host_address_ [port _port_number_] [interface _interface_address_]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command configures a trap receiver at the given host address and port number for sending messages with the specified local interface address. If the port number is unspecified, a value of 18447 is used. If the interface address is not specified, the message is sent with a source address of the local interface the message is sent through. Note that on a multihomed host the interface used may vary from time to time with routing changes.&lt;/p&gt;
&lt;p&gt;The trap receiver will generally log event messages and other information from the server in a log file. While such monitor programs may also request their own trap dynamically, configuring a trap receiver will ensure that no messages are lost when the server is started.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;ttl _hop_ ...&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command specifies a list of TTL values in increasing order. up to 8 values can be specified. In manycast mode these values are used in turn in an expanding-ring search. The default is eight multiples of 32 starting at 31.&lt;/p&gt;
&lt;h4 id=&#34;files&#34;&gt;Files&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntp.drift&lt;/tt&gt; frequency compensation (PPM)&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Mitigation Rules and the prefer Keyword</title>
      <link>/archives/4.2.0/prefer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/prefer/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice11.gif&#34; alt=&#34;gif&#34;&gt; &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Listen carefully to what I say; it is very complicated.&lt;/p&gt;
&lt;p&gt;Last update: 03:17 AM UTC Monday, October 13, 2003&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/prefer/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/prefer/#the-ttprefertt-peer&#34;&gt;The &lt;tt&gt;prefer&lt;/tt&gt; Peer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/prefer/#peer-classification&#34;&gt;Peer Classification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/prefer/#mitigation-rules&#34;&gt;Mitigation Rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/prefer/#using-the-pulse-per-second-pps-signal&#34;&gt;Using the Pulse-per-Second (PPS) Signal&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;introduction&#34;&gt;Introduction&lt;/h4&gt;
&lt;p&gt;The mechanics of the NTP algorithms which select the best data sample from each available server and the best subset of the server population have been finely crafted to resist network jitter, faults in the network or server operations, and to deliver the best possible accuracy. Most of the time these algorithms do a good job without requiring explicit manual tailoring of the configuration file. However, there are times when the accuracy can be improved by some careful tailoring. The following sections explain how to do this using explicit configuration items and special signals, when available, that are generated by some radio clocks and laboratory instruments.&lt;/p&gt;
&lt;p&gt;In order to provide robust backup sources, primary (stratum-1) servers are usually operated in a diversity configuration, in which the server operates with a number of remote servers in addition to one or more radio or modem clocks. In these configurations the suite of algorithms used in NTP to refine the data from each peer separately and to select and combine the data from a number of servers and clocks. As the result of these algorithms, a set of survivors are identified which can presumably provide the most reliable and accurate time. Ordinarily, the individual clock offsets of the survivors are combined on a weighted average basis to produce an offset used to control the system clock.&lt;/p&gt;
&lt;p&gt;However, because of small but significant systematic time offsets between the survivors, it is in general not possible to achieve the lowest jitter and highest stability in these configurations. This happens because the selection algorithm tends to &lt;em&gt;clockhop&lt;/em&gt; between survivors of substantially the same quality, but showing small systematic offsets between them. In addition, there are a number of configurations involving pulse-per-second (PPS) signals, modem backup services and other special cases, so that a set of mitigation rules becomes necessary to select a single peer from among the survivors. These rules are based on a set of special characteristics of the various remote servers and reference clock drivers specified in the configuration file.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;the-ttprefertt-peer&#34;&gt;The &lt;tt&gt;prefer&lt;/tt&gt; Peer&lt;/h4&gt;
&lt;p&gt;The mitigation rules are designed to provide an intelligent selection between various sources of substantially the same statistical quality without compromising the normal operation of the NTP algorithms. While they have been implemented in NTP Version 4 and will be incorporated in the NTP Version 4 specification when published, they are not in the NTP Version 3 specification RFC-1305. The rules are based on the concept of &lt;em&gt;prefer peer&lt;/em&gt;, which is specified by including the &lt;tt&gt;prefer&lt;/tt&gt; keyword with the associated &lt;tt&gt;server&lt;/tt&gt; or &lt;tt&gt;peer&lt;/tt&gt; command in the configuration file. This keyword can be used with any server or peer, but is most commonly used with a radio clock. While the rules do not forbid it, it does not seem useful to designate more than one peer as preferred, since the additional complexities to mitigate among them do not seem justified from on-air experience.&lt;/p&gt;
&lt;p&gt;The prefer scheme works on the set of peers that have survived the sanity checks and intersection algorithms of the clock selection procedures. Ordinarily, the members of this set can be considered &lt;em&gt;truechimers&lt;/em&gt; and any one of them could in principle provide correct time; however, due to various error contributions, not all can provide the most accurate and stable time. The job of the clustering algorithm, which is invoked at this point, is to select the best subset of the survivors providing the least variance in the combined ensemble average, compared to the variance in each member of the subset separately. The detailed operation of the clustering algorithm, which is given in RFC-1305, is beyond the scope of discussion here. It operates in rounds, where a survivor, presumably the worst of the lot, is discarded in each round until one of several termination conditions is met. An example terminating condition is when the number of survivors is about to be reduced below three.&lt;/p&gt;
&lt;p&gt;In the prefer scheme the clustering algorithm is modified so that the prefer peer is never discarded; on the contrary, its potential removal becomes a termination condition. If the original algorithm were about to toss out the prefer peer, the algorithm terminates immediately. The prefer peer can still be discarded by the sanity checks and intersection algorithm, of course, but it will always survive the clustering algorithm. If it does not survive or for some reason it fails to provide updates, it will eventually become unreachable and the clock selection will remitigate to select the next best source.&lt;/p&gt;
&lt;p&gt;Along with this behavior, the clock selection procedures are modified so that the combining algorithm is not used when a prefer peer is present. Instead, the offset of the prefer peer is used exclusively as the synchronization source. In the usual case involving a radio clock and a flock of remote stratum-1 peers, and with the radio clock designated a prefer peer, the result is that the high quality radio time disciplines the server clock as long as the radio itself remains operational and with valid time, as determined from the remote peers, sanity checks and intersection algorithm.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;peer-classification&#34;&gt;Peer Classification&lt;/h4&gt;
&lt;p&gt;In order to understand the effects of the various intricate schemes involved, it is necessary to understand some arcane details on how the algorithms decide on a synchronization source when more than one source is available. This is done on the basis of a set of explicit mitigation rules, which define special classes of remote serves and local radio clocks as a function of configuration declarations and clock driver type:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The prefer peer is designated using the &lt;tt&gt;prefer&lt;/tt&gt; keyword with the &lt;tt&gt;server&lt;/tt&gt; or &lt;tt&gt;peer&lt;/tt&gt; commands. All other things being equal, this peer will be selected for synchronization over all other survivors of the clock selection procedures.&lt;/li&gt;
&lt;li&gt;When a PPS signal is connected via the PPS Clock Discipline driver (type 22), this is called the &lt;em&gt;PPS peer&lt;/em&gt;. This driver provides precision clock corrections only within one second, so is always operated in conjunction with another server or radio clock driver, which provides the seconds numbering. The PPS peer is active only under conditions explained below.&lt;/li&gt;
&lt;li&gt;When the Undisciplined Local Clock driver (type 1) is configured, this is called the &lt;em&gt;local clock peer&lt;/em&gt;. This is used either as a backup reference source (stratum greater than zero), should all other synchronization sources fail, or as the primary reference source (stratum zero) in cases where the kernel time is disciplined by some other means of synchronization, such as the NIST &lt;tt&gt;lockclock&lt;/tt&gt; scheme, or another synchronization protocol, such as the Digital Time Synchronization Service (DTSS).&lt;/li&gt;
&lt;li&gt;When a modem driver such as the Automated Computer Time Service driver (type 18) is configured, this is called the &lt;em&gt;modem peer&lt;/em&gt;. This is used either as a backup reference source, should all other primary sources fail, or as the (only) primary reference source.&lt;/li&gt;
&lt;li&gt;Where support is available, the PPS signal may be processed directly by the kernel, as described in the &lt;a href=&#34;/archives/4.2.0/kern&#34;&gt;A Kernel Model for Precision Timekeeping&lt;/a&gt; page. This is called the &lt;em&gt;kernel discipline&lt;/em&gt;. The PPS signal can discipline the kernel in both frequency and time. The frequency discipline is active as long as the PPS interface device and signal itself is operating correctly, as determined by the kernel algorithms. The time discipline is active only under conditions explained below.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Reference clock drivers operate in the manner described in the &lt;a href=&#34;/archives/4.2.0/refclock&#34;&gt;Reference Clock Drivers&lt;/a&gt; page and its dependencies. The drivers are ordinarily operated at stratum zero, so that as the result of ordinary NTP operations, the server itself operates at stratum one, as required by the NTP specification. In some cases described below, the driver is intentionally operated at an elevated stratum, so that it will be selected only if no other survivor is present with a lower stratum. In the case of the PPS peer or kernel time discipline, these sources appear active only if the prefer peer has survived the intersection and clustering algorithms, as described below, and its clock offset relative to the current local clock is less than a specified value, currently 128 ms.&lt;/p&gt;
&lt;p&gt;The modem clock drivers are a special case. Ordinarily, the update interval between modem calls to synchronize the system clock is many times longer than the interval between polls of either a remote server or local radio clock. In order to provide the best stability, the operation of the clock discipline algorithm changes gradually from a phase-lock mode at the shorter update intervals to a frequency-lock mode at the longer update intervals. If remote servers or local radio clocks together with a modem peer operate in the same client, the following things can happen.&lt;/p&gt;
&lt;p&gt;First the clock selection algorithm can select one or more remote servers or local radio clocks and the clock discipline algorithm will optimize for the shorter update intervals. Then, the selection algorithm can select the modem peer, which requires a much different optimization. The intent in the design is to allow the modem peer to control the system clock either when no other source is available or, if the modem peer happens to be marked as prefer, then it always controls the clock, as long as it passes the sanity checks and intersection algorithm. There still is room for suboptimal operation in this scheme, since a noise spike can still cause a clockhop either way. Nevertheless, the optimization function is slow to adapt, so that a clockhop or two does not cause much harm.&lt;/p&gt;
&lt;p&gt;The local clock driver is another special case. Normally, this driver is eligible for selection only if no other source is available. When selected, vernier adjustments introduced via the configuration file or remotely using the &lt;a href=&#34;/archives/4.2.0/ntpdc&#34;&gt;ntpdc&lt;/a&gt; program can be used to trim the local clock frequency and time. However, if the local clock driver is designated the prefer peer, this driver is always selected and all other sources are ignored. This behavior is intended for use when the kernel time is controlled by some means external to NTP, such as the NIST &lt;tt&gt;lockclock&lt;/tt&gt; algorithm or another time synchronization protocol such as DTSS. In this case the only way to disable the local clock driver is to mark it unsynchronized using the leap indicator bits. In the case of modified kernels with the &lt;tt&gt;ntp_adjtime()&lt;/tt&gt; system call, this can be done automatically if the external synchronization protocol uses it to discipline the kernel time.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;mitigation-rules&#34;&gt;Mitigation Rules&lt;/h4&gt;
&lt;p&gt;The mitigation rules apply in the intersection and clustering algorithms described in the NTP specification. The intersection algorithm first scans all peers with a persistent association and includes only those that satisfy specified sanity checks. In addition to the checks required by the specification, the mitigation rules require either the local-clock peer or modem peer to be included only if marked as the prefer peer. The intersection algorithm operates on the included population to select only those peers believed to represent the correct time. If one or more peers survive the algorithm, processing continues in the clustering algorithm. Otherwise, if there is a modem peer, it is declared the only survivor; otherwise, if there is a local-clock peer, it is declared the only survivor. Processing then continues in the clustering algorithm.&lt;/p&gt;
&lt;p&gt;The clustering algorithm repeatedly discards outlyers in order to reduce the residual jitter in the survivor population. As required by the NTP specification, these operations continue until either a specified minimum number of survivors remain or the minimum select dispersion of the population is greater than the maximum peer dispersion of any member. The mitigation rules require an additional terminating condition which stops these operations at the point where the prefer peer is about to be discarded.&lt;/p&gt;
&lt;p&gt;The mitigation rules establish the choice of &lt;em&gt;system peer&lt;/em&gt;, which determines the stratum, reference identifier and several other system variables which are visible to clients of the server. In addition, they establish which source or combination of sources control the local clock.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If there is a prefer peer and it is the local-clock peer or the modem peer; or, if there is a prefer peer and the kernel time discipline is active, choose the prefer peer as the system peer and its offset as the system clock offset. If the prefer peer is the local-clock peer, an offset can be calculated by the driver to produce a frequency offset in order to correct for systematic frequency errors. In case a source other than NTP is controlling the system clock, corrections determined by NTP can be ignored by using the &lt;tt&gt;disable pll&lt;/tt&gt; in the configuration file. If the prefer peer is the modem peer, it must be the primary source for the reasons noted above. If the kernel time discipline is active, the system clock offset is ignored and the corrections handled directly by the kernel.&lt;/li&gt;
&lt;li&gt;If the above is not the case and there is a PPS peer, then choose it as the system peer and its offset as the system clock offset.&lt;/li&gt;
&lt;li&gt;If the above is not the case and there is a prefer peer (not the local-clock or modem peer in this case), then choose it as the system peer and its offset as the system clock offset.&lt;/li&gt;
&lt;li&gt;If the above is not the case and the peer previously chosen as the system peer is in the surviving population, then choose it as the system peer and average its offset along with the other survivors to determine the system clock offset. This behavior is designed to avoid excess jitter due to clockhopping, when switching the system peer would not materially improve the time accuracy.&lt;/li&gt;
&lt;li&gt;If the above is not the case, then choose the first candidate in the list of survivors ranked in order of synchronization distance and average its offset along with the other survivors to determine the system clock offset. This is the default case and the only case considered in the current NTP specification.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;using-the-pulse-per-second-pps-signal&#34;&gt;Using the Pulse-per-Second (PPS) Signal&lt;/h4&gt;
&lt;p&gt;Most radio clocks are connected using a serial port operating at speeds of 9600 bps or higher. The accuracy using typical timecode formats, where the on-time epoch is indicated by a designated ASCII character, like carriage-return &lt;tt&gt;‹cr›&lt;/tt&gt;, is limited to a millisecond or two. However, some radios produce a PPS signal which can be used to improve the accuracy with typical workstation servers to the order of microseconds. The details of how this can be accomplished are discussed in the &lt;a href=&#34;/archives/4.2.0/pps&#34;&gt;Pulse-per-second (PPS) Signal Interfacing&lt;/a&gt; page. The following paragraphs discuss how the PPS signal is affected by the mitigation rules.&lt;/p&gt;
&lt;p&gt;First, it should be pointed out that the PPS signal is inherently ambiguous, in that it provides a precise seconds epoch, but does not provide a way to number the seconds. In principle and most commonly, another source of synchronization, either the timecode from an associated radio clock, or even one or more remote NTP servers, is available to perform that function. In all cases, a specific, configured peer or server must be designated as associated with the PPS signal. This is done using the &lt;tt&gt;prefer&lt;/tt&gt; keyword as described previously. The PPS signal can be associated in this way with any peer, but is most commonly used with the radio clock generating the PPS signal.&lt;/p&gt;
&lt;p&gt;The PPS signal can be used in two ways to discipline the local clock, one using a special PPS driver described in the &lt;a href=&#34;/archives/drivers/driver22&#34;&gt;PPS Clock Discipline&lt;/a&gt; page, the other using PPS signal support in the kernel, as described in the &lt;a href=&#34;/archives/4.2.0/kern&#34;&gt;A Kernel Model for Precision Timekeeping&lt;/a&gt; page. In either case, the signal must be present and within nominal jitter and wander error tolerances. In addition, the associated prefer peer must have survived the sanity checks and intersection algorithms and the dispersion settled below 1 s. This insures that the radio clock hardware is operating correctly and that, presumably, the PPS signal is operating correctly as well. Second, the absolute offset of the local clock from that peer must be less than 128 ms, or well within the 0.5-s unambiguous range of the PPS signal itself. In the case of the PPS driver, the time offsets generated from the PPS signal are propagated via the clock filter to the clock selection procedures just like any other peer. Should these pass the sanity checks and intersection algorithms, they will show up along with the offsets of the prefer peer itself. Note that, unlike the prefer peer, the PPS peer samples are not protected from discard by the clustering algorithm. These complicated procedures insure that the PPS offsets developed in this way are the most accurate, reliable available for synchronization.&lt;/p&gt;
&lt;p&gt;The PPS peer remains active as long as it survives the intersection algorithm and the prefer peer is reachable; however, like any other clock driver, it runs a reachability algorithm on the PPS signal itself. If for some reason the signal fails or displays gross errors, the PPS peer will either become unreachable or stray out of the survivor population. In this case the clock selection remitigates as described above.&lt;/p&gt;
&lt;p&gt;When kernel support for the PPS signal is available, the PPS signal is interfaced to the kernel serial driver code via a modem control lead. As the PPS signal is derived from external equipment, cables, etc., which sometimes fail, a good deal of error checking is done in the kernel to detect signal failure and excessive noise. The way in which the mitigation rules affect the kernel discipline is as follows.&lt;/p&gt;
&lt;p&gt;PPS support requires the PPS driver (type 22) and PPSAPI interface described in the &lt;a href=&#34;/archives/4.2.0/pps&#34;&gt;Pulse-per-second (PPS) Signal Interfacing&lt;/a&gt; page. In order to operate, the prefer peer must be designated and the kernel support enabled by the &lt;tt&gt;enable pps&lt;/tt&gt; command in the configuration file and the signal must be present and within nominal jitter and wander error tolerances. In the NTP daemon, the PPS discipline is active only when the prefer peer is among the survivors of the clustering algorithm, and its absolute offset is within 128 ms, as determined by the PPS driver. Under these conditions the kernel disregards updates produced by the NTP daemon and uses its internal PPS source instead. The kernel maintains a watchdog timer for the PPS signal; if the signal has not been heard or is out of tolerance for more than some interval, currently two minutes, the kernel discipline is declared inoperable and operation continues as if it were not present.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Monitoring Options</title>
      <link>/archives/4.2.0/monopt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/monopt/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/pogo8.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;&lt;/a&gt; from &lt;em&gt;Pogo&lt;/em&gt;, Walt Kelly&lt;/p&gt;
&lt;p&gt;Pig was hired to watch the logs.&lt;/p&gt;
&lt;p&gt;Last update: 17:22 UTC Friday, February 07, 2003&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/monopt/#monitoring-commands&#34;&gt;Monitoring Commands&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;introduction&#34;&gt;Introduction&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntpd&lt;/tt&gt; includes a comprehensive monitoring facility suitable for continuous, long term recording of server and client timekeeping performance. See the &lt;tt&gt;statistics&lt;/tt&gt; command below for a listing and example of each type of statistics currently supported. Statistic files are managed using file generation sets and scripts in the &lt;tt&gt;./scripts&lt;/tt&gt; directory of this distribution. Using these facilities and Unix &lt;tt&gt;cron&lt;/tt&gt; jobs, the data can be automatically summarized and archived for retrospective analysis.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;monitoring-commands&#34;&gt;Monitoring Commands&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;statistics _name_ [...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enables writing of statistics records. Currently, six kinds of &lt;em&gt;&lt;tt&gt;name&lt;/tt&gt;&lt;/em&gt; statistics are supported.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;clockstats&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enables recording of clock driver statistics information. Each update received from a clock driver appends a line of the following form to the file generation set named &lt;tt&gt;clockstats&lt;/tt&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;49213 525.624 127.127.4.1 93 226 00:08:29.606 D&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The first two fields show the date (Modified Julian Day) and time (seconds and fraction past UTC midnight). The next field shows the clock address in dotted-quad notation, The final field shows the last timecode received from the clock in decoded ASCII format, where meaningful. In some clock drivers a good deal of additional information can be gathered and displayed as well. See information specific to each clock for further details.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;cryptostats&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This option requires the OpenSSL cryptographic software library. It enables recording of cryptographic public key protocol information. Each message received by the protocol module appends a line of the following form to the file generation set named &lt;tt&gt;cryptostats&lt;/tt&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;49213 525.624 127.127.4.1 _message_&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The first two fields show the date (Modified Julian Day) and time (seconds and fraction past UTC midnight). The next field shows the peer address in dotted-quad notation, The final &lt;tt&gt;&lt;em&gt;message&lt;/em&gt;&lt;/tt&gt; field includes the message type and certain ancillary information. See the &lt;a href=&#34;/archives/4.2.0/authopt&#34;&gt;Authentication Options&lt;/a&gt; page for further information.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;loopstats&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enables recording of loop filter statistics information. Each update of the local clock outputs a line of the following form to the file generation set named &lt;tt&gt;loopstats&lt;/tt&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;50935 75440.031 0.000006019 13.778190 0.000351733 0.0133806&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The first two fields show the date (Modified Julian Day) and time (seconds and fraction past UTC midnight). The next five fields show time offset (seconds), frequency offset (parts per million - PPM), RMS jitter (seconds), Allan deviation (PPM) and clock discipline time constant.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;peerstats&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enables recording of peer statistics information. This includes statistics records of all peers of a NTP server and of special signals, where present and configured. Each valid update appends a line of the following form to the current element of a file generation set named &lt;tt&gt;peerstats&lt;/tt&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;48773 10847.650 127.127.4.1 9714 -0.001605376 0.000000000 0.001424877 0.000958674&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The first two fields show the date (Modified Julian Day) and time (seconds and fraction past UTC midnight). The next two fields show the peer address in dotted-quad notation and status, respectively. The status field is encoded in hex in the format described in Appendix B of the NTP specification RFC 1305. The final four fields show the offset, delay, dispersion and RMS jitter, all in seconds.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;rawstats&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enables recording of raw-timestamp statistics information. This includes statistics records of all peers of a NTP server and of special signals, where present and configured. Each NTP message received from a peer or clock driver appends a line of the following form to the file generation set named &lt;tt&gt;rawstats&lt;/tt&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;50928 2132.543 128.4.1.1 128.4.1.20 3102453281.584327000 3102453281.58622800031 02453332.540806000 3102453332.541458000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The first two fields show the date (Modified Julian Day) and time (seconds and fraction past UTC midnight). The next two fields show the remote peer or clock address followed by the local address in dotted-quad notation, The final four fields show the originate, receive, transmit and final NTP timestamps in order. The timestamp values are as received and before processing by the various data smoothing and mitigation algorithms.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;sysstats&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enables recording of &lt;tt&gt;ntpd&lt;/tt&gt; statistics counters on a periodic basis. Each hour a line of the following form is appended to the file generation set named &lt;tt&gt;sysstats&lt;/tt&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;50928 2132.543 36000 81965 0 9546 56 71793 512 540 10 147&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The first two fields show the date (Modified Julian Day) and time (seconds and fraction past UTC midnight). The remaining ten fields show the statistics counter values accumulated since the last generated line.&lt;/p&gt;
&lt;dt&gt;Time since restart &lt;tt&gt;36000&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Time in hours since the system was last rebooted.&lt;/p&gt;
&lt;dt&gt;Packets received &lt;tt&gt;81965&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Total number of packets received.&lt;/p&gt;
&lt;dt&gt;Packets processed &lt;tt&gt;0&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Number of packets received in response to previous packets sent.&lt;/p&gt;
&lt;dt&gt;Current version &lt;tt&gt;9546&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Number of packets matching the current NTP version.&lt;/p&gt;
&lt;dt&gt;Previous version &lt;tt&gt;56&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Number of packets matching the previous NTP version.&lt;/p&gt;
&lt;dt&gt;Bad version &lt;tt&gt;71793&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Number of packets matching neither NTP version.&lt;/p&gt;
&lt;dt&gt;Access denied &lt;tt&gt;512&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Number of packets denied access for any reason.&lt;/p&gt;
&lt;dt&gt;Bad length or format &lt;tt&gt;540&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Number of packets with invalid length, format or port number.&lt;/p&gt;
&lt;dt&gt;Bad authentication &lt;tt&gt;10&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Number of packets not verified as authentic.&lt;/p&gt;
&lt;dt&gt;Rate exceeded &lt;tt&gt;147&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Number of packets discarded due to rate limitation.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;statsdir _directory_path_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Indicates the full path of a directory where statistics files should be created (see below). This keyword allows the (otherwise constant) &lt;tt&gt;filegen&lt;/tt&gt; filename prefix to be modified for file generation sets, which is useful for handling statistics logs.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;filegen _name_ [file _filename_] [type _typename_] [link | nolink] [enable | disable]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Configures setting of generation file set &lt;em&gt;name&lt;/em&gt;. Generation file sets provide a means for handling files that are continuously growing during the lifetime of a server. Server statistics are a typical example for such files. Generation file sets provide access to a set of files used to store the actual data. At any time at most one element of the set is being written to. The type given specifies when and how data will be directed to a new element of the set. This way, information stored in elements of a file set that are currently unused are available for administrational operations without the risk of disturbing the operation of &lt;tt&gt;ntpd&lt;/tt&gt;. (Most important: they can be removed to free space for new data produced.)&lt;/p&gt;
&lt;p&gt;Note that this command can be sent from the &lt;tt&gt;ntpdc&lt;/tt&gt; program running at a remote location.&lt;/p&gt;
&lt;dt&gt;_&lt;tt&gt;name&lt;/tt&gt;_&lt;/dt&gt;
&lt;p&gt;This is the type of the statistics records, as shown in the &lt;tt&gt;statistics&lt;/tt&gt; command.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;file _filename_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This is the file name for the statistics records. Filenames of set members are built from three concatenated elements &lt;em&gt;&lt;tt&gt;prefix&lt;/tt&gt;&lt;/em&gt;, &lt;em&gt;&lt;tt&gt;filename&lt;/tt&gt;&lt;/em&gt; and &lt;em&gt;&lt;tt&gt;suffix&lt;/tt&gt;&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;    &lt;em&gt;&lt;tt&gt;prefix&lt;/tt&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;    This is a constant filename path. It is not subject to modifications via the &lt;tt&gt;filegen&lt;/tt&gt; option. It is defined by the server, usually specified as a compile-time constant. It may, however, be configurable for individual file generation sets via other commands. For example, the prefix used with &lt;tt&gt;loopstats&lt;/tt&gt; and &lt;tt&gt;peerstats&lt;/tt&gt; generation can be configured using the &lt;tt&gt;statsdir&lt;/tt&gt; option explained above.&lt;/p&gt;
&lt;p&gt;    &lt;em&gt;&lt;tt&gt;filename&lt;/tt&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;    This string is directly concatenated to the prefix mentioned above (no intervening &lt;code&gt;/&lt;/code&gt; (slash)). This can be modified using the &lt;tt&gt;file&lt;/tt&gt; argument to the &lt;tt&gt;filegen&lt;/tt&gt; statement. No &lt;tt&gt;..&lt;/tt&gt; elements are allowed in this component to prevent filenames referring to parts outside the filesystem hierarchy denoted by &lt;tt&gt;prefix&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;    &lt;em&gt;&lt;tt&gt;suffix&lt;/tt&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;    This part is reflects individual elements of a file set. It is generated according to the type of a file set.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;type _typename_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;A file generation set is characterized by its type. The following types are supported:&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;none&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    The file set is actually a single plain file.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;pid&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    One element of file set is used per incarnation of a &lt;tt&gt;ntpd&lt;/tt&gt; server. This type does not perform any changes to file set members during runtime, however it provides an easy way of separating files belonging to different &lt;tt&gt;ntpd&lt;/tt&gt; server incarnations. The set member filename is built by appending a &lt;tt&gt;.&lt;/tt&gt; (dot) to concatenated &lt;em&gt;prefix&lt;/em&gt; and &lt;em&gt;filename&lt;/em&gt; strings, and appending the decimal representation of the process ID of the &lt;tt&gt;ntpd&lt;/tt&gt; server process.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;day&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    One file generation set element is created per day. A day is defined as the period between 00:00 and 24:00 UTC. The file set member suffix consists of a &lt;tt&gt;.&lt;/tt&gt; (dot) and a day specification in the form &lt;tt&gt;YYYYMMdd. YYYY&lt;/tt&gt; is a 4-digit year number (e.g., 1992). &lt;tt&gt;MM&lt;/tt&gt; is a two digit month number. &lt;tt&gt;dd&lt;/tt&gt; is a two digit day number. Thus, all information written at 10 December 1992 would end up in a file named &lt;tt&gt;&lt;em&gt;prefix filename&lt;/em&gt;.19921210&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;week&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Any file set member contains data related to a certain week of a year. The term week is defined by computing day-of-year modulo 7. Elements of such a file generation set are distinguished by appending the following suffix to the file set filename base: A dot, a 4-digit year number, the letter &lt;tt&gt;W&lt;/tt&gt;, and a 2-digit week number. For example, information from January, 10th 1992 would end up in a file with suffix &lt;tt&gt;.1992W1&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;month&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    One generation file set element is generated per month. The file name suffix consists of a dot, a 4-digit year number, and a 2-digit month.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;year&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    One generation file element is generated per year. The filename suffix consists of a dot and a 4 digit year number.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;age&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    This type of file generation sets changes to a new element of the file set every 24 hours of server operation. The filename suffix consists of a dot, the letter &lt;tt&gt;a&lt;/tt&gt;, and an 8-digit number. This number is taken to be the number of seconds the server is running at the start of the corresponding 24-hour period. Information is only written to a file generation by specifying &lt;tt&gt;enable&lt;/tt&gt;; output is prevented by specifying &lt;tt&gt;disable&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;link | nolink&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;It is convenient to be able to access the current element of a file generation set by a fixed name. This feature is enabled by specifying &lt;tt&gt;link&lt;/tt&gt; and disabled using &lt;tt&gt;nolink&lt;/tt&gt;. If &lt;tt&gt;link&lt;/tt&gt; is specified, a hard link from the current file set element to a file without suffix is created. When there is already a file with this name and the number of links of this file is one, it is renamed appending a dot, the letter &lt;tt&gt;C&lt;/tt&gt;, and the pid of the &lt;tt&gt;ntpd&lt;/tt&gt; server process. When the number of links is greater than one, the file is unlinked. This allows the current file to be accessed by a constant name.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;enable | disable&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Enables or disables the recording function.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Notes on setting up a NTP subnet</title>
      <link>/archives/4.2.0/notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/notes/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/tonea.gif&#34; alt=&#34;gif&#34;&gt;From NBS Special Publication 432 (out of print)&lt;/p&gt;
&lt;p&gt;Last update: Last update: 20:23 UTC Monday, December 02, 2002&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;introduction&#34;&gt;Introduction&lt;/h4&gt;
&lt;p&gt;This document is a collection of notes concerning the use of ntpd and related programs, and on coping with the Network Time Protocol (NTP) in general. It is a major rewrite and update of an earlier document written by Dennis Ferguson of the University of Toronto and includes many changes and additions resulting from the NTP Version 3 specification and new Version 4 implementation features. It supersedes earlier documents, which should no longer be used for new configurations.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;ntpd&lt;/tt&gt; includes a complete implementation of the NTP Version 3 specification, as defined in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mills, D.L. Network Time Protocol (Version 3) specification, implementation and analysis. Network Working Group Report RFC-1305, University of Delaware, March 1992, 113 pp. Abstract: &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/database/rfc/rfc1305/rfc1305a.ps&#34;&gt;PostScript&lt;/a&gt; | &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/database/rfc/rfc1305/rfc1305a.pdf&#34;&gt;PDF&lt;/a&gt;, Body: &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/database/rfc/rfc1305/rfc1305b.ps&#34;&gt;PostScript&lt;/a&gt; | &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/database/rfc/rfc1305/rfc1305b.pdf&#34;&gt;PDF&lt;/a&gt;, Appendices: &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/database/rfc/rfc1305/rfc1305c.ps&#34;&gt;PostScript&lt;/a&gt; | &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/database/rfc/rfc1305/rfc1305c.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additional features are described for &lt;a href=&#34;/archives/4.2.0/release&#34;&gt;NTP Version 4 Release Notes&lt;/a&gt;. It also retains compatibility with both NTP Version 2, as defined in RFC-1119, and NTP Version 1, as defined in RFC-1059, although this compatibility is sometimes strained and only semiautomatic. In order to support in principle the ultimate precision of about 232 picoseconds in the NTP specification, &lt;tt&gt;ntpd&lt;/tt&gt; uses NTP timestamp format for external communication and double precision floating point arithmetic internally. &lt;tt&gt;ntpd&lt;/tt&gt; fully implements NTP Versions 2 and 3 authentication and in addition Version 4 autokey. It supports the NTP mode-6 control message facility along with a private mode-7 control- message facility used to remotely reconfigure the system and monitor a considerable amount of internal detail. As extensions to the specification, a flexible address-and-mask restriction facility has been included.&lt;/p&gt;
&lt;p&gt;The code is biased towards the needs of a busy time server with numerous, often hundreds, of clients and other servers. Tables are hashed to allow efficient handling of many associations, though at the expense of additional overhead when the number of associations is small. Many fancy features have been included to permit efficient management and monitoring of a busy primary server, features which are probably excess baggage for a high stratum client. In such cases, a stripped-down version of the protocol, the Simple Network Time Protocol (SNTP) can be used. SNTP and NTP servers and clients can interwork in most situations, as described in: Mills, D.L. Simple Network Time Protocol (SNTP). Network Working Group Report RFC-2030, University of Delaware, October 1996, 14 pp. &lt;a href=&#34;https://www.eecis.udel.edu/~mills/database/rfc/rfc2030.txt&#34;&gt;(ASCII)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The code was written with near demonic attention to details which can affect precision and as a consequence should be able to make good use of high performance, special purpose hardware such as precision oscillators and radio clocks. The present code supports a number of radio clocks, including those for the WWV, CHU, WWVB, MSF, DCF77, GOES and GPS radio and satellite time services and USNO, ACTS and PTB modem time services. It also supports the IRIG-B and IRIG-E signal format connected via an audio codec. The server methodically avoids the use of Unix-specific library routines where possible by implementing local versions, in order to aid in porting the code to perverse Unix and non-Unix platforms.&lt;/p&gt;
&lt;p&gt;While this implementation conforms in most respects to the NTP Version 3 specification RFC-1305, a number of improvements have been made which are described in the conformance statement in the &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/biblio.html&#34;&gt;NTP Protocol Conformance Statement&lt;/a&gt; page. It has been specifically tuned to achieve the highest accuracy possible on whatever hardware and operating-system platform is available. In general, its precision and stability are limited only by the characteristics of the onboard clock source used by the hardware and operating system, usually an uncompensated crystal oscillator. On modern RISC-based processors connected directly to radio clocks via serial-asynchronous interfaces, the accuracy is usually limited by the radio clock and interface to the order of a millisecond or less. The code includes special features to support a pulse-per-second (PPS) signal and/or an IRIG-B signal generated by some radio clocks. When used in conjunction with a suitable hardware level converter, the accuracy can be improved to a few tens of microseconds. Further improvement is possible using an outboard, stabilized frequency source, in which the accuracy and stability are limited only by the characteristics of that source.&lt;/p&gt;
&lt;p&gt;The NTP Version 4 distribution includes, in addition to the daemon itself (&lt;tt&gt;&lt;a href=&#34;/archives/4.2.0/ntpd&#34;&gt;ntpd&lt;/a&gt;&lt;/tt&gt;), several utility programs, including two remote-monitoring programs (&lt;a href=&#34;/archives/4.2.0/ntpq&#34;&gt;&lt;tt&gt;ntpq&lt;/tt&gt;&lt;/a&gt;, &lt;tt&gt;&lt;a href=&#34;/archives/4.2.0/ntpdc&#34;&gt;ntpdc&lt;/a&gt;&lt;/tt&gt;), a remote clock-setting program similar to the Unix rdate program (&lt;tt&gt;ntpdate&lt;/tt&gt;), a traceback utility useful to discover suitable synchronization sources (&lt;tt&gt;ntptrace&lt;/tt&gt;), and various programs used to configure the local platform and calibrate the intrinsic errors. NTP has been ported to a large number of platforms, including most RISC and CISC workstations and mainframes manufactured today. Example configuration files for many models of these machines are included in the distribution. While in most cases the standard version of the implementation runs with no hardware or operating system modifications, not all features of the distribution are available on all platforms. For instance, a special feature allowing Sun workstations to achieve accuracies in the order of 100 microseconds requires some minor changes and additions to the kernel and input/output support.&lt;/p&gt;
&lt;p&gt;There are, however, several drawbacks to all of this. &lt;tt&gt;ntpd&lt;/tt&gt; is quite fat. This is rotten if your intended platform for the daemon is memory limited. &lt;tt&gt;ntpd&lt;/tt&gt; uses &lt;tt&gt;SIGIO&lt;/tt&gt; for all input, a facility which appears to not enjoy universal support and whose use seems to exercise the parts of your vendors&#39; kernels which are most likely to have been done poorly. The code is unforgiving in the face of kernel problems which affect performance, and generally requires that you repair the problems in order to achieve acceptable performance. The code has a distinctly experimental flavour and contains features which could charitably be termed failed experiments, but which have not been completely hacked out. Much was learned from the addition of support for a variety of radio clocks, with the result that some radio clock drivers could use some rewriting.&lt;/p&gt;
&lt;h4 id=&#34;how-ntp-works&#34;&gt;How NTP Works&lt;/h4&gt;
&lt;p&gt;The approach used by NTP to achieve reliable time synchronization from a set of possibly unreliable remote time servers is somewhat different than other protocols. In particular, NTP does not attempt to synchronize clocks to each other. Rather, each server attempts to synchronize to Universal Coordinated Time (UTC) using the best available source and available transmission paths to that source. This is a fine point which is worth understanding. A group of NTP-synchronized clocks may be close to each other in time, but this is not a consequence of the clocks in the group having synchronized to each other, but rather because each clock has synchronized closely to UTC via the best source it has access to. As such, trying to synchronize a set of clocks to a set of servers whose time is not in mutual agreement may not result in any sort of useful synchronization of the clocks, even if you don&amp;rsquo;t care about UTC. However, in networks isolated from UTC sources, provisions can made to nominate one of them as a phantom UTC source.&lt;/p&gt;
&lt;p&gt;NTP operates on the premise that there is one true standard time, and that if several servers which claim synchronization to standard time disagree about what that time is, then one or more of them must be broken. There is no attempt to resolve differences more gracefully since the premise is that substantial differences cannot exist. In essence, NTP expects that the time being distributed from the root of the synchronization subnet will be derived from some external source of UTC (e.g., a radio clock). This makes it somewhat inconvenient (though by no means impossible) to synchronize hosts together without a reliable source of UTC to synchronize them to. If your network is isolated and you cannot access other people&amp;rsquo;s servers across the Internet, a radio clock may make a good investment.&lt;/p&gt;
&lt;p&gt;Time is distributed through a hierarchy of NTP servers, with each server adopting a &lt;em&gt;stratum&lt;/em&gt; which indicates how far away from an external source of UTC it is operating at. Stratum-1 servers, which are at the top of the pile (or bottom, depending on your point of view), have access to some external time source, usually a radio clock synchronized to time signal broadcasts from radio stations which explicitly provide a standard time service. A stratum-2 server is one which is currently obtaining time from a stratum-1 server, a stratum-3 server gets its time from a stratum-2 server, and so on. To avoid long lived synchronization loops the number of strata is limited to 15.&lt;/p&gt;
&lt;p&gt;Each client in the synchronization subnet (which may also be a server for other, higher stratum clients) chooses exactly one of the available servers to synchronize to, usually from among the lowest stratum servers it has access to. This is, however, not always an optimal configuration, for indeed NTP operates under another premise as well, that each server&amp;rsquo;s time should be viewed with a certain amount of distrust. NTP really prefers to have access to several sources of lower stratum time (at least three) since it can then apply an agreement algorithm to detect insanity on the part of any one of these. Normally, when all servers are in agreement, NTP will choose the best of these, where &amp;ldquo;best&amp;rdquo; is defined in terms of lowest stratum, closest (in terms of network delay) and claimed precision, along with several other considerations. The implication is that, while one should aim to provide each client with three or more sources of lower stratum time, several of these will only be providing backup service and may be of lesser quality in terms of network delay and stratum (i.e., a same-stratum peer which receives time from lower stratum sources the local server doesn&amp;rsquo;t access directly can also provide good backup service).&lt;/p&gt;
&lt;p&gt;Finally, there is the issue of association modes. There are a number of modes in which NTP servers can associate with each other, with the mode of each server in the pair indicating the behaviour the other server can expect from it. In particular, when configuring a server to obtain time from other servers, there is a choice of two modes which may be used. Configuring an association in symmetric-active mode (usually indicated by a &lt;tt&gt;peer&lt;/tt&gt; declaration in the configuration file) indicates to the remote server that one wishes to obtain time from the remote server and that one is also willing to supply time to the remote server if need be. This mode is appropriate in configurations involving a number of redundant time servers interconnected via diverse network paths, which is presently the case for most stratum-1 and stratum-2 servers on the Internet today. Configuring an association in client mode (usually indicated by a &lt;tt&gt;server&lt;/tt&gt; declaration in the configuration file) indicates that one wishes to obtain time from the remote server, but that one is not willing to provide time to the remote server. This mode is appropriate for file-server and workstation clients that do not provide synchronization to other local clients. Client mode is also useful for boot-date-setting programs and the like, which really have no time to provide and which don&amp;rsquo;t retain state about associations over the longer term.&lt;/p&gt;
&lt;p&gt;Where the requirements in accuracy and reliability are modest, clients can be configured to use broadcast and/or multicast modes. These modes are not normally utilized by servers with dependent clients. The advantage of these modes is that clients do not need to be configured for a specific server, so that all clients operating can use the same configuration file. Broadcast mode requires a broadcast server on the same subnet, while multicast mode requires support for IP multicast on the client machine, as well as connectivity via the MBONE to a multicast server. Since broadcast messages are not propagated by routers, only those broadcast servers on the same subnet will be used. There is at present no way to select which of possibly many multicast servers will be used, since all operate on the same group address.&lt;/p&gt;
&lt;p&gt;Where the maximum accuracy and reliability provided by NTP are needed, clients and servers operate in either client/server or symmetric modes. Symmetric modes are most often used between two or more servers operating as a mutually redundant group. In these modes, the servers in the group members arrange the synchronization paths for maximum performance, depending on network jitter and propagation delay. If one or more of the group members fail, the remaining members automatically reconfigure as required. Dependent clients and servers normally operate in client/server mode, in which a client or dependent server can be synchronized to a group member, but no group member can synchronize to the client or dependent server. This provides protection against malfunctions or protocol attacks.&lt;/p&gt;
&lt;p&gt;Servers that provide synchronization to a sizeable population of clients normally operate as a group of three or more mutually redundant servers, each operating with three or more stratum-one or stratum-two servers in client-server modes, as well as all other members of the group in symmetric modes. This provides protection against malfunctions in which one or more servers fail to operate or provide incorrect time. The NTP algorithms have been specifically engineered to resist attacks where some fraction of the configured synchronization sources accidently or purposely provide incorrect time. In these cases a special voting procedure is used to identify spurious sources and discard their data.&lt;/p&gt;
&lt;h4 id=&#34;configuring-your-subnet&#34;&gt;Configuring Your Subnet&lt;/h4&gt;
&lt;p&gt;At startup time the &lt;tt&gt;ntpd&lt;/tt&gt; daemon running on a host reads the initial configuration information from a file, usually &lt;tt&gt;/etc/ntp.conf&lt;/tt&gt;, unless a different name has been specified at compile time. Putting something in this file which will enable the host to obtain time from somewhere else is usually the first big hurdle after installation of the software itself, which is described in the &lt;a href=&#34;/archives/4.2.0/build&#34;&gt;Building and Installing the Distribution&lt;/a&gt; page. At its simplest, what you need to do in the configuration file is declare the servers that the daemon should poll for time synchronization. In principle, no such list is needed if some other time server operating in broadcast/multicast mode is available, which requires the client to operate in a broadcastclient mode.&lt;/p&gt;
&lt;p&gt;In the case of a workstation operating in an enterprise network for a public or private organization, there is often an administrative department that coordinates network services, including NTP. Where available, the addresses of appropriate servers can be provided by that department. However, if this infrastructure is not available, it is necessary to explore some portion of the existing NTP subnet now running in the Internet. There are at present many thousands of time servers running NTP in the Internet, a significant number of which are willing to provide a public time- synchronization service. Some of these are listed in the list of public time servers, which can be accessed via the &lt;a href=&#34;http://www.ntp.org&#34;&gt;NTP web page&lt;/a&gt;. These data are updated on a regular basis using information provided voluntarily by various site administrators. There are other ways to explore the nearby subnet using the &lt;tt&gt;&lt;a href=&#34;/archives/4.2.0/ntptrace&#34;&gt;ntptrace&lt;/a&gt;&lt;/tt&gt; and &lt;tt&gt;&lt;a href=&#34;/archives/4.2.0/ntpdc&#34;&gt;ntpdc&lt;/a&gt;&lt;/tt&gt; programs.&lt;/p&gt;
&lt;p&gt;It is vital to carefully consider the issues of robustness and reliability when selecting the sources of synchronization. Normally, not less than three sources should be available, preferably selected to avoid common points of failure. It is usually better to choose sources which are likely to be &amp;ldquo;close&amp;rdquo; to you in terms of network topology, though you shouldn&amp;rsquo;t worry overly about this if you are unable to determine who is close and who isn&amp;rsquo;t. Normally, it is much more serious when a server becomes faulty and delivers incorrect time than when it simply stops operating, since an NTP-synchronized host normally can coast for hours or even days without its clock accumulating serious error approaching a second, for instance. Selecting at least three sources from different operating administrations, where possible, is the minimum recommended, although a lesser number could provide acceptable service with a degraded degree of robustness.&lt;/p&gt;
&lt;p&gt;Normally, it is not considered good practice for a single workstation to request synchronization from a primary (stratum-1) time server. At present, these servers provide synchronization for hundreds of clients in many cases and could, along with the network access paths, become seriously overloaded if large numbers of workstation clients requested synchronization directly. Therefore, workstations located in sparsely populated administrative domains with no local synchronization infrastructure should request synchronization from nearby stratum-2 servers instead. In most cases the keepers of those servers in the lists of public servers provide unrestricted access without prior permission; however, in all cases it is considered polite to notify the administrator listed in the file upon commencement of regular service. In all cases the access mode and notification requirements listed in the file must be respected. Under no conditions should servers not in these lists be used without prior permission, as to do so can create severe problems in the local infrastructure, especially in cases of dial-up access to the Internet.&lt;/p&gt;
&lt;p&gt;In the case of a gateway or file server providing service to a significant number of workstations or file servers in an enterprise network it is even more important to provide multiple, redundant sources of synchronization and multiple, diversity-routed, network access paths. The preferred configuration is at least three administratively coordinated time servers providing service throughout the administrative domain including campus networks and subnetworks. Each of these should obtain service from at least two different outside sources of synchronization, preferably via different gateways and access paths. These sources should all operate at the same stratum level, which is one less than the stratum level to be used by the local time servers themselves. In addition, each of these time servers should peer with all of the other time servers in the local administrative domain at the stratum level used by the local time servers, as well as at least one (different) outside source at this level. This configuration results in the use of six outside sources at a lower stratum level (toward the primary source of synchronization, usually a radio clock), plus three outside sources at the same stratum level, for a total of nine outside sources of synchronization. While this may seem excessive, the actual load on network resources is minimal, since the interval between polling messages exchanged between peers usually ratchets back to no more than one message every 17 minutes.&lt;/p&gt;
&lt;p&gt;The stratum level to be used by the local time servers is an engineering choice. As a matter of policy, and in order to reduce the load on the primary servers, it is desirable to use the highest stratum consistent with reliable, accurate time synchronization throughout the administrative domain. In the case of enterprise networks serving hundreds or thousands of client file servers and workstations, conventional practice is to obtain service from stratum-1 primary servers listed for public access. When choosing sources away from the primary sources, the particular synchronization path in use at any time can be verified using the &lt;tt&gt;ntptrace&lt;/tt&gt; program included in this distribution. It is important to avoid loops and possible common points of failure when selecting these sources. Note that, while NTP detects and rejects loops involving neighboring servers, it does not detect loops involving intervening servers. In the unlikely case that all primary sources of synchronization are lost throughout the subnet, the remaining servers on that subnet can form temporary loops and, if the loss continues for an interval of many hours, the servers will drop off the subnet and free-run with respect to their internal (disciplined) timing sources. After some period with no outside timing source (currently one day), a host will declare itself unsynchronized and provide this information to local application programs.&lt;/p&gt;
&lt;p&gt;In many cases the purchase of one or more radio clocks is justified, in which cases good engineering practice is to use the configurations described above anyway and connect the radio clock to one of the local servers. This server is then encouraged to participate in a special primary-server subnetwork in which each radio-equipped server peers with several other similarly equipped servers. In this way the radio-equipped server may provide synchronization, as well as receive synchronization, should the local or remote radio clock(s) fail or become faulty. &lt;tt&gt;ntpd&lt;/tt&gt; treats attached radio clock(s) in the same way as other servers and applies the same criteria and algorithms to the time indications, so can detect when the radio fails or becomes faulty and switch to alternate sources of synchronization. It is strongly advised, and in practice for most primary servers today, to employ the authentication or access-control features of the NTP specification in order to protect against hostile intruders and possible destabilization of the time service. Using this or similar strategies, the remaining hosts in the same administrative domain can be synchronized to the three (or more) selected time servers. Assuming these servers are synchronized directly to stratum-1 sources and operate normally as stratum-2, the next level away from the primary source of synchronization, for instance various campus file servers, will operate at stratum 3 and dependent workstations at stratum 4. Engineered correctly, such a subnet will survive all but the most exotic failures or even hostile penetrations of the various, distributed timekeeping resources.&lt;/p&gt;
&lt;p&gt;The above arrangement should provide very good, robust time service with a minimum of traffic to distant servers and with manageable loads on the local servers. While it is theoretically possible to extend the synchronization subnet to even higher strata, this is seldom justified and can make the maintenance of configuration files unmanageable. Serving time to a higher stratum peer is very inexpensive in terms of the load on the lower stratum server if the latter is located on the same concatenated LAN. When justified by the accuracy expectations, NTP can be operated in broadcast and multicast modes, so that clients need only listen for periodic broadcasts and do not need to send anything.&lt;/p&gt;
&lt;p&gt;When planning your network you might, beyond this, keep in mind a few generic don&amp;rsquo;ts, in particular:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Don&amp;rsquo;t synchronize a local time server to another peer at the same stratum, unless the latter is receiving time from lower stratum sources the former doesn&amp;rsquo;t talk to directly. This minimizes the occurrence of common points of failure, but does not eliminate them in cases where the usual chain of associations to the primary sources of synchronization are disrupted due to failures.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don&amp;rsquo;t configure peer associations with higher stratum servers. Let the higher strata configure lower stratum servers, but not the reverse. This greatly simplifies configuration file maintenance, since there is usually much greater configuration churn in the high stratum clients such as personal workstations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don&amp;rsquo;t synchronize more than one time server in a particular administrative domain to the same time server outside that domain. Such a practice invites common points of failure, as well as raises the possibility of massive abuse, should the configuration file be automatically distributed do a large number of clients.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are many useful exceptions to these rules. When in doubt, however, follow them.&lt;/p&gt;
&lt;h4 id=&#34;configuring-your-server-or-client&#34;&gt;Configuring Your Server or Client&lt;/h4&gt;
&lt;p&gt;As mentioned previously, the configuration file is usually called /etc/ntp.conf. This is an ASCII file conforming to the usual comment and whitespace conventions. A working configuration file might look like (in this and other examples, do not copy this directly):&lt;/p&gt;
&lt;pre&gt;     # peer configuration for host whimsy
     # (expected to operate at stratum 2)

     server rackety.udel.edu
     server umd1.umd.edu
     server lilben.tn.cornell.edu

     driftfile /etc/ntp.drift
&lt;/pre&gt;
&lt;p&gt;(Note the use of host names, although host addresses in dotted-quad notation can also be used. It is always preferable to use names rather than addresses, since over time the addresses can change, while the names seldom change.)&lt;/p&gt;
&lt;p&gt;This particular host is expected to operate as a client at stratum 2 by virtue of the &lt;tt&gt;server&lt;/tt&gt; keyword and the fact that two of the three servers declared (the first two) have radio clocks and usually run at stratum 1. The third server in the list has no radio clock, but is known to maintain associations with a number of stratum 1 peers and usually operates at stratum 2. Of particular importance with the last host is that it maintains associations with peers besides the two stratum 1 peers mentioned. This can be verified using the &lt;tt&gt;ntpq&lt;/tt&gt; program mentioned above. When configured using the &lt;tt&gt;server&lt;/tt&gt; keyword, this host can receive synchronization from any of the listed servers, but can never provide synchronization to them.&lt;/p&gt;
&lt;p&gt;Unless restricted using facilities described later, this host can provide synchronization to dependent clients, which do not have to be listed in the configuration file. Associations maintained for these clients are transitory and result in no persistent state in the host. These clients are normally not visible using the &lt;tt&gt;ntpq&lt;/tt&gt; program included in the distribution; however, &lt;tt&gt;ntpd&lt;/tt&gt; includes a monitoring feature (described later) which caches a minimal amount of client information useful for debugging administrative purposes.&lt;/p&gt;
&lt;p&gt;A time server expected to both receive synchronization from another server, as well as to provide synchronization to it, is declared using the &lt;tt&gt;peer&lt;/tt&gt; keyword instead of the &lt;tt&gt;server&lt;/tt&gt; keyword. In all other aspects the server operates the same in either mode and can provide synchronization to dependent clients or other peers. If a local source of UTC time is available, it is considered good engineering practice to declare time servers outside the administrative domain as &lt;tt&gt;peer&lt;/tt&gt; and those inside as &lt;tt&gt;server&lt;/tt&gt; in order to provide redundancy in the global Internet, while minimizing the possibility of instability within the domain itself. A time server in one domain can in principle heal another domain temporarily isolated from all other sources of synchronization. However, it is probably unwise for a casual workstation to bridge fragments of the local domain which have become temporarily isolated.&lt;/p&gt;
&lt;p&gt;Note the inclusion of a &lt;tt&gt;driftfile&lt;/tt&gt; declaration. One of the things the NTP daemon does when it is first started is to compute the error in the intrinsic frequency of the clock on the computer it is running on. It usually takes about a day or so after the daemon is started to compute a good estimate of this (and it needs a good estimate to synchronize closely to its server). Once the initial value is computed, it will change only by relatively small amounts during the course of continued operation. The &lt;tt&gt;driftfile&lt;/tt&gt; declaration indicates to the daemon the name of a file where it may store the current value of the frequency error so that, if the daemon is stopped and restarted, it can reinitialize itself to the previous estimate and avoid the day&amp;rsquo;s worth of time it will take to recompute the frequency estimate. Since this is a desirable feature, a &lt;tt&gt;driftfile&lt;/tt&gt; declaration should always be included in the configuration file.&lt;/p&gt;
&lt;p&gt;An implication in the above is that, should &lt;tt&gt;ntpd&lt;/tt&gt; be stopped for some reason, the local platform time will diverge from UTC by an amount that depends on the intrinsic error of the clock oscillator and the time since last synchronized. In view of the length of time necessary to refine the frequency estimate, every effort should be made to operate the daemon on a continuous basis and minimize the intervals when for some reason it is not running.&lt;/p&gt;
&lt;h4 id=&#34;configuring-ntp-with-netinfo&#34;&gt;Configuring NTP with NetInfo&lt;/h4&gt;
&lt;p&gt;If NetInfo support is compiled into NTP, you can opt to configure NTP in your NetInfo domain. NTP will look in the NetInfo directory &lt;tt&gt;/locations/ntp&lt;/tt&gt; for property/value pairs which are equivalent to the lines in the configuration file described above. Each configuration keyword may have a corresponding property in NetInfo. Each value for a given property is treated as arguments to that property, similar to a line in the configuration file.&lt;/p&gt;
&lt;p&gt;For example, the configuration shown in the configuration file above can be duplicated in NetInfo by adding a property &lt;code&gt;server&lt;/code&gt; with values &lt;code&gt;rackety.udel.edu&lt;/code&gt;, &lt;code&gt;umd1.umd.edu&lt;/code&gt;, and &lt;code&gt;lilben.tn.cornell.edu&lt;/code&gt;; and a property &lt;code&gt;driftfile&lt;/code&gt; with the single value &lt;code&gt;/etc/ntp.drift&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Values may contain multiple tokens similar to the arguments available in the configuration file. For example, to use &lt;tt&gt;mimsy.mil&lt;/tt&gt; as an NTP version 1 time server, you would add a value &lt;code&gt;mimsy.mil version 1&lt;/code&gt; to the &lt;tt&gt;server&lt;/tt&gt; property.&lt;/p&gt;
&lt;h4 id=&#34;ntp4-versus-previous-versions&#34;&gt;Ntp4 Versus Previous Versions&lt;/h4&gt;
&lt;p&gt;There are several items of note when dealing with a mixture of &lt;tt&gt;ntp4&lt;/tt&gt; and previous distributions of NTP Version 2 (&lt;tt&gt;ntpd&lt;/tt&gt;) and NTP Version 1 (&lt;tt&gt;ntp3.4&lt;/tt&gt;). The &lt;tt&gt;ntp4&lt;/tt&gt; implementation conforms to the NTP Version 3 specification RFC-1305 and, in addition, contains additional features documented in the &lt;a href=&#34;/archives/4.2.0/release&#34;&gt;Release Notes&lt;/a&gt; page. As such, by default when no additional information is available concerning the preferences of the peer, &lt;tt&gt;ntpd&lt;/tt&gt; claims to be version 4 in the packets that it sends from configured associations. The &lt;tt&gt;version&lt;/tt&gt; subcommand of the &lt;tt&gt;server&lt;/tt&gt;, &lt;tt&gt;peer&lt;/tt&gt;, &lt;tt&gt;broadcast&lt;/tt&gt; and &lt;tt&gt;manycastclient&lt;/tt&gt; command can be used to change the default. In unconfigured (ephemeral) associaitons, the daemon always replies in the same version as the request.&lt;/p&gt;
&lt;p&gt;An NTP implementation conforming to a previous version specification ordinarily discards packets from a later version. However, in most respects documented in RFC-1305, The version 2 implementation is compatible with the version 3 algorithms and protocol. The version 1 implementation contains most of the version 2 algorithms, but without important features for clock selection and robustness. Nevertheless, in most respects the NTP versions are backwards compatible. The sticky part here is that, when a previous version implementation receives a packet claiming to be from a version 4 server, it discards it without further processing. Hence there is a danger that in some situations synchronization with previous versions will fail.&lt;/p&gt;
&lt;p&gt;The trouble occurs when an previous version is to be included in an &lt;tt&gt;ntpd&lt;/tt&gt; configuration file. With no further indication, &lt;tt&gt;ntpd&lt;/tt&gt; will send packets claiming to be version 4 when it polls. To get around this, &lt;tt&gt;ntpd&lt;/tt&gt; allows a qualifier to be added to configuration entries to indicate which version to use when polling. Hence the entries&lt;/p&gt;
&lt;pre&gt;     # specify NTP version 1

     server mimsy.mil version 1     # server running ntpd version 1
     server apple.com version 2     # server running ntpd version 2
&lt;/pre&gt;
&lt;p&gt;will cause version 1 packets to be sent to the host mimsy.mil and version 2 packets to be sent to apple.com. If you are testing &lt;tt&gt;ntpd&lt;/tt&gt; against previous version servers you will need to be careful about this. Note that, as indicated in the RFC-1305 specification, there is no longer support for the original NTP specification, once called NTP Version 0.&lt;/p&gt;
&lt;h4 id=&#34;traffic-monitoring&#34;&gt;Traffic Monitoring&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntpd&lt;/tt&gt; handles peers whose stratum is higher than the stratum of the local server and polls using client mode by a fast path which minimizes the work done in responding to their polls, and normally retains no memory of these pollers. Sometimes, however, it is interesting to be able to determine who is polling the server, and how often, as well as who has been sending other types of queries to the server.&lt;/p&gt;
&lt;p&gt;To allow this, &lt;tt&gt;ntpd&lt;/tt&gt; implements a traffic monitoring facility which records the source address and a minimal amount of other information from each packet which is received by the server. This feature is normally enabled, but can be disabled if desired using the configuration file entry:&lt;/p&gt;
&lt;pre&gt;     # disable monitoring feature
     disable monitor
&lt;/pre&gt;
&lt;p&gt;The recorded information can be displayed using the &lt;tt&gt;ntpdc&lt;/tt&gt; query program, described briefly below.&lt;/p&gt;
&lt;h4 id=&#34;address-and-mask-restrictions&#34;&gt;Address-and-Mask Restrictions&lt;/h4&gt;
&lt;p&gt;The address-and-mask configuration facility supported by &lt;tt&gt;ntpd&lt;/tt&gt; is quite flexible and general, but is not an integral part of the NTP Version 3 specification. The major drawback is that, while the internal implementation is very nice, the user interface is not. For this reason it is probably worth doing an example here. Briefly, the facility works as follows. There is an internal list, each entry of which holds an address, a mask and a set of flags. On receipt of a packet, the source address of the packet is compared to each entry in the list, with a match being posted when the following is true:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(source_addr &amp;amp; mask) == (address &amp;amp; mask)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A particular source address may match several list entries. In this case the entry with the most one bits in the mask is chosen. The flags associated with this entry are used to control the access.&lt;/p&gt;
&lt;p&gt;In the current implementation the flags always add restrictions. In effect, an entry with no flags set leaves matching hosts unrestricted. An entry can be added to the internal list using a &lt;tt&gt;restrict&lt;/tt&gt; declaration. The flags associated with the entry are specified textually. For example, the &lt;tt&gt;notrust&lt;/tt&gt; flag indicates that hosts matching this entry, while treated normally in other respects, shouldn&amp;rsquo;t be trusted to provide synchronization even if otherwise so enabled. The &lt;tt&gt;nomodify&lt;/tt&gt; flag indicates that hosts matching this entry should not be allowed to do run-time configuration. There are many more flags, see the &lt;a href=&#34;/archives/4.2.0/ntpd&#34;&gt;&lt;tt&gt;ntpd&lt;/tt&gt;&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;Now the example. Suppose you are running the server on a host whose address is 128.100.100.7. You would like to ensure that run time reconfiguration requests can only be made from the local host and that the server only ever synchronizes to one of a pair of off-campus servers or, failing that, a time source on net 128.100. The following entries in the configuration file would implement this policy:&lt;/p&gt;
&lt;pre&gt;     # by default, don&#39;t trust and don&#39;t allow
modifications

     restrict default notrust nomodify

     # these guys are trusted for time, but no
modifications allowed

     restrict 128.100.0.0 mask 255.255.0.0 nomodify
     restrict 128.8.10.1 nomodify
     restrict 192.35.82.50 nomodify

     # the local addresses are unrestricted

     restrict 128.100.100.7
     restrict 127.0.0.1
&lt;/pre&gt;
&lt;p&gt;The first entry is the default entry, which all hosts match and hence which provides the default set of flags. The next three entries indicate that matching hosts will only have the &lt;tt&gt;nomodify&lt;/tt&gt; flag set and hence will be trusted for time. If the mask isn&amp;rsquo;t specified in the &lt;tt&gt;restrict&lt;/tt&gt; keyword, it defaults to 255.255.255.255. Note that the address 128.100.100.7 matches three entries in the table, the default entry (mask 0.0.0.0), the entry for net 128.100 (mask 255.255.0.0) and the entry for the host itself (mask 255.255.255.255). As expected, the flags for the host are derived from the last entry since the mask has the most bits set.&lt;/p&gt;
&lt;p&gt;The only other thing worth mentioning is that the &lt;tt&gt;restrict&lt;/tt&gt; declarations apply to packets from all hosts, including those that are configured elsewhere in the configuration file and even including your clock pseudopeer(s), if any. Hence, if you specify a default set of restrictions which you don&amp;rsquo;t wish to be applied to your configured peers, you must remove those restrictions for the configured peers with additional &lt;tt&gt;restrict&lt;/tt&gt; declarations mentioning each peer separately.&lt;/p&gt;
&lt;h4 id=&#34;authentication&#34;&gt;Authentication&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntpd&lt;/tt&gt; supports the optional authentication procedure specified in the NTP Version 2 and 3 specifications. Briefly, when an association runs in authenticated mode, each packet transmitted has appended to it a 32-bit key ID and a 64/128-bit cryptographic checksum of the packet contents computed using either the Data Encryption Standard (DES) or Message Digest (MD5) algorithms. Note that, while either of these algorithms provide sufficient protection from message- modification attacks, distribution of the former algorithm implementation is restricted to the U.S. and Canada, while the latter presently is free from such restrictions. For this reason, the DES algorithm is not included in the current distribution. Directions for obtaining it in other countries is in the &lt;a href=&#34;/archives/4.2.0/build&#34;&gt;Building and Installing the Distribution&lt;/a&gt; page. With either algorithm the receiving peer recomputes the checksum and compares it with the one included in the packet. For this to work, the peers must share at least one encryption key and, furthermore, must associate the shared key with the same key ID.&lt;/p&gt;
&lt;p&gt;This facility requires some minor modifications to the basic packet processing procedures, as required by the specification. These modifications are enabled by the &lt;tt&gt;enable auth&lt;/tt&gt; configuration declaration, which is currently the default. In authenticated mode, peers which send unauthenticated packets, peers which send authenticated packets which the local server is unable to decrypt and peers which send authenticated packets encrypted using a key we don&amp;rsquo;t trust are all marked untrustworthy and unsuitable for synchronization. Note that, while the server may know many keys (identified by many key IDs), it is possible to declare only a subset of these as trusted. This allows the server to share keys with a client which requires authenticated time and which trusts the server, but which is not trusted by the server. Also, some additional configuration language is required to specify the key ID to be used to authenticate each configured peer association. Hence, for a server running in authenticated mode, the configuration file might look similar to the following:&lt;/p&gt;
&lt;pre&gt;     # peer configuration for 128.100.100.7
     # (expected to operate at stratum 2)
     # fully authenticated this time

     peer 128.100.49.105 key 22 # suzuki.ccie.utoronto.ca
     peer 128.8.10.1 key 4    # umd1.umd.edu
     peer 192.35.82.50 key 6  # lilben.tn.cornell.edu

     keys /usr/local/etc/ntp.keys  # path for key file
     trustedkey 1 2 14 15     # define trusted keys
     requestkey 15            # key (7) for accessing server variables
     controlkey 15            # key (6) for accessing server variables

     authdelay 0.000094       # authentication delay (Sun4c/50 IPX)
&lt;/pre&gt;
&lt;p&gt;There are a couple of previously unmentioned things in here. The &lt;tt&gt;keys&lt;/tt&gt; line specifies the path to the keys file (see below and the &lt;tt&gt;ntpd&lt;/tt&gt; document page for details of the file format). The &lt;tt&gt;trustedkey&lt;/tt&gt; declaration identifies those keys that are known to be uncompromised; the remainder presumably represent the expired or possibly compromised keys. Both sets of keys must be declared by key identifier in the &lt;tt&gt;ntp.keys&lt;/tt&gt; file described below. This provides a way to retire old keys while minimizing the frequency of delicate key-distribution procedures. The &lt;tt&gt;requestkey&lt;/tt&gt; line establishes the key to be used for mode-6 control messages as specified in RFC-1305 and used by the &lt;tt&gt;ntpq&lt;/tt&gt; utility program, while the &lt;tt&gt;controlkey&lt;/tt&gt; line establishes the key to be used for mode-7 private control messages used by the &lt;tt&gt;ntpdc&lt;/tt&gt; utility program. These keys are used to prevent unauthorized modification of daemon variables.&lt;/p&gt;
&lt;p&gt;Ordinarily, the authentication delay; that is, the processing time taken between the freezing of a transmit timestamp and the actual transmission of the packet when authentication is enabled (i.e. more or less the time it takes for the DES or MD5 routine to encrypt a single block) is computed automatically by the daemon. If necessary, the delay can be overridden by the &lt;tt&gt;authdelay&lt;/tt&gt; line, which is used as a correction for the transmit timestamp.&lt;/p&gt;
&lt;p&gt;Additional utility programs included in the &lt;tt&gt;./authstuff&lt;/tt&gt; directory can be used to generate random keys, certify implementation correctness and display sample keys. As a general rule, keys should be chosen randomly, except possibly the request and control keys, which must be entered by the user as a password.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;ntp.keys&lt;/tt&gt; file contains the list of keys and associated key IDs the server knows about (for obvious reasons this file is better left unreadable by anyone except root). The contents of this file might look like:&lt;/p&gt;
&lt;pre&gt;     # ntp keys file (ntp.keys)
     1    N   29233E0461ECD6AE    # DES key in NTP format
     2    M   RIrop8KPPvQvYotM    # md5 key as an ASCII random string
     14   M   sundial             # md5 key as an ASCII string
     15   A   sundial             # DES key as an ASCII string

     # the following 3 keys are identical

     10   A    SeCReT
     10   N   d3e54352e5548080
     10   S   a7cb86a4cba80101
&lt;/pre&gt;
&lt;p&gt;In the keys file the first token on each line indicates the key ID, the second token the format of the key and the third the key itself. There are four key formats. An &lt;tt&gt;A&lt;/tt&gt; indicates a DES key written as a 1- to-8 character string in 7-bit ASCII representation, with each character standing for a key octet (like a Unix password). An &lt;tt&gt;S&lt;/tt&gt; indicates a DES key written as a hex number in the DES standard format, with the low order bit (LSB) of each octet being the (odd) parity bit. An &lt;tt&gt;N&lt;/tt&gt; indicates a DES key again written as a hex number, but in NTP standard format with the high order bit of each octet being the (odd) parity bit (confusing enough?). An &lt;tt&gt;M&lt;/tt&gt; indicates an MD5 key written as a 1-to-31 character ASCII string in the &lt;tt&gt;A&lt;/tt&gt; format. Note that, because of the simple tokenizing routine, the characters &lt;tt&gt;&#39; &amp;lsquo;, &amp;lsquo;#&amp;rsquo;, &amp;lsquo;\t&amp;rsquo;, &amp;lsquo;\n&amp;rsquo;&lt;/tt&gt; and &lt;tt&gt;&#39;\0&amp;rsquo;&lt;/tt&gt; can&amp;rsquo;t be used in either a DES or MD5 ASCII key. Everything else is fair game, though. Key 0 (zero) is used for special purposes and should not appear in this file.&lt;/p&gt;
&lt;p&gt;The big trouble with the authentication facility is the keys file. It is a maintenance headache and a security problem. This should be fixed some day. Presumably, this whole bag of worms goes away if/when a generic security regime for the Internet is established. An alternative with NTP Version 4 is the autokey feature, which uses random session keys and public-key cryptography and avoids the key file entirely. While this feature is not completely finished yet, details can be found in the &lt;a href=&#34;/archives/4.2.0/release&#34;&gt;Release Notes&lt;/a&gt; page.&lt;/p&gt;
&lt;h4 id=&#34;query-programs&#34;&gt;Query Programs&lt;/h4&gt;
&lt;p&gt;Three utility query programs are included with the distribution, &lt;tt&gt;ntpq&lt;/tt&gt;, &lt;tt&gt;ntptrace&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt;. &lt;tt&gt;ntpq&lt;/tt&gt; is a handy program which sends queries and receives responses using NTP standard mode-6 control messages. Since it uses the standard control protocol specified in RFC- 1305, it may be used with NTP Version 2 and Version 3 implementations for both Unix and Fuzzball, but not Version 1 implementations. It is most useful to query remote NTP implementations to assess timekeeping accuracy and expose bugs in configuration or operation.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;ntptrace&lt;/tt&gt; can be used to display the current synchronization path from a selected host through possibly intervening servers to the primary source of synchronization, usually a radio clock. It works with both version 2 and version 3 servers, but not version 1.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;ntpdc&lt;/tt&gt; is a horrid program which uses NTP private mode-7 control messages to query local or remote servers. The format and contents of these messages are specific to this version of &lt;tt&gt;ntpd&lt;/tt&gt; and some older versions. The program does allow inspection of a wide variety of internal counters and other state data, and hence does make a pretty good debugging tool, even if it is frustrating to use. The other thing of note about &lt;tt&gt;ntpdc&lt;/tt&gt; is that it provides a user interface to the run time reconfiguration facility. See the respective document pages for details on the use of these programs.&lt;/p&gt;
&lt;h4 id=&#34;run-time-reconfiguration&#34;&gt;Run-Time Reconfiguration&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntpd&lt;/tt&gt; was written specifically to allow its configuration to be fully modifiable at run time. Indeed, the only way to configure the server is at run time. The configuration file is read only after the rest of the server has been initialized into a running default-configured state. This facility was included not so much for the benefit of Unix, where it is handy but not strictly essential, but rather for dedicated platforms where the feature is more important for maintenance. Nevertheless, run time configuration works very nicely for Unix servers as well.&lt;/p&gt;
&lt;p&gt;Nearly all of the things it is possible to configure in the configuration file may be altered via NTP mode-7 messages using the &lt;tt&gt;ntpdc&lt;/tt&gt; program. Mode-6 messages may also provide some limited configuration functionality (though the only thing you can currently do with mode-6 messages is set the leap-second warning bits) and the &lt;tt&gt;ntpq&lt;/tt&gt; program provides generic support for the latter. The leap bits that can be set in the &lt;tt&gt;leap_warning&lt;/tt&gt; variable (up to one month ahead) and in the &lt;tt&gt;leap_indication&lt;/tt&gt; variable have a slightly different encoding than the usual interpretation:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;00&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The daemon passes the leap bits of its synchronisation source (usual mode of operation)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;01/10&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A leap second is added/deleted&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;11&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Leap information from the synchronization source is ignored (thus LEAP_NOWARNING is passed on)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Mode-6 and mode-7 messages which would modify the configuration of the server are required to be authenticated using standard NTP authentication. To enable the facilities one must, in addition to specifying the location of a keys file, indicate in the configuration file the key IDs to be used for authenticating reconfiguration commands. Hence the following fragment might be added to a configuration file to enable the mode-6 (ntpq) and mode-7 (ntpdc) facilities in the daemon:&lt;/p&gt;
&lt;pre&gt;     # specify mode-6 and mode-7 trusted keys

     requestkey 65535    # for mode-7 requests
     controlkey 65534    # for mode-6 requests
&lt;/pre&gt;
&lt;p&gt;If the &lt;tt&gt;requestkey&lt;/tt&gt; and/or the &lt;tt&gt;controlkey&lt;/tt&gt; configuration declarations are omitted from the configuration file, the corresponding run-time reconfiguration facility is disabled.&lt;/p&gt;
&lt;p&gt;The query programs require the user to specify a key ID and a key to use for authenticating requests to be sent. The key ID provided should be the same as the one mentioned in the configuration file, while the key should match that corresponding to the key ID in the keys file. As the query programs prompt for the key as a password, it is useful to make the request and control authentication keys typeable (in ASCII format) from the keyboard.&lt;/p&gt;
&lt;h4 id=&#34;name-resolution&#34;&gt;Name Resolution&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntpd&lt;/tt&gt; includes the capability to specify host names requiring resolution in &lt;tt&gt;peer&lt;/tt&gt; and &lt;tt&gt;server&lt;/tt&gt; declarations in the configuration file. However, in some outposts of the Internet, name resolution is unreliable and the interface to the Unix resolver routines is synchronous. The hangups and delays resulting from name-resolver clanking can be unacceptable once the NTP server is running (and remember it is up and running before the configuration file is read). However, it is advantageous to resolve time server names, since their addresses are occasionally changed.&lt;/p&gt;
&lt;p&gt;In order to prevent configuration delays due to the name resolver, the daemon runs the name resolution process in parallel with the main daemon code. When the daemon comes across a &lt;tt&gt;peer&lt;/tt&gt; or &lt;tt&gt;server&lt;/tt&gt; entry with a non-numeric host address, it records the relevant information in a temporary file and continues on. When the end of the configuration file has been reached and one or more entries requiring name resolution have been found, the server runs the name resolver from the temporary file. The server then continues on normally but with the offending peers/servers omitted from its configuration.&lt;/p&gt;
&lt;p&gt;As each name is resolved, it configures the associated entry into the server using the same mode-7 run time reconfiguration facility that &lt;tt&gt;ntpdc&lt;/tt&gt; uses. If temporary resolver failures occur, the resolver will periodically retry the requests until a definite response is received. The program will continue to run until all entries have been resolved.&lt;/p&gt;
&lt;h4 id=&#34;dealing-with-frequency-tolerance-violations-tttickadjtt-and-friends&#34;&gt;Dealing with Frequency Tolerance Violations (&lt;tt&gt;tickadj&lt;/tt&gt; and Friends)&lt;/h4&gt;
&lt;p&gt;The NTP Version 3 specification RFC-1305 calls for a maximum oscillator frequency tolerance of +-100 parts-per-million (PPM), which is representative of those components suitable for use in relatively inexpensive workstation platforms. For those platforms meeting this tolerance, NTP will automatically compensate for the frequency errors of the individual oscillator and no further adjustments are required, either to the configuration file or to various kernel variables. For the NTP Version 4 release, this tolerance has been increased to +-500 PPM.&lt;/p&gt;
&lt;p&gt;However, in the case of certain notorious platforms, in particular Sun 4.1.1 systems, the performance can be improved by adjusting the values of certain kernel variables; in particular, &lt;tt&gt;tick&lt;/tt&gt; and &lt;tt&gt;tickadj&lt;/tt&gt;. The variable &lt;tt&gt;tick&lt;/tt&gt; is the increment in microseconds added to the system time on each interval- timer interrupt, while the variable &lt;tt&gt;tickadj&lt;/tt&gt; is used by the time adjustment code as a slew rate, in microseconds per tick. When the time is being adjusted via a call to the system routine &lt;tt&gt;adjtime()&lt;/tt&gt;, the kernel increases or reduces tick by &lt;tt&gt;tickadj&lt;/tt&gt; microseconds per tick until the specified adjustment has been completed. Unfortunately, in most Unix implementations the tick increment must be either zero or plus/minus exactly &lt;tt&gt;tickadj&lt;/tt&gt; microseconds, meaning that adjustments are truncated to be an integral multiple of &lt;tt&gt;tickadj&lt;/tt&gt; (this latter behaviour is a misfeature, and is the only reason the &lt;tt&gt;tickadj&lt;/tt&gt; code needs to concern itself with the internal implementation of &lt;tt&gt;tickadj&lt;/tt&gt; at all). In addition, the stock Unix implementation considers it an error to request another adjustment before a prior one has completed.&lt;/p&gt;
&lt;p&gt;Thus, to make very sure it avoids problems related to the roundoff, the &lt;tt&gt;tickadj&lt;/tt&gt; program can be used to adjust the values of &lt;tt&gt;tick&lt;/tt&gt; and &lt;tt&gt;tickadj&lt;/tt&gt;. This ensures that all adjustments given to &lt;tt&gt;adjtime()&lt;/tt&gt; are an even multiple of &lt;tt&gt;tickadj&lt;/tt&gt; microseconds and computes the largest adjustment that can be completed in the adjustment interval (using both the value of &lt;tt&gt;tick&lt;/tt&gt; and the value of &lt;tt&gt;tickadj&lt;/tt&gt;) so it can avoid exceeding this limit. It is important to note that not all systems will allow inspection or modification of kernel variables other than at system build time. It is also important to know that, with the current NTP tolerances, it is rarely necessary to make these changes, but in many cases they will substantially improve the general accuracy of the time service.&lt;/p&gt;
&lt;p&gt;Unfortunately, the value of &lt;tt&gt;tickadj&lt;/tt&gt; set by default is almost always too large for &lt;tt&gt;ntpd&lt;/tt&gt;. NTP operates by continuously making small adjustments to the clock, usually at one-second intervals. If &lt;tt&gt;tickadj&lt;/tt&gt; is set too large, the adjustments will disappear in the roundoff; while, if &lt;tt&gt;tickadj&lt;/tt&gt; is too small, NTP will have difficulty if it needs to make an occasional large adjustment. While the daemon itself will read the kernel&amp;rsquo;s values of these variables, it will not change the values, even if they are unsuitable. You must do this yourself before the daemon is started using the &lt;tt&gt;tickadj&lt;/tt&gt; program included in the &lt;tt&gt;./util&lt;/tt&gt; directory of the distribution. Note that the latter program will also compute an optimal value of &lt;tt&gt;tickadj&lt;/tt&gt; for NTP use based on the kernel&amp;rsquo;s value of &lt;tt&gt;tick&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;tickadj&lt;/tt&gt; program can reset several other kernel variables if asked. It can change the value of &lt;tt&gt;tick&lt;/tt&gt; if asked. This is handy to compensate for kernel bugs which cause the clock to run with a very large frequency error, as with SunOS 4.1.1 systems. It can also be used to set the value of the kernel &lt;tt&gt;dosynctodr&lt;/tt&gt; variable to zero. This variable controls whether to synchronize the system clock to the time-of-day clock, something you really don&amp;rsquo;t want to be happen when &lt;tt&gt;ntpd&lt;/tt&gt; is trying to keep it under control. In some systems, such as recent Sun Solaris kernels, the &lt;tt&gt;dosynctodr&lt;/tt&gt; variable is the only one that can be changed by the &lt;tt&gt;tickadj&lt;/tt&gt; program. In this and other modern kernels, it is not necessary to change the other variables in any case.&lt;/p&gt;
&lt;p&gt;We have a report that says starting with Solaris 2.6 we should leave &lt;em&gt;dosynctodr&lt;/em&gt; alone.&lt;/p&gt;
&lt;p&gt;In order to maintain reasonable correctness bounds, as well as reasonably good accuracy with acceptable polling intervals, &lt;tt&gt;ntpd&lt;/tt&gt; will complain if the frequency error is greater than 500 PPM. For machines with a value of &lt;tt&gt;tick&lt;/tt&gt; in the 10-ms range, a change of one in the value of &lt;tt&gt;tick&lt;/tt&gt; will change the frequency by about 100 PPM. In order to determine the value of &lt;tt&gt;tick&lt;/tt&gt; for a particular CPU, disconnect the machine from all sources of time (&lt;tt&gt;dosynctodr&lt;/tt&gt; = 0) and record its actual time compared to an outside source (eyeball-and-wristwatch will do) over a day or more. Multiply the time change over the day by 0.116 and add or subtract the result to tick, depending on whether the CPU is fast or slow. An example call to &lt;tt&gt;tickadj&lt;/tt&gt; useful on SunOS 4.1.1 is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tickadj -t 9999 -a 5 -s&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;which sets tick 100 PPM fast, &lt;tt&gt;tickadj&lt;/tt&gt; to 5 microseconds and turns off the clock/calendar chip fiddle. This line can be added to the &lt;tt&gt;rc.local&lt;/tt&gt; configuration file to automatically set the kernel variables at boot time.&lt;/p&gt;
&lt;p&gt;All this stuff about diddling kernel variables so the NTP daemon will work is really silly. If vendors would ship machines with clocks that kept reasonable time and would make their &lt;tt&gt;adjtime()&lt;/tt&gt; system call apply the slew it is given exactly, independent of the value of &lt;tt&gt;tickadj&lt;/tt&gt;, all this could go away. This is in fact the case on many current Unix systems.&lt;/p&gt;
&lt;h4 id=&#34;tuning-your-subnet&#34;&gt;Tuning Your Subnet&lt;/h4&gt;
&lt;p&gt;There are several parameters available for tuning the NTP subnet for maximum accuracy and minimum jitter. One of these is the &lt;tt&gt;prefer&lt;/tt&gt; configuration declaration described in &lt;a href=&#34;/archives/4.2.0/prefer&#34;&gt;Mitigation Rules and the &lt;tt&gt;prefer&lt;/tt&gt; Keyword&lt;/a&gt; documentation page. When more than one eligible server exists, the NTP clock-selection and combining algorithms act to winnow out all except the &amp;ldquo;best&amp;rdquo; set of servers using several criteria based on differences between the readings of different servers and between successive readings of the same server. The result is usually a set of surviving servers that are apparently statistically equivalent in accuracy, jitter and stability. The population of survivors remaining in this set depends on the individual server characteristics measured during the selection process and may vary from time to time as the result of normal statistical variations. In LANs with high speed RISC-based time servers, the population can become somewhat unstable, with individual servers popping in and out of the surviving population, generally resulting in a regime called &lt;em&gt;clockhopping&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When only the smallest residual jitter can be tolerated, it may be convenient to elect one of the servers at each stratum level as the preferred one using the keyword &lt;tt&gt;prefer&lt;/tt&gt; on the configuration declaration for the selected server:&lt;/p&gt;
&lt;pre&gt;     # preferred server declaration

     peer rackety.udel.edu prefer   
# preferred server
&lt;/pre&gt;
&lt;p&gt;The preferred server will always be included in the surviving population, regardless of its characteristics and as long as it survives preliminary sanity checks and validation procedures.&lt;/p&gt;
&lt;p&gt;The most useful application of the &lt;tt&gt;prefer&lt;/tt&gt; keyword is in high speed LANs equipped with precision radio clocks, such as a GPS receiver. In order to insure robustness, the hosts need to include outside peers as well as the GPS-equipped server; however, as long as that server is running, the synchronization preference should be that server. The keyword should normally be used in all cases in order to prefer an attached radio clock. It is probably inadvisable to use this keyword for peers outside the LAN, since it interferes with the carefully crafted judgement of the selection and combining algorithms.&lt;/p&gt;
&lt;h4 id=&#34;provisions-for-leap-seconds-and-accuracy-metrics&#34;&gt;Provisions for Leap Seconds and Accuracy Metrics&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntpd&lt;/tt&gt; understands leap seconds and will attempt to take appropriate action when one occurs. In principle, every host running ntpd will insert a leap second in the local timescale in precise synchronization with UTC. This requires that the leap-warning bits be activated some time prior to the occurrence of a leap second at the primary (stratum 1) servers. Subsequently, these bits are propagated throughout the subnet depending on these servers by the NTP protocol itself and automatically implemented by &lt;tt&gt;ntpd&lt;/tt&gt; and the time- conversion routines of each host. The implementation is independent of the idiosyncrasies of the particular radio clock, which vary widely among the various devices, as long as the idiosyncratic behavior does not last for more than about 20 minutes following the leap. Provisions are included to modify the behavior in cases where this cannot be guaranteed. While provisions for leap seconds have been carefully crafted so that correct timekeeping immediately before, during and after the occurrence of a leap second is scrupulously correct, stock Unix systems are mostly inept in responding to the available information. This caveat goes also for the maximum-error and statistical-error bounds carefully calculated for all clients and servers, which could be very useful for application programs needing to calibrate the delays and offsets to achieve a near- simultaneous commit procedure, for example. While this information is maintained in the &lt;tt&gt;ntpd&lt;/tt&gt; data structures, there is at present no way for application programs to access it. This may be a topic for further development.&lt;/p&gt;
&lt;h4 id=&#34;clock-support-overview&#34;&gt;Clock Support Overview&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntpd&lt;/tt&gt; was designed to support radio (and other external) clocks and does some parts of this function with utmost care. Clocks are treated by the protocol as ordinary NTP peers, even to the point of referring to them with an (invalid) IP host address. Clock addresses are of the form 127.127.&lt;em&gt;t.u&lt;/em&gt;, where &lt;em&gt;t&lt;/em&gt; specifies the particular type of clock (i.e., refers to a particular clock driver) and &lt;em&gt;u&lt;/em&gt; is a unit number whose interpretation is clock-driver dependent. This is analogous to the use of major and minor device numbers by Unix and permits multiple instantiations of clocks of the same type on the same server, should such magnificent redundancy be required.&lt;/p&gt;
&lt;p&gt;Because clocks look much like peers, both configuration file syntax and run time reconfiguration commands can be used to control clocks in the same way as ordinary peers. Clocks are configured via &lt;tt&gt;server&lt;/tt&gt; declarations in the configuration file, can be started and stopped using ntpdc and are subject to address-and-mask restrictions much like a normal peer, should this stretch of imagination ever be useful. As a concession to the need to sometimes transmit additional information to clock drivers, an additional configuration file is available: the &lt;tt&gt;fudge&lt;/tt&gt; statement. This enables one to specify the values of two time quantities, two integral values and two flags, the use of which is dependent on the particular clock driver. For example, to configure a PST radio clock which can be accessed through the serial device &lt;tt&gt;/dev/pst1&lt;/tt&gt;, with propagation delays to WWV and WWVH of 7.5 and 26.5 milliseconds, respectively, on a machine with an imprecise system clock and with the driver set to disbelieve the radio clock once it has gone 30 minutes without an update, one might use the following configuration file entries:&lt;/p&gt;
&lt;pre&gt;     # radio clock fudge fiddles
     server 127.127.3.1
     fudge 127.127.3.1 time1 0.0075 time2 0.0265
     fudge 127.127.3.1 value2 30 flag1 1
&lt;/pre&gt;
&lt;p&gt;Additional information on the interpretation of these data with respect to various radio clock drivers is given in the &lt;a href=&#34;/archives/4.2.0/refclock&#34;&gt;Reference Clock Drivers&lt;/a&gt; document page and in the individual driver documents accessible via that page.&lt;/p&gt;
&lt;h4 id=&#34;towards-the-ultimate-tick&#34;&gt;Towards the Ultimate Tick&lt;/h4&gt;
&lt;p&gt;This section considers issues in providing precision time synchronization in NTP subnets which need the highest quality time available in the present technology. These issues are important in subnets supporting real-time services such as distributed multimedia conferencing and wide-area experiment control and monitoring.&lt;/p&gt;
&lt;p&gt;In the Internet of today synchronization paths often span continents and oceans with moderate to high variations in delay due to traffic spasms. NTP is specifically designed to minimize timekeeping jitter due to delay variations using intricately crafted filtering and selection algorithms; however, in cases where these variations are as much as a second or more, the residual jitter following these algorithms may still be excessive. Sometimes, as in the case of some isolated NTP subnets where a local source of precision time is available, such as a PPS signal produced by a calibrated cesium clock, it is possible to remove the jitter and retime the local clock oscillator of the NTP server. This has turned out to be a useful feature to improve the synchronization quality of time distributed in remote places where radio clocks are not available. In these cases special features of the distribution are used together with the PPS signal to provide a jitter-free timing signal, while NTP itself is used to provide the coarse timing and resolve the seconds numbering.&lt;/p&gt;
&lt;p&gt;Most available radio clocks can provide time to an accuracy in the order of milliseconds, depending on propagation conditions, local noise levels and so forth. However, as a practical matter, all clocks can occasionally display errors significantly exceeding nominal specifications. Usually, the algorithms used by NTP for ordinary network peers, as well as radio clock peers will detect and discard these errors as discrepancies between the disciplined local clock oscillator and the decoded time message produced by the radio clock. Some radio clocks can produce a special PPS signal which can be interfaced to the server platform in a number of ways and used to substantially improve the (disciplined) clock oscillator jitter and wander characteristics by at least an order of magnitude. Using these features it is possible to achieve accuracies in the order of a few tens of microseconds with a fast RISC- based platform.&lt;/p&gt;
&lt;p&gt;There are three ways to implement PPS support, depending on the radio clock model, platform model and serial line interface. These are described in detail in the application notes mentioned in the &lt;a href=&#34;/archives/4.2.0/&#34;&gt;The Network Time Protocol (NTP) Distribution&lt;/a&gt; document page. Each of these requires circuitry to convert the TTL signal produced by most clocks to the EIA levels used by most serial interfaces. The &lt;a href=&#34;/archives/4.2.0/pps&#34;&gt;Pulse-per-second (PPS) Signal Interfacing&lt;/a&gt; page describes a device designed to do this. Besides being useful for this purpose, this device includes an inexpensive modem designed for use with the Canadian CHU time/frequency radio station.&lt;/p&gt;
&lt;p&gt;In order to select the appropriate implementation, it is important to understand the underlying PPS mechanism used by ntpd. The PPS support depends on a continuous source of PPS pulses used to calculate an offset within +-500 milliseconds relative to the local clock. The serial timecode produced by the radio or the time determined by NTP in absence of the radio is used to adjust the local clock within +-128 milliseconds of the actual time. As long as the local clock is within this interval the PPS support is used to discipline the local clock and the timecode used only to verify that the local clock is in fact within the interval. Outside this interval the PPS support is disabled and the timecode used directly to control the local clock.&lt;/p&gt;
&lt;h4 id=&#34;parting-shots&#34;&gt;Parting Shots&lt;/h4&gt;
&lt;p&gt;There are several undocumented programs which can be useful in unusual cases. They can be found in the &lt;tt&gt;./clockstuff&lt;/tt&gt; and &lt;tt&gt;./authstuff&lt;/tt&gt; directories of the distribution. One of these is the &lt;tt&gt;propdelay&lt;/tt&gt; program, which can compute high frequency radio propagation delays between any two points whose latitude and longitude are known. The program understands something about the phenomena which allow high frequency radio propagation to occur, and will generally provide a better estimate than a calculation based on the great circle distance. Other programs of interest include &lt;tt&gt;clktest&lt;/tt&gt;, which allows one to exercise the generic clock line discipline, and &lt;tt&gt;chutest&lt;/tt&gt;, which runs the basic reduction algorithms used by the daemon on data received from a serial port.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img src=&#34;/archives/pic/pogo1a.gif&#34; alt=&#34;gif&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: NTP Debugging Techniques</title>
      <link>/archives/4.2.0/debug/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/debug/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/pogo.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/%7emills/pictures.html&#34;&gt;from &lt;em&gt;Pogo&lt;/em&gt;, Walt Kelly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We make house calls and bring our own bugs.&lt;/p&gt;
&lt;p&gt;Last update: 10:23 PM UTC Tuesday, August 05, 2003&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/debug/#initial-startup&#34;&gt;Initial Startup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/debug/#verifying-correct-operation&#34;&gt;Verifying Correct Operation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/debug/#large-frequency-errors&#34;&gt;Large Frequency Errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/debug/#access-controls&#34;&gt;Access Controls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/debug/#large-delay-variations&#34;&gt;Large Delay Variations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/debug/#cryptographic-authentication&#34;&gt;Cryptographic Authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/debug/#debugging-checklist&#34;&gt;Debugging Checklist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Once the NTP software distribution has been compiled and installed and the configuration file constructed, the next step is to verify correct operation and fix any bugs that may result. Usually, the command line that starts the daemon is included in the system startup file, so it is executed only at system boot time; however, the daemon can be stopped and restarted from root at any time. Usually, no command-line arguments are required, unless special actions described in the &lt;a href=&#34;/archives/4.2.0/ntpd&#34;&gt;ntpd - Network Time Protocol (NTP) daemon&lt;/a&gt; page are required. Once started, the daemon will begin sending and receiving messages, as specified in the configuration file.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;initial-startup&#34;&gt;Initial Startup&lt;/h4&gt;
&lt;p&gt;When started for the first time, the frequency file, usually called &lt;tt&gt;ntp.drift&lt;/tt&gt;, has not yet been created. The daemon switches to a special training routine designed to quickly determine the system clock frequency offset of the particular machine. The routine first measures the current clock offset and sets the clock, then continues for up to twenty minutes before measuring the clock offset, which might involve setting the clock again. The two measurements are used to compute the initial frequency offset and the daemon continues in regular operation, during which the frequency offset is continuously updated. Once each hour the daemon writes the current frequency offset to the &lt;tt&gt;ntp.drift&lt;/tt&gt; file. When restarted after that, the daemon reads the frequency offset from the &lt;tt&gt;ntp.drift&lt;/tt&gt; file and avoids the training routine.&lt;/p&gt;
&lt;p&gt;Note that the daemon requires at least four packet exchanges when first started in any case. This is required in order for the mitigation algorithms to insure valid and accurate measurements and defend against network delay spikes and accidental or malicious errors induced by the servers selected in the configuration file. It normally takes less than four minutes to set the clock when first started, but this can be reduced to less than ten seconds with the &lt;tt&gt;iburst&lt;/tt&gt; configuration option.&lt;/p&gt;
&lt;p&gt;The best way to verify correct operation is using the &lt;a href=&#34;/archives/4.2.0/ntpq&#34;&gt;&lt;tt&gt;ntpq&lt;/tt&gt; - standard NTP query program&lt;/a&gt; and &lt;a href=&#34;/archives/4.2.0/ntpdc&#34;&gt;&lt;tt&gt;ntpdc&lt;/tt&gt; - special NTP query program&lt;/a&gt; utility programs, either on the server itself or from another machine elsewhere in the network. The &lt;tt&gt;ntpq&lt;/tt&gt; program implements the management functions specified in the NTP specification &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/database/rfc/rfc1305/rfc1305c.ps&#34;&gt;RFC-1305, Appendix A&lt;/a&gt;. The &lt;tt&gt;ntpdc&lt;/tt&gt; program implements additional functions not provided in the standard. Both programs can be used to inspect the state variables defined in the specification and, in the case of &lt;tt&gt;ntpdc&lt;/tt&gt;, additional ones intended for serious debugging. In addition, the &lt;tt&gt;ntpdc&lt;/tt&gt; program can be used to selectively reconfigure and enable or disable some functions while the daemon is running.&lt;/p&gt;
&lt;p&gt;In extreme cases with elusive bugs, the daemon can operate in two modes, depending on the presence of the &lt;tt&gt;-d&lt;/tt&gt; command-line debug switch. If not present, the daemon detaches from the controlling terminal and proceeds autonomously. If one or more &lt;tt&gt;-d&lt;/tt&gt; switches are present, the daemon does not detach and generates special output useful for debugging. In general, interpretation of this output requires reference to the sources. However, a single &lt;tt&gt;-d&lt;/tt&gt; does produce only mildly cryptic output and can be very useful in finding problems with configuration and network troubles. With a little experience, the volume of output can be reduced by piping the output to &lt;tt&gt;grep&lt;/tt&gt; and specifying the keyword of the trace you want to see.&lt;/p&gt;
&lt;p&gt;Some problems are immediately apparent when the daemon first starts running. The most common of these are the lack of a UDP port for NTP (123) in the Unix &lt;tt&gt;/etc/services&lt;/tt&gt; file (or equivalent in some systems). &lt;strong&gt;Note that NTP does not use TCP in any form. Also note that NTP requires 123 for both source and destination ports.&lt;/strong&gt; These facts should be pointed out to firewall administrators.&lt;/p&gt;
&lt;p&gt;Other problems are apparent in the system log, which ordinarily shows the startup banner, some cryptic initialization data and the computed precision value. Error messages at startup and during regular operation are sent to the system log. In real emergencies the daemon will sent a terminal error message to the system log and then cease operation.&lt;/p&gt;
&lt;p&gt;The next most common problem is incorrect DNS names. Check that each DNS name used in the configuration file exists and that the address responds to the Unix &lt;tt&gt;ping&lt;/tt&gt; command. The Unix &lt;tt&gt;traceroute&lt;/tt&gt; or Windows &lt;tt&gt;tracert&lt;/tt&gt; utility can be used to verify a partial or complete path exists. Most problems reported to the NTP newsgroup are not NTP problems, but problems with the network or firewall configuration.&lt;/p&gt;
&lt;p&gt;When first started, the daemon polls the servers listed in the configuration file at 64-s intervals. In order to allow a sufficient number of samples for the NTP algorithms to reliably discriminate between truechimer servers and possible falsetickers, at least four valid messages from at least one server or peer listed in the configuration file is required before the daemon can set the clock. However, if the difference between the client time and server time is greater than the panic threshold, which defaults to 1000 s, the daemon sends a message to the system log and shuts down without setting the clock. It is necessary to set the local clock to within the panic threshold first, either manually by eyeball and wristwatch and the Unix &lt;tt&gt;date&lt;/tt&gt; command, or by the &lt;tt&gt;ntpdate&lt;/tt&gt; or &lt;tt&gt;ntpd -q&lt;/tt&gt; commands. The panic threshold can be changed by the &lt;tt&gt;tinker panic&lt;/tt&gt; command discribed on the &lt;a href=&#34;/archives/4.2.0/miscopt&#34;&gt;Miscellaneous Options&lt;/a&gt; page. The panic threshold can be disabled for the first measurement by the &lt;tt&gt;-g&lt;/tt&gt; command line option described on the &lt;a href=&#34;/archives/4.2.0/ntpd&#34;&gt;&lt;tt&gt;ntpd&lt;/tt&gt; - Network Time Protocol (NTP) daemon&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;If the difference between local time and server time is less than the panic threshold but greater than the step threshold, which defaults to 128 ms, the daemon will perform a step adjustment; otherwise, it will gradually slew the clock to the nominal time. Step adjustments are extremely rare in ordinary operation, usually as the result of reboot or hardware failure. The step threshold can be changed to 300 s using the &lt;tt&gt;-x&lt;/tt&gt; command line option described on the &lt;tt&gt;ntpd&lt;/tt&gt; page. This is usually sufficient to avoid a step after reboot or when the operator has set the system clock to within five minutes by eyeball-and-wristwatch. In extreme cases the step threshold can be changed by the &lt;tt&gt;tinker step&lt;/tt&gt; command discribed on the &lt;a href=&#34;/archives/4.2.0/miscopt&#34;&gt;Miscellaneous Options&lt;/a&gt; page. If set to zero, the clock will never be stepped; however, users should understand the implications for doing this in a distributed data network where all processing must be tightly synchronized. See the &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/leap.html&#34;&gt;NTP Timescale and Leap Seconds&lt;/a&gt; page for further information. If a step adjustment is made, the clock discipline algorithm will start all over again, requiring another round of at least four messages as before. This is necessary so that all servers and peers operate on the same set of time values.&lt;/p&gt;
&lt;p&gt;The clock discipline algorithm is designed to avoid large noise spikes that might occur on a congested network or access line. If an offset sample exceeds the step threshold, it is ignored and a timer started. If a later sample is below the step threshold, the counter is reset and operation continues normally. However, if the counter is greater than the stepout interval, which defaults to 900 s, the next sample will step the time as directed. The stepout threshold can be changed by the &lt;tt&gt;tinker stepout&lt;/tt&gt; command discribed on the Miscellaneous Options page.&lt;/p&gt;
&lt;p&gt;If for some reason the hardware clock oscillator frequency error is very large, say over 400 PPM, the time offset when the daemon is started for the first time may increase over time until exceeding the step threshold, which requires a frequency adjustment and another step correction. However, due to provisions that reduce vulnerability to noise spikes, the second correction will not be done until after the stepout threshold. When the frequency error is very large, it may take a number of cycles like this until converging to the nominal frequency correction and writing the &lt;tt&gt;ntp.drift&lt;/tt&gt; file. If the frequency error is over 500 PPM, convergence will never occur and occasional step adjustments will occur indefinitely.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;verifying-correct-operation&#34;&gt;Verifying Correct Operation&lt;/h4&gt;
&lt;p&gt;After starting the daemon, run the &lt;tt&gt;ntpq&lt;/tt&gt; program using the &lt;tt&gt;-n&lt;/tt&gt; switch, which will avoid possible distractions due to name resolution problems. Use the &lt;tt&gt;pe&lt;/tt&gt; command to display a billboard showing the status of configured peers and possibly other clients poking the daemon. After operating for a few minutes, the display should be something like:&lt;/p&gt;
&lt;pre&gt;ntpq&gt; pe
     remote      refid       st t when poll reach delay offset jitter
=====================================================================
-isipc6.cairn.ne .GPS1.        1 u  18  64  377  65.592 -5.891  0.044
+saicpc-isiepc2. pogo.udel.edu 2 u 241 128  370  10.477 -0.117  0.067
+uclpc.cairn.net pogo.udel.edu 2 u  37  64  177 212.111 -0.551  0.187
*pogo.udel.edu   .GPS1.        1 u  95 128  377   0.607  0.123  0.027
&lt;/pre&gt;
&lt;p&gt;The host names or addresses shown in the &lt;tt&gt;remote&lt;/tt&gt; column correspond to the server and peer entries listed in the configuration file; however, the DNS names might not agree if the names listed are not the canonical DNS names. IPv4 addresses are shown in dotted quad notation, while IPv6 addresses are shown alarmingly. The &lt;tt&gt;refid&lt;/tt&gt; column shows the current source of synchronization, while the &lt;tt&gt;st&lt;/tt&gt; column reveals the stratum, &lt;tt&gt;t&lt;/tt&gt; the type (&lt;tt&gt;u&lt;/tt&gt; = unicast, &lt;tt&gt;m&lt;/tt&gt; = multicast, &lt;tt&gt;l&lt;/tt&gt; = local, &lt;tt&gt;-&lt;/tt&gt; = don&amp;rsquo;t know), and &lt;tt&gt;poll&lt;/tt&gt; the poll interval in seconds. The &lt;tt&gt;when&lt;/tt&gt; column shows the time since the peer was last heard in seconds, while the &lt;tt&gt;reach&lt;/tt&gt; column shows the status of the reachability register (see RFC-1305) in octal. The remaining entries show the latest delay, offset and jitter in milliseconds. Note that in NTP Version 4 what used to be the &lt;tt&gt;dispersion&lt;/tt&gt; column has been replaced by the &lt;tt&gt;jitter&lt;/tt&gt; column.&lt;/p&gt;
&lt;p&gt;As per the NTP specification RFC-1305, when the &lt;tt&gt;stratum&lt;/tt&gt; is between 0 and 15 for a NTP server, the &lt;tt&gt;refid&lt;/tt&gt; field shows the server DNS name or, if not found, the IP address in dotted-quad. When the &lt;tt&gt;stratum&lt;/tt&gt; is any value for a reference clock, this field shows the identification string assigned to the clock. However, until the client has synchronized to a server, or when the &lt;tt&gt;stratum&lt;/tt&gt; for a NTP server is 0 (appears as 16 in the billboards), the status cannot be determined. As a help in debugging, the &lt;tt&gt;refid&lt;/tt&gt; field is set to a four-character string called the kiss code. The current kiss codes are as follows.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Peer Kiss Codes&lt;/strong&gt;&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;ACST&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The association belongs to a anycast server.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;AUTH&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Server authentication failed. Please wait while the association is restarted.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;AUTO&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Autokey sequence failed. Please wait while the association is restarted.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;BCST&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The association belongs to a broadcast server.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;CRYP&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Cryptographic authentication or identification failed. The details should be in the system log file or the &lt;tt&gt;cryptostats&lt;/tt&gt; statistics file, if configured. No further messages will be sent to the server.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;DENY&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Access denied by remote server. No further messages will be sent to the server.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;DROP&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Lost peer in symmetric mode. Please wait while the association is restarted.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;RSTR&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Access denied due to local policy. No further messages will be sent to the server.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;INIT&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The association has not yet synchronized for the first time.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;MCST&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The association belongs to a manycast server.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;NKEY&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;No key found. Either the key was never installed or is not trusted.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;RATE&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Rate exceeded. The server has temporarily denied access because the client exceeded the rate threshold.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;RMOT&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Somebody is tinkering with the association from a remote host running &lt;tt&gt;ntpdc&lt;/tt&gt;. Not to worry unless some rascal has stolen your keys.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;STEP&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;A step change in system time has occurred, but the association has not yet resynchronized.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;System Kiss Codes&lt;/strong&gt;&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;INIT&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The system clock has not yet synchronized for the first time.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;STEP&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;A step change in system time has occurred, but the system clock has not yet resynchronized.&lt;/p&gt;
&lt;p&gt;The tattletale symbol at the left margin displays the synchronization status of each peer. The currently selected peer is marked &lt;code&gt;*&lt;/code&gt;, while additional peers designated acceptable for synchronization are marked &lt;code&gt;+&lt;/code&gt;. Peers marked &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;+&lt;/code&gt; are included in the weighted average computation to set the local clock; the data produced by peers marked with other symbols are discarded. See the &lt;tt&gt;ntpq&lt;/tt&gt; page for the meaning of these symbols.&lt;/p&gt;
&lt;p&gt;Additional details for each peer separately can be determined by the following procedure. First, use the &lt;tt&gt;as&lt;/tt&gt; command to display an index of association identifiers, such as&lt;/p&gt;
&lt;pre&gt;ntpq&gt; as
ind assID status  conf reach auth condition  last_event cnt
===========================================================
  1 50252  f314   yes   yes   ok    outlyer   reachable  1
  2 50253  f414   yes   yes   ok   candidat   reachable  1
  3 50254  f414   yes   yes   ok   candidat   reachable  1
  4 50255  f614   yes   yes   ok   sys.peer   reachable  1
&lt;/pre&gt;
&lt;p&gt;Each line in this billboard is associated with the corresponding line in the &lt;tt&gt;pe&lt;/tt&gt; billboard above. The &lt;tt&gt;assID&lt;/tt&gt; shows the unique identifier for each mobilized association, while the &lt;tt&gt;status&lt;/tt&gt; column shows the peer status word in hex, as defined in the NTP specification. Next, use the &lt;tt&gt;rv&lt;/tt&gt; command and the respective &lt;tt&gt;assID&lt;/tt&gt; identifier to display a detailed synopsis for the selected peer, such as&lt;/p&gt;
&lt;pre&gt;ntpq&gt; rv 50253
status=f414 reach, conf, auth, sel_candidat, 1 event, event_reach,
srcadr=saicpc-isiepc2.cairn.net, srcport=123, dstadr=140.173.1.46,
dstport=123, keyid=3816249004, stratum=2, precision=-27,
rootdelay=10.925, rootdispersion=12.848, refid=pogo.udel.edu,
reftime=bd11b225.133e1437  Sat, Jul  8 2000 13:59:01.075, delay=10.550,
offset=-1.357, jitter=0.074, dispersion=1.444, reach=377, valid=7,
hmode=1, pmode=1, hpoll=6, ppoll=7, leap=00, flash=00 ok,
org=bd11b23c.01385836  Sat, Jul  8 2000 13:59:24.004,
rec=bd11b23c.02dc8fb8  Sat, Jul  8 2000 13:59:24.011,
xmt=bd11b21a.ac34c1a8  Sat, Jul  8 2000 13:58:50.672,
filtdelay=   10.45  10.50  10.63  10.40  10.48  10.43  10.49  11.26,
filtoffset=  -1.18  -1.26  -1.26  -1.35  -1.35  -1.42  -1.54  -1.81,
filtdisp=     0.51   1.47   2.46   3.45   4.40   5.34   6.33   7.28,
hostname=&#34;miro.time.saic.com&#34;, signature=md5WithRSAEncryption, flags=0x83f01, initsequence=61, initkey=0x287b649c,
timestamp=3172053041
&lt;/pre&gt;
&lt;p&gt;A detailed explanation of the fields in this billboard are beyond the scope of this discussion; however, most variables defined in the NTP Version 3 specification RFC-1305 are available along with others defined for NTPv4 on the &lt;tt&gt;ntpq&lt;/tt&gt; page. This particular example was chosen to illustrate probably the most complex configuration involving symmetric modes and public-key cryptography. As the result of debugging experience, the names and values of these variables may change from time to time.&lt;/p&gt;
&lt;p&gt;A useful indicator of miscellaneous problems is the &lt;tt&gt;flash&lt;/tt&gt; value, which reveals the state of the various sanity tests on incoming packets. There are currently 12 bits, one for each test, numbered from the right, which is for test 1. If the test fails, the corresponding bit is set to one and zero otherwise. If any bit is set following each processing step, the packet is discarded. The meaning of each test is described on the &lt;tt&gt;ntpq&lt;/tt&gt; page.&lt;/p&gt;
&lt;p&gt;The three lines identified as &lt;tt&gt;filtdelay&lt;/tt&gt;, &lt;tt&gt;filtoffset&lt;/tt&gt; and &lt;tt&gt;filtdisp&lt;/tt&gt; reveal the roundtrip delay, clock offset and dispersion for each of the last eight measurement rounds, all in milliseconds. Note that the dispersion, which is an estimate of the error, increases as the age of the sample increases. From these data, it is usually possible to determine the incidence of severe packet loss, network congestion, and unstable local clock oscillators. There are no hard and fast rules here, since every case is unique; however, if one or more of the rounds show large values or change radically from one round to another, the network is probably congested or lossy.&lt;/p&gt;
&lt;p&gt;Once the daemon has set the local clock, it will continuously track the discrepancy between local time and NTP time and adjust the local clock accordingly. There are two components of this adjustment, time and frequency. These adjustments are automatically determined by the clock discipline algorithm, which functions as a hybrid phase/frequency feedback loop. The behavior of this algorithm is carefully controlled to minimize residual errors due to network jitter and frequency variations of the local clock hardware oscillator that normally occur in practice. However, when started for the first time, the algorithm may take some time to converge on the intrinsic frequency error of the host machine.&lt;/p&gt;
&lt;p&gt;The state of the local clock itself can be determined using the &lt;tt&gt;rv&lt;/tt&gt; command (without the argument), such as&lt;/p&gt;
&lt;pre&gt;ntpq&gt; rv
status=0644 leap_none, sync_ntp, 4 events, event_peer/strat_chg,
version=&#34;ntpd 4.0.99j4-r Fri Jul  7 23:38:17 GMT 2000 (1)&#34;,
processor=&#34;i386&#34;, system=&#34;FreeBSD3.4-RELEASE&#34;, leap=00, stratum=2,
precision=-27, rootdelay=0.552, rootdispersion=12.532, peer=50255,
refid=pogo.udel.edu,
reftime=bd11b220.ac89f40a  Sat, Jul  8 2000 13:58:56.673, poll=6,
clock=bd11b225.ee201472  Sat, Jul  8 2000 13:59:01.930, state=4,
phase=0.179, frequency=44.298, jitter=0.022, stability=0.001,
hostname=&#34;barnstable.udel.edu&#34;, signature=md5WithRSAEncryption,
flags=0x80011, hostkey=3171372095, refresh=3172016539
cert=&#34;grundoon.udel.edu grundoon.udel.edu 0x3 3233600829&#34;
cert=&#34;whimsy.udel.edu whimsy.udel.edu 0x5 3233682156&#34;
&lt;/pre&gt;
&lt;p&gt;An explanation about most of these variables is in the RFC-1305 specification. The most useful ones include &lt;tt&gt;clock&lt;/tt&gt;, which shows when the clock was last adjusted, and &lt;tt&gt;reftime&lt;/tt&gt;, which shows when the server clock of &lt;tt&gt;refid&lt;/tt&gt; was last adjusted. The &lt;tt&gt;version&lt;/tt&gt;, &lt;tt&gt;processor&lt;/tt&gt; and &lt;tt&gt;system&lt;/tt&gt; values are very helpful when included in bug reports. The mean millisecond time offset (&lt;tt&gt;phase&lt;/tt&gt;) and deviation (&lt;tt&gt;jitter&lt;/tt&gt;) monitor the clock quality, while the mean PPM frequency offset (&lt;tt&gt;frequency&lt;/tt&gt;) and deviation (&lt;tt&gt;stability&lt;/tt&gt;) monitor the clock stability and serve as a useful diagnostic tool. It has been the experience of NTP operators over the years that these data represent useful environment and hardware alarms. If the motherboard fan freezes up or some hardware bit sticks, the system clock is usually the first to notice it.&lt;/p&gt;
&lt;p&gt;Among the new variables added for NTP Version 4 are the &lt;tt&gt;hostname&lt;/tt&gt;, &lt;tt&gt;signature&lt;/tt&gt;, &lt;tt&gt;flags, hostkey, refresh&lt;/tt&gt; and &lt;tt&gt;cert&lt;/tt&gt;, which are used for the Autokey public-key cryptography described on the &lt;a href=&#34;/archives/4.2.0/authopt&#34;&gt;Authentication Options&lt;/a&gt; page. The numeric values show the filestamps, in NTP seconds, that the associated media files were created. These are useful in diagnosing problems with cryptographic key consistency and ordering principles.&lt;/p&gt;
&lt;p&gt;When nothing seems to happen in the &lt;tt&gt;pe&lt;/tt&gt; billboard after some minutes, there may be a network problem. One common network problem is an access controlled router on the path to the selected peer or an access controlled server using methods described on the &lt;a href=&#34;/archives/4.2.0/accopt&#34;&gt;Access Control Options&lt;/a&gt; page. Another common problem is that the server is down or running in unsynchronized mode due to a local problem. Use the &lt;tt&gt;ntpq&lt;/tt&gt; program to spy on the server variables in the same way you can spy on your own.&lt;/p&gt;
&lt;p&gt;Normally, the daemon will adjust the local clock in small steps in such a way that system and user programs are unaware of its operation. The adjustment process operates continuously unless the apparent clock error exceeds the step threshold for a period longer than the stepout threshold, which for most Internet paths is a very rare event. If the event is simply an outlyer due to an occasional network delay spike, the correction is simply discarded; however, if the apparent time error persists for longer than the stepout threshold of about 17 minutes, the local clock is stepped or slewed to the new value as directed. This behavior is designed to resist errors due to severely congested network paths, as well as errors due to confused radio clocks upon the epoch of a leap second.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;large-frequency-errors&#34;&gt;Large Frequency Errors&lt;/h4&gt;
&lt;p&gt;The frequency tolerance of computer clock oscillators can vary widely, which can put a strain on the daemon&amp;rsquo;s ability to compensate for the intrinsic frequency error. While the daemon can handle frequency errors up to 500 parts-per-million (PPM), or 43 seconds per day, values much above 100 PPM reduce the headroom and increase the time to learn the particular value and record it in the &lt;tt&gt;ntp.drift&lt;/tt&gt; file. In extreme cases before the particular oscillator frequency error has been determined, the residual system time offsets can sweep from one extreme to the other of the 128-ms tracking window only for the behavior to repeat at 900-s intervals until the measurements have converged.&lt;/p&gt;
&lt;p&gt;In order to determine if excessive frequency error is a problem, observe the nominal &lt;tt&gt;filtoffset&lt;/tt&gt; values for a number of rounds and divide by the poll interval. If the result is something approaching 500 PPM, there is a good chance that NTP will not work properly until the frequency error is reduced by some means. A common cause is the hardware time-of-year (TOY) clock chip, which must be disabled when NTP disciplines the software clock. For some systems this can be done using the &lt;tt&gt;&lt;a href=&#34;/archives/4.2.0/tickadj&#34;&gt;tickadj&lt;/a&gt;&lt;/tt&gt; utility and the &lt;tt&gt;-s&lt;/tt&gt; command line argument. For other systems this can be done using a command in the system startup file.&lt;/p&gt;
&lt;p&gt;If the TOY chip is not the cause, the problem may be that the hardware clock frequency may simply be too slow or two fast. In some systems this might require tweaking a trimmer capacitor on the motherboard. For other systems the clock frequency can be adjusted in increments of 100 PPM using the &lt;tt&gt;tickadj&lt;/tt&gt; utility and the &lt;tt&gt;-t&lt;/tt&gt; command line argument. Note that the &lt;tt&gt;tickadj&lt;/tt&gt; alters certain kernel variables and, while the utility attempts to figure out an acceptable way to do this, there are many cases where &lt;tt&gt;tickadj&lt;/tt&gt; is incompatible with a running kernel.&lt;/p&gt;
&lt;h4 id=&#34;access-controls&#34;&gt;Access Controls&lt;/h4&gt;
&lt;p&gt;Provisions are included in &lt;tt&gt;ntpd&lt;/tt&gt; for access controls which deflect unwanted traffic from selected hosts or networks. The controls described on the &lt;a href=&#34;/archives/4.2.0/accopt&#34;&gt;Access Control Options&lt;/a&gt; include detailed packet filter operations based on source address and address mask. Normally, filtered packets are dropped without notice other than to increment tally counters. However, the server can be configured to send a &amp;ldquo;kiss-o&#39;-death&amp;rdquo; (KOD) packet to the client either when explicitly configured or when cryptographic authentication fails for some reason. The client association is permanently disabled, the access denied bit (TEST4) is set in the flash variable and a message is sent to the system log.&lt;/p&gt;
&lt;p&gt;The access control provisions include a limit on the packet rate from a host or network. If an incoming packet exceeds the limit, it is dropped and a KOD sent to the source. If this occurs after the client association has synchronized, the association is not disabled, but a message is sent to the system log. See the &lt;a href=&#34;/archives/4.2.0/accopt&#34;&gt;Access Control Options&lt;/a&gt; page for further information.&lt;/p&gt;
&lt;h4 id=&#34;large-delay-variations&#34;&gt;Large Delay Variations&lt;/h4&gt;
&lt;p&gt;In some reported scenarios an access line may show low to moderate network delays during some period of the day and moderate to high delays during other periods. Often the delay on one direction of transmission dominates, which can result in large time offset errors, sometimes in the range up to a few seconds. It is not usually convenient to run &lt;tt&gt;ntpd&lt;/tt&gt; throughout the day in such scenarios, since this could result in several time steps, especially if the condition persists for greater than the stepout threshold.&lt;/p&gt;
&lt;p&gt;Specific provisions have been built into &lt;tt&gt;ntpd&lt;/tt&gt; to cope with these problems. The scheme is called &amp;ldquo;huff-&amp;lsquo;n-puff and is described on the &lt;a href=&#34;/archives/4.2.0/miscopt&#34;&gt;Miscellaneous Options&lt;/a&gt; page. An alternative approach in such scenarios is first to calibrate the local clock frequency error by running &lt;tt&gt;ntpd&lt;/tt&gt; in continuous mode during the quiet interval and let it write the frequency to the &lt;tt&gt;ntp.drift&lt;/tt&gt; file. Then, run &lt;tt&gt;ntpd -q&lt;/tt&gt; from a cron job each day at some time in the quiet interval. In systems with the nanokernel or microkernel performance enhancements, including Solaris, Tru64, Linux and FreeBSD, the kernel continuously disciplines the frequency so that the residual correction produced by &lt;tt&gt;ntpd&lt;/tt&gt; is usually less than a few milliseconds.&lt;/p&gt;
&lt;h4 id=&#34;cryptographic-authentication&#34;&gt;Cryptographic Authentication&lt;/h4&gt;
&lt;p&gt;Reliable source authentication requires the use of symmetric key or public key cryptography, as described on the &lt;a href=&#34;/archives/4.2.0/authopt&#34;&gt;Authentication Options&lt;/a&gt; page. In symmetric key cryptography servers and clients share session keys contained in a secret key file In public key cryptography, which requires the OpenSSL software library, the server has a private key, never shared, and a public key with unrestricted distribution. The cryptographic media required are produced by the &lt;a href=&#34;/archives/4.2.0/keygen&#34;&gt;&lt;tt&gt;ntp-keygen&lt;/tt&gt;&lt;/a&gt; program.&lt;/p&gt;
&lt;p&gt;Problems with symmetric key authentication are usually due to mismatched keys or improper use of the &lt;tt&gt;trustedkey&lt;/tt&gt; command. A simple way to check for problems is to use the trace facility, which is enabled using the &lt;tt&gt;ntpd -d&lt;/tt&gt; command line. As each packet is received a trace line is displayed which shows the authentication status in the &lt;tt&gt;auth&lt;/tt&gt; field. A status of 1 indicates the packet was successful authenticated; otherwise it has failed.&lt;/p&gt;
&lt;p&gt;A common misconception is the implication of the &lt;tt&gt;auth&lt;/tt&gt; bit in the &lt;tt&gt;enable&lt;/tt&gt; and &lt;tt&gt;disable&lt;/tt&gt; commands. &lt;strong&gt;This bit does not affect authentication in any way other than to enable or disable mobilization of a new persistent association in broadcast/multicast client, manycast client or symmetric passive modes.&lt;/strong&gt; If enabled, which is the default, these associations require authentication; if not, an association is mobilized even if not authenticated. Users are cautioned that running with authentication disabled is very dangerous, since an intruder can easily strike up an association and inject false time values.&lt;/p&gt;
&lt;p&gt;Public key cryptography is supported in NTPv4 using the Autokey protocol, which is described in briefings on the NTP Project page linked from &lt;a href=&#34;http://www.ntp.org&#34;&gt;www.ntp.org&lt;/a&gt;. Development of this protocol is mature and the &lt;tt&gt;ntpd&lt;/tt&gt; implementation is basically complete. Autokey version 2, which is the latest and current version, includes provisions to hike certificate trails, operate as certificate authorities and verify identity using challenge/response identification schemes. Further details of the protocol are on the &lt;a href=&#34;/archives/4.2.0/authopt&#34;&gt;Authentication Options&lt;/a&gt; page. Common problems with configuration and key generation are mismatched key files, broken links and missing or broken random seed file.&lt;/p&gt;
&lt;p&gt;As in the symmetric key cryptography case, the trace facility is a good way to verify correct operation. A statistics file &lt;tt&gt;cryptostats&lt;/tt&gt; records protocol transactions and error messages. The daemon requires a random seed file, public/private key file and a valid certificate file; otherwise it exits immediately with a message to the system log. As each file is loaded a trace message appears with its filestamp. There are a number of checks to insure that only consistent data are used and that the certificate is valid. When the protocol is in operation a number of checks are done to verify the server has the expected credentials and its filestamps and timestamps are consistent. Errors found are reported using NTP control and monitoring protocol traps with extended trap codes shown in the Authentication Options page.&lt;/p&gt;
&lt;p&gt;To assist debugging every NTP extension field is displayed in the trace along with the Autokey operation code. Every extension field carrying a verified signature is identified and displayed along with filestamp and timestamp where meaningful. In all except broadcast/multicast client mode, correct operation of the protocol is confirmed by the absence of extension fields and an &lt;tt&gt;auth&lt;/tt&gt; value of one. It is normal in broadcast/multicast client mode that the broadcast server use one extension field to show the host name, status word and association ID.&lt;/p&gt;
&lt;h4 id=&#34;debugging-checklist&#34;&gt;Debugging Checklist&lt;/h4&gt;
&lt;p&gt;If the &lt;tt&gt;ntpq&lt;/tt&gt; or &lt;tt&gt;ntpdc&lt;/tt&gt; programs do not show that messages are being received by the daemon or that received messages do not result in correct synchronization, verify the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Verify the &lt;tt&gt;/etc/services&lt;/tt&gt; file host machine is configured to accept UDP packets on the NTP port 123. NTP is specifically designed to use UDP and does not respond to TCP.&lt;/li&gt;
&lt;li&gt;Check the system log for &lt;tt&gt;ntpd&lt;/tt&gt; messages about configuration errors, name-lookup failures or initialization problems. Common system log messages are summarized on the &lt;a href=&#34;/archives/4.2.0/msyslog&#34;&gt;&lt;tt&gt;ntpd&lt;/tt&gt; System Log Messages&lt;/a&gt; page. Check to be sure that only one copy of &lt;tt&gt;ntpd&lt;/tt&gt; is running.&lt;/li&gt;
&lt;li&gt;Verify using &lt;tt&gt;ping&lt;/tt&gt; or other utility that packets actually do make the round trip between the client and server. Verify using &lt;tt&gt;nslookup&lt;/tt&gt; or other utility that the DNS server names do exist and resolve to valid Internet addresses.&lt;/li&gt;
&lt;li&gt;Check that the remote NTP server is up and running. The usual evidence that it is not is a &lt;tt&gt;Connection refused&lt;/tt&gt; message.&lt;/li&gt;
&lt;li&gt;Using the &lt;tt&gt;ntpdc&lt;/tt&gt; program, verify that the packets received and packets sent counters are incrementing. If the sent counter does not increment and the configuration file includes configured servers, something may be wrong in the host network or interface configuration. If this counter does increment, but the received counter does not increment, something may be wrong in the network or the server NTP daemon may not be running or the server itself may be down or not responding.&lt;/li&gt;
&lt;li&gt;If both the sent and received counters do increment, but the &lt;tt&gt;reach&lt;/tt&gt; values in the &lt;tt&gt;pe&lt;/tt&gt; billboard with &lt;tt&gt;ntpq&lt;/tt&gt; continues to show zero, received packets are probably being discarded for some reason. If this is the case, the cause should be evident from the &lt;tt&gt;flash&lt;/tt&gt; variable as discussed above and on the &lt;tt&gt;ntpq&lt;/tt&gt; page. It could be that the server has disabled access for the client address, in which case the refid field in the &lt;tt&gt;ntpq pe&lt;/tt&gt; billboard will show a kiss code. See earlier on this page for a list of kiss codes and their meaning.&lt;/li&gt;
&lt;li&gt;If the &lt;tt&gt;reach&lt;/tt&gt; values in the &lt;tt&gt;pe&lt;/tt&gt; billboard show the servers are alive and responding, note the tattletale symbols at the left margin, which indicate the status of each server resulting from the various grooming and mitigation algorithms. The interpretation of these symbols is discussed on the &lt;tt&gt;ntpq&lt;/tt&gt; page. After a few minutes of operation, one or another of the reachable server candidates should show a * tattletale symbol. If this doesn&amp;rsquo;t happen, the intersection algorithm, which classifies the servers as truechimers or falsetickers, may be unable to find a majority of truechimers among the server population.&lt;/li&gt;
&lt;li&gt;If all else fails, see the FAQ and/or the discussion and briefings at the NTP Project page.&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: NTP PARSE clock data formats</title>
      <link>/archives/4.2.0/parsedata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/parsedata/</guid>
      <description>
        
        
        &lt;p&gt;The parse driver currently supports several clocks with different query mechanisms. In order for you to find a sample that might be similar to a clock you might want to integrate into parse I&amp;rsquo;ll sum up the major features of the clocks (this information is distributed in the &lt;code&gt;parse/clk_*.c&lt;/code&gt; and &lt;code&gt;ntpd/refclock_parse.c&lt;/code&gt; files).&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/parsedata/#meinberg-clocks&#34;&gt;Meinberg clocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/parsedata/#raw-dcf77-data-via-serial-line&#34;&gt;Raw DCF77 Data via serial line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/parsedata/#dcf77-raw-time-code&#34;&gt;DCF77 raw time code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/parsedata/#schmid-clock&#34;&gt;Schmid clock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/parsedata/#trimble-sv6-ascii-time-code-taip&#34;&gt;Trimble SV6 ASCII time code (TAIP)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/parsedata/#elv-dcf7000&#34;&gt;ELV DCF7000&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/parsedata/#hopf-6021-und-kompatible&#34;&gt;HOPF 6021 und Kompatible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/parsedata/#diem-computime-clock&#34;&gt;Diem Computime Clock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/parsedata/#wharton-400a-series-clock-with-a-4042-serial-interface&#34;&gt;WHARTON 400A Series Clock with a 404.2 Serial interface&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;meinberg-clocks&#34;&gt;Meinberg clocks&lt;/h4&gt;
&lt;pre&gt;Meinberg: start=&lt;STX&gt;, end=&lt;ETX&gt;, sync on start
      pattern=&#34;\2D:  .  .  ;T: ;U:  .  .  ;    \3&#34;
      pattern=&#34;\2  .  .  ;  ;   :  :  ;        \3&#34;
      pattern=&#34;\2  .  .  ;  ;   :  :  ;    :  ;        ;   .         .       &#34;
&lt;/pre&gt;
&lt;p&gt;Meinberg is a German manufacturer of time code receivers. Those clocks have a pretty common output format in the stock version. In order to support NTP Meinberg was so kind to produce some special versions of the firmware for the use with NTP. So, if you are going to use a Meinberg clock please ask whether there is a special Uni Erlangen version. You can reach &lt;a href=&#34;http://www.meinberg.de/&#34;&gt;Meinberg&lt;/a&gt; via the Web. Information can also be ordered via eMail from &lt;a href=&#34;mailto:%20info@meinberg.de&#34;&gt;info@meinberg.de&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;General characteristics:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Meinberg clocks primarily output pulse per second and a describing ASCII string. This string can be produced in two modes: either upon the reception of a question mark or every second. NTP uses the latter mechanism. DCF77 AM clocks have a limited accuracy of a few milliseconds. The DCF77 PZF5xx variants provide higher accuracy and have a pretty good relationship between RS232 time code and the PPS signal. Except for early versions of the old GPS166 receiver type, Meinberg GPS receivers have a very good timing relationship between the datagram and the pulse. The beginning of the start bit of the first character has basically the same accuracy as the PPS signal, plus a jitter of up to 1 bit time depending on the selected baud rate, i.e. 52 μs @ 19200. PPS support should always be used, if possible, in order to yield the highest possible accuracy.&lt;/p&gt;
&lt;p&gt;The preferred tty setting for Meinberg DCF77 receivers is 9600/7E2:&lt;/p&gt;
&lt;pre&gt;		CFLAG		(B9600|CS7|PARENB|CREAD|HUPCL)
		IFLAG		(IGNBRK|IGNPAR|ISTRIP)
		OFLAG		0
		LFLAG		0
        &lt;/pre&gt;
&lt;p&gt;The tty setting for Meinberg GPS16x/17x receivers is 19200/8N1:&lt;/p&gt;
&lt;pre&gt;		CFLAG		(B19200|CS8|PARENB|CREAD|HUPCL)
		IFLAG		(IGNBRK|IGNPAR|ISTRIP)
		OFLAG		0
		LFLAG		0
        &lt;/pre&gt;
&lt;p&gt;All clocks should be run at datagram once per second.&lt;/p&gt;
&lt;p&gt;Format of the Meinberg standard time string:&lt;/p&gt;
&lt;pre&gt;        **_&lt;STX&gt;_D:_dd.mm.yy_;T:_w_;U:_hh.mm.ss_;_uvxy__&lt;ETX&gt;_**
    pos:  0  000000001111111111222222222233  3
          1  234567890123456789012345678901  2

    _&lt;STX&gt;_         = start-of-text, ASCII code 0x02
    _dd.mm.yy_      = day of month, month, year of the century, separated by dots
    _w_             = day of week (1..7, Monday = 1)
    _hh:mm:ss_      = hour, minute, second, separated by dots
    _u_             = &#39;#&#39; for GPS receivers: time is **not** synchronized
                           &#39;#&#39; for older PZF5xx receivers: no correlation, not synchronized
                           &#39;#&#39; for other devices: never sync&#39;ed since powerup
                           &#39; &#39; if nothing of the above applies
    _v_             = &#39;*&#39; for GPS receivers: position has **not** been verified
                           &#39;*&#39; for other devices: freewheeling based on internal quartz
                           &#39; &#39; if nothing of the above applies
    _x_             = &#39;U&#39; if UTC time is transmitted
                           &#39;S&#39; if daylight saving time is active
                           &#39; &#39; if nothing of the above applies
    _y_             = &#39;!&#39; during the hour preceding start or end of daylight saving time
                           &#39;A&#39; during the hour preceding a leap second
                           &#39; &#39; if nothing of the above applies
    _&lt;ETX&gt;_         = end-of-text, ASCII code 0x03
&lt;/pre&gt;
&lt;p&gt;Format of the Uni Erlangen time string for PZF5xx receivers:&lt;/p&gt;
&lt;pre&gt;        **_&lt;STX&gt;__dd.mm.yy_; _w_; _hh:mm:ss_; _tuvxyza__&lt;ETX&gt;_**
    pos:  0  000000001111111111222222222233  3
          1  234567890123456789012345678901  2

    _&lt;STX&gt;_         = start-of-text, ASCII code 0x02
    _dd.mm.yy_      = day of month, month, year of the century, separated by dots
    _w_             = day of week (1..7, Monday = 1)
    _hh:mm:ss_      = hour, minute, second, separated by colons

    _t_             = &#39;U&#39; if UTC time is transmitted, else &#39; &#39;
    _u_             = &#39;#&#39; for older PZF5xx receivers: no correlation, not synchronized
                           &#39;#&#39; for PZF511 and newer: never sync&#39;ed since powerup
                           &#39; &#39; if nothing of the above applies
    _v_             = &#39;*&#39; if freewheeling based on internal quartz, else &#39; &#39;
    _x_             = &#39;S&#39; if daylight saving time is active, else &#39; &#39;
    _y_             = &#39;!&#39; during the hour preceding start or end of daylight saving time, else &#39; &#39;
    _z_             = &#39;A&#39; during the hour preceding a leap second, else &#39; &#39;
    _a_             = &#39;R&#39; alternate antenna (reminiscent of PZF5xx), usually &#39; &#39; for GPS receivers
    _&lt;ETX&gt;_         = end-of-text, ASCII code 0x03
&lt;/pre&gt;
&lt;p&gt;Format of the Uni Erlangen time string for GPS16x/GPS17x receivers:&lt;/p&gt;
&lt;pre&gt;        **_&lt;STX&gt;__dd.mm.yy_; _w_; _hh:mm:ss_; _+uu:uu_; _uvxyzab_; _ll.lllln_ _lll.lllle_ _hhhh_m_&lt;ETX&gt;_**
    pos:  0  0000000011111111112222222222333333333344444444445555555555666666  6
          1  2345678901234567890123456789012345678901234567890123456789012345  6

    _&lt;STX&gt;_         = start-of-text, ASCII code 0x02
    _dd.mm.yy_      = day of month, month, year of the century, separated by dots
    _w_             = day of week (1..7, Monday = 1)
    _hh:mm:ss_      = hour, minute, second, separated by colons
    _+uu:uu_        = offset to UTC in hours and minutes, preceded by + or -
    _u_             = &#39;#&#39; if time is **not** synchronized, else &#39; &#39;
    _v_             = &#39;*&#39; if position has **not** been verified, else &#39; &#39;
    _x_             = &#39;S&#39; if daylight saving time is active, else &#39; &#39;
    _y_             = &#39;!&#39; during the hour preceding start or end of daylight saving time, else &#39; &#39;
    _z_             = &#39;A&#39; during the hour preceding a leap second, else &#39; &#39;
    _a_             = &#39;R&#39; alternate antenna (reminiscent of PZF5xx), usually &#39; &#39; for GPS receivers
    _b_             = &#39;L&#39; during a leap second, i.e. if the seconds field is 60, else &#39; &#39;
    _ll.lllln_      = position latitude in degrees, &#39;n&#39; can actually be &#39;N&#39; or &#39;S&#39;, i.e. North or South
    _lll.lllle_     = position longitude in degrees, &#39;e&#39; can actually be &#39;E&#39; or &#39;W&#39;, i.e. East or West
    _hhhh_          = position altitude in meters, always followed by &#39;m&#39;
    _&lt;ETX&gt;_         = end-of-text, ASCII code 0x03
&lt;/pre&gt;
&lt;p&gt;Examples for Uni Erlangen strings from GPS receivers:&lt;/p&gt;
&lt;pre&gt;        \x02 09.07.93; 5; 08:48:26; +00:00;        ; 49.5736N  11.0280E  373m \x03
        \x02 08.11.06; 3; 14:39:39; +00:00;        ; 51.9828N   9.2258E  176m \x03
&lt;/pre&gt;
&lt;p&gt;The Uni Erlangen formats should be used preferably. Newer Meinberg GPS receivers can be configured to transmit that format, for older devices there may be a special firmware version available.&lt;/p&gt;
&lt;p&gt;For the Meinberg parse look into &lt;code&gt;clk_meinberg.c&lt;/code&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;raw-dcf77-data-via-serial-line&#34;&gt;Raw DCF77 Data via serial line&lt;/h4&gt;
&lt;p&gt;RAWDCF: end=TIMEOUT&amp;gt;1.5s, sync each char (any char),generate pseudo time codes, fixed format&lt;/p&gt;
&lt;p&gt;direct DCF77 code input&lt;/p&gt;
&lt;p&gt;In Europe it is relatively easy/cheap the receive the german time code transmitter DCF77. The simplest version to process its signal is to feed the 100/200ms pulse of the demodulated AM signal via a level converter to an RS232 port at 50Baud. parse/clk_rawdcf.c holds all necessary decoding logic for the time code which is transmitted each minute for one minute. A bit of the time code is sent once a second.&lt;/p&gt;
&lt;pre&gt;	The preferred tty setting is:
		CFLAG           (B50|CS8|CREAD|CLOCAL)
		IFLAG		0
		OFLAG		0
 		LFLAG		0
&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;dcf77-raw-time-code&#34;&gt;DCF77 raw time code&lt;/h4&gt;
&lt;p&gt;From &amp;ldquo;Zur Zeit&amp;rdquo;, Physikalisch-Technische Bundesanstalt (PTB), Braunschweig und Berlin, März 1989&lt;/p&gt;
&lt;p&gt;Timecode transmission:&lt;/p&gt;
&lt;pre&gt;	AM:

	time marks are send every second except for the second before the
	next minute mark
	time marks consist of a reduction of transmitter power to 25%
	of the nominal level
	the falling edge is the time indication (on time)
	time marks of a 100ms duration constitute a logical 0
	time marks of a 200ms duration constitute a logical 1
&lt;/pre&gt;
&lt;p&gt;see the spec. (basically a (non-)inverted pseudo random phase shift) encoding:&lt;/p&gt;
&lt;pre&gt;	FM:

	Second	Contents
	0  - 10	AM: free, FM: 0
	11 - 14	free
	15		R     - alternate antenna
	16		A1    - expect zone change (1 hour before)
	17 - 18	Z1,Z2 - time zone
		 0  0 illegal
		 0  1 MEZ  (MET)
		 1  0 MESZ (MED, MET DST)
		 1  1 illegal
	19	A2    - expect leap insertion/deletion (1 hour before)
	20	S     - start of time code (1)
	21 - 24	M1    - BCD (lsb first) Minutes
	25 - 27	M10   - BCD (lsb first) 10 Minutes
	28	P1    - Minute Parity (even)
	29 - 32	H1    - BCD (lsb first) Hours
	33 - 34	H10   - BCD (lsb first) 10 Hours
	35	P2    - Hour Parity (even)
	36 - 39	D1    - BCD (lsb first) Days
	40 - 41	D10   - BCD (lsb first) 10 Days
	42 - 44	DW    - BCD (lsb first) day of week (1: Monday -&gt; 7: Sunday)
	45 - 49	MO1   - BCD (lsb first) Month
	50	MO10  - 10 Months
	51 - 53	Y1    - BCD (lsb first) Years
	54 - 57	Y10   - BCD (lsb first) 10 Years
	58 	P3    - Date Parity (even)
	59	      - usually missing (minute indication), except for leap insertion
&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;schmid-clock&#34;&gt;Schmid clock&lt;/h4&gt;
&lt;p&gt;Schmid clock: needs poll, binary input, end=&#39;\xFC&#39;, sync start&lt;/p&gt;
&lt;p&gt;The Schmid clock is a DCF77 receiver that sends a binary time code at the reception of a flag byte. The contents if the flag byte determined the time code format. The binary time code is delimited by the byte 0xFC.&lt;/p&gt;
&lt;pre&gt;	TTY setup is:
		CFLAG		(B1200|CS8|CREAD|CLOCAL)
		IFLAG		0
		OFLAG		0
 		LFLAG		0

&lt;/pre&gt;
&lt;p&gt;The command to Schmid&amp;rsquo;s DCF77 clock is a single byte; each bit allows the user to select some part of the time string, as follows (the output for the lsb is sent first).&lt;/p&gt;
&lt;pre&gt;	Bit 0:	time in MEZ, 4 bytes *binary, not BCD*; hh.mm.ss.tenths
	Bit 1:	date 3 bytes *binary, not BCD: dd.mm.yy
	Bit 2:	week day, 1 byte (unused here)
	Bit 3:	time zone, 1 byte, 0=MET, 1=MEST. (unused here)
	Bit 4:	clock status, 1 byte,	0=time invalid,
					1=time from crystal backup,
					3=time from DCF77
	Bit 5:	transmitter status, 1 byte,
					bit 0: backup antenna
					bit 1: time zone change within 1h
					bit 3,2: TZ 01=MEST, 10=MET
					bit 4: leap second will be
						added within one hour
					bits 5-7: Zero
	Bit 6:	time in backup mode, units of 5 minutes (unused here)
&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;trimble-sv6-ascii-time-code-taip&#34;&gt;Trimble SV6 ASCII time code (TAIP)&lt;/h4&gt;
&lt;p&gt;Trimble SV6: needs poll, ascii timecode, start=&#39;&amp;gt;&#39;, end=&#39;&amp;lt;&#39;, query=&#39;&amp;gt;QTM&amp;lt;&#39;, eol=&#39;&amp;lt;&#39;&lt;/p&gt;
&lt;p&gt;Trimble SV6 is a GPS receiver with PPS output. It needs to be polled. It also need a special tty mode setup (EOL=&#39;&amp;lt;&#39;).&lt;/p&gt;
&lt;pre&gt;	TTY setup is:
		CFLAG            (B4800|CS8|CREAD)
		IFLAG            (BRKINT|IGNPAR|ISTRIP|ICRNL|IXON)
		OFLAG            (OPOST|ONLCR)
		LFLAG            (ICANON|ECHOK)
&lt;/pre&gt;
&lt;p&gt;Special flags are:&lt;/p&gt;
&lt;pre&gt;		PARSE_F_PPSPPS	    - use CIOGETEV for PPS time stamping
		PARSE_F_PPSONSECOND - the time code is not related to
				      the PPS pulse (so use the time code
				      only for the second epoch)

	Timecode
	0000000000111111111122222222223333333	/ char
	0123456789012345678901234567890123456	\ posn
	&gt;RTMhhmmssdddDDMMYYYYoodnnvrrrrr;*xx&lt;	Actual
	----33445566600112222BB7__-_____--99-	Parse
	&gt;RTM                      1     ;*  &lt; 	Check
&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;elv-dcf7000&#34;&gt;ELV DCF7000&lt;/h4&gt;
&lt;p&gt;ELV DCF7000: end=&#39;\r&#39;, pattern=&amp;quot; - - - - - - - \r&amp;quot;&lt;/p&gt;
&lt;p&gt;The ELV DCF7000 is a cheap DCF77 receiver sending each second a time code (though not very precise!) delimited by &amp;lsquo;`r&amp;rsquo;&lt;/p&gt;
&lt;pre&gt;	Timecode
	  YY-MM-DD-HH-MM-SS-FF\r

		FF&amp;0x1	- DST
		FF&amp;0x2	- DST switch warning
		FF&amp;0x4  - unsynchronised
&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;hopf-6021-und-kompatible&#34;&gt;HOPF 6021 und Kompatible&lt;/h4&gt;
&lt;p&gt;HOPF Funkuhr 6021 mit serieller Schnittstelle Created by F.Schnekenbuehl &lt;a href=&#34;mailto:frank@comsys.dofn.de&#34;&gt;frank@comsys.dofn.de&lt;/a&gt; from clk_rcc8000.c Nortel DASA Network Systems GmbH, Department: ND250 A Joint venture of Daimler-Benz Aerospace and Nortel.&lt;/p&gt;
&lt;pre&gt; hopf Funkuhr 6021 
      used with 9600,8N1,
      UTC via serial line
      &#34;Sekundenvorlauf&#34; ON
      ETX zum Sekundenvorlauf ON
      dataformat 6021
      output time and date
      transmit with control characters
      transmit evry second
 &lt;/pre&gt;
&lt;p&gt;Type 6021 Serial Output format&lt;/p&gt;
&lt;pre&gt;      000000000011111111 / char
      012345678901234567 \ position
      sABHHMMSSDDMMYYnre  Actual
       C4110046231195     Parse
      s              enr  Check

  s = STX (0x02), e = ETX (0x03)
  n = NL  (0x0A), r = CR  (0x0D)

  A B - Status and weekday

  A - Status

      8 4 2 1
      x x x 0  - no announcement
      x x x 1  - Summertime - wintertime - summertime announcement
      x x 0 x  - Wintertime
      x x 1 x  - Summertime
      0 0 x x  - Time/Date invalid
      0 1 x x  - Internal clock used 
      1 0 x x  - Radio clock
      1 1 x x  - Radio clock highprecision

  B - 8 4 2 1
      0 x x x  - MESZ/MEZ
      1 x x x  - UTC
      x 0 0 1  - Monday
      x 0 1 0  - Tuesday
      x 0 1 1  - Wednesday
      x 1 0 0  - Thursday
      x 1 0 1  - Friday
      x 1 1 0  - Saturday
      x 1 1 1  - Sunday
&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;diem-computime-clock&#34;&gt;Diem Computime Clock&lt;/h4&gt;
&lt;p&gt;The Computime receiver sends a datagram in the following format every minute&lt;/p&gt;
&lt;pre&gt;   
   Timestamp	T:YY:MM:MD:WD:HH:MM:SSCRLF 
   Pos          0123456789012345678901 2 3
		0000000000111111111122 2 2
   Parse        T:  :  :  :  :  :  :  \r\n

   T	Startcharacter &#34;T&#34; specifies start of the timestamp 
   YY	Year MM	Month 1-12 
   MD	Day of the month 
   WD	Day of week 
   HH	Hour 
   MM   Minute 
   SS   Second
   CR   Carriage return 
   LF   Linefeed
&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;wharton-400a-series-clock-with-a-4042-serial-interface&#34;&gt;WHARTON 400A Series Clock with a 404.2 Serial interface&lt;/h4&gt;
&lt;p&gt;The WHARTON 400A Series clock is able to send date/time serial messages in 7 output formats. We use format 1 here because it is the shortest. We set up the clock to send a datagram every second. For use with this driver, the WHARTON 400A Series clock must be set-up as follows :&lt;/p&gt;
&lt;pre&gt;  					Programmable	Selected
  					Option No	Option
	BST or CET display		3		9 or 11
	No external controller		7		0
	Serial Output Format 1		9		1
	Baud rate 9600 bps		10		96
	Bit length 8 bits		11		8
	Parity even			12		E
&lt;/pre&gt;
&lt;p&gt;WHARTON 400A Series output format 1 is as follows :&lt;/p&gt;
&lt;pre&gt;   Timestamp	STXssmmhhDDMMYYSETX
   Pos		0  12345678901234
  		0  00000000011111

   STX	start transmission (ASCII 0x02)
   ETX	end transmission (ASCII 0x03)
   ss	Second expressed in reversed decimal (units then tens)
   mm	Minute expressed in reversed decimal
   hh	Hour expressed in reversed decimal
   DD	Day of month expressed in reversed decimal
   MM	Month expressed in reversed decimal (January is 1)
   YY	Year (without century) expressed in reversed decimal
   S	Status byte : 0x30 +
		bit 0	0 = MSF source		1 = DCF source
		bit 1	0 = Winter time		1 = Summer time
		bit 2	0 = not synchronised	1 = synchronised
		bit 3	0 = no early warning	1 = early warning
&lt;/pre&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: NTP Version 4 Release Notes</title>
      <link>/archives/4.2.0/release/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/release/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/hornraba.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/%7emills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The rabbit toots to make sure you read this.&lt;/p&gt;
&lt;p&gt;Last update: 10:24 PM UTC Tuesday, August 05, 2003&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/release/#new-features&#34;&gt;New Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/release/#nasty-surprises&#34;&gt;Nasty Surprises&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;This release of the NTP Version 4 (NTPv4) daemon for Unix, VMS and Windows incorporates new features and refinements to the NTP Version 3 (NTPv3) algorithms. However, it continues the tradition of retaining backwards compatibility with older versions, including NTPv3 and NTPv2, but not NTPv1. Support for NTPv1 has been discontinued because of certain security vulnerabilities. The NTPv4 version has been under development for quite a while and isn&amp;rsquo;t finished yet. In fact, quite a number of NTPv4 features have already been retrofitted in the older NTPv3, although this version is not actively maintained by the NTPv4 developer corps.&lt;/p&gt;
&lt;p&gt;The code compiles and runs properly in all test host configurations available to the developer corps, including Sun Microsystems, Digital/Compaq, Hewlett Packard, FreeBSD and Linux. Other volunteers have verified it works in IRIX and certain versions of Windows NT and several others. We invite comments and corrections about the various architectures, operating systems and hardware complement that can&amp;rsquo;t be verified by the developer corps. Of particular interest are Windows, VMS and various reference clock drivers. As always, corrections and bugfixes are warmly received, especially in the form of context diffs sent to &lt;a href=&#34;mailto:bugs@ntp.org&#34;&gt;bugs@ntp.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This release has been compiled and tested on many systems, including SunOS 4.1.3, Solaris 2.5.1-2.8, Alpha Tru64 4.0-5.1, Ultrix 4.4, Linux 2.4.2, FreeBSD 4.5 and HP-UX 10.02. It has been compiled and tested by others on Windows NT4, 2000 and XP, but not yet on other Windows versions or for VMS. There are several new features apparently incompatible with Linux systems, including some modes used with the Autokey protocol. The developers corps looks for help elsewhere to resolve these differences. We are relying on the NTP volunteer corps to do that.&lt;/p&gt;
&lt;p&gt;This note summarizes the differences between this software release of NTPv4, called ntp-4.x.x, and the previous NTPv3 version, called xntp3-5.x.x. Additional information on protocol compatibility details is on the &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/biblio.html&#34;&gt;Protocol Conformance Statement&lt;/a&gt; page.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;new-features&#34;&gt;New Features&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Support for the IPv6 addressing family is included in this distribution. If the Basic Socket Interface Extensions for IPv6 (RFC-2553) is detected, support for the IPv6 address family is generated in addition to the default support for the IPv4 address family. Combination IPv6 and IPv4 configurations have been successfully tested in all protocol modes supported by NTP and using both symmetric and public key (Autokey) cryptography. However, users should note that IPv6 support is new and we have not had a lot of experience with it in various operational scenarios and local infrastructure environments. As always, feedback is welcome.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Most calculations are now done using 64-bit floating double format, rather than 64-bit fixed point format. The motivation for this is to reduce size, improve speed and avoid messy bounds checking. Workstations of today are much faster than when the original NTP version was designed in the early 1980s, and it is rare to find a processor architecture that does not support floating double. The fixed point format is still used with raw timestamps, in order to retain the full precision of about 212 picoseconds. However, the algorithms which process raw timestamps all produce fixed point differences before converting to floating double. The differences are ordinarily quite small so can be expressed without loss of accuracy in this format.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The clock discipline algorithms have been redesigned to improve accuracy, reduce the impact of network jitter and allow increased in poll intervals to well over one day with only moderate sacrifice in accuracy. A new feature called &lt;tt&gt;huffpuff&lt;/tt&gt; maximizes accuracy in cases of highly asymmetric network delays typical of ISDN and modem access circuits. The NTPv4 design allows servers to increase the poll intervals even when synchronized directly to the peer. In NTPv3 the poll interval in such cases was clamped to the minimum, usually 64 s. For those servers with hundreds of clients, the new design can dramatically reduce the network load, especially when large numbers of potential clients, as in national laboratory services. A scheme designed to reduce &amp;ldquo;clockhopping&amp;rdquo; when the choice of servers changes frequently as the result of comparatively insignificant quality changes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This release includes support for the &lt;a href=&#34;https://www.eecis.udel.edu/~ntp/ntp_spool/software/nanokernel.tar.gz&#34;&gt;&lt;em&gt;nanokernel&lt;/em&gt;&lt;/a&gt; precision time kernel support, which is now in stock Linux and FreeBSD kernels. If a precision time source such as a GPS timing receiver or cesium clock is available, kernel timekeeping can be improved to the order of one microsecond. The older &lt;em&gt;microtime&lt;/em&gt; kernel for Digital/Compaq/HP Tru64, Digital Ultrix, as well as Sun Microsystems SunOS and Solaris, continues to be supported.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This release includes support for Autokey public-key cryptography, which is the preferred scheme for authenticating servers to clients. Autokey Version 2 uses NTP header extension fields and protocols as described on the NTP project page linked from &lt;a href=&#34;http://www.ntp.org&#34;&gt;www.ntp.org&lt;/a&gt;. This release includes support for additional message digest and digital signature schemes supported by the OpenSSL software library, as well as new identity schemes based on cryptographic challenge/response algorithms. The new design greatly simplifies key generation and distribution and provides orderly key refreshment. Security procedures and media formats are consistent with industry standard X.509 Version 3 certificates and authority procedures. Specific improvements to the protocol include a reduction in the number of messages required and a method to protect the cookie used in client/server mode against disclosure. Additional information about Autokey cryptography is contained in the &lt;a href=&#34;/archives/4.2.0/authopt&#34;&gt;Authentication Options&lt;/a&gt; page and links from there. See also the new &lt;tt&gt;cryptostats&lt;/tt&gt; monitoring statistics file in the &lt;a href=&#34;/archives/4.2.0/monopt&#34;&gt;Monitoring Options&lt;/a&gt; page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This release includes support for a discrete event simulator (DES), which allows the NTP algorithms to be tested in an embedded environment with systematic and pseudorandom network delay and oscillator wander distributions. This has been used to verify correct operation under conditions of extreme error and misconfiguration. See the &lt;a href=&#34;/archives/4.2.0/ntpdsim&#34;&gt;&lt;tt&gt;ntpdsim&lt;/tt&gt; - Network Time Protocol (NTP) simulator&lt;/a&gt; page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NTPv4 includes two new association modes which in most applications can avoid per-host configuration altogether. Both of these are based on IP multicast technology and Autokey cryptography. They provide automatic discovery, configuration and authentication of servers and clients without identifying servers or clients in advance. In multicast mode a server sends a message at fixed intervals using specified multicast group addresses, while clients listen on these addresses.&lt;/p&gt;
&lt;p&gt;Upon receiving the first message, a client exchanges several messages with the server in order to calibrate the multicast propagation delay between the client and server and run the authentication protocol. In manycast mode a client sends a message to a specified multicast group address and expects one or more servers to reply. Using engineered algorithms, the client selects an appropriate subset of servers from the messages received and continues an ordinary client/server campaign. The manycast scheme can provide somewhat better accuracy than the multicast scheme at the price of additional network overhead. See the &lt;a href=&#34;/archives/4.2.0/manyopt&#34;&gt;Automatic NTP Configuration Options&lt;/a&gt; page for further information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are two burst mode features available where special conditions apply. One of these is enabled by the &lt;tt&gt;iburst&lt;/tt&gt; keyword in the &lt;tt&gt;server&lt;/tt&gt; configuration command. It is intended for cases where it is important to set the clock quickly when an association is first mobilized. The other is enabled by the &lt;tt&gt;burst&lt;/tt&gt; keyword in the &lt;tt&gt;server&lt;/tt&gt; configuration command. It is intended for cases where the network attachment requires an initial calling or training procedure. See the &lt;a href=&#34;/archives/4.2.0/assoc&#34;&gt;Association Management&lt;/a&gt; page for further information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The reference clock driver interface is smaller, more rational and more accurate. Support for pulse-per-second (PPS) signals has been extended to all drivers as an intrinsic function. Most of the drivers in NTPv3 have been converted to the NTPv4 interface and continue to operate as before. New drivers have been added for several GPS receivers now on the market for a total of 44 drivers. Audio drivers for the Canadian standard time and frequency station CHU, the US standard time and frequency stations WWV/H and for IRIG signals have been updated and capabilities added to allow direct connection of these signals to a Sun or FreeBSD audio port. See the &lt;a href=&#34;/archives/4.2.0/audio&#34;&gt;Reference Clock Audio Drivers&lt;/a&gt; page for further information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In all except a very few cases, all timing intervals are randomized, so that the tendency for NTPv3 to self-synchronize and bunch messages, especially with a large number of configured associations, is minimized.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In NTPv3 a large number of weeds and useless code had grown over the years since the original NTPv1 code was implemented almost twenty years ago. Using a powerful weedwacker, much of the shrubbery has been removed, with effect a substantial reduction in size of almost 40 percent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The entire distribution has been converted to gnu &lt;tt&gt;automake&lt;/tt&gt;, which should greatly ease the task of porting to new and different programming environments, as well as reduce the incidence of bugs due to improper handling of idiosyncratic kernel functions. Version control is provided by &lt;tt&gt;Bitkeeper&lt;/tt&gt; using an online repository at &lt;a href=&#34;http://www.ntp.org&#34;&gt;www.ntp.org&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Several new options have been added for the &lt;tt&gt;ntpd&lt;/tt&gt; command line. For the inveterate knob twiddlers several of the more important performance variables can be changed to fit actual or perceived special conditions. It is possible to operate the daemon in a one-time mode similar to &lt;tt&gt;ntpdate&lt;/tt&gt;, which program is headed for retirement. See the &lt;a href=&#34;/archives/4.2.0/ntpd&#34;&gt;&lt;tt&gt;ntpd&lt;/tt&gt; - Network Time Protocol (NTP) daemon&lt;/a&gt; page for the new features.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h4 id=&#34;nasty-surprises&#34;&gt;Nasty Surprises&lt;/h4&gt;
&lt;p&gt;There are a few things different about this release that have changed since the latest NTP Version 3 release. Following are a few things to worry about:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When both IPv4 and IPv6 address families are in use, the host&amp;rsquo;s resolver library may not choose the intended address family if a server has an IPv4 and IPv6 address associated with the same DNS name. The solution is to use the IPv4 or IPv6 address directly in such cases or use another DNS name that only resolves to the intended address. Older versions of &lt;tt&gt;ntpdc&lt;/tt&gt; will only show the IPv4 associations with the &lt;tt&gt;peers&lt;/tt&gt; and other similar commands. Older versions of &lt;tt&gt;ntpq&lt;/tt&gt; will show 0.0.0.0 for IPv6 associations with the &lt;tt&gt;peers&lt;/tt&gt; and other similar commands.&lt;/li&gt;
&lt;li&gt;There is a minor change to the reference ID field of the NTP packet header when operating with IPv6 associations. In IPv4 associations this field contains the 32-bit IPv4 address of the server, in order to detect and avoid loops. In IPv6 associations this field contains the first 32-bits of a MD5 hash formed from the address (IPv4 or IPv6) each of the configured associations. Normally, this detail would not be of concern; however, the &lt;tt&gt;ntptrace&lt;/tt&gt; program originally depended on that field in order to display a server traceback to the primary reference source. This program has now been replaced by a script that does the same function, but does not depend on the reference ID field. The &lt;tt&gt;ntpdc&lt;/tt&gt; utility now uses a special version number to communicate with the &lt;tt&gt;ntpd&lt;/tt&gt; server. The server uses this version number to select which address family to used in reply packets. The &lt;tt&gt;ntpdc&lt;/tt&gt; program falls back to the older version behavior when communicating with older NTP versions.&lt;/li&gt;
&lt;li&gt;As required by Defense Trade Regulations (DTR), the cryptographic routines supporting the Data Encryption Standard (DES) have been removed from the base distribution of NTPv3. For NTPv4 a new interface has been implemented for the OpenSSL cryptographic library, which is widely available on the web at &lt;a href=&#34;http://www.openssl.org&#34;&gt;www.openssl.org&lt;/a&gt;. This library replaces the library formerly available from RSA Laboratories. Besides being somewhat faster and more widely available, the OpenSSL library supports many additional cryptographic algorithms, which are now selectable at run time. Directions for using OpenSSL are in the &lt;a href=&#34;/archives/4.2.0/build&#34;&gt;Building and Installing the Distribution&lt;/a&gt; page.&lt;/li&gt;
&lt;li&gt;As the result of the above, the &lt;tt&gt;./authstuff&lt;/tt&gt; directory, intended as a development and testing aid for porting cryptographic routines to exotic architectures, has been removed. Testing and conformance validation tools are in the OpenSSL software distrbution.&lt;/li&gt;
&lt;li&gt;The NTPv4 enable and disable commands have a few changes in the arguments. See the &lt;tt&gt;ntpd&lt;/tt&gt; &lt;a href=&#34;/archives/4.2.0/miscopt&#34;&gt;Miscellaneous Options&lt;/a&gt; page for details. Note that the &lt;tt&gt;authenticate&lt;/tt&gt; command has been removed. 6. To help reduce the level of spurious network traffic due to obsolete configuration files, a special control message called the &lt;em&gt;kiss-o&#39;-death&lt;/em&gt; packet has been implemented. If enabled and a packet is denied service or exceeds the client limits, a compliant server will send this message to the client. A compliant client will cease further transmission and send a message to the system log. See the &lt;a href=&#34;/archives/4.2.0/accopt&#34;&gt;Authentication Options&lt;/a&gt; page for further information.&lt;/li&gt;
&lt;li&gt;The &lt;tt&gt;tty_clk&lt;/tt&gt; and &lt;tt&gt;ppsclock&lt;/tt&gt; pulse-per-second (PPS) line discipline/streams modules are no longer supported. The PPS function is now handled by the &lt;a href=&#34;/archives/drivers/driver22&#34;&gt;PPS Clock Discipline&lt;/a&gt; driver, which uses the new PPSAPI application program interface proposed by the IETF. Note that the &lt;tt&gt;pps&lt;/tt&gt; configuration file command has been obsoleted by the driver. See the &lt;a href=&#34;/archives/4.2.0/pps&#34;&gt;Pulse-per-second (PPS) Signal Interfacing&lt;/a&gt; page for further information.&lt;/li&gt;
&lt;li&gt;Support for the NTPv1 symmetric mode has been discontinued, since it hasn&amp;rsquo;t worked for years. Support continues for the NTPv1 client mode, which is used in some SNTP clients.&lt;/li&gt;
&lt;li&gt;The precision time support in stock Solaris 2.6 has bugs that were fixed in 2.7. A patch is available that fixes the 2.6 bugs. The 2.6 PPS kernel discipline has been disabled by default. For testing, the kernel can be enabled using the &lt;tt&gt;enable kernel&lt;/tt&gt; command either in the configuration file or via &lt;tt&gt;ntpdc&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;The HTML documentation has been partially updated. However, most of the NTPv3 documentation continues to apply to NTPv4. Until a comprehensive update happens, what you see is what you get. We are always happy to accept comments, corrections and bug reports. However, we are most thrilled upon receipt of patches to fix the dang bugs. &lt;strong&gt;Please send bug reports to &lt;a href=&#34;mailto:bugs@ntp.org&#34;&gt;bugs@ntp.org&lt;/a&gt;, not the individual members on the team&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: ntp-keygen - generate public and private keys</title>
      <link>/archives/4.2.0/keygen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/keygen/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice23.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/%7emills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Alice holds the key.&lt;/p&gt;
&lt;p&gt;Last update: 03:13 AM UTC Monday, October 13, 2003&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/keygen/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/keygen/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/keygen/#running-the-program&#34;&gt;Running the program&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/keygen/#trusted-hosts-and-groups&#34;&gt;Trusted Hosts and Groups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/keygen/#identity-schemes&#34;&gt;Identity Schemes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/keygen/#command-line-options&#34;&gt;Command Line Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/keygen/#random-seed-file&#34;&gt;Random Seed File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/keygen/#cryptographic-data-files&#34;&gt;Cryptographic Data Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/keygen/#bugs&#34;&gt;Bugs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntp-keygen [ -deGgHIMnPT ] [ -c [ RSA-MD2 | RSA-MD5 | RSA-SHA | RSA-SHA1 | RSA-MDC2 | RSA-RIPEMD160 | DSA-SHA | DSA-SHA1 ] ] [-i &lt;em&gt;name&lt;/em&gt; ] [ -p &lt;em&gt;password&lt;/em&gt; ] [ -S [ RSA | DSA ] ] [ -s &lt;em&gt;name&lt;/em&gt; ] [ -v &lt;em&gt;nkeys&lt;/em&gt; ]&lt;/tt&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;This program generates cryptographic data files used by the NTPv4 authentication and identification schemes. It generates MD5 key files used in symmetric key cryptography. In addition, if the OpenSSL software library has been installed, it generates keys, certificate and identity files used in public key cryptography. These files are used for cookie encryption, digital signature and challenge/response identification algorithms compatible with the Internet standard security infrastructure.&lt;/p&gt;
&lt;p&gt;All files are in PEM-encoded printable ASCII format, so they can be embedded as MIME attachments in mail to other sites and certificate authorities. By default, files are not encrypted. The &lt;tt&gt;-p password&lt;/tt&gt; option specifies the write password and &lt;tt&gt;-q password&lt;/tt&gt; option the read password for previously encrypted files. The &lt;tt&gt;ntp-keygen&lt;/tt&gt; program prompts for the password if it reads an encrypted file and the password is missing or incorrect. If an encrypted file is read successfully and no write password is specified, the read password is used as the write password by default.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;ntpd&lt;/tt&gt; configuration command &lt;tt&gt;crypto pw &lt;em&gt;password&lt;/em&gt;&lt;/tt&gt; specifies the read password for previously encrypted files. The daemon expires on the spot if the password is missing or incorrect. For convenience, if a file has been previously encrypted, the default read password is the name of the host running the program. If the previous write password is specified as the host name, these files can be read by that host with no explicit password.&lt;/p&gt;
&lt;p&gt;File names begin with the prefix &lt;tt&gt;ntpkey_&lt;/tt&gt; and end with the postfix &lt;tt&gt;_hostname.filestamp&lt;/tt&gt;, where &lt;tt&gt;hostname&lt;/tt&gt; is the owner name, usually the string returned by the Unix &lt;tt&gt;gethostname()&lt;/tt&gt; routine, and &lt;tt&gt;filestamp&lt;/tt&gt; is the NTP seconds when the file was generated, in decimal digits. This both guarantees uniqueness and simplifies maintenance procedures, since all files can be quickly removed by a &lt;tt&gt;rm ntpkey*&lt;/tt&gt; command or all files generated at a specific time can be removed by a &lt;tt&gt;rm *filestamp&lt;/tt&gt; command. To further reduce the risk of misconfiguration, the first two lines of a file contain the file name and generation date and time as comments.&lt;/p&gt;
&lt;p&gt;All files are installed by default in the keys directory &lt;tt&gt;/usr/local/etc&lt;/tt&gt;, which is normally in a shared filesystem in NFS-mounted networks. The actual location of the keys directory and each file can be overridden by configuration commands, but this is not recommended. Normally, the files for each host are generated by that host and used only by that host, although exceptions exist as noted later on this page.&lt;/p&gt;
&lt;p&gt;Normally, files containing private values, including the host key, sign key and identification parameters, are permitted root read/write-only; while others containing public values are permitted world readable. Alternatively, files containing private values can be encrypted and these files permitted world readable, which simplifies maintenance in shared file systems. Since uniqueness is insured by the hostname and file name extensions, the files for a NFS server and dependent clients can all be installed in the same shared directory.&lt;/p&gt;
&lt;p&gt;The recommended practice is to keep the file name extensions when installing a file and to install a soft link from the generic names specified elsewhere on this page to the generated files. This allows new file generations to be activated simply by changing the link. If a link is present, &lt;tt&gt;ntpd&lt;/tt&gt; follows it to the file name to extract the filestamp. If a link is not present, &lt;tt&gt;ntpd&lt;/tt&gt; extracts the filestamp from the file itself. This allows clients to verify that the file and generation times are always current. The &lt;tt&gt;ntp-keygen&lt;/tt&gt; program uses the same extension for all files generated at one time, so each generation is distinct and can be readily recognized in monitoring data.&lt;/p&gt;
&lt;h4 id=&#34;running-the-program&#34;&gt;Running the program&lt;/h4&gt;
&lt;p&gt;The safest way to run the &lt;tt&gt;ntp-keygen&lt;/tt&gt; program is logged in directly as root. The recommended procedure is change to the keys directory, usually &lt;tt&gt;/ust/local/etc&lt;/tt&gt;, then run the program. When run for the first time, or if all &lt;tt&gt;ntpkey&lt;/tt&gt; files have been removed, the program generates a RSA host key file and matching RSA-MD5 certificate file, which is all that is necessary in many cases. The program also generates soft links from the generic names to the respective files. If run again, the program uses the same host key file, but generates a new certificate file and link.&lt;/p&gt;
&lt;p&gt;The host key is used to encrypt the cookie when required and so must be RSA type. By default, the host key is also the sign key used to encrypt signatures. When necessary, a different sign key can be specified and this can be either RSA or DSA type. By default, the message digest type is MD5, but any combination of sign key type and message digest type supported by the OpenSSL library can be specified, including those using the MD2, MD5, SHA, SHA1, MDC2 and RIPE160 message digest algorithms. However, the scheme specified in the certificate must be compatible with the sign key. Certificates using any digest algorithm are compatible with RSA sign keys; however, only SHA and SHA1 certificates are compatible with DSA sign keys.&lt;/p&gt;
&lt;p&gt;Private/public key files and certificates are compatible with other OpenSSL applications and very likely other libraries as well. Certificates or certificate requests derived from them should be compatible with extant industry practice, although some users might find the interpretation of X509v3 extension fields somewhat liberal. However, the identification parameter files, although encoded as the other files, are probably not compatible with anything other than Autokey.&lt;/p&gt;
&lt;p&gt;Running the program as other than root and using the Unix &lt;tt&gt;su&lt;/tt&gt; command to assume root may not work properly, since by default the OpenSSL library looks for the random seed file &lt;tt&gt;.rnd&lt;/tt&gt; in the user home directory. However, there should be only one &lt;tt&gt;.rnd&lt;/tt&gt;, most conveniently in the root directory, so it is convenient to define the &lt;tt&gt;$RANDFILE&lt;/tt&gt; environment variable used by the OpenSSL library as the path to &lt;tt&gt;/.rnd&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Installing the keys as root might not work in NFS-mounted shared file systems, as NFS clients may not be able to write to the shared keys directory, even as root. In this case, NFS clients can specify the files in another directory such as &lt;tt&gt;/etc&lt;/tt&gt; using the &lt;tt&gt;keysdir&lt;/tt&gt; command. There is no need for one client to read the keys and certificates of other clients or servers, as these data are obtained automatically by the Autokey protocol.&lt;/p&gt;
&lt;p&gt;Ordinarily, cryptographic files are generated by the host that uses them, but it is possible for a trusted agent (TA) to generate these files for other hosts; however, in such cases files should always be encrypted. The subject name and trusted name default to the hostname of the host generating the files, but can be changed by command line options. It is convenient to designate the owner name and trusted name as the subject and issuer fields, respectively, of the certificate. The owner name is also used for the host and sign key files, while the trusted name is used for the identity files.&lt;/p&gt;
&lt;h4 id=&#34;trusted-hosts-and-groups&#34;&gt;Trusted Hosts and Groups&lt;/h4&gt;
&lt;p&gt;Each cryptographic configuration involves selection of a signature scheme and identification scheme, called a cryptotype, as explained in the &lt;a href=&#34;/archives/4.2.0/authopt&#34;&gt;Authentication Options&lt;/a&gt; page. The default cryptotype uses RSA encryption, MD5 message digest and TC identification. First, configure a NTP subnet including one or more low-stratum trusted hosts from which all other hosts derive synchronization directly or indirectly. Trusted hosts have trusted certificates; all other hosts have nontrusted certificates. These hosts will automatically and dynamically build authoritative certificate trails to one or more trusted hosts. A trusted group is the set of all hosts that have, directly or indirectly, a certificate trail ending at a trusted host. The trail is defined by static configuration file entries or dynamic means described on the &lt;a href=&#34;/archives/4.2.0/manyopt&#34;&gt;Automatic NTP Configuration Options&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;On each trusted host as root, change to the keys directory. To insure a fresh fileset, remove all &lt;tt&gt;ntpkey&lt;/tt&gt; files. Then run &lt;tt&gt;ntp-keygen -T&lt;/tt&gt; to generate keys and a trusted certificate. On all other hosts do the same, but leave off the &lt;tt&gt;-T&lt;/tt&gt; flag to generate keys and nontrusted certificates. When complete, start the NTP daemons beginning at the lowest stratum and working up the tree. It may take some time for Autokey to instantiate the certificate trails throughout the subnet, but setting up the environment is completely automatic.&lt;/p&gt;
&lt;p&gt;If it is necessary to use a different sign key or different digest/signature scheme than the default, run &lt;tt&gt;ntp-keygen&lt;/tt&gt; with the &lt;tt&gt;-S&lt;/tt&gt;_ &lt;tt&gt;type&lt;/tt&gt;_ option, where _&lt;tt&gt;type&lt;/tt&gt;_ is either &lt;tt&gt;RSA&lt;/tt&gt; or &lt;tt&gt;DSA&lt;/tt&gt;. The most often need to do this is when a DSA-signed certificate is used. If it is necessary to use a different certificate scheme than the default, run &lt;tt&gt;ntp-keygen&lt;/tt&gt; with the &lt;tt&gt;-c _scheme_&lt;/tt&gt; option and selected _&lt;tt&gt;scheme&lt;/tt&gt;_ as needed. If &lt;tt&gt;ntp-keygen&lt;/tt&gt; is run again without these options, it generates a new certificate using the same scheme and sign key.&lt;/p&gt;
&lt;p&gt;After setting up the environment it is advisable to update certificates from time to time, if only to extend the validity interval. Simply run &lt;tt&gt;ntp-keygen&lt;/tt&gt; with the same flags as before to generate new certificates using existing keys. However, if the host or sign key is changed, &lt;tt&gt;ntpd&lt;/tt&gt; should be restarted. When ntpd is restarted, it loads any new files and restarts the protocol. Other dependent hosts will continue as usual until signatures are refreshed, at which time the protocol is restarted.&lt;/p&gt;
&lt;h4 id=&#34;identity-schemes&#34;&gt;Identity Schemes&lt;/h4&gt;
&lt;p&gt;As mentioned on the Autonomous Authentication page, the default TC identity scheme is vulnerable to a middleman attack. However, there are more secure identity schemes available, including PC, IFF, GQ and MV described on the &lt;a href=&#34;https://www.eecis.udel.edu/~mills/ident.html&#34;&gt;Identification Schemes&lt;/a&gt; page. These schemes are based on a TA, one or more trusted hosts and some number of nontrusted hosts. Trusted hosts prove identity using values provided by the TA, while the remaining hosts prove identity using values provided by a trusted host and certificate trails that end on that host. The name of a trusted host is also the name of its sugroup and also the subject and issuer name on its trusted certificate. The TA is not necessarily a trusted host in this sense, but often is.&lt;/p&gt;
&lt;p&gt;In some schemes there are separate keys for servers and clients. A server can also be a client of another server, but a client can never be a server for another client. In general, trusted hosts and nontrusted hosts that operate as both server and client have parameter files that contain both server and client keys. Hosts that operate only as clients have key files that contain only client keys.&lt;/p&gt;
&lt;p&gt;The PC scheme supports only one trusted host in the group. On trusted host &lt;em&gt;alice&lt;/em&gt; run &lt;tt&gt;ntp-keygen -P -p &lt;em&gt;password&lt;/em&gt;&lt;/tt&gt; to generate the host key file &lt;tt&gt;ntpkey_RSAkey__alice.filestamp_&lt;/tt&gt; and trusted private certificate file &lt;tt&gt;ntpkey_RSA-MD5_cert__alice.filestamp_&lt;/tt&gt;. Copy both files to all group hosts; they replace the files which would be generated in other schemes. On each host _bob_ install a soft link from the generic name &lt;tt&gt;ntpkey_host__bob_&lt;/tt&gt; to the host key file and soft link &lt;tt&gt;ntpkey_cert__bob_&lt;/tt&gt; to the private certificate file. Note the generic links are on _bob_, but point to files generated by trusted host _alice_. In this scheme it is not possible to refresh either the keys or certificates without copying them to all other hosts in the group.&lt;/p&gt;
&lt;p&gt;For the IFF scheme proceed as in the TC scheme to generate keys and certificates for all group hosts, then for every trusted host in the group, generate the IFF parameter file. On trusted host &lt;em&gt;alice&lt;/em&gt; run &lt;tt&gt;ntp-keygen -T&lt;/tt&gt; &lt;tt&gt;-I -p &lt;em&gt;password&lt;/em&gt;&lt;/tt&gt; to produce her parameter file &lt;tt&gt;ntpkey_IFFpar__alice.filestamp_&lt;/tt&gt;, which includes both server and client keys. Copy this file to all group hosts that operate as both servers and clients and install a soft link from the generic &lt;tt&gt;ntpkey_iff__alice_&lt;/tt&gt; to this file. If there are no hosts restricted to operate only as clients, there is nothing further to do. As the IFF scheme is independent of keys and certificates, these files can be refreshed as needed.&lt;/p&gt;
&lt;p&gt;If a rogue client has the parameter file, it could masquerade as a legitimate server and present a middleman threat. To eliminate this threat, the client keys can be extracted from the parameter file and distributed to all restricted clients. After generating the parameter file, on &lt;em&gt;alice&lt;/em&gt; run &lt;tt&gt;ntp-keygen&lt;/tt&gt; &lt;tt&gt;-e&lt;/tt&gt; and pipe the output to a file or mail program. Copy or mail this file to all restricted clients. On these clients install a soft link from the generic &lt;tt&gt;ntpkey_iff__alice_&lt;/tt&gt; to this file. To further protect the integrity of the keys, each file can be encrypted with a secret password.&lt;/p&gt;
&lt;p&gt;For the GQ scheme proceed as in the TC scheme to generate keys and certificates for all group hosts, then for every trusted host in the group, generate the IFF parameter file. On trusted host &lt;em&gt;alice&lt;/em&gt; run &lt;tt&gt;ntp-keygen -T&lt;/tt&gt; &lt;tt&gt;-G -p &lt;em&gt;password&lt;/em&gt;&lt;/tt&gt; to produce her parameter file &lt;tt&gt;ntpkey_GQpar__alice.filestamp_&lt;/tt&gt;, which includes both server and client keys. Copy this file to all group hosts and install a soft link from the generic &lt;tt&gt;ntpkey_gq__alice_&lt;/tt&gt; to this file. In addition, on each host _bob_ install a soft link from generic &lt;tt&gt;ntpkey_gq__bob_&lt;/tt&gt; to this file. As the GQ scheme updates the GQ parameters file and certificate at the same time, keys and certificates can be regenerated as needed.&lt;/p&gt;
&lt;p&gt;For the MV scheme, proceed as in the TC scheme to generate keys and certificates for all group hosts. For illustration assume &lt;em&gt;trish&lt;/em&gt; is the TA, &lt;em&gt;alice&lt;/em&gt; one of several trusted hosts and &lt;em&gt;bob&lt;/em&gt; one of her clients. On TA &lt;em&gt;trish&lt;/em&gt; run &lt;tt&gt;ntp-keygen&lt;/tt&gt; &lt;tt&gt;-V &lt;em&gt;n&lt;/em&gt; -p &lt;em&gt;password&lt;/em&gt;&lt;/tt&gt;, where &lt;em&gt;n&lt;/em&gt; is the number of revokable keys (typically 5) to produce the parameter file &lt;tt&gt;ntpkeys_MVpar__trish.filestamp_ &lt;/tt&gt;and client key files &lt;tt&gt;ntpkeys_MVkey_d___trish.filestamp_&lt;/tt&gt; where _&lt;tt&gt;d&lt;/tt&gt;_ is the key number (0 &amp;lt; _&lt;tt&gt;d&lt;/tt&gt;_ &amp;lt; _n_). Copy the parameter file to _alice_ and install a soft link from the generic &lt;tt&gt;ntpkey_mv__alice_&lt;/tt&gt; to this file. Copy one of the client key files to _alice_ for later distribution to her clients. It doesn&amp;rsquo;t matter which client key file goes to _alice_, since they all work the same way. _Alice_ copies the client key file to all of her clients. On client _bob_ install a soft link from generic &lt;tt&gt;ntpkey_mvkey__bob_ &lt;/tt&gt;to the client key file. As the MV scheme is independent of keys and certificates, these files can be refreshed as needed.&lt;/p&gt;
&lt;h4 id=&#34;command-line-options&#34;&gt;Command Line Options&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;-c [ RSA-MD2 | RSA-MD5 | RSA-SHA | RSA-SHA1 | RSA-MDC2 | RSA-RIPEMD160 | DSA-SHA | DSA-SHA1 ]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Select certificate message digest/signature encryption scheme. Note that RSA schemes must be used with a RSA sign key and DSA schemes must be used with a DSA sign key. The default without this option is &lt;tt&gt;RSA-MD5&lt;/tt&gt;.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-d&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enable debugging. This option displays the cryptographic data produced in eye-friendly billboards.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-e&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Write the IFF client keys to the standard output. This is intended for automatic key distribution by mail.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-G&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Generate parameters and keys for the GQ identification scheme, obsoleting any that may exist.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-g&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Generate keys for the GQ identification scheme using the existing GQ parameters. If the GQ parameters do not yet exist, create them first.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-H&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Generate new host keys, obsoleting any that may exist.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-I&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Generate parameters for the IFF identification scheme, obsoleting any that may exist.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-i _name_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Set the subject name to &lt;em&gt;name&lt;/em&gt;. This is used as the subject field in certificates and in the file name for host and sign keys.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-M&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Generate MD5 keys, obsoleting any that may exist.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-P&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Generate a private certificate. By default, the program generates public certificates.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-p _password_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Encrypt generated files containing private data with &lt;tt&gt;&lt;em&gt;password&lt;/em&gt;&lt;/tt&gt; and the DES-CBC algorithm.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-q&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Set the password for reading files to &lt;tt&gt;&lt;em&gt;password&lt;/em&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-S [ RSA | DSA ]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Generate a new sign key of the designated type, obsoleting any that may exist. By default, the program uses the host key as the sign key.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-s _name_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Set the issuer name to &lt;em&gt;name&lt;/em&gt;. This is used for the issuer field in certificates and in the file name for identity files.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-T&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Generate a trusted certificate. By default, the program generates a non-trusted certificate.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-V _nkeys_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Generate parameters and keys for the Mu-Varadharajan (MV) identification scheme.&lt;/p&gt;
&lt;h4 id=&#34;random-seed-file&#34;&gt;Random Seed File&lt;/h4&gt;
&lt;p&gt;All cryptographically sound key generation schemes must have means to randomize the entropy seed used to initialize the internal pseudo-random number generator used by the library routines. The OpenSSL library uses a designated random seed file for this purpose. The file must be available when starting the NTP daemon and &lt;tt&gt;ntp-keygen&lt;/tt&gt; program. If a site supports OpenSSL or its companion OpenSSH, it is very likely that means to do this are already available.&lt;/p&gt;
&lt;p&gt;It is important to understand that entropy must be evolved for each generation, for otherwise the random number sequence would be predictable. Various means dependent on external events, such as keystroke intervals, can be used to do this and some systems have built-in entropy sources. Suitable means are described in the OpenSSL software documentation, but are outside the scope of this page.&lt;/p&gt;
&lt;p&gt;The entropy seed used by the OpenSSL library is contained in a file, usually called &lt;tt&gt;.rnd&lt;/tt&gt;, which must be available when starting the NTP daemon or the &lt;tt&gt;ntp-keygen&lt;/tt&gt; program. The NTP daemon will first look for the file using the path specified by the &lt;tt&gt;randfile&lt;/tt&gt; subcommand of the &lt;tt&gt;crypto&lt;/tt&gt; configuration command. If not specified in this way, or when starting the &lt;tt&gt;ntp-keygen&lt;/tt&gt; program, the OpenSSL library will look for the file using the path specified by the &lt;tt&gt;RANDFILE&lt;/tt&gt; environment variable in the user home directory, whether root or some other user. If the &lt;tt&gt;RANDFILE&lt;/tt&gt; environment variable is not present, the library will look for the &lt;tt&gt;.rnd&lt;/tt&gt; file in the user home directory. If the file is not available or cannot be written, the daemon exits with a message to the system log and the program exits with a suitable error message.&lt;/p&gt;
&lt;h4 id=&#34;cryptographic-data-files&#34;&gt;Cryptographic Data Files&lt;/h4&gt;
&lt;p&gt;All other file formats begin with two lines. The first contains the file name, including the generated host name and filestamp. The second contains the datestamp in conventional Unix &lt;tt&gt;date&lt;/tt&gt; format. Lines beginning with &lt;tt&gt;#&lt;/tt&gt; are considered comments and ignored by the _&lt;tt&gt;ntp-keygen&lt;/tt&gt; _program and &lt;tt&gt;ntpd&lt;/tt&gt; daemon. Cryptographic values are encoded first using ASN.1 rules, then encrypted if necessary, and finally written PEM-encoded printable ASCII format preceded and followed by MIME content identifier lines.&lt;/p&gt;
&lt;p&gt;The format of the symmetric keys file is somewhat different than the other files in the interest of backward compatibility. Since DES-CBC is deprecated in NTPv4, the only key format of interest is MD5 alphanumeric strings. The keys are entered one per line in the format&lt;/p&gt;
&lt;p&gt;&lt;code&gt;keyno type key&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;where &lt;em&gt;&lt;tt&gt;keyno&lt;/tt&gt;&lt;/em&gt; is a positive integer in the range 1-65,535, &lt;em&gt;&lt;tt&gt;type&lt;/tt&gt;&lt;/em&gt; is the string &lt;tt&gt;MD5&lt;/tt&gt; defining the key format and &lt;em&gt;&lt;tt&gt;key&lt;/tt&gt;&lt;/em&gt; is the key itself, which is a printable ASCII string 16 characters or less in length. Each character is chosen from the 93 printable characters in the range 0x21 through 0x7f excluding space and the &lt;code&gt;#&lt;/code&gt; character.&lt;/p&gt;
&lt;p&gt;Note that the keys used by the &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; programs are checked against passwords requested by the programs and entered by hand, so it is generally appropriate to specify these keys in human readable ASCII format.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;ntp-keygen&lt;/tt&gt; program generates a MD5 symmetric keys file &lt;tt&gt;ntpkey_MD5key__hostname.filestamp_&lt;/tt&gt;. Since the file contains private shared keys, it should be visible only to root and distributed by secure means to other subnet hosts. The NTP daemon loads the file &lt;tt&gt;ntp.keys&lt;/tt&gt;, so &lt;tt&gt;ntp-keygen&lt;/tt&gt; installs a soft link from this name to the generated file. Subsequently, similar soft links must be installed by manual or automated means on the other subnet hosts. While this file is not used with the Autokey Version 2 protocol, it is needed to authenticate some remote configuration commands used by the &lt;a href=&#34;/archives/4.2.0/ntpq&#34;&gt;&lt;tt&gt;ntpq&lt;/tt&gt;&lt;/a&gt; and &lt;a href=&#34;/archives/4.2.0/ntpdc&#34;&gt;&lt;tt&gt;ntpdc&lt;/tt&gt;&lt;/a&gt; utilities.&lt;/p&gt;
&lt;h4 id=&#34;bugs&#34;&gt;Bugs&lt;/h4&gt;
&lt;p&gt;It can take quite a while to generate some cryptographic values, from one to several minutes with modern architectures such as UltraSPARC and up to tens of minutes to an hour with older architectures such as SPARC IPC.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: ntpd - Network Time Protocol (NTP) daemon</title>
      <link>/archives/4.2.0/ntpd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/ntpd/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice47.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;from &lt;em&gt;The Wizard of Oz&lt;/em&gt;, L. Frank Baum&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The mushroom knows all the command line options.&lt;/p&gt;
&lt;p&gt;Last update: 03:15 AM UTC Monday, October 13, 2003&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpd/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpd/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpd/#how-ntp-operates&#34;&gt;How NTP Operates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpd/#frequency-discipline&#34;&gt;Frequency Discipline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpd/#operating-modes&#34;&gt;Operating Modes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpd/#poll-interval-control&#34;&gt;Poll Interval Control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpd/#the-huff-n-puff-filter&#34;&gt;The huff-n&#39;-puff Filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpd/#notes&#34;&gt;Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpd/#command-line-options&#34;&gt;Command Line Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpd/#the-configuration-file&#34;&gt;The Configuration File&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpd/#configuration-options&#34;&gt;Configuration Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpd/#files&#34;&gt;Files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntpd [ -46aAbdDgLmnNPqx ] [ -c &lt;em&gt;conffile&lt;/em&gt; ] [ -f &lt;em&gt;driftfile&lt;/em&gt; ] [ -k &lt;em&gt;keyfile&lt;/em&gt; ] [ -l &lt;em&gt;logfile&lt;/em&gt; ] [ -p &lt;em&gt;pidfile&lt;/em&gt; ] [ -r &lt;em&gt;broadcastdelay&lt;/em&gt; ] [ -s &lt;em&gt;statsdir&lt;/em&gt; ] [ -t &lt;em&gt;key&lt;/em&gt; ] [ -v &lt;em&gt;variable&lt;/em&gt; ] [ -V &lt;em&gt;variable&lt;/em&gt; ]&lt;/tt&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;The &lt;tt&gt;ntpd&lt;/tt&gt; program is an operating system daemon which sets and maintains the system time of day in synchronism with Internet standard time servers. It is a complete implementation of the Network Time Protocol (NTP) version 4, but also retains compatibility with version 3, as defined by RFC-1305, and version 1 and 2, as defined by RFC-1059 and RFC-1119, respectively. &lt;tt&gt;ntpd&lt;/tt&gt; does most computations in 64-bit floating point arithmetic and does relatively clumsy 64-bit fixed point operations only when necessary to preserve the ultimate precision, about 232 picoseconds. While the ultimate precision is not achievable with ordinary workstations and networks of today, it may be required with future gigahertz CPU clocks and gigabit LANs.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;how-ntp-operates&#34;&gt;How NTP Operates&lt;/h4&gt;
&lt;p&gt;The &lt;tt&gt;ntpd&lt;/tt&gt; program operates by exchanging messages with one or more configured servers at designated poll intervals. When started, whether for the first or subsequent times, the program requires several exchanges from the majority of these servers so the signal processing and mitigation algorithms can accumulate and groom the data and set the clock. In order to protect the network from bursts, the initial poll interval for each server is delayed an interval randomized over a few seconds. At the default initial poll interval of 64s, several minutes can elapse before the clock is set. The initial delay to set the clock can be reduced using the &lt;tt&gt;iburst&lt;/tt&gt; keyword with the &lt;tt&gt;server&lt;/tt&gt; configuration command, as described on the &lt;a href=&#34;/archives/4.2.0/confopt&#34;&gt;Configuration Options&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;Most operating systems and hardware of today incorporate a time-of-year (TOY) chip to maintain the time during periods when the power is off. When the machine is booted, the chip is used to initialize the operating system time. After the machine has synchronized to a NTP server, the operating system corrects the chip from time to time. In case there is no TOY chip or for some reason its time is more than 1000s from the server time, &lt;tt&gt;ntpd&lt;/tt&gt; assumes something must be terribly wrong and the only reliable action is for the operator to intervene and set the clock by hand. This causes &lt;tt&gt;ntpd&lt;/tt&gt; to exit with a panic message to the system log. The &lt;tt&gt;-g&lt;/tt&gt; option overrides this check and the clock will be set to the server time regardless of the chip time. However, and to protect against broken hardware, such as when the CMOS battery fails or the clock counter becomes defective, once the clock has been set, an error greater than 1000s will cause &lt;tt&gt;ntpd&lt;/tt&gt; to exit anyway.&lt;/p&gt;
&lt;p&gt;Under ordinary conditions, &lt;tt&gt;ntpd&lt;/tt&gt; adjusts the clock in small steps so that the timescale is effectively continuous and without discontinuities. Under conditions of extreme network congestion, the roundtrip delay jitter can exceed three seconds and the synchronization distance, which is equal to one-half the roundtrip delay plus error budget terms, can become very large. The &lt;tt&gt;ntpd&lt;/tt&gt; algorithms discard sample offsets exceeding 128 ms, unless the interval during which no sample offset is less than 128 ms exceeds 900s. The first sample after that, no matter what the offset, steps the clock to the indicated time. In practice this reduces the false alarm rate where the clock is stepped in error to a vanishingly low incidence.&lt;/p&gt;
&lt;p&gt;As the result of this behavior, once the clock has been set, it very rarely strays more than 128 ms, even under extreme cases of network path congestion and jitter. Sometimes, in particular when &lt;tt&gt;ntpd&lt;/tt&gt; is first started, the error might exceed 128 ms. This may on occasion cause the clock to be set backwards if the local clock time is more than 128 s in the future relative to the server. In some applications, this behavior may be unacceptable. If the &lt;tt&gt;-x&lt;/tt&gt; option is included on the command line, the clock will never be stepped and only slew corrections will be used.&lt;/p&gt;
&lt;p&gt;The issues should be carefully explored before deciding to use the &lt;tt&gt;-x&lt;/tt&gt; option. The maximum slew rate possible is limited to 500 parts-per-million (PPM) as a consequence of the correctness principles on which the NTP protocol and algorithm design are based. As a result, the local clock can take a long time to converge to an acceptable offset, about 2,000 s for each second the clock is outside the acceptable range. During this interval the local clock will not be consistent with any other network clock and the system cannot be used for distributed applications that require correctly synchronized network time.&lt;/p&gt;
&lt;p&gt;In spite of the above precautions, sometimes when large frequency errors are present the resulting time offsets stray outside the 128-ms range and an eventual step or slew time correction is required. If following such a correction the frequency error is so large that the first sample is outside the acceptable range, &lt;tt&gt;ntpd&lt;/tt&gt; enters the same state as when the &lt;tt&gt;ntp.drift&lt;/tt&gt; file is not present. The intent of this behavior is to quickly correct the frequency and restore operation to the normal tracking mode. In the most extreme cases (&lt;tt&gt;time.ien.it&lt;/tt&gt; comes to mind), there may be occasional step/slew corrections and subsequent frequency corrections. It helps in these cases to use the &lt;tt&gt;burst&lt;/tt&gt; keyword when configuring the server.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;frequency-discipline&#34;&gt;Frequency Discipline&lt;/h4&gt;
&lt;p&gt;The &lt;tt&gt;ntpd&lt;/tt&gt; behavior at startup depends on whether the frequency file, usually &lt;tt&gt;ntp.drift&lt;/tt&gt;, exists. This file contains the latest estimate of clock frequency error. When the &lt;tt&gt;ntpd&lt;/tt&gt; is started and the file does not exist, the &lt;tt&gt;ntpd&lt;/tt&gt; enters a special mode designed to quickly adapt to the particular system clock oscillator time and frequency error. This takes approximately 15 minutes, after which the time and frequency are set to nominal values and the &lt;tt&gt;ntpd&lt;/tt&gt; enters normal mode, where the time and frequency are continuously tracked relative to the server. After one hour the frequency file is created and the current frequency offset written to it. When the &lt;tt&gt;ntpd&lt;/tt&gt; is started and the file does exist, the &lt;tt&gt;ntpd&lt;/tt&gt; frequency is initialized from the file and enters normal mode immediately. After that the current frequency offset is written to the file at hourly intervals.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;operating-modes&#34;&gt;Operating Modes&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntpd&lt;/tt&gt; can operate in any of several modes, including symmetric active/passive, client/server broadcast/multicast and manycast, as described in the &lt;a href=&#34;/archives/4.2.0/assoc&#34;&gt;Association Management&lt;/a&gt; page. It normally operates continuously while monitoring for small changes in frequency and trimming the clock for the ultimate precision. However, it can operate in a one-time mode where the time is set from an external server and frequency is set from a previously recorded frequency file. A broadcast/multicast or manycast client can discover remote servers, compute server-client propagation delay correction factors and configure itself automatically. This makes it possible to deploy a fleet of workstations without specifying configuration details specific to the local environment.&lt;/p&gt;
&lt;p&gt;By default, &lt;tt&gt;ntpd&lt;/tt&gt; runs in continuous mode where each of possibly several external servers is polled at intervals determined by an intricate state machine. The state machine measures the incidental roundtrip delay jitter and oscillator frequency wander and determines the best poll interval using a heuristic algorithm. Ordinarily, and in most operating environments, the state machine will start with 64s intervals and eventually increase in steps to 1024s. A small amount of random variation is introduced in order to avoid bunching at the servers. In addition, should a server become unreachable for some time, the poll interval is increased in steps to 1024s in order to reduce network overhead.&lt;/p&gt;
&lt;p&gt;In some cases it may not be practical for &lt;tt&gt;ntpd&lt;/tt&gt; to run continuously. A common workaround has been to run the &lt;tt&gt;ntpdate&lt;/tt&gt; program from a &lt;tt&gt;cron&lt;/tt&gt; job at designated times. However, this program does not have the crafted signal processing, error checking and mitigation algorithms of &lt;tt&gt;ntpd&lt;/tt&gt;. The &lt;tt&gt;-q&lt;/tt&gt; option is intended for this purpose. Setting this option will cause &lt;tt&gt;ntpd&lt;/tt&gt; to exit just after setting the clock for the first time. The procedure for initially setting the clock is the same as in continuous mode; most applications will probably want to specify the &lt;tt&gt;iburst&lt;/tt&gt; keyword with the &lt;tt&gt;server&lt;/tt&gt; configuration command. With this keyword a volley of messages are exchanged to groom the data and the clock is set in about 10 s. If nothing is heard after a couple of minutes, the daemon times out and exits. After a suitable period of mourning, the &lt;tt&gt;ntpdate&lt;/tt&gt; program may be retired.&lt;/p&gt;
&lt;p&gt;When kernel support is available to discipline the clock frequency, which is the case for stock Solaris, Tru64, Linux and FreeBSD, a useful feature is available to discipline the clock frequency. First, &lt;tt&gt;ntpd&lt;/tt&gt; is run in continuous mode with selected servers in order to measure and record the intrinsic clock frequency offset in the frequency file. It may take some hours for the frequency and offset to settle down. Then the &lt;tt&gt;ntpd&lt;/tt&gt; is stopped and run in one-time mode as required. At each startup, the frequency is read from the file and initializes the kernel frequency.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;poll-interval-control&#34;&gt;Poll Interval Control&lt;/h4&gt;
&lt;p&gt;This version of NTP includes an intricate state machine to reduce the network load while maintaining a quality of synchronization consistent with the observed jitter and wander. There are a number of ways to tailor the operation in order enhance accuracy by reducing the interval or to reduce network overhead by increasing it. However, the user is advised to carefully consider the consequences of changing the poll adjustment range from the default minimum of 64 s to the default maximum of 1,024 s. The default minimum can be changed with the &lt;tt&gt;tinker minpoll&lt;/tt&gt; command to a value not less than 16 s. This value is used for all configured associations, unless overridden by the &lt;tt&gt;minpoll&lt;/tt&gt; option on the configuration command. Note that most device drivers will not operate properly if the poll interval is less than 64 s and that the broadcast server and manycast client associations will also use the default, unless overridden.&lt;/p&gt;
&lt;p&gt;In some cases involving dial up or toll services, it may be useful to increase the minimum interval to a few tens of minutes and maximum interval to a day or so. Under normal operation conditions, once the clock discipline loop has stabilized the interval will be increased in steps from the minimum to the maximum. However, this assumes the intrinsic clock frequency error is small enough for the discipline loop correct it. The capture range of the loop is 500 PPM at an interval of 64s decreasing by a factor of two for each doubling of interval. At a minimum of 1,024 s, for example, the capture range is only 31 PPM. If the intrinsic error is greater than this, the drift file &lt;tt&gt;ntp.drift&lt;/tt&gt; will have to be specially tailored to reduce the residual error below this limit. Once this is done, the drift file is automatically updated once per hour and is available to initialize the frequency on subsequent daemon restarts.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;the-huff-n-puff-filter&#34;&gt;The huff-n&#39;-puff Filter&lt;/h4&gt;
&lt;p&gt;In scenarios where a considerable amount of data are to be downloaded or uploaded over telephone modems, timekeeping quality can be seriously degraded. This occurs because the differential delays on the two directions of transmission can be quite large. In many cases the apparent time errors are so large as to exceed the step threshold and a step correction can occur during and after the data transfer is in progress.&lt;/p&gt;
&lt;p&gt;The huff-n&#39;-puff filter is designed to correct the apparent time offset in these cases. It depends on knowledge of the propagation delay when no other traffic is present. In common scenarios this occurs during other than work hours. The filter maintains a shift register that remembers the minimum delay over the most recent interval measured usually in hours. Under conditions of severe delay, the filter corrects the apparent offset using the sign of the offset and the difference between the apparent delay and minimum delay. The name of the filter reflects the negative (huff) and positive (puff) correction, which depends on the sign of the offset.&lt;/p&gt;
&lt;p&gt;The filter is activated by the &lt;tt&gt;tinker&lt;/tt&gt; command and &lt;tt&gt;huffpuff&lt;/tt&gt; keyword, as described in the &lt;a href=&#34;/archives/4.2.0/miscopt&#34;&gt;Miscellaneous Options&lt;/a&gt; page.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;notes&#34;&gt;Notes&lt;/h4&gt;
&lt;p&gt;If NetInfo support is built into &lt;tt&gt;ntpd&lt;/tt&gt;, then &lt;tt&gt;ntpd&lt;/tt&gt; will attempt to read its configuration from the NetInfo if the default ntp.conf file cannot be read and no file is specified by the &lt;tt&gt;-c&lt;/tt&gt; option.&lt;/p&gt;
&lt;p&gt;In contexts where a host name is expected, a &lt;tt&gt;-4&lt;/tt&gt; qualifier preceding the host name forces DNS resolution to the IPv4 namespace, while a &lt;tt&gt;-6&lt;/tt&gt; qualifier forces DNS resolution to the IPv6 namespace.&lt;/p&gt;
&lt;p&gt;Various internal &lt;tt&gt;ntpd&lt;/tt&gt; variables can be displayed and configuration options altered while the &lt;tt&gt;ntpd&lt;/tt&gt; is running using the &lt;tt&gt;&lt;a href=&#34;/archives/4.2.0/ntpq&#34;&gt;ntpq&lt;/a&gt;&lt;/tt&gt; and &lt;tt&gt;&lt;a href=&#34;/archives/4.2.0/ntpdc&#34;&gt;ntpdc&lt;/a&gt;&lt;/tt&gt; utility programs.&lt;/p&gt;
&lt;p&gt;When &lt;tt&gt;ntpd&lt;/tt&gt; starts it looks at the value of &lt;tt&gt;umask&lt;/tt&gt;, and if zero &lt;tt&gt;ntpd&lt;/tt&gt; will set the &lt;tt&gt;umask&lt;/tt&gt; to &lt;tt&gt;022&lt;/tt&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;command-line-options&#34;&gt;Command Line Options&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;-4&lt;/dt&gt;&lt;/tt&gt;
&lt;p&gt;Force DNS resolution of following host names to the IPv4 namespace.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-6&lt;/dt&gt;&lt;/tt&gt;
&lt;p&gt;Force DNS resolution of following host names to the IPv6 namespace.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-a&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Require cryptographic authentication for broadcast client, multicast client and symmetric passive associations. This is the default.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-A&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Do not require cryptographic authentication for broadcast client, multicast client and symmetric passive associations. This is almost never a good idea.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-b&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enable the client to synchronize to broadcast servers.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-c _conffile_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify the name and path of the configuration file, default &lt;tt&gt;/etc/ntp.conf&lt;/tt&gt;.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-d&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify debugging mode. This option may occur more than once, with each occurrence indicating greater detail of display.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-D _level_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify debugging level directly.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-f _driftfile_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify the name and path of the frequency file, default &lt;tt&gt;/etc/ntp.drift&lt;/tt&gt;. This is the same operation as the &lt;tt&gt;driftfile &lt;em&gt;driftfile&lt;/em&gt;&lt;/tt&gt; configuration command.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-g&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Normally, &lt;tt&gt;ntpd&lt;/tt&gt; exits with a message to the system log if the offset exceeds the panic threshold, which is 1000 s by default. This option allows the time to be set to any value without restriction; however, this can happen only once. If the threshold is exceeded after that, &lt;tt&gt;ntpd&lt;/tt&gt; will exit with a message to the system log. This option can be used with the &lt;tt&gt;-q&lt;/tt&gt; and &lt;tt&gt;-x&lt;/tt&gt; options. See the &lt;tt&gt;tinker&lt;/tt&gt; command for other options.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-k _keyfile_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify the name and path of the symmetric key file, default &lt;tt&gt;/etc/ntp.keys&lt;/tt&gt;. This is the same operation as the &lt;tt&gt;keys &lt;em&gt;keyfile&lt;/em&gt;&lt;/tt&gt; configuration command.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-l _logfile_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify the name and path of the log file. The default is the system log file. This is the same operation as the &lt;tt&gt;logfile &lt;em&gt;logfile&lt;/em&gt;&lt;/tt&gt; configuration command.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-L&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Do not listen to virtual IPs. The default is to listen.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-m&lt;/dt&gt;&lt;/tt&gt;
&lt;p&gt;Enable the client to synchronize to multicast servers at the IPv4 multicast group address 224.0.1.1.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-n&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Don&amp;rsquo;t fork.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-N&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;To the extent permitted by the operating system, run the &lt;tt&gt;ntpd&lt;/tt&gt; at the highest priority.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-p _pidfile_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify the name and path of the file used to record the &lt;tt&gt;ntpd&lt;/tt&gt; process ID. This is the same operation as the &lt;tt&gt;pidfile &lt;em&gt;pidfile&lt;/em&gt;&lt;/tt&gt; configuration command.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-P _priority_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;To the extent permitted by the operating system, run the &lt;tt&gt;ntpd&lt;/tt&gt; at the specified priority.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-q&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Exit the &lt;tt&gt;ntpd&lt;/tt&gt; just after the first time the clock is set. This behavior mimics that of the &lt;tt&gt;ntpdate&lt;/tt&gt; program, which is to be retired. The &lt;tt&gt;-g&lt;/tt&gt; and &lt;tt&gt;-x&lt;/tt&gt; options can be used with this option. Note: The kernel time discipline is disabled with this option.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-r _broadcastdelay_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify the default propagation delay from the broadcast/multicast server to this client. This is necessary only if the delay cannot be computed automatically by the protocol.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-s _statsdir_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify the directory path for files created by the statistics facility. This is the same operation as the &lt;tt&gt;statsdir &lt;em&gt;statsdir&lt;/em&gt;&lt;/tt&gt; configuration command.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-t _key_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Add a key number to the trusted key list. This option can occur more than once.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-v _variable_&lt;/tt&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;tt&gt;-V _variable_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Add a system variable listed by default.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-x&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Normally, the time is slewed if the offset is less than the step threshold, which is 128 ms by default, and stepped if above the threshold. This option sets the threshold to 600 s, which is well within the accuracy window to set the clock manually. Note: Since the slew rate of typical Unix kernels is limited to 0.5 ms/s, each second of adjustment requires an amortization interval of 2000 s. Thus, an adjustment as much as 600 s will take almost 14 days to complete. This option can be used with the &lt;tt&gt;-g&lt;/tt&gt; and &lt;tt&gt;-q&lt;/tt&gt; options. See the &lt;tt&gt;tinker&lt;/tt&gt; command for other options. Note: The kernel time discipline is disabled with this option.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;the-configuration-file&#34;&gt;The Configuration File&lt;/h4&gt;
&lt;p&gt;Ordinarily, &lt;tt&gt;ntpd&lt;/tt&gt; reads the &lt;tt&gt;ntp.conf&lt;/tt&gt; configuration file at startup time in order to determine the synchronization sources and operating modes. It is also possible to specify a working, although limited, configuration entirely on the command line, obviating the need for a configuration file. This may be particularly useful when the local host is to be configured as a broadcast/multicast client, with all peers being determined by listening to broadcasts at run time.&lt;/p&gt;
&lt;p&gt;Usually, the configuration file is installed in the &lt;tt&gt;/etc&lt;/tt&gt; directory, but could be installed elsewhere (see the &lt;tt&gt;-c &lt;em&gt;conffile&lt;/em&gt;&lt;/tt&gt; command line option). The file format is similar to other Unix configuration files - comments begin with a &lt;tt&gt;#&lt;/tt&gt; character and extend to the end of the line; blank lines are ignored.&lt;/p&gt;
&lt;p&gt;Configuration commands consist of an initial keyword followed by a list of arguments, some of which may be optional, separated by whitespace. Commands may not be continued over multiple lines. Arguments may be host names, host addresses written in numeric, dotted-quad form, integers, floating point numbers (when specifying times in seconds) and text strings. Optional arguments are delimited by &lt;tt&gt;[ ]&lt;/tt&gt; in the following descriptions, while alternatives are separated by &lt;tt&gt;|&lt;/tt&gt;. The notation &lt;tt&gt;[ &amp;hellip; ]&lt;/tt&gt; means an optional, indefinite repetition of the last item before the &lt;tt&gt;[ &amp;hellip; ]&lt;/tt&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;configuration-options&#34;&gt;Configuration Options&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;/archives/4.2.0/confopt&#34;&gt;Server Options&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;/archives/4.2.0/authopt&#34;&gt;Authentication Options&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;/archives/4.2.0/monopt&#34;&gt;Monitoring Options&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;/archives/4.2.0/accopt&#34;&gt;Access Control Options&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;/archives/4.2.0/manyopt&#34;&gt;Automatic NTP Configuration Options&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;/archives/4.2.0/clockopt&#34;&gt;Reference Clock Options&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;/archives/4.2.0/miscopt&#34;&gt;Miscellaneous Options&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;files&#34;&gt;Files&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;File&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;th&gt;Option&lt;/th&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;configuration file&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/etc/ntp.conf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-c&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;none&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;frequency file&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/etc/ntp.drift&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-f&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;driftfile&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;process ID file&lt;/td&gt;
&lt;td&gt;none&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pidfile&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;log file&lt;/td&gt;
&lt;td&gt;system log&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-l&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;logfile&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;include file&lt;/td&gt;
&lt;td&gt;none&lt;/td&gt;
&lt;td&gt;none&lt;/td&gt;
&lt;td&gt;&lt;code&gt;includefile&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;statistics path&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/var/NTP&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;statsdir&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;keys path&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/usr/local/etc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-k&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;keysdir&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: ntpd System Log Messages</title>
      <link>/archives/4.2.0/msyslog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/msyslog/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice47.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The mushroom knows all the error codes, which is more than most of us do.&lt;/p&gt;
&lt;p&gt;Last update:  02:23 UTC Saturday, February 01, 2003&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/msyslog/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/msyslog/#protocol-module&#34;&gt;Protocol Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/msyslog/#clock-discipline-module&#34;&gt;Clock Discipline Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/msyslog/#cryptographic-module&#34;&gt;Cryptographic Module&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;introduction&#34;&gt;Introduction&lt;/h4&gt;
&lt;p&gt;You have come here because you found a cryptic message in the system log. This page by no means lists all messages that might be found, since new ones come and old ones go. Generally, however, the most common ones will be found here. They are listed by program module and log severity code in bold: &lt;tt&gt;&lt;strong&gt;LOG_ERR&lt;/strong&gt;&lt;/tt&gt;, &lt;strong&gt;&lt;tt&gt;LOG_NOTICE&lt;/tt&gt;&lt;/strong&gt; and &lt;tt&gt;&lt;strong&gt;LOG_INFO&lt;/strong&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Most of the time &lt;strong&gt;&lt;tt&gt;LOG_ERR&lt;/tt&gt;&lt;/strong&gt; messages are fatal, but often &lt;tt&gt;ntpd&lt;/tt&gt; limps onward in the hopes of discovering more errors. The &lt;tt&gt;&lt;strong&gt;LOG_NOTICE&lt;/strong&gt;&lt;/tt&gt; messages usually mean the time has changed or some other condition that probably should be noticed. The &lt;tt&gt;&lt;strong&gt;LOG_INFO&lt;/strong&gt;&lt;/tt&gt; messages usually say something about the system operations, but do not affect the time.&lt;/p&gt;
&lt;p&gt;In the following a &lt;code&gt;?&lt;/code&gt; character stands for text in the message. The meaning should be clear from context.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;protocol-module&#34;&gt;Protocol Module&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;&lt;strong&gt;LOG_ERR&lt;/strong&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;buffer overflow ?&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Fatal error. An input packet is too long for processing.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;&lt;strong&gt;LOG_NOTICE&lt;/strong&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;no reply; clock not set&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;In &lt;tt&gt;ntpdate&lt;/tt&gt; mode no servers have been found. The server(s) and/or network may be down. Standard debugging procedures apply.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;&lt;strong&gt;LOG_INFO&lt;/strong&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;proto_config: illegal item ?, value ?&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Program error. Please report to &lt;a href=&#34;mailto:bugs@ntp.org&#34;&gt;bugs@ntp.org&lt;/a&gt;.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;pps sync enabled&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The PPS signal has been detected and enabled.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;transmit: encryption key ? not found&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The key cache is inconsistent. Please report to &lt;a href=&#34;mailto:bugs@ntp.org&#34;&gt;bugs@ntp.org&lt;/a&gt;.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;precision = ? usec&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This reports the precision measured for this machine.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;using 10ms tick adjustments&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Gotcha for some machines with dirty rotten clock hardware.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;no servers reachable&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The system clock is running on internal batteries. The server(s) and/or network may be down.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;clock-discipline-module&#34;&gt;Clock Discipline Module&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;&lt;strong&gt;LOG_ERR&lt;/strong&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;time correction of ? seconds exceeds sanity limit (?); set clock manually to the correct UTC time&lt;/tt&gt;.&lt;/dt&gt;
&lt;p&gt;Fatal error. Better do what it says, then restart the daemon. Be advised NTP and Unix know nothing about local time zones. The clock must be set to Coordinated Universal Time (UTC). Believe it; by international agreement abbreviations are in French and descriptions are in English.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;sigaction() fails to save SIGSYS trap: ? &lt;/tt&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;tt&gt;sigaction() fails to restore SIGSYS trap: ?&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Program error. Please report to &lt;a href=&#34;mailto:bugs@ntp.org&#34;&gt;bugs@ntp.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;&lt;strong&gt;LOG_NOTICE&lt;/strong&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;frequency error ? exceeds tolerance 500 PPM&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The hardware clock frequency error exceeds the rate the kernel can correct. This could be a hardware or a kernel problem.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;time slew ? s&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The time error exceeds the step threshold and is being slewed to the correct time. You may have to wait a very long time.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;time reset ? s&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The time error exceeds the step threshold and has been reset to the correct time. Computer scientists don&amp;rsquo;t like this, but they can set the &lt;tt&gt;ntpd -x&lt;/tt&gt; option and wait forever.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;kernel time sync disabled ?&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The kernel reports an error. See the codes in the &lt;tt&gt;timex.h&lt;/tt&gt; file.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;pps sync disabled&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The PPS signal has died, probably due to a dead radio, broken wire or loose connector.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;&lt;strong&gt;LOG_INFO&lt;/strong&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;kernel time sync status ?&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;For information only. See the codes in the &lt;tt&gt;timex.h&lt;/tt&gt; file.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;cryptographic-module&#34;&gt;Cryptographic Module&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;&lt;strong&gt;LOG_ERR&lt;/strong&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;cert_parse ?&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;cert_sign ?&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;crypto_cert ?&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;crypto_encrypt ?&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;crypto_gq ?&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;crypto_iff ?&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;crypto_key ?&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;crypto_mv ?&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;crypto_setup ?&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;make_keys ?&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Usually fatal errors. These messages display error codes returned from the OpenSSL library. See the OpenSSL documentation for explanation.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;crypto_setup: certificate ? is trusted, but not self signed.&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;crypto_setup: certificate ? not for this host&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;crypto_setup: certificate file ? not found or corrupt&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;crypto_setup: host key file ? not found or corrupt&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;crypto_setup: host key is not RSA key type&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;crypto_setup: random seed file ? not found&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;rypto_setup: random seed file not specified&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Fatal errors. These messages show problems during the initialization procedure.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;&lt;strong&gt;LOG_INFO&lt;/strong&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;cert_parse: expired ?&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;cert_parse: invalid issuer ?&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;cert_parse: invalid signature ?&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;cert_parse: invalid subject ?&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;There is a problem with a certificate. Operation cannot proceed until the problem is fixed. If the certificate is local, it can be regenerated using the &lt;tt&gt;ntp-keygen&lt;/tt&gt; program. If it is held somewhere else, it must be fixed by the holder.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;crypto_?: defective key&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;crypto_?: invalid filestamp&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;crypto_?: missing challenge&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;crypto_?: scheme unavailable&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;There is a problem with the identity scheme. Operation cannot proceed until the problem is fixed. Usually errors are due to misconfiguration or an orphan association. If the latter, &lt;tt&gt;ntpd&lt;/tt&gt; will usually time out and recover by itself.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;crypto_cert: wrong PEM type ?&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The certificate does not have MIME type &lt;tt&gt;CERTIFICATE&lt;/tt&gt;. You are probably using the wrong type from OpenSSL or an external certificate authority.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;crypto_ident: no compatible identity scheme found&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Configuration error. The server and client identity schemes are incompatible.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;crypto_tai: kernel TAI update failed&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The kernel does not support this function. You may need a new kernel or patch.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;crypto_tai: leapseconds file ? error ?&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The leapseconds file is corrupt. Obtain the latest file from &lt;tt&gt;time.nist.gov&lt;/tt&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: ntpdate - set the date and time via NTP</title>
      <link>/archives/4.2.0/ntpdate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/ntpdate/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/rabbit.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I told you it was eyeball and wristwatch.&lt;/p&gt;
&lt;p&gt;Last update: 01:13 UTC Sunday, December 22, 2002&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; The functionality of this program is now available in the &lt;tt&gt;ntpd&lt;/tt&gt; program. See the &lt;code&gt;-q&lt;/code&gt; command line option in the &lt;a href=&#34;/archives/4.2.0/ntpd&#34;&gt;&lt;tt&gt;ntpd&lt;/tt&gt; - Network Time Protocol (NTP) daemon&lt;/a&gt; page. After a suitable period of mourning, the &lt;tt&gt;ntpdate&lt;/tt&gt; program will be retired from this distribution.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpdate/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpdate/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpdate/#command-line-options&#34;&gt;Command Line Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpdate/#files&#34;&gt;Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpdate/#bugs&#34;&gt;Bugs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntpdate [ -bBdoqsuv ] [ -a &lt;em&gt;key&lt;/em&gt; ] [ -e &lt;em&gt;authdelay&lt;/em&gt; ] [ -k &lt;em&gt;keyfile&lt;/em&gt; ] [ -o &lt;em&gt;version&lt;/em&gt; ] [ -p &lt;em&gt;samples&lt;/em&gt; ] [ -t &lt;em&gt;timeout&lt;/em&gt; ] &lt;em&gt;server&lt;/em&gt; [ &amp;hellip; ]&lt;/tt&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntpdate&lt;/tt&gt; sets the local date and time by polling the Network Time Protocol (NTP) server(s) given as the &lt;em&gt;server&lt;/em&gt; arguments to determine the correct time. It must be run as root on the local host. A number of samples are obtained from each of the servers specified and a subset of the NTP clock filter and selection algorithms are applied to select the best of these. Note that the accuracy and reliability of &lt;tt&gt;ntpdate&lt;/tt&gt; depends on the number of servers, the number of polls each time it is run and the interval between runs.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;ntpdate&lt;/tt&gt; can be run manually as necessary to set the host clock, or it can be run from the host startup script to set the clock at boot time. This is useful in some cases to set the clock initially before starting the NTP daemon &lt;tt&gt;ntpd&lt;/tt&gt;. It is also possible to run &lt;tt&gt;ntpdate&lt;/tt&gt; from a &lt;tt&gt;cron&lt;/tt&gt; script. However, it is important to note that &lt;tt&gt;ntpdate&lt;/tt&gt; with contrived &lt;tt&gt;cron&lt;/tt&gt; scripts is no substitute for the NTP daemon, which uses sophisticated algorithms to maximize accuracy and reliability while minimizing resource use. Finally, since &lt;tt&gt;ntpdate&lt;/tt&gt; does not discipline the host clock frequency as does &lt;tt&gt;ntpd&lt;/tt&gt;, the accuracy using &lt;tt&gt;ntpdate&lt;/tt&gt; is limited.&lt;/p&gt;
&lt;p&gt;Time adjustments are made by &lt;tt&gt;ntpdate&lt;/tt&gt; in one of two ways. If &lt;tt&gt;ntpdate&lt;/tt&gt; determines the clock is in error more than 0.5 second it will simply step the time by calling the system &lt;tt&gt;settimeofday()&lt;/tt&gt; routine. If the error is less than 0.5 seconds, it will slew the time by calling the system &lt;tt&gt;adjtime()&lt;/tt&gt; routine. The latter technique is less disruptive and more accurate when the error is small, and works quite well when &lt;tt&gt;ntpdate&lt;/tt&gt; is run by &lt;tt&gt;cron&lt;/tt&gt; every hour or two.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;ntpdate&lt;/tt&gt; will decline to set the date if an NTP server daemon (e.g., &lt;tt&gt;ntpd&lt;/tt&gt;) is running on the same host. When running &lt;tt&gt;ntpdate&lt;/tt&gt; on a regular basis from &lt;tt&gt;cron&lt;/tt&gt; as an alternative to running a daemon, doing so once every hour or two will result in precise enough timekeeping to avoid stepping the clock.&lt;/p&gt;
&lt;p&gt;Note that in contexts where a host name is expected, a &lt;tt&gt;-4&lt;/tt&gt; qualifier preceding the host name forces DNS resolution to the IPv4 namespace, while a &lt;tt&gt;-6&lt;/tt&gt; qualifier forces DNS resolution to the IPv6 namespace.&lt;/p&gt;
&lt;p&gt;If NetInfo support is compiled into &lt;tt&gt;ntpdate&lt;/tt&gt;, then the &lt;tt&gt;server&lt;/tt&gt; argument is optional if &lt;tt&gt;ntpdate&lt;/tt&gt; can find a time server in the NetInfo configuration for &lt;tt&gt;ntpd&lt;/tt&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;command-line-options&#34;&gt;Command Line Options&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;-4&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Force DNS resolution of following host names on the command line to the IPv4 namespace.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-6&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Force DNS resolution of following host names on the command line to the IPv6 namespace.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-a _key_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enable the authentication function and specify the key identifier to be used for authentication as the argument &lt;em&gt;key&lt;/em&gt; &lt;tt&gt;ntpdate&lt;/tt&gt;. The keys and key identifiers must match in both the client and server key files. The default is to disable the authentication function.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-B&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Force the time to always be slewed using the adjtime() system call, even if the measured offset is greater than +-128 ms. The default is to step the time using settimeofday() if the offset is greater than +-128 ms. Note that, if the offset is much greater than +-128 ms in this case, that it can take a long time (hours) to slew the clock to the correct value. During this time, the host should not be used to synchronize clients.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-b&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Force the time to be stepped using the settimeofday() system call, rather than slewed (default) using the adjtime() system call. This option should be used when called from a startup file at boot time.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-d&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enable the debugging mode, in which &lt;tt&gt;ntpdate&lt;/tt&gt; will go through all the steps, but not adjust the local clock. Information useful for general debugging will also be printed.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-e _authdelay_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify the processing delay to perform an authentication function as the value &lt;em&gt;authdelay&lt;/em&gt;, in seconds and fraction (see &lt;tt&gt;ntpd&lt;/tt&gt; for details). This number is usually small enough to be negligible for most purposes, though specifying a value may improve timekeeping on very slow CPUs.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-k _keyfile_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify the path for the authentication key file as the string &lt;em&gt;keyfile&lt;/em&gt;. The default is &lt;tt&gt;/etc/ntp.keys&lt;/tt&gt;. This file should be in the format described in &lt;tt&gt;ntpd&lt;/tt&gt;.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-o _version_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify the NTP version for outgoing packets as the integer &lt;em&gt;version&lt;/em&gt;, which can be 1 or 2. The default is 3. This allows &lt;tt&gt;ntpdate&lt;/tt&gt; to be used with older NTP versions.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-p _samples_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify the number of samples to be acquired from each server as the integer &lt;em&gt;samples&lt;/em&gt;, with values from 1 to 8 inclusive. The default is 4.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-q&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Query only - don&amp;rsquo;t set the clock.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-s&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Divert logging output from the standard output (default) to the system &lt;tt&gt;syslog&lt;/tt&gt; facility. This is designed primarily for convenience of &lt;tt&gt;cron&lt;/tt&gt; scripts.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-t _timeout_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify the maximum time waiting for a server response as the value &lt;em&gt;timeout&lt;/em&gt;, in seconds and fraction. The value is rounded to a multiple of 0.2 seconds. The default is 1 second, a value suitable for polling across a LAN.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-u&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Direct &lt;tt&gt;ntpdate&lt;/tt&gt; to use an unprivileged port for outgoing packets. This is most useful when behind a firewall that blocks incoming traffic to privileged ports, and you want to synchronize with hosts beyond the firewall. Note that the &lt;tt&gt;-d&lt;/tt&gt; option always uses unprivileged ports.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-v&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Be verbose. This option will cause &lt;tt&gt;ntpdate&lt;/tt&gt;&amp;rsquo;s version identification string to be logged.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;files&#34;&gt;Files&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;/etc/ntp.keys&lt;/tt&gt; - encryption keys used by &lt;tt&gt;ntpdate&lt;/tt&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;bugs&#34;&gt;Bugs&lt;/h4&gt;
&lt;p&gt;The slew adjustment is actually 50% larger than the measured offset, since this (it is argued) will tend to keep a badly drifting clock more accurate. This is probably not a good idea and may cause a troubling hunt for some values of the kernel variables &lt;tt&gt;tick&lt;/tt&gt; and &lt;tt&gt;tickadj&lt;/tt&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: ntpdc - special NTP query program</title>
      <link>/archives/4.2.0/ntpdc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/ntpdc/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice31.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This program is a big puppy.&lt;/p&gt;
&lt;p&gt;Last update: 21:39 UTC Sunday, January 26, 2003&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpdc/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpdc/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpdc/#command-line-options&#34;&gt;Command Line Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpdc/#interactive-commands&#34;&gt;Interactive Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpdc/#control-message-commands&#34;&gt;Control Message Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpdc/#runtime-configuration-requests&#34;&gt;Runtime Configuration Requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpdc/#bugs&#34;&gt;Bugs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntpdc [ -ilnps ] [ -c &lt;em&gt;command&lt;/em&gt; ] [ &lt;em&gt;host&lt;/em&gt; ] [ &amp;hellip; ]&lt;/tt&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntpdc&lt;/tt&gt; is used to query the &lt;tt&gt;ntpd&lt;/tt&gt; daemon about its current state and to request changes in that state. The program may be run either in interactive mode or controlled using command line arguments. Extensive state and statistics information is available through the &lt;tt&gt;ntpdc&lt;/tt&gt; interface. In addition, nearly all the configuration options which can be specified at startup using ntpd&amp;rsquo;s configuration file may also be specified at run time using &lt;tt&gt;ntpdc&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;If one or more request options are included on the command line when &lt;tt&gt;ntpdc&lt;/tt&gt; is executed, each of the requests will be sent to the NTP servers running on each of the hosts given as command line arguments, or on localhost by default. If no request options are given, &lt;tt&gt;ntpdc&lt;/tt&gt; will attempt to read commands from the standard input and execute these on the NTP server running on the first host given on the command line, again defaulting to localhost when no other host is specified. &lt;tt&gt;ntpdc&lt;/tt&gt; will prompt for commands if the standard input is a terminal device.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;ntpdc&lt;/tt&gt; uses NTP mode 7 packets to communicate with the NTP server, and hence can be used to query any compatible server on the network which permits it. Note that since NTP is a UDP protocol this communication will be somewhat unreliable, especially over large distances in terms of network topology. &lt;tt&gt;ntpdc&lt;/tt&gt; makes no attempt to retransmit requests, and will time requests out if the remote host is not heard from within a suitable timeout time.&lt;/p&gt;
&lt;p&gt;The operation of &lt;tt&gt;ntpdc&lt;/tt&gt; are specific to the particular implementation of the &lt;tt&gt;ntpd&lt;/tt&gt; daemon and can be expected to work only with this and maybe some previous versions of the daemon. Requests from a remote &lt;tt&gt;ntpdc&lt;/tt&gt; program which affect the state of the local server must be authenticated, which requires both the remote program and local server share a common key and key identifier.&lt;/p&gt;
&lt;p&gt;Note that in contexts where a host name is expected, a &lt;tt&gt;-4&lt;/tt&gt; qualifier preceding the host name forces DNS resolution to the IPv4 namespace, while a &lt;tt&gt;-6&lt;/tt&gt; qualifier forces DNS resolution to the IPv6 namespace.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;command-line-options&#34;&gt;Command Line Options&lt;/h4&gt;
&lt;p&gt;Specifying a command line option other than &lt;tt&gt;-i&lt;/tt&gt; or &lt;tt&gt;-n&lt;/tt&gt; will cause the specified query (queries) to be sent to the indicated host(s) immediately. Otherwise, &lt;tt&gt;ntpdc&lt;/tt&gt; will attempt to read interactive format commands from the standard input.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-4&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Force DNS resolution of following host names on the command line to the IPv4 namespace.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-6&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Force DNS resolution of following host names on the command line to the IPv6 namespace.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-c _command_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The following argument is interpreted as an interactive format command and is added to the list of commands to be executed on the specified host(s). Multiple -c options may be given.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-i&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Force &lt;tt&gt;ntpdc&lt;/tt&gt; to operate in interactive mode. Prompts will be written to the standard output and commands read from the standard input.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-l&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Obtain a list of peers which are known to the server(s). This switch is equivalent to &lt;tt&gt;-c listpeers&lt;/tt&gt;.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-n&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Output all host addresses in dotted-quad numeric format rather than converting to the canonical host names.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-p&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Print a list of the peers known to the server as well as a summary of their state. This is equivalent to &lt;tt&gt;-c peers&lt;/tt&gt;.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-s&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Print a list of the peers known to the server as well as a summary of their state, but in a slightly different format than the -p switch. This is equivalent to &lt;tt&gt;-c dmpeers&lt;/tt&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;interactive-commands&#34;&gt;Interactive Commands&lt;/h4&gt;
&lt;p&gt;Interactive format commands consist of a keyword followed by zero to four arguments. Only enough characters of the full keyword to uniquely identify the command need be typed. The output of a command is normally sent to the standard output, but optionally the output of individual commands may be sent to a file by appending a &lt;code&gt;&amp;lt;&lt;/code&gt;, followed by a file name, to the command line.&lt;/p&gt;
&lt;p&gt;A number of interactive format commands are executed entirely within the &lt;tt&gt;ntpdc&lt;/tt&gt; program itself and do not result in NTP mode 7 requests being sent to a server. These are described following.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;? [ _command_keyword_ ]&lt;/tt&gt;  
&lt;tt&gt;help [ _command_keyword_ ]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;A &lt;tt&gt;?&lt;/tt&gt; by itself will print a list of all the command keywords known to this incarnation of &lt;tt&gt;ntpq&lt;/tt&gt;. A &lt;tt&gt;?&lt;/tt&gt; followed by a command keyword will print function and usage information about the command. This command is probably a better source of information about &lt;tt&gt;ntpq&lt;/tt&gt; than this manual page.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;delay _milliseconds_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify a time interval to be added to timestamps included in requests which require authentication. This is used to enable (unreliable) server reconfiguration over long delay network paths or between machines whose clocks are unsynchronized. Actually the server does not now require timestamps in authenticated requests, so this command may be obsolete.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;host _hostname_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Set the host to which future queries will be sent. Hostname may be either a host name or a numeric address.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;hostnames [ yes | no ]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;If &lt;tt&gt;yes&lt;/tt&gt; is specified, host names are printed in information displays. If &lt;tt&gt;no&lt;/tt&gt; is specified, numeric addresses are printed instead. The default is &lt;tt&gt;yes&lt;/tt&gt;, unless modified using the command line &lt;tt&gt;-n&lt;/tt&gt; switch.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;keyid _keyid_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command allows the specification of a key number to be used to authenticate configuration requests from ntpdc to the host(s). This must correspond to a key number which the host/server has been configured to use for this purpose.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;quit&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Exit &lt;tt&gt;ntpdc&lt;/tt&gt;.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;passwd&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command prompts you to type in a password (which will not be echoed) which will be used to authenticate configuration requests. The password must correspond to the key configured for use by the NTP server for this purpose if such requests are to be successful.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;timeout _milliseconds_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify a timeout period for responses to server queries. The default is about 8000 milliseconds. Note that since &lt;tt&gt;ntpdc&lt;/tt&gt; retries each query once after a timeout, the total waiting time for a timeout will be twice the timeout value set.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;control-message-commands&#34;&gt;Control Message Commands&lt;/h4&gt;
&lt;p&gt;Query commands result in NTP mode 7 packets containing requests for information being sent to the server. These are read-only commands in that they make no modification of the server configuration state.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;listpeers&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Obtains and prints a brief list of the peers for which the server is maintaining state. These should include all configured peer associations as well as those peers whose stratum is such that they are considered by the server to be possible future synchronization candidates.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;peers&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Obtains a list of peers for which the server is maintaining state, along with a summary of that state. Summary information includes the address of the remote peer, the local interface address (0.0.0.0 if a local address has yet to be determined), the stratum of the remote peer (a stratum of 16 indicates the remote peer is unsynchronized), the polling interval, in seconds, the reachability register, in octal, and the current estimated delay, offset and dispersion of the peer, all in seconds.&lt;/p&gt;
&lt;p&gt;The character in the left margin indicates the mode this peer entry is operating in. &lt;code&gt;+&lt;/code&gt; denotes symmetric active, &lt;code&gt;-&lt;/code&gt; indicates symmetric passive, &lt;code&gt;=&lt;/code&gt; means the remote server is being polled in client mode, &lt;code&gt;^&lt;/code&gt; indicates that the server is broadcasting to this address, &lt;code&gt;~&lt;/code&gt; denotes that the remote peer is sending broadcasts and &lt;code&gt;*&lt;/code&gt; marks the peer the server is currently synchronizing to.&lt;/p&gt;
&lt;p&gt;The contents of the host field may be one of four forms. It may be a host name, an IP address, a reference clock implementation name with its parameter or &lt;tt&gt;REFCLK(&lt;em&gt;implementation number&lt;/em&gt;, &lt;em&gt;parameter&lt;/em&gt;)&lt;/tt&gt;. On &lt;tt&gt;hostnames no&lt;/tt&gt; only IP-addresses will be displayed.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;dmpeers&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;A slightly different peer summary list. Identical to the output of the &lt;tt&gt;peers&lt;/tt&gt; command, except for the character in the leftmost column. Characters only appear beside peers which were included in the final stage of the clock selection algorithm. A &lt;code&gt;.&lt;/code&gt; indicates that this peer was cast off in the falseticker detection, while &lt;code&gt;+&lt;/code&gt; indicates that the peer made it through. A &lt;code&gt;*&lt;/code&gt; denotes the peer the server is currently synchronizing with.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;showpeer _peer_address_ [...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Shows a detailed display of the current peer variables for one or more peers. Most of these values are described in the NTP Version 2 specification.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;pstats _peer_address_ [...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Show per-peer statistic counters associated with the specified peer(s).&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;clockinfo _clock_peer_address_ [...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Obtain and print information concerning a peer clock. The values obtained provide information on the setting of fudge factors and other clock performance information.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;kerninfo&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Obtain and print kernel phase-lock loop operating parameters. This information is available only if the kernel has been specially modified for a precision timekeeping function.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;loopinfo [ oneline | multiline ]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Print the values of selected loop filter variables. The loop filter is the part of NTP which deals with adjusting the local system clock. The &lt;tt&gt;offset&lt;/tt&gt; is the last offset given to the loop filter by the packet processing code. The &lt;tt&gt;frequency&lt;/tt&gt; is the frequency error of the local clock in parts-per-million (ppm). The &lt;tt&gt;time_const&lt;/tt&gt; controls the stiffness of the phase-lock loop and thus the speed at which it can adapt to oscillator drift. The &lt;tt&gt;watchdog timer&lt;/tt&gt; value is the number of seconds which have elapsed since the last sample offset was given to the loop filter. The &lt;tt&gt;oneline&lt;/tt&gt; and &lt;tt&gt;multiline&lt;/tt&gt; options specify the format in which this information is to be printed, with &lt;tt&gt;multiline&lt;/tt&gt; as the default.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;sysinfo&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Print a variety of system state variables, i.e., state related to the local server. All except the last four lines are described in the NTP Version 3 specification, RFC-1305.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;system flags&lt;/tt&gt; show various system flags, some of which can be set and cleared by the &lt;tt&gt;enable&lt;/tt&gt; and &lt;tt&gt;disable&lt;/tt&gt; configuration commands, respectively. These are the &lt;tt&gt;auth&lt;/tt&gt;, &lt;tt&gt;bclient&lt;/tt&gt;, &lt;tt&gt;monitor&lt;/tt&gt;, &lt;tt&gt;pll&lt;/tt&gt;, &lt;tt&gt;pps&lt;/tt&gt; and &lt;tt&gt;stats&lt;/tt&gt; flags. See the &lt;tt&gt;ntpd&lt;/tt&gt; documentation for the meaning of these flags. There are two additional flags which are read only, the &lt;tt&gt;kernel_pll&lt;/tt&gt; and &lt;tt&gt;kernel_pps&lt;/tt&gt;. These flags indicate the synchronization status when the precision time kernel modifications are in use. The &lt;tt&gt;kernel_pll&lt;/tt&gt; indicates that the local clock is being disciplined by the kernel, while the kernel_pps indicates the kernel discipline is provided by the PPS signal.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;stability&lt;/tt&gt; is the residual frequency error remaining after the system frequency correction is applied and is intended for maintenance and debugging. In most architectures, this value will initially decrease from as high as 500 ppm to a nominal value in the range .01 to 0.1 ppm. If it remains high for some time after starting the daemon, something may be wrong with the local clock, or the value of the kernel variable &lt;tt&gt;tick&lt;/tt&gt; may be incorrect.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;broadcastdelay&lt;/tt&gt; shows the default broadcast delay, as set by the &lt;tt&gt;broadcastdelay&lt;/tt&gt; configuration command.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;authdelay&lt;/tt&gt; shows the default authentication delay, as set by the &lt;tt&gt;authdelay&lt;/tt&gt; configuration command.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;sysstats&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Print statistics counters maintained in the protocol module.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;memstats&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Print statistics counters related to memory allocation code.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;iostats&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Print statistics counters maintained in the input-output module.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;timerstats&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Print statistics counters maintained in the timer/event queue support code.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;reslist&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Obtain and print the server&amp;rsquo;s restriction list. This list is (usually) printed in sorted order and may help to understand how the restrictions are applied.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;monlist [ _version_ ]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Obtain and print traffic counts collected and maintained by the monitor facility. The version number should not normally need to be specified.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;clkbug _clock_peer_address_ [...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Obtain debugging information for a reference clock driver. This information is provided only by some clock drivers and is mostly undecodable without a copy of the driver source in hand.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;runtime-configuration-requests&#34;&gt;Runtime Configuration Requests&lt;/h4&gt;
&lt;p&gt;All requests which cause state changes in the server are authenticated by the server using a configured NTP key (the facility can also be disabled by the server by not configuring a key). The key number and the corresponding key must also be made known to &lt;tt&gt;ntpdc&lt;/tt&gt;. This can be done using the keyid and passwd commands, the latter of which will prompt at the terminal for a password to use as the encryption key. You will also be prompted automatically for both the key number and password the first time a command which would result in an authenticated request to the server is given. Authentication not only provides verification that the requester has permission to make such changes, but also gives an extra degree of protection again transmission errors.&lt;/p&gt;
&lt;p&gt;Authenticated requests always include a timestamp in the packet data, which is included in the computation of the authentication code. This timestamp is compared by the server to its receive time stamp. If they differ by more than a small amount the request is rejected. This is done for two reasons. First, it makes simple replay attacks on the server, by someone who might be able to overhear traffic on your LAN, much more difficult. Second, it makes it more difficult to request configuration changes to your server from topologically remote hosts. While the reconfiguration facility will work well with a server on the local host, and may work adequately between time-synchronized hosts on the same LAN, it will work very poorly for more distant hosts. As such, if reasonable passwords are chosen, care is taken in the distribution and protection of keys and appropriate source address restrictions are applied, the run time reconfiguration facility should provide an adequate level of security.&lt;/p&gt;
&lt;p&gt;The following commands all make authenticated requests.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;addpeer _peer_address_ [ _keyid_ ] [ _version_ ] [ prefer ]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Add a configured peer association at the given address and operating in symmetric active mode. Note that an existing association with the same peer may be deleted when this command is executed, or may simply be converted to conform to the new configuration, as appropriate. If the optional keyid is a nonzero integer, all outgoing packets to the remote server will have an authentication field attached encrypted with this key. If the value is 0 (or not given) no authentication will be done. The version# can be 1, 2 or 3 and defaults to 3. The prefer keyword indicates a preferred peer (and thus will be used primarily for clock synchronisation if possible). The preferred peer also determines the validity of the PPS signal - if the preferred peer is suitable for synchronisation so is the PPS signal.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;addserver _peer_address_ [ _keyid_ ] [ _version_ ] [ prefer ]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Identical to the addpeer command, except that the operating mode is client.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;broadcast _peer_address_ [ _keyid_ ] [ _version_ ] [ _prefer_ ]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Identical to the addpeer command, except that the operating mode is broadcast. In this case a valid non-zero key identifier and key are required. The &lt;tt&gt;peer_address&lt;/tt&gt; parameter can be the broadcast address of the local network or a multicast group address assigned to NTP. If a multicast address, a multicast-capable kernel is required.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;unconfig _peer_address_ [...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command causes the configured bit to be removed from the specified peer(s). In many cases this will cause the peer association to be deleted. When appropriate, however, the association may persist in an unconfigured mode if the remote peer is willing to continue on in this fashion.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;fudge _peer_address_ [ _time1_ ] [ _time2_ ] [ _stratum_ ] [ _refid_ ]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command provides a way to set certain data for a reference clock. See the source listing for further information.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;enable [ auth | bclient | calibrate | kernel | monitor | ntp | pps | stats]&lt;/tt&gt;  
&lt;tt&gt;disable [ auth | bclient | calibrate | kernel | monitor | ntp | pps | stats]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;These commands operate in the same way as the &lt;tt&gt;enable&lt;/tt&gt; and &lt;tt&gt;disable&lt;/tt&gt; configuration file commands of &lt;tt&gt;ntpd&lt;/tt&gt;. See the &lt;a href=&#34;/archives/4.2.0/miscopt&#34;&gt;Miscellaneous Options&lt;/a&gt; page for further information.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;restrict _address mask flag_ [ _flag_ ]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command operates in the same way as the &lt;tt&gt;restrict&lt;/tt&gt; configuration file commands of &lt;tt&gt;ntpd&lt;/tt&gt;.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;unrestrict _address mask flag_ [ _flag_ ]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Unrestrict the matching entry from the restrict list.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;delrestrict _address mask [ ntpport ]_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Delete the matching entry from the restrict list.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;readkeys&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Causes the current set of authentication keys to be purged and a new set to be obtained by rereading the keys file (which must have been specified in the &lt;tt&gt;ntpd&lt;/tt&gt; configuration file). This allows encryption keys to be changed without restarting the server.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;trustedkey _keyid_ [...]&lt;/tt&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;tt&gt;untrustedkey _keyid_ [...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;These commands operate in the same way as the &lt;tt&gt;trustedkey&lt;/tt&gt; and &lt;tt&gt;untrustedkey&lt;/tt&gt; configuration file commands of &lt;tt&gt;ntpd&lt;/tt&gt;.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;authinfo&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Returns information concerning the authentication module, including known keys and counts of encryptions and decryptions which have been done.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;traps&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Display the traps set in the server. See the source listing for further information.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;addtrap [ _address_ ] [ _port_ ] [ _interface_ ]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Set a trap for asynchronous messages. See the source listing for further information.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;clrtrap [ _address_ ] [ _port_ ] [ _interface_]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Clear a trap for asynchronous messages. See the source listing for further information.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;reset&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Clear the statistics counters in various modules of the server. See the source listing for further information.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;bugs&#34;&gt;Bugs&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntpdc&lt;/tt&gt; is a crude hack. Much of the information it shows is deadly boring and could only be loved by its implementer. The program was designed so that new (and temporary) features were easy to hack in, at great expense to the program&amp;rsquo;s ease of use. Despite this, the program is occasionally useful.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: ntpdsim - Network Time Protocol (NTP) simulator</title>
      <link>/archives/4.2.0/ntpdsim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/ntpdsim/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice47.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/%7emills/pictures.html&#34;&gt;from &lt;em&gt;The Wizard of Oz&lt;/em&gt;, L. Frank Baum&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The mushroom knows all the command line options.&lt;/p&gt;
&lt;p&gt;Last update: 03:16 AM UTC Monday, October 13, 2003&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpdsim/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpdsim/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpdsim/#command-line-options&#34;&gt;Command Line Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpdsim/#files&#34;&gt;Files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntpdsim [ -B &lt;em&gt;bdly&lt;/em&gt; ] [ -C &lt;em&gt;snse&lt;/em&gt; ] [ -O &lt;em&gt;clk_time&lt;/em&gt; ] [ -S &lt;em&gt;sim_time&lt;/em&gt; ] [ -T &lt;em&gt;ferr&lt;/em&gt; ] [ -W &lt;em&gt;fsne&lt;/em&gt; ] [ -Y&lt;/tt&gt; &lt;em&gt;&lt;tt&gt;ndly&lt;/tt&gt;&lt;/em&gt; &lt;tt&gt;] [ -X&lt;/tt&gt; &lt;em&gt;&lt;tt&gt;pdly&lt;/tt&gt;&lt;/em&gt; &lt;tt&gt;]&lt;/tt&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;The &lt;tt&gt;ntpdsim&lt;/tt&gt; program is an adaptation of the &lt;tt&gt;ntpd&lt;/tt&gt; operating system daemon. The program operates as a discrete time simulator using specified systematic and random driving sources. It includes all the mitigation and discipline algorithms of the actual daemon, but with the packet I/O and system clock algorithms driven by simulation. Most functions of the real &lt;tt&gt;ntpd&lt;/tt&gt; remain intact, including the monitoring, statistics recording, trace and host name resolution features. Further information on the simulator is on the &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/ntpsim.html&#34;&gt;NTP Discrete Event Simulator&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;The simulator is most useful to study NTP behavior in response to time and/or frequency transients under specific conditions of network jitter and oscillator wander. For this purpose the daemon can be driven by pseudorandom jitter and wander sample sequences characteristic of real networks and oscillators. The jitter generator produces samples from a Poisson distribution, while the wander generator produces samples from a Guassian distribution.&lt;/p&gt;
&lt;p&gt;The easiest way to use this program is to create a &lt;tt&gt;ntpstats&lt;/tt&gt; directory, configuration file &lt;tt&gt;ntp.conf&lt;/tt&gt; and frequency file &lt;tt&gt;ntp.drift&lt;/tt&gt; and test shell &lt;tt&gt;test.sh&lt;/tt&gt; in the base directory. The &lt;tt&gt;ntp.drift&lt;/tt&gt; file and &lt;tt&gt;ntpstats&lt;/tt&gt; directory can be empty to start. The &lt;tt&gt;test.sh&lt;/tt&gt; script can contain something like&lt;/p&gt;
&lt;pre&gt;rm ./ntpstats/*
ntpdsim -O 0.1 -C .001 -T 400 -W 1 -c ./ntp.conf,
&lt;/pre&gt;
&lt;p&gt;which starts the simulator with a time offset 100 ms, network jitter 1 ms, frequency offset 400 PPM and oscillator wander 1 PPM/s. These parameters represent typical conditions with modern workstations on a Ethernet LAN. The ntp.conf file should contain something like&lt;/p&gt;
&lt;pre&gt;disable kernel
server pogo
driftfile ./ntp.drift
statsdir ./ntpstats/
filegen loopstats type day enable
filegen peerstats type day enable
&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;command-line-options&#34;&gt;Command Line Options&lt;/h4&gt;
&lt;p&gt;Most of the &lt;tt&gt;ntpd&lt;/tt&gt; command line options apply also to &lt;tt&gt;ntpdsim&lt;/tt&gt;. In addition, the following command line options apply to &lt;tt&gt;ntpdsim.&lt;/tt&gt;&lt;/dt&gt;&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-B _bdly_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify beep delay (3600) s.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-C _snse_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify network jitter parameter (0) s.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-O _clk_time_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify initial time offset (0) s.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-S _sim_time_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify simulation duration (86400) s.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-T _ferr_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify initial frequency offset (0) PPM.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-W _fnse_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify oscillator wander parameter (0) PPM/s.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-Y _ndly_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify network propagation delay (.001) s.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-Z _pdly_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify server processing delay (.001) s.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;files&#34;&gt;Files&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;/etc/ntp.conf&lt;/tt&gt; - the default name of the configuration file&lt;br&gt;
&lt;tt&gt;/etc/ntp.drift&lt;/tt&gt; - the default name of the drift file&lt;br&gt;
&lt;tt&gt;/etc/ntp.keys&lt;/tt&gt; - the default name of the key file&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: ntpq - standard NTP query program</title>
      <link>/archives/4.2.0/ntpq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/ntpq/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/bustardfly.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;from &lt;em&gt;Pogo&lt;/em&gt;, Walt Kelly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A typical NTP monitoring packet&lt;/p&gt;
&lt;p&gt;Last update: 21:38 UTC Sunday, January 26, 2003&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpq/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpq/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpq/#internal-commands&#34;&gt;Internal Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpq/#control-message-commands&#34;&gt;Control Message Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpq/#tally-codes&#34;&gt;Tally Codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpq/#system-variables&#34;&gt;System Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpq/#peer-variables&#34;&gt;Peer Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpq/#flash-codes&#34;&gt;Flash Codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntpq/#bugs&#34;&gt;Bugs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntpq [-inp] [-c &lt;em&gt;command&lt;/em&gt;] [&lt;em&gt;host&lt;/em&gt;] [&amp;hellip;]&lt;/tt&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;The &lt;tt&gt;ntpq&lt;/tt&gt; utility program is used to monitor NTP daemon &lt;tt&gt;ntpd&lt;/tt&gt; operations and determine performance. It uses the standard NTP mode 6 control message formats defined in Appendix B of the NTPv3 specification RFC1305. The same formats are used in NTPv4, although some of the variables have changed and new ones added. The description on this page is for the NTPv4 variables.&lt;/p&gt;
&lt;p&gt;The program can be run either in interactive mode or controlled using command line arguments. Requests to read and write arbitrary variables can be assembled, with raw and pretty-printed output options being available. The &lt;tt&gt;ntpq&lt;/tt&gt; can also obtain and print a list of peers in a common format by sending multiple queries to the server.&lt;/p&gt;
&lt;p&gt;If one or more request options is included on the command line when &lt;tt&gt;ntpq&lt;/tt&gt; is executed, each of the requests will be sent to the NTP servers running on each of the hosts given as command line arguments, or on localhost by default. If no request options are given, &lt;tt&gt;ntpq&lt;/tt&gt; will attempt to read commands from the standard input and execute these on the NTP server running on the first host given on the command line, again defaulting to localhost when no other host is specified. &lt;tt&gt;ntpq&lt;/tt&gt;will prompt for commands if the standard input is a terminal device.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;ntpq&lt;/tt&gt; uses NTP mode 6 packets to communicate with the NTP server, and hence can be used to query any compatible server on the network which permits it. Note that since NTP is a UDP protocol this communication will be somewhat unreliable, especially over large distances in terms of network topology. &lt;tt&gt;ntpq&lt;/tt&gt; makes one attempt to retransmit requests, and will time requests out if the remote host is not heard from within a suitable timeout time.&lt;/p&gt;
&lt;p&gt;Note that in contexts where a host name is expected, a &lt;tt&gt;-4&lt;/tt&gt; qualifier preceding the host name forces DNS resolution to the IPv4 namespace, while a &lt;tt&gt;-6&lt;/tt&gt; qualifier forces DNS resolution to the IPv6 namespace.&lt;/p&gt;
&lt;p&gt;For examples and usage, see the &lt;a href=&#34;/archives/4.2.0/debug&#34;&gt;NTP Debugging Techniques&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;Command line options are described following. Specifying a command line option other than &lt;tt&gt;-i&lt;/tt&gt; or &lt;tt&gt;-n&lt;/tt&gt; will cause the specified query (queries) to be sent to the indicated host(s) immediately. Otherwise, &lt;tt&gt;ntpq&lt;/tt&gt; will attempt to read interactive format commands from the standard input.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-4&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Force DNS resolution of following host names on the command line to the IPv4 namespace.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-6&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Force DNS resolution of following host names on the command line to the IPv6 namespace.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-c&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The following argument is interpreted as an interactive format command and is added to the list of commands to be executed on the specified host(s). Multiple &lt;tt&gt;-c&lt;/tt&gt; options may be given.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-d&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Turn on debugging mode.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-i&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Force &lt;tt&gt;ntpq&lt;/tt&gt; to operate in interactive mode. Prompts will be written to the standard output and commands read from the standard input.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-n&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Output all host addresses in dotted-quad numeric format rather than converting to the canonical host names.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-p&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Print a list of the peers known to the server as well as a summary of their state. This is equivalent to the &lt;tt&gt;peers&lt;/tt&gt; interactive command.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;internal-commands&#34;&gt;Internal Commands&lt;/h4&gt;
&lt;p&gt;Interactive format commands consist of a keyword followed by zero to four arguments. Only enough characters of the full keyword to uniquely identify the command need be typed. The output of a command is normally sent to the standard output, but optionally the output of individual commands may be sent to a file by appending a &lt;tt&gt;&amp;gt;&lt;/tt&gt;, followed by a file name, to the command line. A number of interactive format commands are executed entirely within the &lt;tt&gt;ntpq&lt;/tt&gt; program itself and do not result in NTP mode 6 requests being sent to a server. These are described following.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;? [_command_keyword_]&lt;/tt&gt;  
&lt;tt&gt;help [_command_keyword_]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;A &lt;tt&gt;?&lt;/tt&gt; by itself will print a list of all the command keywords known to this incarnation of &lt;tt&gt;ntpq&lt;/tt&gt;. A &lt;tt&gt;?&lt;/tt&gt; followed by a command keyword will print function and usage information about the command. This command is probably a better source of information about &lt;tt&gt;ntpq&lt;/tt&gt; than this manual page.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;addvars _variable_name_ [ = _value_] [...]&lt;/tt&gt;  
&lt;tt&gt;rmvars _variable_name_ [...]&lt;/tt&gt;  
&lt;tt&gt;clearvars&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The data carried by NTP mode 6 messages consists of a list of items of the form &lt;tt&gt;&lt;em&gt;variable_name&lt;/em&gt; = &lt;em&gt;value&lt;/em&gt;&lt;/tt&gt;, where the &lt;tt&gt;= &lt;em&gt;value&lt;/em&gt;&lt;/tt&gt; is ignored, and can be omitted, in requests to the server to read variables. &lt;tt&gt;ntpq&lt;/tt&gt; maintains an internal list in which data to be included in control messages can be assembled, and sent using the &lt;tt&gt;readlist&lt;/tt&gt; and &lt;tt&gt;writelist&lt;/tt&gt; commands described below. The &lt;tt&gt;addvars&lt;/tt&gt; command allows variables and their optional values to be added to the list. If more than one variable is to be added, the list should be comma-separated and not contain white space. The &lt;tt&gt;rmvars&lt;/tt&gt; command can be used to remove individual variables from the list, while the &lt;tt&gt;clearlist&lt;/tt&gt; command removes all variables from the list.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;cooked&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Causes output from query commands to be &amp;ldquo;cooked&amp;rdquo;, so that variables which are recognized by &lt;tt&gt;ntpq&lt;/tt&gt; will have their values reformatted for human consumption. Variables which &lt;tt&gt;ntpq&lt;/tt&gt; thinks should have a decodable value but didn&amp;rsquo;t are marked with a trailing &lt;tt&gt;?&lt;/tt&gt;.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;debug more | less | off&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Turns internal query program debugging on and off.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;delay _milliseconds_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify a time interval to be added to timestamps included in requests which require authentication. This is used to enable (unreliable) server reconfiguration over long delay network paths or between machines whose clocks are unsynchronized. Actually the server does not now require timestamps in authenticated requests, so this command may be obsolete.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;host _hostname_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Set the host to which future queries will be sent. Hostname may be either a host name or a numeric address.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;hostnames [yes | no]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;If &lt;tt&gt;yes&lt;/tt&gt; is specified, host names are printed in information displays. If &lt;tt&gt;no&lt;/tt&gt; is specified, numeric addresses are printed instead. The default is &lt;tt&gt;yes&lt;/tt&gt;, unless modified using the command line &lt;tt&gt;-n&lt;/tt&gt; switch.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;keyid _keyid_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command specifies the key number to be used to authenticate configuration requests. This must correspond to a key number the server has been configured to use for this purpose.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;ntpversion 1 | 2 | 3 | 4&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Sets the NTP version number which &lt;tt&gt;ntpq&lt;/tt&gt; claims in packets. Defaults to 3. Note that mode 6 control messages (and modes, for that matter) didn&amp;rsquo;t exist in NTP version 1.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;passwd&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command prompts for a password (which will not be echoed) which will be used to authenticate configuration requests. The password must correspond to the key configured for NTP server for this purpose.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;quit&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Exit &lt;tt&gt;ntpq&lt;/tt&gt;.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;raw&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Causes all output from query commands is printed as received from the remote server. The only formating/interpretation done on the data is to transform nonascii data into a printable (but barely understandable) form.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;timeout _millseconds_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify a timeout period for responses to server queries. The default is about 5000 milliseconds. Note that since &lt;tt&gt;ntpq&lt;/tt&gt; retries each query once after a timeout, the total waiting time for a timeout will be twice the timeout value set.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;control-message-commands&#34;&gt;Control Message Commands&lt;/h4&gt;
&lt;p&gt;Each association known to an NTP server has a 16 bit integer association identifier. NTP control messages which carry peer variables must identify the peer the values correspond to by including its association ID. An association ID of 0 is special, and indicates the variables are system variables, whose names are drawn from a separate name space.&lt;/p&gt;
&lt;p&gt;Control message commands result in one or more NTP mode 6 messages being sent to the server, and cause the data returned to be printed in some format. Most commands currently implemented send a single message and expect a single response. The current exceptions are the peers command, which will send a preprogrammed series of messages to obtain the data it needs, and the mreadlist and mreadvar commands, which will iterate over a range of associations.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;associations&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Obtains and prints a list of association identifiers and peer statuses for in-spec peers of the server being queried. The list is printed in columns. The first of these is an index numbering the associations from 1 for internal use, the second the actual association identifier returned by the server and the third the status word for the peer. This is followed by a number of columns containing data decoded from the status word. See the peers command for a decode of the &lt;tt&gt;condition&lt;/tt&gt; field. Note that the data returned by the &lt;tt&gt;associations&lt;/tt&gt; command is cached internally in &lt;tt&gt;ntpq&lt;/tt&gt;. The index is then of use when dealing with stupid servers which use association identifiers which are hard for humans to type, in that for any subsequent commands which require an association identifier as an argument, the form &amp;amp;index may be used as an alternative.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;clockvar [_assocID_] [_variable_name_ [ = _value_ [...]] [...]&lt;/tt&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;tt&gt;cv [_assocID_] [_variable_name_ [ = _value_ [...] ][...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Requests that a list of the server&amp;rsquo;s clock variables be sent. Servers which have a radio clock or other external synchronization will respond positively to this. If the association identifier is omitted or zero the request is for the variables of the &lt;tt&gt;system clock&lt;/tt&gt; and will generally get a positive response from all servers with a clock. If the server treats clocks as pseudo-peers, and hence can possibly have more than one clock connected at once, referencing the appropriate peer association ID will show the variables of a particular clock. Omitting the variable list will cause the server to return a default variable display.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;lassociations&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Obtains and prints a list of association identifiers and peer statuses for all associations for which the server is maintaining state. This command differs from the &lt;tt&gt;associations&lt;/tt&gt; command only for servers which retain state for out-of-spec client associations (i.e., fuzzballs). Such associations are normally omitted from the display when the &lt;tt&gt;associations&lt;/tt&gt; command is used, but are included in the output of &lt;tt&gt;lassociations&lt;/tt&gt;.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;lpassociations&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Print data for all associations, including out-of-spec client associations, from the internally cached list of associations. This command differs from &lt;tt&gt;passociations&lt;/tt&gt; only when dealing with fuzzballs.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;lpeers&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Like R peers, except a summary of all associations for which the server is maintaining state is printed. This can produce a much longer list of peers from fuzzball servers.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;mreadlist _assocID_ _assocID_&lt;/tt&gt;  
&lt;tt&gt;mrl _assocID_ _assocID_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Like the &lt;tt&gt;readlist&lt;/tt&gt; command, except the query is done for each of a range of (nonzero) association IDs. This range is determined from the association list cached by the most recent &lt;tt&gt;associations&lt;/tt&gt; command.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;mreadvar _assocID_ _assocID_ [ _variable_name_ [ = _value_[ ... ]&lt;/tt&gt;  
&lt;tt&gt;mrv _assocID_ _assocID_ [ _variable_name_ [ = _value_[ ... ]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Like the &lt;tt&gt;readvar&lt;/tt&gt; command, except the query is done for each of a range of (nonzero) association IDs. This range is determined from the association list cached by the most recent &lt;tt&gt;associations&lt;/tt&gt; command.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;opeers&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;An old form of the &lt;tt&gt;peers&lt;/tt&gt; command with the reference ID replaced by the local interface address.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;passociations&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Displays association data concerning in-spec peers from the internally cached list of associations. This command performs identically to the &lt;tt&gt;associations&lt;/tt&gt; except that it displays the internally stored data rather than making a new query.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;peers&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Obtains a current list peers of the server, along with a summary of each peer&amp;rsquo;s state. Summary information includes the address of the remote peer, the reference ID (0.0.0.0 if this is unknown), the stratum of the remote peer, the type of the peer (local, unicast, multicast or broadcast), when the last packet was received, the polling interval, in seconds, the reachability register, in octal, and the current estimated delay, offset and dispersion of the peer, all in milliseconds. The character at the left margin of each line shows the synchronization status of the association and is a valuable diagnostic tool. The encoding and meaning of this character, called the tally code, is given later in this page.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;pstatus _assocID_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Sends a read status request to the server for the given association. The names and values of the peer variables returned will be printed. Note that the status word from the header is displayed preceding the variables, both in hexadecimal and in pidgeon English.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;readlist [ _assocID_ ]&lt;/tt&gt;  
&lt;tt&gt;rl [ _assocID_ ]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Requests that the values of the variables in the internal variable list be returned by the server. If the association ID is omitted or is 0 the variables are assumed to be system variables. Otherwise they are treated as peer variables. If the internal variable list is empty a request is sent without data, which should induce the remote server to return a default display.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;readvar _assocID_ _variable_name_ [ = _value_ ] [ ...]&lt;/tt&gt;  
&lt;tt&gt;rv _assocID_ [ _variable_name_ [ = _value_ ] [...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Requests that the values of the specified variables be returned by the server by sending a read variables request. If the association ID is omitted or is given as zero the variables are system variables, otherwise they are peer variables and the values returned will be those of the corresponding peer. Omitting the variable list will send a request with no data which should induce the server to return a default display. The encoding and meaning of the variables derived from NTPv3 is given in RFC-1305; the encoding and meaning of the additional NTPv4 variables are given later in this page.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;writevar _assocID_ _variable_name_ [ = _value_ [ ...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Like the readvar request, except the specified variables are written instead of read.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;writelist [ _assocID_ ]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Like the readlist request, except the internal list variables are written instead of read.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;tally-codes&#34;&gt;Tally Codes&lt;/h4&gt;
&lt;p&gt;The character in the left margin in the &lt;tt&gt;peers&lt;/tt&gt; billboard, called the tally code, shows the fate of each association in the clock selection process. Following is a list of these characters, the pigeon used in the &lt;tt&gt;rv&lt;/tt&gt; command, and a short explanation of the condition revealed.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;space reject&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The peer is discarded as unreachable, synchronized to this server (synch loop) or outrageous synchronization distance.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;x  falsetick&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The peer is discarded by the intersection algorithm as a falseticker.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;.  excess&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The peer is discarded as not among the first ten peers sorted by synchronization distance and so is probably a poor candidate for further consideration.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-  outlyer&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The peer is discarded by the clustering algorithm as an outlyer.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;+  candidat&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The peer is a survivor and a candidate for the combining algorithm.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;#  selected&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The peer is a survivor, but not among the first six peers sorted by synchronization distance. If the association is ephemeral, it may be demobilized to conserve resources.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;*  sys.peer&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The peer has been declared the system peer and lends its variables to the system variables.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;o  pps.peer&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The peer has been declared the system peer and lends its variables to thesystem variables. However, the actual system synchronization is derived from a pulse-per-second (PPS) signal, either indirectly via the PPS reference clock driver or directly via kernel interface.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;system-variables&#34;&gt;System Variables&lt;/h4&gt;
&lt;p&gt;The &lt;tt&gt;status, leap, stratum, precision, rootdelay, rootdispersion, refid, reftime, poll, offset, and frequency&lt;/tt&gt; variables are described in RFC-1305 specification. Additional NTPv4 system variables include the following.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;version&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Everything you might need to know about the software version and generation time.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;processor&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The processor and kernel identification string.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;system&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The operating system version and release identifier.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;state&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The state of the clock discipline state machine. The values are described in the architecture briefing on the NTP Project page linked from &lt;a href=&#34;http://www.ntp.org&#34;&gt;www.ntp.org&lt;/a&gt;.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;peer&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The internal integer used to identify the association currently designated the system peer.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;jitter&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The estimated time error of the system clock measured as an exponential average of RMS time differences.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;stability&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The estimated frequency stability of the system clock measured as an exponential average of RMS frequency differences.&lt;/p&gt;
&lt;p&gt;When the NTPv4 daemon is compiled with the OpenSSL software library, additional system variables are displayed, including some or all of the following, depending on the particular dance:&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flags&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The current flags word bits and message digest algorithm identifier (NID) in hex format. The high order 16 bits of the four-byte word contain the NID from the OpenSSL ligrary, while the low-order bits are interpreted as follows:&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;0x01&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    autokey enabled&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;0x02&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    NIST leapseconds file loaded&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;0x10&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    PC identity scheme&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;0x20&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    IFF identity scheme&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;0x40&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    GQ identity scheme&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;hostname&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The name of the host as returned by the Unix &lt;tt&gt;gethostname()&lt;/tt&gt; library function.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;hostkey&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The NTP filestamp of the host key file.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;cert&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;A list of certificates held by the host. Each entry includes the subject, issuer, flags and NTP filestamp in order. The bits are interpreted as follows:&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;0x01&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    certificate has been signed by the server&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;0x02&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    certificate is trusted&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;0x04&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    certificate is private&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;0x08&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    certificate contains errors and should not be trusted&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;leapseconds&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The NTP filestamp of the NIST leapseconds file.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;refresh&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The NTP timestamp when the host public cryptographic values were refreshed and signed.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;signature&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The host digest/signature scheme name from the OpenSSL library.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;tai&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The TAI-UTC offset in seconds obtained from the NIST leapseconds table.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;peer-variables&#34;&gt;Peer Variables&lt;/h4&gt;
&lt;p&gt;The &lt;tt&gt;status, srcadr, srcport, dstadr, dstport, leap, stratum, precision, rootdelay, rootdispersion, readh, hmode, pmode, hpoll, ppoll, offset, delay, dspersion, reftime&lt;/tt&gt; variables are described in the RFC-1305 specification, as are the timestamps &lt;tt&gt;org, rec and xmt&lt;/tt&gt;. Additional NTPv4 system variables include the following.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flash&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The flash code for the most recent packet received. The encoding and meaning of these codes is given later in this page.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;jitter&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The estimated time error of the peer clock measured as an exponential average of RMS time differences.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;unreach&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The value of the counter which records the number of poll intervals since the last valid packet was received.&lt;/p&gt;
&lt;p&gt;When the NTPv4 daemon is compiled with the OpenSSL software library, additional peer variables are displayed, including the following:&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flags&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The current flag bits. This word is the server host status word with additional bits used by the Autokey state machine. See the source code for the bit encoding.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;hostname&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The server host name.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;initkey _key_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The initial key used by the key list generator in the Autokey protocol.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;initsequence _index_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The initial index used by the key list generator in the Autokey protocol.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;signature&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The server message digest/signature scheme name from the OpenSSL software library.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;timestamp _time_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The NTP timestamp when the last Autokey key list was generated and signed.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;flash-codes&#34;&gt;Flash Codes&lt;/h4&gt;
&lt;p&gt;The &lt;tt&gt;flash&lt;/tt&gt; code is a valuable debugging aid displayed in the peer variables list. It shows the results of the original sanity checks defined in the NTP specification RFC-1305 and additional ones added in NTPv4. There are 12 tests designated &lt;tt&gt;TEST1&lt;/tt&gt; through &lt;tt&gt;TEST12&lt;/tt&gt;. The tests are performed in a certain order designed to gain maximum diagnostic information while protecting against accidental or malicious errors. The &lt;tt&gt;flash&lt;/tt&gt; variable is initialized to zero as each packet is received. If after each set of tests one or more bits are set, the packet is discarded.&lt;/p&gt;
&lt;p&gt;Tests &lt;tt&gt;TEST1&lt;/tt&gt; through &lt;tt&gt;TEST3&lt;/tt&gt; check the packet timestamps from which the offset and delay are calculated. If any bits are set, the packet is discarded; otherwise, the packet header variables are saved. &lt;tt&gt;TEST4&lt;/tt&gt; and &lt;tt&gt;TEST5&lt;/tt&gt; are associated with access control and cryptographic authentication. If any bits are set, the packet is discarded immediately with nothing changed.&lt;/p&gt;
&lt;p&gt;Tests &lt;tt&gt;TEST6&lt;/tt&gt; through &lt;tt&gt;TEST8&lt;/tt&gt; check the health of the server. If any bits are set, the packet is discarded; otherwise, the offset and delay relative to the server are calculated and saved. &lt;tt&gt;TEST9&lt;/tt&gt; checks the health of the association itself. If any bits are set, the packet is discarded; otherwise, the saved variables are passed to the clock filter and mitigation algorithms.&lt;/p&gt;
&lt;p&gt;Tests &lt;tt&gt;TEST10&lt;/tt&gt; through &lt;tt&gt;TEST12&lt;/tt&gt; check the authentication state using Autokey public-key cryptography, as described in the &lt;a href=&#34;/archives/4.2.0/authopt&#34;&gt;Authentication Options&lt;/a&gt; page. If any bits are set and the association has previously been marked reachable, the packet is discarded; otherwise, the originate and receive timestamps are saved, as required by the NTP protocol, and processing continues.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;flash&lt;/tt&gt; bits for each test are defined as follows.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;0x001 TEST1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Duplicate packet. The packet is at best a casual retransmission and at worst a malicious replay.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;0x002 TEST2&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Bogus packet. The packet is not a reply to a message previously sent. This can happen when the NTP daemon is restarted and before somebody else notices.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;0x004 TEST3&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Unsynchronized. One or more timestamp fields are invalid. This normally happens when the first packet from a peer is received.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;0x008 TEST4&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Access is denied. See the &lt;a href=&#34;/archives/4.2.0/accopt&#34;&gt;Access Control Options&lt;/a&gt; page.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;0x010 TEST5&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Cryptographic authentication fails. See the &lt;a href=&#34;/archives/4.2.0/authopt&#34;&gt;Authentication Options&lt;/a&gt; page.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;0x020TEST6&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The server is unsynchronized. Wind up its clock first.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;0x040 TEST7&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The server stratum is at the maximum than 15. It is probably unsynchronized and its clock needs to be wound up.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;0x080 TEST8&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Either the root delay or dispersion is greater than one second, which is highly unlikely unless the peer is unsynchronized to Mars.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;0x100 TEST9&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Either the peer delay or dispersion is greater than one second, which is highly unlikely unless the peer is on Mars.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;0x200 TEST10&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The autokey protocol has detected an authentication failure. See the &lt;a href=&#34;/archives/4.2.0/authopt&#34;&gt;Authentication Options&lt;/a&gt; page.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;0x400 TEST11&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The autokey protocol has not verified the server or peer is proventic and has valid public key credentials. See the &lt;a href=&#34;/archives/4.2.0/authopt&#34;&gt;Authentication Options&lt;/a&gt; page.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;0x800 TEST12&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;A protocol or configuration error has occurred in the public key algorithms or a possible intrusion event has been detected. See the &lt;a href=&#34;/archives/4.2.0/authopt&#34;&gt;Authentication Options&lt;/a&gt; page.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;bugs&#34;&gt;Bugs&lt;/h4&gt;
&lt;p&gt;The peers command is non-atomic and may occasionally result in spurious error messages about invalid associations occurring and terminating the command. The timeout time is a fixed constant, which means you wait a long time for timeouts since it assumes sort of a worst case. The program should improve the timeout estimate as it sends queries to a particular host, but doesn&amp;rsquo;t.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: ntptime - read and set kernel time variables</title>
      <link>/archives/4.2.0/ntptime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/ntptime/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/pogo5.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;from &lt;em&gt;Pogo&lt;/em&gt;, Walt Kelly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The turtle has been swimming in the kernel.&lt;/p&gt;
&lt;p&gt;Last update: 20:19 UTC Monday, December 02, 2002&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntptime/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntptime/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntptime/#options&#34;&gt;Options&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntptime [ -chr ] [ -e &lt;em&gt;est_error&lt;/em&gt; ] [ -f &lt;em&gt;frequency&lt;/em&gt; ] [ -m &lt;em&gt;max_error&lt;/em&gt; ] [ -o &lt;em&gt;offset&lt;/em&gt; ] [ -s &lt;em&gt;status&lt;/em&gt; ] [ -t &lt;em&gt;time_constant&lt;/em&gt;]&lt;/tt&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;This program is useful only with special kernels described in &lt;a href=&#34;/archives/4.2.0/kern&#34;&gt;A Kernel Model for Precision Timekeeping&lt;/a&gt;. It reads and displays time-related kernel variables using the &lt;tt&gt;ntp_gettime()&lt;/tt&gt; system call. A similar display can be obtained using the &lt;tt&gt;ntpdc&lt;/tt&gt; program and &lt;tt&gt;kerninfo&lt;/tt&gt; command.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;options&#34;&gt;Options&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;-c&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Display the execution time of &lt;tt&gt;ntptime&lt;/tt&gt; itself.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-e _est_error_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify estimated error, in microseconds.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-f _frequency_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify frequency offset, in parts per million.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-h&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Display help information.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-m _max_error_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify max possible errors, in microseconds.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-o _offset_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify clock offset, in microseconds.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-r&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Display Unix and NTP times in raw format.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-s _status_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify clock status. Better know what you are doing.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-t _time_constant_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify time constant, an integer in the range 0-10.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: ntptrace - trace a chain of NTP servers back to the primary source</title>
      <link>/archives/4.2.0/ntptrace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/ntptrace/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice13.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The rabbit knows the way back.&lt;/p&gt;
&lt;p&gt;Last update: 20:19 UTC Monday, December 02, 2002&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntptrace/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntptrace/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntptrace/#options&#34;&gt;Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/ntptrace/#bugs&#34;&gt;Bugs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntptrace [ -vdn ] [ -r &lt;em&gt;retries&lt;/em&gt; ] [ -t &lt;em&gt;timeout&lt;/em&gt; ] [ &lt;em&gt;server&lt;/em&gt; ]&lt;/tt&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntptrace&lt;/tt&gt; determines where a given Network Time Protocol (NTP) server gets its time from, and follows the chain of NTP servers back to their master time source. If given no arguments, it starts with &lt;tt&gt;localhost&lt;/tt&gt;. Here is an example of the output from &lt;tt&gt;ntptrace&lt;/tt&gt;:&lt;/p&gt;
&lt;pre&gt;% ntptrace
localhost: stratum 4, offset 0.0019529, synch distance 0.144135
server2ozo.com: stratum 2, offset 0.0124263, synch distance 0.115784
usndh.edu: stratum 1, offset 0.0019298, synch distance 0.011993, refid &#39;WWVB&#39;
&lt;/pre&gt;
&lt;p&gt;On each line, the fields are (left to right): the host name, the host stratum, the time offset between that host and the local host (as measured by &lt;tt&gt;ntptrace&lt;/tt&gt;; this is why it is not always zero for &amp;ldquo;&lt;tt&gt;localhost&lt;/tt&gt;&amp;quot;), the host synchronization distance, and (only for stratum-1 servers) the reference clock ID. All times are given in seconds. Note that the stratum is the server hop count to the primary source, while the synchronization distance is the estimated error relative to the primary source. These terms are precisely defined in RFC-1305.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;options&#34;&gt;Options&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;-d&lt;/tt&gt;
&lt;p&gt;Turns on some debugging output.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-n&lt;/tt&gt;
&lt;p&gt;Turns off the printing of host names; instead, host IP addresses are given. This may be useful if a nameserver is down.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-r &lt;i&gt;retries&lt;/i&gt;&lt;/tt&gt;
&lt;p&gt;Sets the number of retransmission attempts for each host (default = 5).&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-t &lt;i&gt;timeout&lt;/i&gt;&lt;/tt&gt;
&lt;p&gt;Sets the retransmission timeout (in seconds) (default = 2).&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-v&lt;/tt&gt;
&lt;p&gt;Prints verbose information about the NTP servers.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;bugs&#34;&gt;Bugs&lt;/h4&gt;
&lt;p&gt;This program makes no attempt to improve accuracy by doing multiple samples.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Patching Procedures</title>
      <link>/archives/4.2.0/patches/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/patches/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice38.gif&#34; alt=&#34;gif&#34;&gt; &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/pictures.html&#34;&gt;rom &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Mad Hatter needs patches.&lt;/p&gt;
&lt;p&gt;Last update: 02:16 UTC Thursday, January 02, 2003&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;A distribution so widely used as this one eventually develops numerous barnacles as the result of &lt;a href=&#34;/archives/4.2.0/porting&#34;&gt;porting&lt;/a&gt; to new systems, idiosyncratic new features and just plain bugs. In order to help keep order and make maintenance bearable, we ask that proposed changes to the distribution be submitted in the following form.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Please submit patches to &lt;a href=&#34;mailto:bugs@mail.ntp.org&#34;&gt;bugs@mail.ntp.org&lt;/a&gt; in the form of either unified-diffs (&lt;tt&gt;diff -u&lt;/tt&gt;) or context-diffs (&lt;tt&gt;diff -c&lt;/tt&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Please include the &lt;strong&gt;output&lt;/strong&gt; from &lt;tt&gt;config.guess&lt;/tt&gt; in the description of your patch. If &lt;tt&gt;config.guess&lt;/tt&gt; does not produce any output for your machine, please fix that, too!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Please base the patch on the root directory of the distribution. The preferred procedure here is to copy your patch to the root directory and mumble&lt;/p&gt;
&lt;p&gt;&lt;code&gt;patch -p &amp;lt;your_patch&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Please avoid patching the RCS subdirectories; better yet, clean them out before submitting patches.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you have whole new files, as well as patches, wrap the files and patches in a shell script. If you need to compress it, use either GNU &lt;tt&gt;gzip&lt;/tt&gt; or the stock Unix &lt;tt&gt;compress&lt;/tt&gt; utility.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don&amp;rsquo;t forget the documentation that may be affected by the patch. Send us patches for the &lt;tt&gt;./htm&lt;/tt&gt; files as well.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We would be glad to include your name, electric address and descriptive phrase in the &lt;a href=&#34;/archives/4.2.0/copyright&#34;&gt;Copyright&lt;/a&gt; page, if you wish.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Prior to ntp3-5.83 (releases up to and including ntp3.5f) a complete patch history back to the dark ages was kept in the &lt;tt&gt;./patches&lt;/tt&gt; directory, which might have been helpful to see if the same problem occurred in another port, etc. Patches were saved in that directory with file name in the form &lt;tt&gt;patch.&lt;em&gt;nnn&lt;/em&gt;&lt;/tt&gt;, where &lt;em&gt;nnn&lt;/em&gt; was approaching 200. All patches in that directory have been made; so, if yours was there, it was in the distribution.&lt;/p&gt;
&lt;p&gt;Since we have been getting multiple patches for some bugs, plus many changes are implemented locally, no two maintainers here use the same tools, and since we&amp;rsquo;re not using any bug-tracking software or even source code control, there is currently no tracking of specific changes.&lt;/p&gt;
&lt;p&gt;The best way to see what&amp;rsquo;s changed between two distributions is to run a &lt;tt&gt;diff&lt;/tt&gt; against them.&lt;/p&gt;
&lt;p&gt;Thanks for your contribution and happy chime.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Porting Hints</title>
      <link>/archives/4.2.0/porting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/porting/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/wingdorothy.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/%7emills/pictures.html&#34;&gt;from &lt;em&gt;The Wizard of Oz&lt;/em&gt;, L. Frank Baum&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Porting Dorothy in Oz&lt;/p&gt;
&lt;p&gt;Last update: 20:17 UTC Monday, December 02, 2002&lt;/p&gt;
&lt;hr&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;NOTE&lt;/h4&gt;

    The following procedures have been replaced by GNU &lt;tt&gt;automake&lt;/tt&gt; and &lt;tt&gt;autoconfigure&lt;/tt&gt;. This page is to be updated in the next release.

&lt;/div&gt;

&lt;p&gt;Porting to a new machine or operating system ordinarily requires updating the &lt;tt&gt;./machines&lt;/tt&gt; directory and the &lt;tt&gt;./compilers&lt;/tt&gt; directories in order to define the build environment and autoconfigure means. You will probably have to modify the &lt;tt&gt;ntp_machines.h&lt;/tt&gt; file and &lt;tt&gt;&amp;ldquo;l_stdlib.h&amp;rdquo;&lt;/tt&gt; files as well. The two most famous trouble spots are the I/O code in &lt;tt&gt;./ntpd/ntp_io.c&lt;/tt&gt; and the clock adjustment code in &lt;tt&gt;./ntpd/ntp_unixclock.c&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;These are the rules so that older bsd systems and the POSIX standard system can coexist together.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If you use &lt;tt&gt;select&lt;/tt&gt; then include &lt;tt&gt;&amp;ldquo;ntp_select.h&amp;rdquo;&lt;/tt&gt;. &lt;tt&gt;select&lt;/tt&gt; is not standard, since it is very system dependent as to where it is defined. The logic to include the right system dependent include file is in &lt;tt&gt;&amp;ldquo;ntp_select.h&amp;rdquo;&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Always use POSIX definition of strings. Include &lt;tt&gt;&amp;ldquo;ntp_string.h&amp;rdquo;&lt;/tt&gt; instead of &lt;tt&gt;&amp;lt;string.h&amp;gt;&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Always include &lt;tt&gt;&amp;ldquo;ntp_malloc.h&amp;rdquo;&lt;/tt&gt; if you use &lt;tt&gt;malloc&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Always include &lt;tt&gt;&amp;ldquo;ntp_io.h&amp;rdquo;&lt;/tt&gt; instead of &lt;tt&gt;&amp;lt;sys/file.h&amp;gt;&lt;/tt&gt; or &lt;tt&gt;&amp;lt;fnctl.h&amp;gt;&lt;/tt&gt; to get &lt;tt&gt;O_*&lt;/tt&gt; flags.&lt;/li&gt;
&lt;li&gt;Always include &lt;tt&gt;&amp;ldquo;ntp_if.h&amp;rdquo;&lt;/tt&gt; instead of &lt;tt&gt;&amp;lt;net/if.h&amp;gt;&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Always include &lt;tt&gt;&amp;ldquo;ntp_stdlib.h&amp;rdquo;&lt;/tt&gt; instead of &lt;tt&gt;&amp;lt;stdlib.h&amp;gt;&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Define any special defines needed for a system in &lt;tt&gt;./include/ntp_machine.h&lt;/tt&gt; based on system identifier. This file is included by the &lt;tt&gt;&amp;ldquo;ntp_types.h&amp;rdquo;&lt;/tt&gt; file and should always be placed first after the &lt;tt&gt;&amp;lt;&amp;gt;&lt;/tt&gt; defines.&lt;/li&gt;
&lt;li&gt;Define any special library prototypes left over from the system library and include files in the &lt;tt&gt;&amp;ldquo;l_stdlib.h&amp;rdquo;&lt;/tt&gt; file. This file is included by the &lt;tt&gt;&amp;ldquo;ntp_stdlib.h&amp;rdquo;&lt;/tt&gt; file and should ordinarily be placed last in the includes list.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t define a include file by the same name as a system include file.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;tt&gt;&amp;ldquo;l_stdlib.h&amp;rdquo;&lt;/tt&gt; can contain any extra definitions that are needed so that &lt;tt&gt;gcc&lt;/tt&gt; will shut up. They should be controlled by a system identifier and there should be a separate section for each system. Really this will make it easier to maintain.&lt;/p&gt;
&lt;p&gt;See &lt;tt&gt;include/ntp_machines.h&lt;/tt&gt; for the various compile time options.&lt;/p&gt;
&lt;p&gt;When you are satisfied the port works and that other ports are not adversely affected, please send &lt;a href=&#34;/archives/4.2.0/patches&#34;&gt;patches&lt;/a&gt; for the system files you have changed, as well as any documentation that should be updated, including the advice herein.&lt;/p&gt;
&lt;p&gt;Good luck.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Pulse-Per-Second (PPS) Signal Interfacing</title>
      <link>/archives/4.2.0/pps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/pps/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice32.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/%7emills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Alice is trying to find the PPS signal connector.&lt;/p&gt;
&lt;p&gt;Last update: 14:46 UTC Monday, January 20, 2003&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/pps/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/pps/#gadget-box&#34;&gt;Gadget Box&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/pps/#operating-system-support&#34;&gt;Operating System Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/pps/#pps-driver&#34;&gt;PPS Driver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;introduction&#34;&gt;Introduction&lt;/h4&gt;
&lt;p&gt;Some radio clocks and related timekeeping gear have a pulse-per-second (PPS) signal that can be used to discipline the system clock to a high degree of precision, typically to the order less than 10 ms in time and 0.01 parts-per-million (PPM) in frequency. This page describes the hardware and software necessary for NTP to use this signal.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/archives/pic/gadget.jpg&#34; alt=&#34;gif&#34;&gt;&lt;/p&gt;
&lt;p&gt;A Gadget Box built by Chuck Hanavin&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;gadget-box&#34;&gt;Gadget Box&lt;/h4&gt;
&lt;p&gt;The PPS signal can be connected in either of two ways: via the data carrier detector (DCD) pin of a serial port or via the acknowledge (ACK) pin of a parallel port, depending on the hardware and operating system. Note that NTP no longer supports connection via the data leads of a serial port. However, the PPS signal levels are usually incompatible with serial port levels. The gadget box consists of a handful of electronic components assembled in a small aluminum box. It includes level converters and a optional modem designed to decode the radio timecode signals transmitted by Canadian time and frequency station CHU. This can be used with the &lt;a href=&#34;/archives/drivers/driver7&#34;&gt;Radio CHU Audio Demodulator/Decoder&lt;/a&gt; driver. A complete set of schematics, PCB artwork and drill templates can be obtained via the web at &lt;a href=&#34;https://www.eecis.udel.edu/~ntp/ntp_spool/hardware/gadget.tar.Z&#34;&gt;gadget.tar.Z&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;operating-system-support&#34;&gt;Operating System Support&lt;/h4&gt;
&lt;p&gt;Both the serial and parallel port connection require operating system support, which is available in only a few operating systems, including FreeBSD, Linux (with PPSkit patch) and Solaris. Support on an experimental basis is available for several other systems, including SunOS and HP/Compaq/Digital Tru64. The PPSAPI application program interface defined in &lt;sup&gt;&lt;a href=&#34;#myfootnote1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; is the only interface currently supported. Older PPS interfaces based on the &lt;tt&gt;ppsclock&lt;/tt&gt; and &lt;tt&gt;tty_clk&lt;/tt&gt; streams modules are no longer supported. As the PPSAPI is expected to become an IETF cross-platform standard, it should be used by new applications.&lt;/p&gt;
&lt;p&gt;The entire PPS interface functionality is currently provided by inline code in the &lt;tt&gt;timepps.h&lt;/tt&gt; header file. While not all implementations support the full PPSAPI specification, they do support all the functions required for the PPS driver described next. The FreeBSD, Linux and Solaris implementations can be used with the stock kernels provided with those systems; however, the Tru64 and SunOS kernels require additional functions not provided in the stock kernels. Solaris users are cautioned that these functions operate improperly in Solaris versions prior to 2.8 with patch Generic_108528-02. Header files for other systems can be found via the web at &lt;a href=&#34;https://www.eecis.udel.edu/~ntp/ntp_spool/software/nanokernel.tar.gz&#34;&gt;nanokernel.tar.gz&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;pps-driver&#34;&gt;PPS Driver&lt;/h4&gt;
&lt;p&gt;In the preferred mode of operation, PPS signals are processed by the &lt;a href=&#34;/archives/drivers/driver22&#34;&gt;PPS Clock Discipline&lt;/a&gt; driver and other clock drivers which might be involved need not know or care about them. In some cases where there is no other driver, time might be obtained from remote NTP servers via the network and local PPS signals, for instance from a calibrated cesium oscillator, used to stabilize the frequency and remove network jitter. Note that the &lt;tt&gt;pps&lt;/tt&gt; configuration command has been obsoleted by this driver.&lt;/p&gt;
&lt;p&gt;The PPS driver operates in conjunction with a preferred peer, as described in the &lt;a href=&#34;/archives/4.2.0/prefer&#34;&gt;Mitigation Rules and the prefer Keyword&lt;/a&gt; page. One of the drivers described in the &lt;a href=&#34;/archives/4.2.0/refclock&#34;&gt;Reference Clock Drivers&lt;/a&gt; page or another NTP server furnishes the coarse timing and disambiguates the seconds numbering of the PPS signal itself. The NTP daemon mitigates between the clock driver or NTP server and the PPS driver as described in that page in order to provide the most accurate time, while respecting the various types of equipment failures that could happen.&lt;/p&gt;
&lt;p&gt;Some Unix system kernels support a PPS signal directly, as described in the &lt;a href=&#34;/archives/4.2.0/kern&#34;&gt;A Kernel Model for Precision Timekeeping&lt;/a&gt; page. Specifically, the PPS driver can be used to direct the PPS signal to the kernel for use as a discipline source for both time and frequency. The presence of the kernel support is automatically detected during the NTP build process and supporting code automatically compiled. Note that the PPS driver does not normally enable the PPS kernel code, since performance is generally better without it. However, this code can be enabled by a driver fudge flag if necessary.&lt;/p&gt;
&lt;p&gt;Some configurations may include multiple radio clocks with individual PPS outputs. In some PPSAPI designs multiple PPS signals can be connected to multiple instances of the PPS driver. In such cases the NTP mitigation and grooming algorithms operate with all the radio timecodes and PPS signals to develop the highest degree of redundancy and survivability.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name=&#34;myfootnote1&#34;&gt;1&lt;/a&gt; Mogul, J., D. Mills, J. Brittenson, J. Stone and U. Windl. Pulse-per-second API for Unix-like operating systems, version 1. Request for Comments RFC-2783, Internet Engineering Task Force, March 2000, 31 pp. &lt;a href=&#34;https://www.eecis.udel.edu/~mills/database/rfc/rfc2783.txt&#34;&gt;ASCII&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Quick Start</title>
      <link>/archives/4.2.0/quick/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/quick/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/panda.gif&#34; alt=&#34;gif&#34;&gt;FAX test image for SATNET (1979).&lt;/p&gt;
&lt;p&gt;The baby panda was scanned at University College London and used as a FAX test image for a demonstration of the DARPA Atlantic SATNET Program and the first transatlantic Internet connection in 1978. The computing system used for that demonstration was called the &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/database/papers/fuzz.ps&#34;&gt;Fuzzball&lt;/a&gt;. As it happened, this was also the first Internet multimedia presentation and the first to use a predecessor of NTP in regular operation. The image was widely copied and used for testing purpose throughout much of the 1980s.&lt;/p&gt;
&lt;p&gt;Last update: 00:39 UTC Saturday, January 11, 2003&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;For the rank amateur the sheer volume of the documentation collection must be intimidating. However, it doesn&amp;rsquo;t take much to fly the &lt;tt&gt;ntpd&lt;/tt&gt; daemon with a simple configuration where a workstation needs to synchronize to some server elsewhere in the Internet. The first thing that needs to be done is to build the distribution for the particular workstation and install in the usual place. The &lt;a href=&#34;/archives/4.2.0/build&#34;&gt;Building and Installing the Distribution&lt;/a&gt; page describes how to do this.&lt;/p&gt;
&lt;p&gt;While it is possible that certain configurations do not need a configuration file, most do require one. The file, called by default &lt;tt&gt;/etc/ntp.conf&lt;/tt&gt;, need only contain one line specifying a remote server, for instance&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;server foo.bar.com&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Choosing an appropriate remote server is somewhat of a black art, but a suboptimal choice is seldom a problem. There are about two dozen public time servers operated by National Institutes of Science and Technology (NIST), US Naval Observatory (USNO), Canadian Metrology Centre (CMC) and many others available on the Internet. Lists of public primary and secondary NTP servers maintained on the &lt;a href=&#34;https://support.ntp.org/bin/view/Servers/WebHome&#34;&gt;Public NTP Time Servers&lt;/a&gt; page, which is updated frequently.The lists are sorted by country and, in the case of the US, by state. Usually, the best choice is the nearest in geographical terms, but the terms of engagement specified in each list entry should be carefully respected.&lt;/p&gt;
&lt;p&gt;During operation &lt;tt&gt;ntpd&lt;/tt&gt; measures and corrects for incidental clock frequency error and writes the current value to a file called by default &lt;tt&gt;/etc/ntp.drift&lt;/tt&gt;. If &lt;tt&gt;ntpd&lt;/tt&gt; is stopped and restarted, it initializes the frequency from this file. In this way the potentially lengthy interval to relearn the frequency error is avoided.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s all there is to it, unless some problem in network connectivity or local operating system configuration occurs. The most common problem is some firewall between the workstation and server. System administrators should understand NTP uses UDP port 123 as both the source and destination port and that NTP does not involve any operating system interaction other than to set the system clock. While almost all modern Unix systems have included NTP and UDP port 123 defined in the services file, this should be checked if &lt;tt&gt;ntpd&lt;/tt&gt; fails to come up at all.&lt;/p&gt;
&lt;p&gt;The best way to confirm NTP is working is using the &lt;a href=&#34;/archives/4.2.0/ntpq&#34;&gt;&lt;tt&gt;ntpq&lt;/tt&gt;&lt;/a&gt; utility, although the &lt;a href=&#34;/archives/4.2.0/ntpdc&#34;&gt;&lt;tt&gt;ntpdc&lt;/tt&gt;&lt;/a&gt; utility may be useful in extreme cases. See the documentation pages for further information. In the most extreme cases the &lt;tt&gt;-d&lt;/tt&gt; option on the &lt;tt&gt;ntpd&lt;/tt&gt; command line results in a blow-by-blow trace of the daemon operations. While the trace output can be cryptic, to say the least, it gives a general idea of what the program is doing and, in particular, details the arriving and departing packets and detected errors, if present.&lt;/p&gt;
&lt;p&gt;Sometimes the &lt;tt&gt;ntpd&lt;/tt&gt;. behavior may seem to violate the Principle of Least Astonishment, but there are good reasons for this. See the &lt;a href=&#34;/archives/4.2.0/ntpd&#34;&gt;Network Time Protocol (NTP) daemon&lt;/a&gt; page for revealing insights. See this page and its dependencies for additional configuration and control options. The &lt;a href=&#34;/archives/4.2.0/notes&#34;&gt;Notes on Configuring NTP and Setting up a NTP Subnet&lt;/a&gt; page contains an extended discussion of these options.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Reference Clock Audio Drivers</title>
      <link>/archives/4.2.0/audio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/audio/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/radio2.jpg&#34; alt=&#34;jpg&#34;&gt;ICOM R-72 shortwave receiver and Sure audio mixer&lt;/p&gt;
&lt;p&gt;Last update: 03:04 AM UTC Monday, October 13, 2003&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/audio/#sound-card-drivers&#34;&gt;Sound Card Drivers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/audio/#shortwave-radio-drivers&#34;&gt;Shortwave Radio Drivers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/audio/#setup-and-debugging-aids&#34;&gt;Setup and Debugging Aids&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;sound-card-drivers&#34;&gt;Sound Card Drivers&lt;/h4&gt;
&lt;p&gt;There are some applications in which the computer time can be disciplined to an audio signal, rather than a serial timecode and communications port or special purpose bus peripheral. This is useful in such cases where the audio signal is sent over a telephone circuit, for example, or received directly from a shortwave receiver. In such cases the audio signal can be connected via an ordinary sound card or baseboard audio codec. The suite of NTP reference clock drivers currently includes three drivers suitable for these applications. They include a driver for the Inter Range Instrumentation Group (IRIG) signals produced by many radio clocks and timing devices, another for the Canadian time/frequency radio station CHU and a third for the NIST time/frequency radio stations WWV and WWVH. The radio drivers are designed to work with ordinary inexpensive shortwave radios and may be one of the least expensive ways to build a good primary time server.&lt;/p&gt;
&lt;p&gt;All three drivers make ample use of sophisticated digital signal processing algorithms designed to efficiently extract timing signals from noise and interference. The radio station drivers in particular implement optimum linear demodulation and decoding techniques, including maximum likelihood and soft-decision methods. The documentation page for each driver contains an in-depth discussion on the algorithms and performance expectations. In some cases the algorithms are further analyzed, modelled and evaluated in a technical report.&lt;/p&gt;
&lt;p&gt;Currently, the audio drivers work with Sun operating systems and audio codecs, including SunOS 4.1.3 and Solaris from 2.6 and probably all others in between. They also work with FreeBSD from 4.1 with compatible sound card. In fact, the interface is quite generic and support for other systems, in particular the various Unix generics, should not be difficult. Volunteers are solicited.&lt;/p&gt;
&lt;p&gt;The audio drivers include a number of common features designed to groom input signals, suppress spikes and normalize signal levels. An automatic gain control (AGC) feature provides protection against overdriven or underdriven input signals. It is designed to maintain adequate demodulator signal amplitude while avoiding occasional noise spikes. In order to assure reliable operation, the signal level must be in the range where the audio gain control is effective. In general, this means the input signal level must be such as to cause the AGC to set the gain somewhere in the middle of the range from 0 to 255, as indicated in the timecode displayed by the &lt;tt&gt;ntpq&lt;/tt&gt; program.&lt;/p&gt;
&lt;p&gt;The drivers operate by disciplining a logical clock based on the codec sample clock to the audio signal as received. This is done by stuffing or slipping samples as required to maintain exact frequency to the order of 0.1 PPM. In order for the driver to reliably lock on the audio signal, the sample clock frequency tolerance must be less than 250 PPM (.025 percent) for the IRIG driver and half that for the radio drivers. The largest error observed so far is about 60 PPM, but it is possible some sound cards or codecs may exceed that value.&lt;/p&gt;
&lt;p&gt;The drivers include provisions to select the input port and to monitor the input signal. The &lt;tt&gt;fudge flag 2&lt;/tt&gt; selects the microphone port if set to zero or the line-in port if set to one. It does not seem useful to specify the compact disc player port. The &lt;tt&gt;fudge flag 3&lt;/tt&gt; enables the input signal monitor using the previously selected output port and output gain. Both of these flags can be set in the configuration file or remotely using the &lt;tt&gt;ntpdc&lt;/tt&gt; utility program.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;shortwave-radio-drivers&#34;&gt;Shortwave Radio Drivers&lt;/h4&gt;
&lt;p&gt;The WWV/H and CHU audio drivers require an external shortwave radio with the radio output - speaker or headphone jack - connected to either the microphone or line-in port on the computer. There is some degree of art in setting up the radio and antenna and getting the setup to work. While the drivers are highly sophisticated and efficient in extracting timing signals from noise and interference, it always helps to have as clear a signal as possible.&lt;/p&gt;
&lt;p&gt;The most important factor affecting the radio signal is the antenna. It need not be long - even 15 feet is enough if it is located outside of a metal frame building, preferably on the roof, and away from metallic objects. An ordinary CB whip mounted on a PVC pipe and wooden X-frame on the roof should work well with most portable radios, as they are optimized for small antennas.&lt;/p&gt;
&lt;p&gt;The radio need not be located near the computer; in fact, it generally works better if the radio is outside the near field of computers and other electromagnetic noisemakers. It can be in the elevator penthouse connected by house wiring, which can also be used to power the radio. A couple of center-tapped audio transformers will minimize noise pickup and provide phantom power to the radio with return via the building ground.&lt;/p&gt;
&lt;p&gt;The WWV/H and CHU transmitters operate on several frequencies simultaneously, so that in most parts of North America at least one frequency supports propagation to the receiver location at any given hour. While both drivers support the ICOM CI-V radio interface and can tune the radio automatically, computer-tunable radios are expensive and probably not cost effective compared to a GPS receiver. So, the radio frequency must usually be fixed and chosen by compromise.&lt;/p&gt;
&lt;p&gt;Shortwave (3-30 MHz) radio propagation phenomena are well known to shortwave enthusiasts. The phenomena generally obey the following rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The optimum frequency is higher in daytime than nighttime, stays high longer on summer days and low longer on winter nights.&lt;/li&gt;
&lt;li&gt;Transitions between daytime and nightime conditions generally occur somewhat after sunrise and sunset at the midpoint of the path from transmitter to receiver.&lt;/li&gt;
&lt;li&gt;Ambient noise (static) on the lower frequencies follows the thunderstorm season, so is higher on summer afternoons and evenings.&lt;/li&gt;
&lt;li&gt;The lower frequency bands are best for shorter distances, while the higher bands are best for longer distances.&lt;/li&gt;
&lt;li&gt;The optimum frequencies are higher at the peak of the 11-year sunspot cycle and lower at the trough. The current sunspot cycle should peak in the first couple of years beginning the century.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The best way to choose a frequency is to listen at various times over the day and determine the best highest (daytime) and lowest (nighttime) frequencies. Then, assuming one is available, choose the highest frequency between these frequencies. This strategy assumes that the high frequency is more problematic than the low, that the low frequency probably comes with severe multipath and static, and insures that probably twice a day the chosen frequency will work. For instance, on the east coast the best compromise CHU frequency is probably 7335 kHz and the best WWV frequency is probably 15 MHz.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;setup-and-debugging-aids&#34;&gt;Setup and Debugging Aids&lt;/h4&gt;
&lt;p&gt;The audio drivers include extensive setup and debugging support to help hook up the audio signals and monitor the driver operations. The documentation page for each driver describes the various messages that can be produced either in real time or written to the &lt;tt&gt;clockstats&lt;/tt&gt; file for later analysis. Of particular help in verifying signal connections and compatibility is a provision to monitor the signal via headphones or speaker.&lt;/p&gt;
&lt;p&gt;Connecting radios and IRIG devices to the computer and verifying correct configuration is somewhat of a black art. The signals have to be connected to the correct ports and the signal level maintained within tolerances. Some radios have recorder outputs which produce a line level signal not affected by the volume control. These signals can be connected to the line-in port on the computer. If the level is too low, connect to the microphone-in port instead. If the radio does not have a recorder output, connect the headphone or speaker output to the line-in port and adjust the volume control so the driver indicates comfortably above the minimum specified and the AGC level somewhere in the middle of the range 0-255. IRIG signals are usually much larger than radio outputs, usually in the range to several volts and may even overload the line-in port. In such cases an attenuator must be used to reduce the signal level below the overload point.&lt;/p&gt;
&lt;p&gt;It is very easy to underdrive or overdrive the audio codec, in which case the drivers will not synchronize to the signal. The drivers use &lt;tt&gt;fudge flag2&lt;/tt&gt; to enable audio monitoring of the input signal. This is useful during setup to confirm the signal is actually reaching the audio codec and generally free of hum and interference. This feature is not intended for regular use, since it does increase the processor load on the system. Note that the speaker volume must be set before the driver is started.&lt;/p&gt;
&lt;p&gt;The drivers write a synthesized timecode to the &lt;tt&gt;clockstats&lt;/tt&gt; file each time the clock is set or verified and at other times if verbose monitoring is enabled. The format includes several fixed-length fields defining the UTC time to the millisecond, together with additional variable-length fields specific to each driver. The data include the intervals since the clock was last set or verified, the audio gain and various state variables and counters specific to each driver.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Reference Clock Drivers</title>
      <link>/archives/4.2.0/refclock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/refclock/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/stack1a.jpg&#34; alt=&#34;gif&#34;&gt; Master Time Facility at the &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/lab.html&#34;&gt;UDel Internet Research Laboratory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last update:  03:54 AM UTC Monday, October 13, 2003&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/refclock/#reference-clock-drivers&#34;&gt;Reference Clock Drivers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/refclock/#driver-calibration&#34;&gt;Driver Calibration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/refclock/#performance-enhancements&#34;&gt;Performance Enhancements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/refclock/#comprehensive-list-of-clock-drivers&#34;&gt;Comprehensive List of Clock Drivers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;reference-clock-drivers&#34;&gt;Reference Clock Drivers&lt;/h4&gt;
&lt;p&gt;Support for most of the commonly available radio and modem reference clocks is included in the default configuration of the NTP daemon for Unix &lt;tt&gt;ntpd&lt;/tt&gt;. Individual clocks can be activated by configuration file commands, specifically the &lt;tt&gt;server&lt;/tt&gt; and &lt;tt&gt;fudge&lt;/tt&gt; commands described in the &lt;a href=&#34;/archives/4.2.0/ntpd&#34;&gt;&lt;tt&gt;ntpd&lt;/tt&gt; program manual page&lt;/a&gt;. The following discussion presents Information on how to select and configure the device drivers in a running Unix system.&lt;/p&gt;
&lt;p&gt;Many radio reference clocks can be set to display local time as adjusted for timezone and daylight saving mode. For use with NTP the clock must be set for Coordinated Universal Time (UTC) only. Ordinarily, these adjustments are performed by the kernel, so the fact that the clock runs on UTC will be transparent to the user.&lt;/p&gt;
&lt;p&gt;Radio and modem clocks by convention have addresses in the form 127.127.&lt;em&gt;t.u&lt;/em&gt;, where &lt;em&gt;t&lt;/em&gt; is the clock type and &lt;em&gt;u&lt;/em&gt; is a unit number in the range 0-3 used to distinguish multiple instances of clocks of the same type. Most of these clocks require support in the form of a serial port or special bus peripheral, but some can work directly from the audio codec found in some workstations. The particular device is normally specified by adding a soft link &lt;tt&gt;/dev/device_u_&lt;/tt&gt; to the particular hardware device involved, where _&lt;tt&gt;u&lt;/tt&gt;_ correspond to the unit number above.&lt;/p&gt;
&lt;p&gt;Most clock drivers communicate with the reference clock using a serial port, usually at 9600 bps. There are several application program interfaces (API) used in the various Unix and NT systems, most of which can be detected at configuration time. Thus, it is important that the NTP daemon and utilities be compiled on the target system or clone. In some cases special features are available, such as timestamping in the kernel or pulse-per-second (PPS) interface. In most cases these features can be detected at configuration time as well; however, the kernel may have to be recompiled in order for them to work.&lt;/p&gt;
&lt;p&gt;The audio drivers are a special case. These include support for the NIST time/frequency stations WWV and WWVH, the Canadian time/frequency station CHU and generic IRIG signals. Currently, support for the Solaris and SunOS audio API is included in the distribution. It is left to the volunteer corps to extend this support to other systems. Further information on hookup, debugging and monitoring is given in the &lt;a href=&#34;/archives/4.2.0/audio&#34;&gt;Audio Drivers&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;The local clock driver is also a special case. A server configured with this driver can operate as a primary server to synchronize other clients when no other external synchronization sources are available. If the server is connected directly or indirectly to the public Internet, there is some danger that it can adversely affect the operation of unrelated clients. Carefully read the &lt;a href=&#34;/archives/drivers/driver1&#34;&gt;Undisciplined Local Clock&lt;/a&gt; page and respect the stratum limit.&lt;/p&gt;
&lt;p&gt;The local clock driver also supports an external synchronization source such as a high resolution counter disciplined by a GPS receiver, for example. Further information is on the &lt;a href=&#34;/archives/4.2.0/extern&#34;&gt;External Clock Discipline and the Local Clock Driver&lt;/a&gt; page.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;driver-calibration&#34;&gt;Driver Calibration&lt;/h4&gt;
&lt;p&gt;Some drivers depending on longwave and shortwave radio services need to know the radio propagation time from the transmitter to the receiver, which can amount to some tens of milliseconds. This must be calculated for each specific receiver location and requires the geographic coordinates of both the transmitter and receiver. The transmitter coordinates for various radio services are given in the &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/ntp/qth.html&#34;&gt;Time and Frequency Standard Station Information&lt;/a&gt; page. Receiver coordinates can be obtained or estimated from various sources. The actual calculations are beyond the scope of this document.&lt;/p&gt;
&lt;p&gt;When more than one clock driver is supported, it is often the case that each shows small systematic offset differences relative to the rest. To reduce the effects of jitter when switching from one driver to the another, it is useful to calibrate the drivers to a common ensemble offset. The &lt;tt&gt;enable calibrate&lt;/tt&gt; configuration command in the &lt;a href=&#34;/archives/4.2.0/miscopt&#34;&gt;Miscellaneous Options&lt;/a&gt; page is useful for this purpose. The calibration function can also be enabled and disabled using the &lt;tt&gt;ntpdc&lt;/tt&gt; program utility.&lt;/p&gt;
&lt;p&gt;Most clock drivers use the &lt;tt&gt;time1&lt;/tt&gt; value specified in the &lt;tt&gt;fudge&lt;/tt&gt; configuration command to provide the calibration correction when this cannot be provided by the clock or interface. When the calibration function is enabled, the &lt;tt&gt;time1&lt;/tt&gt; value is automatically adjusted to match the offset of the remote server or local clock driver selected for synchronization. Ordinarily, the NTP selection algorithm chooses the best from among all sources, usually the best radio clock determined on the basis of stratum, synchronization distance and jitter. The calibration function adjusts the &lt;tt&gt;time1&lt;/tt&gt; values for all clock drivers except this source so that their indicated offsets tend to zero. If the selected source is the kernel PPS discipline, the &lt;tt&gt;fudge time1&lt;/tt&gt; values for all clock drivers are adjusted.&lt;/p&gt;
&lt;p&gt;The adjustment function is an exponential average designed to improve accuracy, so the function takes some time to converge. The recommended procedure is to enable the function, let it run for an hour or so, then edit the configuration file using the &lt;tt&gt;time1&lt;/tt&gt; values displayed by the &lt;tt&gt;ntpq&lt;/tt&gt; utility and &lt;tt&gt;clockvar&lt;/tt&gt; command. Finally, disable the calibration function to avoid possible future disruptions due to misbehaving clocks or drivers.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;performance-enhancements&#34;&gt;Performance Enhancements&lt;/h4&gt;
&lt;p&gt;In general, performance can be improved, especially when more than one clock driver is supported, to use the prefer peer function described in the &lt;a href=&#34;/archives/4.2.0/prefer&#34;&gt;Mitigation Rules and the &lt;tt&gt;prefer&lt;/tt&gt; Keyword&lt;/a&gt; page. The prefer peer is ordinarily designated the remote peer or local clock driver which provides the best quality time. All other things equal, only the prefer peer source is used to discipline the system clock and jitter-producing &amp;ldquo;clockhopping&amp;rdquo; between sources is avoided. This is valuable when more than one clock driver is present and especially valuable when the PPS clock driver (type 22) is used. Support for PPS signals is summarized in the &lt;a href=&#34;/archives/4.2.0/pps&#34;&gt;Pulse-per-second (PPS) Signal Interfacing&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;Where the highest performance is required, generally better than one millisecond, additional hardware and/or software functions may be required. Kernel modifications for precision time are described in the &lt;a href=&#34;/archives/4.2.0/kern&#34;&gt;A Kernel Model for Precision Timekeeping&lt;/a&gt; page. Special line discipline and streams modules for use in capturing precision timestamps are described in the &lt;a href=&#34;/archives/4.2.0/ldisc&#34;&gt;Line Disciplines and Streams Drivers&lt;/a&gt; page.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;comprehensive-list-of-clock-drivers&#34;&gt;Comprehensive List of Clock Drivers&lt;/h4&gt;
&lt;p&gt;Following is a list showing the type and title of each driver currently implemented. The compile-time identifier for each is shown in parentheses. Click on a selected type for specific description and configuration documentation, including the clock address, reference ID, driver ID, device name and serial line speed. For those drivers without specific documentation, please contact the author listed in the &lt;a href=&#34;/archives/4.2.0/copyright&#34;&gt;Copyright Notice&lt;/a&gt; page.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver1&#34;&gt;Type 1&lt;/a&gt; Undisciplined Local Clock (&lt;tt&gt;LOCAL&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver2&#34;&gt;Type 2&lt;/a&gt; Trak 8820 GPS Receiver (&lt;tt&gt;GPS_TRAK&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver3&#34;&gt;Type 3&lt;/a&gt; PSTI/Traconex 1020 WWV/WWVH Receiver (&lt;tt&gt;WWV_PST&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver4&#34;&gt;Type 4&lt;/a&gt; Spectracom WWVB/GPS Receivers (&lt;tt&gt;WWVB_SPEC&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver5&#34;&gt;Type 5&lt;/a&gt; TrueTime GPS/GOES/OMEGA Receivers (&lt;tt&gt;TRUETIME&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver6&#34;&gt;Type 6&lt;/a&gt; IRIG Audio Decoder (&lt;tt&gt;IRIG_AUDIO&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver7&#34;&gt;Type 7&lt;/a&gt; Radio CHU Audio Demodulator/Decoder (&lt;tt&gt;CHU&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver8&#34;&gt;Type 8&lt;/a&gt; Generic Reference Driver (&lt;tt&gt;PARSE&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver9&#34;&gt;Type 9&lt;/a&gt; Magnavox MX4200 GPS Receiver (&lt;tt&gt;GPS_MX4200&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver10&#34;&gt;Type 10&lt;/a&gt; Austron 2200A/2201A GPS Receivers (&lt;tt&gt;GPS_AS2201&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver11&#34;&gt;Type 11&lt;/a&gt; Arbiter 1088A/B GPS Receiver (&lt;tt&gt;GPS_ARBITER&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver12&#34;&gt;Type 12&lt;/a&gt; KSI/Odetics TPRO/S IRIG Interface (&lt;tt&gt;IRIG_TPRO&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;Type 13 Leitch CSD 5300 Master Clock Controller (&lt;tt&gt;ATOM_LEITCH&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;Type 14 EES M201 MSF Receiver (&lt;tt&gt;MSF_EES&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver5&#34;&gt;Type 15&lt;/a&gt; * TrueTime generic receivers&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver16&#34;&gt;Type 16&lt;/a&gt; Bancomm GPS/IRIG Receiver (&lt;tt&gt;GPS_BANCOMM&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;Type 17 Datum Precision Time System (&lt;tt&gt;GPS_DATUM&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver18&#34;&gt;Type 18&lt;/a&gt; NIST/USNO/PTB Modem Time Services (&lt;tt&gt;ACTS_MODEM&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver19&#34;&gt;Type 19&lt;/a&gt; Heath WWV/WWVH Receiver (&lt;tt&gt;WWV_HEATH&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver20&#34;&gt;Type 20&lt;/a&gt; Generic NMEA GPS Receiver (&lt;tt&gt;NMEA&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;Type 21 TrueTime GPS-VME Interface (&lt;tt&gt;GPS_VME&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver22&#34;&gt;Type 22&lt;/a&gt; PPS Clock Discipline (&lt;tt&gt;PPS&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver23&#34;&gt;Type 23&lt;/a&gt; PTB Modem Time Service (&lt;tt&gt;ACTS_PTB&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver24&#34;&gt;Type 24&lt;/a&gt; USNO Modem Time Service (&lt;tt&gt;ACTS_USNO&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver5&#34;&gt;Type 25&lt;/a&gt; * TrueTime generic receivers&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver26&#34;&gt;Type 26&lt;/a&gt; Hewlett Packard 58503A GPS Receiver (&lt;tt&gt;GPS_HP&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver27&#34;&gt;Type 27&lt;/a&gt; Arcron MSF Receiver (&lt;tt&gt;MSF_ARCRON&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver28&#34;&gt;Type 28&lt;/a&gt; Shared Memory Driver (&lt;tt&gt;SHM&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver29&#34;&gt;Type 29&lt;/a&gt; Trimble Navigation Palisade GPS (&lt;tt&gt;GPS_PALISADE&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver30&#34;&gt;Type 30&lt;/a&gt; Motorola UT Oncore GPS &lt;tt&gt;GPS_ONCORE&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;Type 31 Rockwell Jupiter GPS (&lt;tt&gt;GPS_JUPITER&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver32&#34;&gt;Type 32&lt;/a&gt; Chrono-log K-series WWVB receiver (&lt;tt&gt;CHRONOLOG&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver33&#34;&gt;Type 33&lt;/a&gt; Dumb Clock (&lt;tt&gt;DUMBCLOCK&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver34&#34;&gt;Type 34&lt;/a&gt; Ultralink WWVB Receivers (&lt;tt&gt;ULINK&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver35&#34;&gt;Type 35&lt;/a&gt; Conrad Parallel Port Radio Clock (&lt;tt&gt;PCF&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver36&#34;&gt;Type 36&lt;/a&gt; Radio WWV/H Audio Demodulator/Decoder (&lt;tt&gt;WWV&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver37&#34;&gt;Type 37&lt;/a&gt; Forum Graphic GPS Dating station (&lt;tt&gt;FG&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver38&#34;&gt;Type 38&lt;/a&gt; hopf GPS/DCF77 6021/komp for Serial Line (&lt;tt&gt;HOPF_S&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver39&#34;&gt;Type 39&lt;/a&gt; hopf GPS/DCF77 6039 for PCI-Bus (&lt;tt&gt;HOPF_P&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver40&#34;&gt;Type 40&lt;/a&gt; JJY Receivers (&lt;tt&gt;JJY&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;Type 41 TrueTime 560 IRIG-B Decoder&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver42&#34;&gt;Type 42&lt;/a&gt; Zyfer GPStarplus Receiver&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver43&#34;&gt;Type 43&lt;/a&gt; RIPE NCC interface for Trimble Palisade&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver44&#34;&gt;Type 44&lt;/a&gt; NeoClock4X - DCF77 / TDF serial line&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;* All TrueTime receivers are now supported by one driver, type 5. Types 15 and 25 will be retained only for a limited time and may be reassigned in future.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Reference Clock Options</title>
      <link>/archives/4.2.0/clockopt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/clockopt/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/stack1a.jpg&#34; alt=&#34;gif&#34;&gt;Master Time Facility at the &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/lab.html&#34;&gt;UDel Internet Research Laboratory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last update: 03:06 AM UTC Monday, October 13, 2003&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/clockopt/#reference-clock-support&#34;&gt;Reference Clock Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/clockopt/#reference-clock-commands&#34;&gt;Reference Clock Commands&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;reference-clock-support&#34;&gt;Reference Clock Support&lt;/h4&gt;
&lt;p&gt;The NTP Version 4 daemon supports some three dozen different radio, satellite and modem reference clocks plus a special pseudo-clock used for backup or when no other clock source is available. Detailed descriptions of individual device drivers and options can be found in the &lt;a href=&#34;/archives/4.2.0/refclock&#34;&gt;Reference Clock Drivers&lt;/a&gt; page. Additional information can be found in the pages linked there, including the &lt;a href=&#34;/archives/4.2.0/rdebug&#34;&gt;Debugging Hints for Reference Clock Drivers&lt;/a&gt; and &lt;a href=&#34;/archives/4.2.0/howto&#34;&gt;How To Write a Reference Clock Driver&lt;/a&gt; pages. In addition, support for a PPS signal is available as described in &lt;a href=&#34;/archives/4.2.0/pps&#34;&gt;Pulse-per-second (PPS) Signal Interfacing&lt;/a&gt; page. Many drivers support special line discipline/streams modules which can significantly improve the accuracy using the driver. These are described in the &lt;a href=&#34;/archives/4.2.0/ldisc&#34;&gt;Line Disciplines and Streams Drivers&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;A reference clock will generally (though not always) be a radio timecode receiver which is synchronized to a source of standard time such as the services offered by the NRC in Canada and NIST and USNO in the US. The interface between the computer and the timecode receiver is device dependent, but is usually a serial port. A device driver specific to each reference clock must be selected and compiled in the distribution; however, most common radio, satellite and modem clocks are included by default. Note that an attempt to configure a reference clock when the driver has not been compiled or the hardware port has not been appropriately configured results in a scalding remark to the system log file, but is otherwise non hazardous.&lt;/p&gt;
&lt;p&gt;For the purposes of configuration, &lt;tt&gt;ntpd&lt;/tt&gt; treats reference clocks in a manner analogous to normal NTP peers as much as possible. Reference clocks are identified by a syntactically correct but invalid IP address, in order to distinguish them from normal NTP peers. Reference clock addresses are of the form &lt;tt&gt;127.127.t.u&lt;/tt&gt;, where &lt;tt&gt;t&lt;/tt&gt; is an integer denoting the clock type and &lt;tt&gt;u&lt;/tt&gt; indicates the unit number in the range 0-3. While it may seem overkill, it is in fact sometimes useful to configure multiple reference clocks of the same type, in which case the unit numbers must be unique.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;server&lt;/tt&gt; command is used to configure a reference clock, where the &lt;tt&gt;address&lt;/tt&gt; argument in that command is the clock address. The &lt;tt&gt;key&lt;/tt&gt;, &lt;tt&gt;version&lt;/tt&gt; and &lt;tt&gt;ttl&lt;/tt&gt; options are not used for reference clock support. The &lt;tt&gt;mode&lt;/tt&gt; option is added for reference clock support, as described below. The &lt;tt&gt;prefer&lt;/tt&gt; option can be useful to persuade the server to cherish a reference clock with somewhat more enthusiasm than other reference clocks or peers. Further information on this option can be found in the &lt;a href=&#34;/archives/4.2.0/prefer&#34;&gt;Mitigation Rules and the prefer Keyword&lt;/a&gt; page. The &lt;tt&gt;minpoll&lt;/tt&gt; and &lt;tt&gt;maxpoll&lt;/tt&gt; options have meaning only for selected clock drivers. See the individual clock driver document pages for additional information.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;fudge&lt;/tt&gt; command is used to provide additional information for individual clock drivers and normally follows immediately after the &lt;tt&gt;server&lt;/tt&gt; command. The &lt;tt&gt;address&lt;/tt&gt; argument specifies the clock address. The &lt;tt&gt;refid&lt;/tt&gt; and &lt;tt&gt;stratum&lt;/tt&gt; options control can be used to override the defaults for the device. There are two optional device-dependent time offsets and four flags that can be included in the &lt;tt&gt;fudge&lt;/tt&gt; command as well.&lt;/p&gt;
&lt;p&gt;The stratum number of a reference clock is by default zero. Since the &lt;tt&gt;ntpd&lt;/tt&gt; daemon adds one to the stratum of each peer, a primary server ordinarily displays an external stratum of one. In order to provide engineered backups, it is often useful to specify the reference clock stratum as greater than zero. The &lt;tt&gt;stratum&lt;/tt&gt; option is used for this purpose. Also, in cases involving both a reference clock and a pulse-per-second (PPS) discipline signal, it is useful to specify the reference clock identifier as other than the default, depending on the driver. The &lt;tt&gt;refid&lt;/tt&gt; option is used for this purpose. Except where noted, these options apply to all clock drivers.&lt;/p&gt;
&lt;h4 id=&#34;reference-clock-commands&#34;&gt;Reference Clock Commands&lt;/h4&gt;
&lt;dt id=&#34;server&#34;&gt;&lt;tt&gt;server 127.127._t.u_ [prefer] [mode _int_] [minpoll _int_] [maxpoll _int_]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command can be used to configure reference clocks in special ways. The options are interpreted as follows:&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;prefer&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Marks the reference clock as preferred. All other things being equal, this host will be chosen for synchronization among a set of correctly operating hosts. See the &lt;a href=&#34;/archives/4.2.0/prefer&#34;&gt;Mitigation Rules and the &lt;tt&gt;prefer&lt;/tt&gt; Keyword&lt;/a&gt; page for further information.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;mode &lt;em&gt;int&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Specifies a mode number which is interpreted in a device-specific fashion. For instance, it selects a dialing protocol in the ACTS driver and a device subtype in the &lt;tt&gt;parse&lt;/tt&gt; drivers.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;minpoll &lt;em&gt;int&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;maxpoll &lt;em&gt;int&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    These options specify the minimum and maximum polling interval for reference clock messages in seconds, interpreted as dual logarithms (2 ^ x). For most directly connected reference clocks, both &lt;tt&gt;minpoll&lt;/tt&gt; and &lt;tt&gt;maxpoll&lt;/tt&gt; default to 6 (2^16 = 64 s). For modem reference clocks, &lt;tt&gt;minpoll&lt;/tt&gt; defaults to 10 (2^10 = 1024 s = 17.1 m) and &lt;tt&gt;maxpoll&lt;/tt&gt; defaults to 14 (2^14 = 16384 s = 4.5 h). The allowable range is 4 (16 s) to 17 (36.4 h) inclusive.&lt;/p&gt;
&lt;dt id=&#34;fudge&#34;&gt;&lt;tt&gt;fudge 127.127._t.u_ [time1 _sec_] [time2 _sec_] [stratum _int_] [refid _string_] [mode _int_] [flag1 0|1] [flag2 0|1] [flag3 0|1] [flag4 0|1]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command can be used to configure reference clocks in special ways. It must immediately follow the &lt;tt&gt;server&lt;/tt&gt; command which configures the driver. Note that the same capability is possible at run time using the &lt;tt&gt;&lt;a href=&#34;/archives/4.2.0/ntpdc&#34;&gt;ntpdc&lt;/a&gt;&lt;/tt&gt; program. The options are interpreted as follows:&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;time1 &lt;em&gt;sec&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Specifies a constant to be added to the time offset produced by the driver, a fixed-point decimal number in seconds. This is used as a calibration constant to adjust the nominal time offset of a particular clock to agree with an external standard, such as a precision PPS signal. It also provides a way to correct a systematic error or bias due to serial port or operating system latencies, different cable lengths or receiver internal delay. The specified offset is in addition to the propagation delay provided by other means, such as internal DIPswitches. Where a calibration for an individual system and driver is available, an approximate correction is noted in the driver documentation pages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; in order to facilitate calibration when more than one radio clock or PPS signal is supported, a special calibration feature is available. It takes the form of an argument to the &lt;tt&gt;enable&lt;/tt&gt; command described in the &lt;a href=&#34;/archives/4.2.0/miscopt&#34;&gt;Miscellaneous Options&lt;/a&gt; page and operates as described in the &lt;a href=&#34;/archives/4.2.0/refclock&#34;&gt;Reference Clock Drivers&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;time2 &lt;em&gt;secs&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Specifies a fixed-point decimal number in seconds, which is interpreted in a driver-dependent way. See the descriptions of specific drivers in the &lt;a href=&#34;/archives/4.2.0/refclock&#34;&gt;reference clock drivers&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;stratum &lt;em&gt;int&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Specifies the stratum number assigned to the driver, an integer between 0 and 15. This number overrides the default stratum number ordinarily assigned by the driver itself, usually zero.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;refid &lt;em&gt;string&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Specifies an ASCII string of from one to four characters which defines the reference identifier used by the driver. This string overrides the default identifier ordinarily assigned by the driver itself.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;mode &lt;em&gt;int&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Specifies a mode number which is interpreted in a device-specific fashion. For instance, it selects a dialing protocol in the ACTS driver and a device subtype in the &lt;tt&gt;parse&lt;/tt&gt; drivers.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;flag1 flag2 flag3 flag4&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    These four flags are used for customizing the clock driver. The interpretation of these values, and whether they are used at all, is a function of the particular clock driver. However, by convention &lt;tt&gt;flag4&lt;/tt&gt; is used to enable recording monitoring data to the &lt;tt&gt;clockstats&lt;/tt&gt; file configured with the &lt;tt&gt;filegen&lt;/tt&gt; command. Further information on the &lt;tt&gt;filegen&lt;/tt&gt; command can be found in the &lt;a href=&#34;/archives/4.2.0/monopt&#34;&gt;Monitoring Options&lt;/a&gt; page.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Search Results</title>
      <link>/archives/4.2.0/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/search/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Archives: Server Options</title>
      <link>/archives/4.2.0/confopt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/confopt/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/boom3a.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;from &lt;em&gt;Pogo&lt;/em&gt;, Walt Kelly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The chicken is getting configuration advice.&lt;/p&gt;
&lt;p&gt;Last update: 	03:08 AM UTC Monday, October 13, 2003&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/confopt/#configuration-commands&#34;&gt;Configuration Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/confopt/#command-options&#34;&gt;Command Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/confopt/#auxiliary-commands&#34;&gt;Auxiliary Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/confopt/#bugs&#34;&gt;Bugs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Following is a description of the configuration commands in NTPv4. These commands have the same basic functions as in NTPv3 and in some cases new functions and new arguments. There are two classes of commands, configuration commands that configure a persistent association with a remote server, peer or reference clock, and auxilliary commands that specify environmental variables that control various related operations.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;configuration-commands&#34;&gt;Configuration Commands&lt;/h4&gt;
&lt;p&gt;The various modes are determined by the command keyword and the required IP address. Addresses are classed by type as &lt;code&gt;s&lt;/code&gt; a remote server or peer (IPv4 class A, B and C), &lt;code&gt;b&lt;/code&gt; the broadcast address of a local interface, &lt;code&gt;m&lt;/code&gt; a multicast address (IPv4 class D), or &lt;code&gt;r&lt;/code&gt; a reference clock address (127.127.x.x). Note that only those options applicable to each command are listed below. Use of options not listed may not be caught as an error, but may result in some weird and even destructive behavior.&lt;/p&gt;
&lt;p&gt;If the Basic Socket Interface Extensions for IPv6 (RFC-2553) is detected, support for the IPv6 address family is generated in addition to the default support of the IPv4 address family. In a few cases, including the &lt;tt&gt;reslist&lt;/tt&gt; billboard generated by &lt;tt&gt;ntpdc&lt;/tt&gt;, IPv6 addresses are automatically generated. IPv6 addresses can be identified by the presence of colons &lt;code&gt;:&lt;/code&gt; in the address field. IPv6 addresses can be used almost everywhere where IPv4 addresses can be used, with the exception of reference clock addresses, which are always IPv4.&lt;/p&gt;
&lt;p&gt;Note that in contexts where a host name is expected, a &lt;tt&gt;-4&lt;/tt&gt; qualifier preceding the host name forces DNS resolution to the IPv4 namespace, while a &lt;tt&gt;-6&lt;/tt&gt; qualifier forces DNS resolution to the IPv6 namespace. See IPv6 references for the equivalent classes for that address family.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;server _address_ [key _key_ | autokey] [burst] [iburst] [version _version_] [prefer] [minpoll _minpoll_] [maxpoll _maxpoll_]&lt;/tt&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;tt&gt;peer address [key _key_ | autokey] [version _version_] [prefer] [minpoll _minpoll_] [maxpoll _maxpoll_]&lt;/tt&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;tt&gt;broadcast address [key _key_ | autokey] [version _version_] [minpoll _minpoll_] [ttl _ttl_]&lt;/tt&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;tt&gt;manycastclient address address [key _key_ | autokey] [version _version_] [minpoll _minpoll_ [maxpoll _maxpoll_] [ttl _ttl_]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;These four commands specify the time server name or address to be used and the mode in which to operate. The &lt;tt&gt;address&lt;/tt&gt; can be either a DNS name or a IP address in dotted-quad notation. Additional information on association behavior can be found in the &lt;a href=&#34;/archives/4.2.0/assoc&#34;&gt;Association Management&lt;/a&gt; page.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;server&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;For type s and r addresses, this command mobilizes a persistent client mode association with the specified remote server or local radio clock. In this mode the local clock can synchronized to the remote server, but the remote server can never be synchronized to the local clock. This command should NOT be used for type &lt;tt&gt;b&lt;/tt&gt; or &lt;tt&gt;m&lt;/tt&gt; addresses.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;peer&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;For type s addresses (only), this command mobilizes a persistent symmetric-active mode association with the specified remote peer. In this mode the local clock can be synchronized to the remote peer or the remote peer can be synchronized to the local clock. This is useful in a network of servers where, depending on various failure scenarios, either the local or remote peer may be the better source of time. This command should NOT be used for type &lt;tt&gt;b&lt;/tt&gt;, &lt;tt&gt;m&lt;/tt&gt; or &lt;tt&gt;r&lt;/tt&gt; addresses.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;broadcast&lt;/tt&gt;&lt;/dt&gt; 
&lt;p&gt;For type &lt;tt&gt;b&lt;/tt&gt; and &lt;tt&gt;m&lt;/tt&gt; addresses (only), this command mobilizes a persistent broadcast mode association. Multiple commands can be used to specify multiple local broadcast interfaces (subnets) and/or multiple multicast groups. Note that local broadcast messages go only to the interface associated with the subnet specified, but multicast messages go to all interfaces.&lt;/p&gt;
&lt;p&gt;In broadcast mode the local server sends periodic broadcast messages to a client population at the &lt;tt&gt;address&lt;/tt&gt; specified, which is usually the broadcast address on (one of) the local network(s) or a multicast address assigned to NTP. The IANA has assigned the multicast group address IPv4 224.0.1.1 and IPv6 ff05::101 (site local) exclusively to NTP, but other nonconflicting addresses can be used to contain the messages within administrative boundaries. Ordinarily, this specification applies only to the local server operating as a sender; for operation as a broadcast client, see the &lt;tt&gt;broadcastclient&lt;/tt&gt; or &lt;tt&gt;multicastclient&lt;/tt&gt; commands below.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;manycastclient&lt;/tt&gt;&lt;/dt&gt; 
&lt;p&gt;For type &lt;tt&gt;m&lt;/tt&gt; addresses (only), this command mobilizes a preemptable manycast client mode association for the multicast group address specified. In this mode a specific address must be supplied which matches the address used on the &lt;tt&gt;manycastserver&lt;/tt&gt; command for the designated manycast servers. The NTP multicast address 224.0.1.1 assigned by the IANA should NOT be used, unless specific means are taken to avoid spraying large areas of the Internet with these messages and causing a possibly massive implosion of replies at the sender.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;manycastclient&lt;/tt&gt; command specifies that the host is to operate in client mode with the remote servers that are discovered as the result of broadcast/multicast messages. The client broadcasts a request message to the group address associated with the specified &lt;tt&gt;address&lt;/tt&gt; and specifically enabled servers respond to these messages. The client selects the servers providing the best time and continues as with the &lt;tt&gt;server&lt;/tt&gt; command. The remaining servers are discarded as if never heard.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;command-options&#34;&gt;Command Options&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;autokey&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;All packets sent to and received from the server or peer are to include authentication fields encrypted using the autokey scheme described in the &lt;a href=&#34;/archives/4.2.0/authopt&#34;&gt;Authentication Options&lt;/a&gt; page.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;burst&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;When the server is reachable, send a burst of eight packets instead of the usual one. The packet spacing is normally 2 s; however, the spacing between the first and second packets can be changed with the &lt;tt&gt;calldelay&lt;/tt&gt; command to allow additional time for a modem or ISDN call to complete. This is designed to improve timekeeping quality with the &lt;tt&gt;server&lt;/tt&gt; command and &lt;tt&gt;s&lt;/tt&gt; addresses.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;iburst&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;When the server is unreachable, send a burst of eight packets instead of the usual one. The packet spacing is normally 2 s; however, the spacing between the first and second packets can be changed with the &lt;tt&gt;calldelay&lt;/tt&gt; command to allow additional time for a modem or ISDN call to complete. This is designed to speed the initial synchronization acquisition with the &lt;tt&gt;server&lt;/tt&gt; command and &lt;tt&gt;s&lt;/tt&gt; addresses and when &lt;tt&gt;ntpd&lt;/tt&gt; is started with the &lt;tt&gt;-q&lt;/tt&gt; option.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;key&lt;/tt&gt; _&lt;tt&gt;key&lt;/tt&gt;_&lt;/dt&gt;
&lt;p&gt;All packets sent to and received from the server or peer are to include authentication fields encrypted using the specified &lt;em&gt;&lt;tt&gt;key&lt;/tt&gt;&lt;/em&gt; identifier with values from 1 to 65534, inclusive. The default is to include no encryption field.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;minpoll _minpoll  
_&lt;/tt&gt;&lt;tt&gt;maxpoll _maxpoll_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;These options specify the minimum and maximum poll intervals for NTP messages, in seconds as a power of two. The maximum poll interval defaults to 10 (1024 s), but can be increased by the &lt;tt&gt;maxpoll&lt;/tt&gt; option to an upper limit of 17 (36.4 h). The minimum poll interval defaults to 6 (64 s), but can be decreased by the &lt;tt&gt;minpoll&lt;/tt&gt; option to a lower limit of 4 (16 s).&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;noselect&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Marks the server as unused, except for display purposes. The server is discarded by the selection algorithm.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;prefer&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Mark the server as preferred. All other things being equal, this host will be chosen for synchronization among a set of correctly operating hosts. See the &lt;a href=&#34;/archives/4.2.0/prefer&#34;&gt;Mitigation Rules and the &lt;tt&gt;prefer&lt;/tt&gt; Keyword&lt;/a&gt; page for further information.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;ttl _ttl_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This option is used only with broadcast server and manycast client modes. It specifies the time-to-live &lt;em&gt;&lt;tt&gt;ttl&lt;/tt&gt;&lt;/em&gt; to use on broadcast server and multicast server and the maximum &lt;tt&gt;ttl&lt;/tt&gt; for the expanding ring search with manycast client packets. Selection of the proper value, which defaults to 127, is something of a black art and should be coordinated with the network administrator.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;version _version_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the version number to be used for outgoing NTP packets. Versions 1-4 are the choices, with version 4 the default.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;auxiliary-commands&#34;&gt;Auxiliary Commands&lt;/h4&gt;
&lt;dt id=&#34;broadcastclient&#34;&gt;&lt;tt&gt;broadcastclient&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command enables reception of broadcast server messages to any local interface (type b) address. Upon receiving a message for the first time, the broadcast client measures the nominal server propagation delay using a brief client/server exchange with the server, then enters the broadcast client mode, in which it synchronizes to succeeding broadcast messages. Note that, in order to avoid accidental or malicious disruption in this mode, both the server and client should operate using symmetric-key or public-key authentication as described in the &lt;a href=&#34;/archives/4.2.0/authopt&#34;&gt;Authentication Options&lt;/a&gt; page.&lt;/p&gt;
&lt;dt id=&#34;manycastserver&#34;&gt;&lt;tt&gt;manycastserver _address_ [...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command enables reception of manycast client messages to the multicast group address(es) (type &lt;tt&gt;m&lt;/tt&gt;) specified. At least one address is required. The NTP multicast address 224.0.1.1 assigned by the IANA should NOT be used, unless specific means are taken to limit the span of the reply and avoid a possibly massive implosion at the original sender. Note that, in order to avoid accidental or malicious disruption in this mode, both the server and client should operate using symmetric key or public key authentication as described in the &lt;a href=&#34;/archives/4.2.0/authopt&#34;&gt;Authentication Options&lt;/a&gt; page.&lt;/p&gt;
&lt;dt id=&#34;multicastclient&#34;&gt;&lt;tt&gt;multicastclient _address_ [...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command enables reception of multicast server messages to the multicast group address(es) (type &lt;tt&gt;m&lt;/tt&gt;) specified. Upon receiving a message for the first time, the multicast client measures the nominal server propagation delay using a brief client/server exchange with the server, then enters the broadcast client mode, in which it synchronizes to succeeding multicast messages. Note that, in order to avoid accidental or malicious disruption in this mode, both the server and client should operate using symmetric key or public key authentication as described in the &lt;a href=&#34;/archives/4.2.0/authopt&#34;&gt;Authentication Options&lt;/a&gt; page.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;bugs&#34;&gt;Bugs&lt;/h4&gt;
&lt;p&gt;The syntax checking is not picky; some combinations of ridiculous and even hilarious options and modes may not be detected.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: tickadj - set time-related kernel variables</title>
      <link>/archives/4.2.0/tickadj/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/tickadj/</guid>
      <description>
        
        
        &lt;p&gt;Last update: 20:11 UTC Monday, December 02, 2002&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/tickadj/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/tickadj/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/tickadj/#command-line-options&#34;&gt;Command Line Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/tickadj/#files&#34;&gt;Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/tickadj/#bugs&#34;&gt;Bugs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;tickadj [ -Aqs ] [ -a &lt;em&gt;tickadj&lt;/em&gt; ] [ -t &lt;em&gt;tick&lt;/em&gt; ]&lt;/tt&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;The &lt;tt&gt;tickadj&lt;/tt&gt; program reads, and optionally modifies, several timekeeping-related variables in older kernels that do not have support for precision timekeeping, including HP-UX, SunOS, Ultrix, SGI and probably others. Those machines provide means to patch the kernel &lt;tt&gt;/dev/kmem&lt;/tt&gt;. Newer machines with precision time support, including Solaris, Tru64, FreeBSD and Linux (with PPSkit patch), should NOT use the program. The particular variables that can be changed with &lt;tt&gt;tickadj&lt;/tt&gt; include &lt;tt&gt;tick&lt;/tt&gt;, which is the number of microseconds added to the system time for a clock interrupt, &lt;tt&gt;tickadj&lt;/tt&gt;, which sets the slew rate and resolution used by the &lt;tt&gt;adjtime&lt;/tt&gt; system call, and &lt;tt&gt;dosynctodr&lt;/tt&gt;, which indicates to the kernels on some machines whether they should internally adjust the system clock to keep it in line with time-of-day clock or not.&lt;/p&gt;
&lt;p&gt;By default, with no arguments, &lt;tt&gt;tickadj&lt;/tt&gt; reads the variables of interest in the kernel and displays them. At the same time, it determines an &amp;ldquo;optimal&amp;rdquo; value for the value of the &lt;tt&gt;tickadj&lt;/tt&gt; variable if the intent is to run the &lt;tt&gt;ntpd&lt;/tt&gt; Network Time Protocol (NTP) daemon, and prints this as well. Since the operation of &lt;tt&gt;tickadj&lt;/tt&gt; when reading the kernel mimics the operation of similar parts of the &lt;tt&gt;ntpd&lt;/tt&gt; program fairly closely, this can be useful when debugging problems with &lt;tt&gt;ntpd&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Note that &lt;tt&gt;tickadj&lt;/tt&gt; should be run with some caution when being used for the first time on different types of machines. The operations which &lt;tt&gt;tickadj&lt;/tt&gt; tries to perform are not guaranteed to work on all Unix machines and may in rare cases cause the kernel to crash.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;command-line-options&#34;&gt;Command Line Options&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;-a _tickadj_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Set the kernel variable &lt;tt&gt;tickadj&lt;/tt&gt; to the value &lt;em&gt;&lt;tt&gt;tickadj&lt;/tt&gt;&lt;/em&gt; specified.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-A&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Set the kernel variable &lt;tt&gt;tickadj&lt;/tt&gt; to an internally computed &amp;ldquo;optimal&amp;rdquo; value.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-t _tick_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Set the kernel variable &lt;tt&gt;tick&lt;/tt&gt; to the value &lt;em&gt;&lt;tt&gt;tick&lt;/tt&gt;&lt;/em&gt; specified.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-s&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Set the kernel variable &lt;tt&gt;dosynctodr&lt;/tt&gt; to zero, which disables the hardware time-of-year clock, a prerequisite for running the &lt;tt&gt;ntpd&lt;/tt&gt; daemon under SunOS4.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-q&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Normally, &lt;tt&gt;tickadj&lt;/tt&gt; is quite verbose about what it is doing. The &lt;tt&gt;-q&lt;/tt&gt; flag tells it to shut up about everything except errors.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;files&#34;&gt;Files&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;/vmunix&lt;br&gt;
/unix&lt;br&gt;
/dev/kmem&lt;br&gt;
&lt;/tt&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;bugs&#34;&gt;Bugs&lt;/h4&gt;
&lt;p&gt;Fiddling with kernel variables at run time as a part of ordinary operations is a hideous practice which is only necessary to make up for deficiencies in the implementation of &lt;tt&gt;adjtime&lt;/tt&gt; in many kernels and/or brokenness of the system clock in some vendors&#39; kernels. It would be much better if the kernels were fixed and the &lt;tt&gt;tickadj&lt;/tt&gt; program went away.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Time and Time Interval Measurement with Application to Computer and Network Performance Evaluation</title>
      <link>/archives/4.2.0/measure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/measure/</guid>
      <description>
        
        
        &lt;p&gt;Last update: 20:24 UTC Monday, December 02, 2002&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The technical memorandum: &lt;cite&gt;Time and Time Interval Measurement with Application to Computer and Network Performance Evaluation&lt;/cite&gt; &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/database/memos/memo96a.ps&#34;&gt;(PostScript)&lt;/a&gt; describes a number of techniques for conducting experiments typical of computer network and transmission systems engineering.&lt;/p&gt;
&lt;p&gt;In most experiments in which time is involved, it is necessary to develop estimates of time, frequency and measurement errors from a series of time measurements between the clocks of a number of computers and ancillary devices interconnected by some kind of computer network. However, time is not a physical quantity, such as mass, nor can it be measured relative to an absolute frame of reference, such as velocity. The only way to measure time in our universe is to compare the reading of one clock, which runs according to its own timescale, with another clock, which runs according to a given timescale, at some given instant or epoch. The errors arise from the precision of time comparisons and the accuracy of frequency estimates between the timescales involved.&lt;/p&gt;
&lt;p&gt;The usual data collected during a performance run of some experiment might include time offsets, time delays, frequency offsets and various error statistics. While time offsets between two clocks can be measured directly, frequency offsets can be estimated only from two or more time offsets made over some time interval in the experiment. In practice, a sequence of time comparisons can be performed over the lifetime of the experiment and the instantaneous frequency estimated either in real time with a recurrence relation, or retrospectively with a polynomial fit to the data.&lt;/p&gt;
&lt;p&gt;Estimating time and frequency errors in real time has been studied by a distinct subspecies of physicists who have made a career of the technology involved. Various means including autoregressive models, Kalman filters and simple weighted-average algorithms are used extensively by national standards laboratories to model cesium-clock ensembles. These techniques have been adapted to computer network and transmission engineering problems as well. This memorandum explores issues in performing experiments of this type and summarizes various techniques found useful in practice.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
