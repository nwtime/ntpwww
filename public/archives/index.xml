<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NTP: Network Time Protocol â€“ Docs</title>
    <link>/archives/</link>
    <description>Recent content in Docs on NTP: Network Time Protocol</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/archives/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Archives: </title>
      <link>/archives/4.1.0/toc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.1.0/toc/</guid>
      <description>
        
        
        

&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;4.2.8p15 is the latest stable and recommended version of NTP. Click &lt;a href=&#34;/archives/4.2.8-series&#34;&gt;here&lt;/a&gt; to read the latest version of the docs.&lt;/p&gt;
&lt;p&gt;4.1.0 is a historical release that was released in August, 2001. Click &lt;a href=&#34;/archives/4.1.0&#34;&gt;here&lt;/a&gt; to read the 4.1.0 version of the docs.&lt;/p&gt;

&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Archives: </title>
      <link>/archives/4.1.1/toc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.1.1/toc/</guid>
      <description>
        
        
        

&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;4.2.8p15 is the latest stable and recommended version of NTP. Click &lt;a href=&#34;/archives/4.2.8-series&#34;&gt;here&lt;/a&gt; to read the latest version of the docs.&lt;/p&gt;
&lt;p&gt;4.1.1 is a historical release that was released in February, 2002. Click &lt;a href=&#34;/archives/4.1.1&#34;&gt;here&lt;/a&gt; to read the 4.1.1 version of the docs.&lt;/p&gt;

&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Archives: </title>
      <link>/archives/4.1.2/toc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.1.2/toc/</guid>
      <description>
        
        
        

&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;4.2.8p15 is the latest stable and recommended version of NTP. Click &lt;a href=&#34;/archives/4.2.8-series&#34;&gt;here&lt;/a&gt; to read the latest version of the docs.&lt;/p&gt;
&lt;p&gt;4.1.2 is a historical release that was &lt;a href=&#34;https://lists.ntp.org/pipermail/announce/2003-July/000003.html&#34;&gt;released on July 17, 2003&lt;/a&gt;. Click &lt;a href=&#34;/archives/4.1.2&#34;&gt;here&lt;/a&gt; to read the 4.1.2 version of the docs.&lt;/p&gt;

&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Archives: </title>
      <link>/archives/4.2.0/toc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/toc/</guid>
      <description>
        
        
        

&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;4.2.8p15 is the latest stable and recommended version of NTP. Click &lt;a href=&#34;/archives/4.2.8-series&#34;&gt;here&lt;/a&gt; to read the latest version of the docs.&lt;/p&gt;
&lt;p&gt;4.2.0 is a historical release that was &lt;a href=&#34;https://lists.ntp.org/pipermail/announce/2003-October/000006.html&#34;&gt;released on October 15, 2003&lt;/a&gt;. Click &lt;a href=&#34;/archives/4.2.0&#34;&gt;here&lt;/a&gt; to read the 4.2.0 version of the docs.&lt;/p&gt;

&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Archives: </title>
      <link>/archives/4.2.2-series/toc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.2-series/toc/</guid>
      <description>
        
        
        

&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;4.2.8p15 is the latest stable and recommended version of NTP. Click &lt;a href=&#34;/archives/4.2.8-series&#34;&gt;here&lt;/a&gt; to read the latest version of the docs.&lt;/p&gt;
&lt;p&gt;Click &lt;a href=&#34;/archives/4.2.2-series&#34;&gt;here&lt;/a&gt; to read the 4.2.2 version of the docs. Refer to the table below for the release announcement for each patch level in the 4.2.2-series.&lt;/p&gt;

&lt;/div&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Release Date&lt;/th&gt;
&lt;th&gt;Release Announcement&lt;/th&gt;
&lt;th&gt;# of Security Fixes&lt;/th&gt;
&lt;th&gt;# of Fixes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;October 15, 2006&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://lists.ntp.org/pipermail/announce/2006-October/000031.html&#34;&gt;4.2.2p4&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2 (bugs)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;August 5, 2006&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://lists.ntp.org/pipermail/announce/2006-August/000023.html&#34;&gt;4.2.2p3&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2 (bugs)&lt;br&gt; 4 improvements)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;July 9, 2006&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://lists.ntp.org/pipermail/announce/2006-July/000018.html&#34;&gt;4.2.2p2&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;July 9, 2006&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://lists.ntp.org/pipermail/announce/2006-July/000017.html&#34;&gt;4.2.2p1&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;6 (bugs)&lt;br&gt; 6 (improvements)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;June 8, 2006&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://lists.ntp.org/pipermail/announce/2006-June/000014.html&#34;&gt;4.2.2&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2 (bugs)&lt;br&gt; 7 (improvements)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: </title>
      <link>/archives/4.2.4-series/toc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.4-series/toc/</guid>
      <description>
        
        
        

&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;4.2.8p15 is the latest stable and recommended version of NTP. Click &lt;a href=&#34;/archives/4.2.8-series&#34;&gt;here&lt;/a&gt; to read the latest version of the docs.&lt;/p&gt;
&lt;p&gt;Click &lt;a href=&#34;/archives/4.2.4-series&#34;&gt;here&lt;/a&gt; to read the 4.2.4 version of the docs. Refer to the table below for the release announcement for each patch level in the 4.2.4-series.&lt;/p&gt;

&lt;/div&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Release Date&lt;/th&gt;
&lt;th&gt;Release Announcement&lt;/th&gt;
&lt;th&gt;# of Security Fixes&lt;/th&gt;
&lt;th&gt;# of Fixes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;December 8, 2009&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://lists.ntp.org/pipermail/announce/2009-December/000086.html&#34;&gt;4.2.4p8&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1 HIGH&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;May 18, 2009&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://lists.ntp.org/pipermail/announce/2009-May/000062.html&#34;&gt;4.2.4p7&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;January 8, 2009&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://lists.ntp.org/pipermail/announce/2009-January/000055.html&#34;&gt;4.2.4p6&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1 (bug)&lt;br&gt; 1 (improvement)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;August 17, 2008&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://lists.ntp.org/pipermail/announce/2008-August/000052.html&#34;&gt;4.2.4p5&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;94 (bugs)&lt;br&gt; 102 (improvements)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;August 28, 2007&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://lists.ntp.org/pipermail/announce/2007-August/000045.html&#34;&gt;4.2.4p4-RC2&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;8 (bugs)&lt;br&gt; 2 (improvements)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;June 29, 2007&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://lists.ntp.org/pipermail/announce/2007-June/000043.html&#34;&gt; 4.2.4p3&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;1 bug&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;June 20, 2007&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://lists.ntp.org/pipermail/announce/2007-June/000042.html&#34;&gt;4.2.4p2&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;10 (bugs)&lt;br&gt; 2 (improvements)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;March 7, 2007&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://lists.ntp.org/pipermail/announce/2007-March/000035.html&#34;&gt;4.2.4p0&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;8 (bugs(&lt;br&gt; 2 (improvements)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;December 18, 2006&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://lists.ntp.org/pipermail/announce/2006-December/000032.html&#34;&gt;4.2.4&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;57 (bugs)&lt;br&gt; 8 (improvements)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: </title>
      <link>/archives/4.2.6-series/toc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.6-series/toc/</guid>
      <description>
        
        
        

&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;4.2.8p15 is the latest stable and recommended version of NTP. Click &lt;a href=&#34;/archives/4.2.8-series&#34;&gt;here&lt;/a&gt; to read the latest version of the docs.&lt;/p&gt;
&lt;p&gt;Click &lt;a href=&#34;/archives/4.2.6-series&#34;&gt;here&lt;/a&gt; to read the 4.2.6 version of the docs. Refer to the table below for the release announcement for each patch level in the 4.2.6-series.&lt;/p&gt;

&lt;/div&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Release Date&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Release Announcement&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;# of Security Fixes&lt;/th&gt;
&lt;th&gt;# of Fixes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;December 24, 2011&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://lists.ntp.org/pipermail/announce/2011-December/000119.html&#34;&gt;4.2.6p5&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;September 22, 2011&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://lists.ntp.org/pipermail/announce/2011-September/000116.html&#34;&gt;4.2.6p4&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;January 3, 2011&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://lists.ntp.org/pipermail/announce/2011-January/000111.html&#34;&gt;4.2.6p3&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;July 9, 2010&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://lists.ntp.org/pipermail/announce/2010-July/000099.html&#34;&gt;4.2.6p2&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;April 9, 2010&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://lists.ntp.org/pipermail/announce/2010-April/000095.html&#34;&gt;4.2.6p1&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;December 9, 2009&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://lists.ntp.org/pipermail/announce/2009-December/000088.html&#34;&gt;4.2.6&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1 HIGH&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: </title>
      <link>/archives/4.2.8-series/toc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.8-series/toc/</guid>
      <description>
        
        
        

&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;4.2.8p15 is the latest stable and recommended version of NTP. Click &lt;a href=&#34;/archives/4.2.8-series&#34;&gt;here&lt;/a&gt; to read the latest version of the docs. Refer to the table below for the release announcement for each patch level in the 4.2.8-series.&lt;/p&gt;

&lt;/div&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Release Date&lt;/th&gt;
&lt;th&gt;Release Announcement&lt;/th&gt;
&lt;th&gt;# of Security Fixes&lt;/th&gt;
&lt;th&gt;# of Fixes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;June 23, 2020&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://support.ntp.org/bin/view/Main/SecurityNotice#June_2020_ntp_4_2_8p15_NTP_Relea&#34;&gt;4.2.8p15&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1 MEDIUM&lt;/td&gt;
&lt;td&gt;13 bugs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;March 3, 2020&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://support.ntp.org/bin/view/Main/SecurityNotice#March_2020_ntp_4_2_8p14_NTP_Rele&#34;&gt;4.2.8p14&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2 MEDIUM&lt;/td&gt;
&lt;td&gt;46 bugs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;March 7, 2019&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://support.ntp.org/bin/view/Main/SecurityNotice#March_2019_ntp_4_2_8p13_NTP_Rele&#34;&gt;4.2.8p13&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1 MEDIUM&lt;/td&gt;
&lt;td&gt;17 bugs&lt;br&gt; 1 improvement&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;August 14, 2018&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://support.ntp.org/bin/view/Main/SecurityNotice#August_2018_ntp_4_2_8p12_NTP_Rel&#34;&gt;4.2.8p12&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1 MEDIUM&lt;br&gt; 1 LOW&lt;/td&gt;
&lt;td&gt;27 bugs&lt;br&gt; 4 improvements&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;February 27, 2018&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://support.ntp.org/bin/view/Main/SecurityNotice#February_2018_ntp_4_2_8p11_NTP_S&#34;&gt;4.2.8p11&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;4 MEDIUM&lt;br&gt; 2 LOW&lt;/td&gt;
&lt;td&gt;33 bugs&lt;br&gt; 32 improvements&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;March 21, 2017&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://support.ntp.org/bin/view/Main/SecurityNotice#March_2017_ntp_4_2_8p10_NTP_Secu&#34;&gt;4.2.8p10&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;6 MEDIUM&lt;br&gt; 5 LOW&lt;br&gt; 4 INF&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;November 21, 2016&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://support.ntp.org/bin/view/Main/SecurityNotice#November_2016_ntp_4_2_8p9_NTP_Se&#34;&gt;4.2.8p9&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1 HIGH&lt;br&gt; 4 MEDIUM&lt;br&gt; 5 LOW&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;June 2, 2016&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://support.ntp.org/bin/view/Main/SecurityNotice#June_2016_ntp_4_2_8p8_NTP_Securi&#34;&gt;4.2.8p8&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1 HIGH&lt;br&gt; 4 LOW&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;April 26, 2016&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://support.ntp.org/bin/view/Main/SecurityNotice#April_2016_ntp_4_2_8p7_Security&#34;&gt;4.2.8p7&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;7 MEDIUM&lt;br&gt; 4 LOW&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;January 20, 2016&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://support.ntp.org/bin/view/Main/SecurityNotice#January_2016_NTP_4_2_8p6_Securit&#34;&gt;4.2.8p6&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;11 MEDIUM/LOW&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;January 7, 2016&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://support.ntp.org/bin/view/Main/SecurityNotice#January_2016_NTP_4_2_8p5_Securit&#34;&gt;4.2.8p5&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1 MEDIUM&lt;/td&gt;
&lt;td&gt;14 bugs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;October 21, 2015&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://support.ntp.org/bin/view/Main/SecurityNotice#October_2015_NTP_4_2_8p4_Securit&#34;&gt;4.2.8p4&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;13 MEDIUM/LOW&lt;/td&gt;
&lt;td&gt;3 bugs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;June 27, 2015&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://support.ntp.org/bin/view/Main/SecurityNotice#June_2015_NTP_4_2_8p3_Security_V&#34;&gt;4.2.8p3&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1 LOW&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;April 7, 2015&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://support.ntp.org/bin/view/Main/SecurityNotice#April_2015_NTP_4_2_8p2_Security&#34;&gt;4.2.8p2&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;February 4, 2015&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;http://support.ntp.org/bin/view/Main/SecurityNotice#December_2014_NTP_4_2_8p1_Securi&#34;&gt;4.2.8p1&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;December 19, 2014&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://lists.ntp.org/pipermail/announce/2014-December/000122.html&#34;&gt;4.2.8&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;6 HIGH&lt;/td&gt;
&lt;td&gt;1100+&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: A-UX Hints</title>
      <link>/archives/hints/a-ux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/hints/a-ux/</guid>
      <description>
        
        
        &lt;div id=&#34;body&#34;&gt;
&lt;pre&gt;-------------
INTRODUCTION:
-------------
Last revision:  06-Jul-1994

Included in this distribution of XNTP V3 is a configuration file suitable
for use under Apple&#39;s A/UX Version 3.x.x  There is also one for A/UX 2.0.1
but it has not been fully tested. To make the executables follow the steps
outlined below.

*** NOTE:  You must have gcc installed to successfully compile the current
distribution; the native cc supplied with A/UX will NOT correctly compile
this source.  See the FAQ in comp.unix.aux for places to obtain gcc from
and how to install it.

----------------------
MAKING XNTPD FOR A/UX:
----------------------

First, you need to create the makefiles (after you&#39;ve downloaded the
source, of course):

    % make clean
    % make refconf

After that, you should edit Config.local to make sure that BINDIR is
correct for where you wish the programs to be &#34;installed&#34;. The default
(and what I use) is /usr/local/etc. Make sure that DEFS_LOCAL and
CLOCKDEFS are commented out! Presently, only the LOCAL_CLOCK/REFCLOCK
clock is used and supported.

After this is done (you should be told that your system is A/UX 3), make
&#39;xntpd&#39; (the options to &#39;gcc&#39; are held in compilers/aux3.gcc):

    % make

I do not normally use the `make install&#39; option and so have not verified its
compatibility with A/UX.  Rather, I pull out each of the executables and
place them in the locally appropriate locations.

---------------
STARTING XNTPD:
---------------

At this point you need to set things up so that &#39;xntpd&#39; is started upon
boot-up. You can do this in 1 of 2 ways: either add entries in /etc/inittab
or, more ideally, create and use an /etc/rc.local file. Since rc.local is
what I recommend, here&#39;s how you do it:

By default, A/UX doesn&#39;t have rc.local, so you&#39;ll need to add the following to
/etc/inittab:

    net6:2:wait:/etc/syslogd		# set to &#34;wait&#34; to run a syslog daemon
+   jmj0:2:wait:/etc/rc.local 1&gt;/dev/syscon 2&gt;&amp;1	# Local stuff
    dbg2::wait:/etc/telinit v	# turn off init&#39;s verbose mode

Now, the look of a sample /etc/rc.local is as follows:

    #!/bin/sh
    :
    : rc.local
    :
    #	@(#)Copyright Apple Computer 1987	Version 1.17 of rc.sh on 91/11/08 15:56:21 (ATT 1.12)

    #	Push line discipline/set the device so it will print
    /etc/line_sane 1
    echo &#34; &#34;
    echo &#34;Entering rc.local...&#34;

    set `/bin/who -r`
    if [ &#34;$7&#34; = 2 ]
    then
        /bin/echo &#34; now setting the time...&#34;
        /usr/local/etc/ntpdate -s -b &lt;host.domain&gt;
        sleep 5
    #
    # start up &#39;xntpd&#39; if we want
    #
        if [ -f /etc/ntp.conf ]
        then
    	/bin/echo &#34; setting tick and tickadj...&#34;
    	/usr/local/etc/tickadj -t 16672 -a 54
    	sleep 5
    	/bin/echo &#34; starting xntpd...&#34;
    	/usr/local/etc/xntpd &lt;&amp;- &gt; /dev/null 2&gt;&amp;1
    	sleep 5
        fi
    #
    fi

    echo &#34;Leaving rc.local...&#34;

There are a few things to notice about the above:

    o When run, &#39;ntpdate&#39; forces your clock to the time returned by the
      host(s) specified by &lt;host.domain&gt; (you&#39;ll need to replace this
      be the IP address(es) of your timehosts. This is good since it gets
      things close to start off with. You can use more than one time
      server.

    o &#39;tickadj&#39; is also called. This does two things: changes the
      default value of &#39;tick&#39; (which the the amount of time, in ms, that
      is added to the clock every 1/60 seconds) and changes the value
      of &#39;tickadj&#39; which the the amount that is added or subtracted
      from &#39;tickadj&#39; when adjtime() is called.

      Now Mac clocks are pretty bad and tend to be slow. Sooo, instead of
      having A/UX add the default of 16666ms every 1/60th of a second, you
      may want it to add more (or less) so that it keeps better time. The
      above value works for me but your &#34;best&#34; value may be different and
      will likely require some fooling around to find the best value. As a
      general rule of thumb, if you see &#39;xntpd&#39; make a lot of negative clock
      adjustments, then your clock is fast and you&#39;ll need to _decrease_
      the value of &#39;tick&#39;. If your adjustments are positive, then you need
      to increase &#39;tick&#39;. To make a guess on how fast/slow your clock is,
      use &#39;ntpdate&#39; to sync your clock. Now watch &#39;xntpd&#39; and see how it
      operates. If, for example, it resets your clock by 1 second every 30
      minutes, then your clock is (1/(30*60)) is about 0.056% off and you&#39;ll
      need to adjust &#39;tick&#39; by 16666*0.00056 or about 9 (i.e. &#39;tick&#39; should
      be ~16675 if slow or ~16657 if fast)

      A/UX&#39;s default value of &#39;tickadj&#39; is 1666 which is too big for
      &#39;xntpd&#39;... so it also needs to be adjusted. I like using larger
      values then the recommended value of 9 for &#39;tickadj&#39; (although not
      anything near as big as 1666) since this allows for quick slews
      when adjusting the clock. Even with semi-large values of &#39;tickadj&#39;
      (~200), getting 5ms (1/200 s) accuracy is easy.

Finally, before A/UX and &#39;xntpd&#39; will work happily together, you need to
patch the kernel. This is due to the fact that A/UX attempts to keep the
UNIX-software clock and the Mac-hardware clock in sync. Neither the h/w or
the s/w clock are too accurate. Also, &#39;xntpd&#39; will be attempting to adjust
the software clock as well, so having A/UX muck around with it is asking
for headaches. What you therefore need to do is tell the kernel _not_ to
sync the s/w clock with the h/w one. This is done using &#39;adb&#39;. The
following is a shell script that will do the patch for you:

    #! /bin/sh
    adb -w /unix &lt;&lt;!
    init_time_fix_timeout?4i
    init_time_fix_timeout?w 0x4e75
    init_time_fix_timeout?4i
    $q
    !

This must be done _every_ time you create a new kernel (via newconfig or
newunix) or else &#39;xntpd&#39; will go crazy.

--------
HISTORY:
--------

John Dundas was the original porter of &#39;xntpd&#39; and a lot of the additions
and A/UX-ports are from him. I got involved when I wanted to run &#39;xntpd&#39;
on jagubox. It was also around this time that the base-patchlevel of
&#39;xntpd&#39; changed relatively (the so-called &#34;jones&#34; version). Since then,
I&#39;ve been maintaining &#39;xntpd&#39; for A/UX for the xntp development team

The original kernel patch (which patched &#39;time_fix_timeout&#39;) was from
Richard Todd. I suggest patching &#39;init_time_fix_timeout&#39; which prevents
&#39;time_fix_timeout&#39; from even being called.

----------------
TECHNICAL NOTES:
----------------

    o As configured (see machines/aux3), &#39;xntpd&#39; will log messages via syslogd
      using the LOC_LOCAL1 facility. I would suggest the following in
      /etc/syslog.conf:

	local1.notice		/usr/adm/ntpd-syslog

    o As mentioned above, the clocks on A/UX and Macs are kinda bad. Not
      only that, but logging in and out of the MacOS mode as well as
      extensive floppy use causes A/UX to drop and lose clock interupts
      (these are sent every 1/60th of a second). So, if you do these
      activities a lot, you find out that you lose about 300ms of time
      (i.e., you become 300ms slow). &#39;xntpd&#39; default way of handling this
      is to called &#39;settimeofday()&#39; and step the clock to the correct
      time. I prefer having &#39;xntpd&#39; slew the clock back into line by
      making gradual adjustments to the clock over a coupla minutes
      or so. It&#39;s for this reason that SLEWALWAYS is defined in
      include/ntp_machine.h for SYS_AUX3\. It&#39;s also for this reason than
      I like larger values of &#39;tickadj&#39;.

Good luck!  If you have problems under A/UX feel free to contact me (e-mail
is preferred).
--
    Jim Jagielski               |  &#34;That is no ordinary rabbit... &#39;tis the
    jim@jagubox.gsfc.nasa.gov   |   most foul, cruel and bad-tempered
    NASA/GSFC, Code 734.4       |   rodent you ever set eyes on&#34;
    Greenbelt, MD 20771         |                   Tim the Enchanter

&lt;/pre&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Access Control Commands and Options</title>
      <link>/archives/4.2.8-series/accopt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.8-series/accopt/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/pogo6.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;from &lt;em&gt;Pogo&lt;/em&gt;, Walt Kelly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The skunk watches for intruders and sprays.&lt;/p&gt;
&lt;p&gt;Last update: 7-Jan-2018 23:56 UTC&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;commands-and-options&#34;&gt;Commands and Options&lt;/h4&gt;
&lt;p&gt;Unless noted otherwise, further information about these commands is on the &lt;a href=&#34;/archives/4.2.8-series/access&#34;&gt;Access Control Support&lt;/a&gt; page.&lt;/p&gt;
&lt;dl&gt;
&lt;dt id=&#34;discard&#34;&gt;&lt;tt&gt;discard [ average _avg_ ][ minimum _min_ ] [ monitor _prob_ ]&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Set the parameters of the rate control facility which protects the server from client abuse. If the &lt;tt&gt;limited&lt;/tt&gt; flag is present in the ACL, packets that violate these limits are discarded. If, in addition, the &lt;tt&gt;kod&lt;/tt&gt; flag is present, a kiss-o&#39;-death packet is returned. See the [Rate Management](rate.html) page for further information. The options are:
&lt;dl&gt;
&lt;dt&gt;&lt;tt&gt;average _avg_&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Specify the minimum average interpacket spacing (minimum average headway time) in log&lt;sub&gt;2&lt;/sub&gt; s with default 3.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;minimum _min_&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Specify the minimum interpacket spacing (guard time) in seconds with default 2.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;monitor&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Specify the probability of being recorded for packets that overflow the MRU list size limit set by &lt;tt&gt;mru maxmem&lt;/tt&gt; or &lt;tt&gt;mru maxdepth&lt;/tt&gt;. This is a performance optimization for servers with aggregate arrivals of 1000 packets per second or more.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/dd&gt;
&lt;dt id=&#34;restrict&#34;&gt;&lt;tt&gt;restrict [-4 | -6] default [ippeerlimit _num_] [_flag_][...]&lt;/tt&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;tt&gt;restrict source [ippeerlimit _num_] [_flag_][...]&lt;/tt&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;tt&gt;restrict _address_ [mask _mask_] [ippeerlimit _num_] [_flag_][...]&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;The &lt;tt&gt;_address_&lt;/tt&gt; argument expressed in IPv4 or IPv6 numeric address form is the address of a host or network. Alternatively, the &lt;tt&gt;_address_&lt;/tt&gt; argument can be a valid host DNS name. The &lt;tt&gt;_mask_&lt;/tt&gt; argument expressed in IPv4 or IPv6 numeric address form defaults to all mask bits on, meaning that the &lt;tt&gt;_address_&lt;/tt&gt; is treated as the address of an individual host. A default entry (address 0.0.0.0, mask 0.0.0.0 for IPv4 and address :: mask :: for IPv6) is always the first entry in the list. &lt;tt&gt;restrict default&lt;/tt&gt;, with no mask option, modifies both IPv4 and IPv6 default entries. &lt;tt&gt;restrict source&lt;/tt&gt; configures a template restriction automatically added at runtime for each association, whether configured, ephemeral, or preemptible, and removed when the association is demobilized.&lt;/dd&gt;
&lt;dd&gt;The optional &lt;tt&gt;ippeerlimit&lt;/tt&gt; takes a numeric argument that indicates how many incoming (at present) peer requests will be permitted for each IP, regardless of whether or not the request comes from an authenticated source. A value of -1 means &#34;unlimited&#34;, which is the current default. A value of 0 means &#34;none&#34;. Ordinarily one would expect at most 1 of these sessions to exist per IP, however if the remote side is operating thru a proxy there would be one association for each remote peer at that IP.&lt;/dd&gt;
&lt;dd&gt;Some flags have the effect to deny service, some have the effect to enable service and some are conditioned by other flags. The flags are not orthogonal, in that more restrictive flags will often make less restrictive ones redundant. The flags that deny service are classed in two categories, those that restrict time service and those that restrict informational queries and attempts to do run-time reconfiguration of the server. One or more of the following flags may be specified:&lt;/dd&gt;
&lt;dd&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;tt&gt;flake&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Discard received NTP packets with probability 0.1; that is, on average drop one packet in ten. This is for testing and amusement. The name comes from Bob Braden&#39;s _flakeway_, which once did a similar thing for early Internet testing.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;ignore&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Deny packets of all kinds, including &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; queries.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;kod&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Send a kiss-o&#39;-death (KoD) packet if the &lt;tt&gt;limited&lt;/tt&gt; flag is present and a packet violates the rate limits established by the &lt;tt&gt;discard&lt;/tt&gt; command. KoD packets are themselves rate limited for each source address separately. If the &lt;tt&gt;kod&lt;/tt&gt; flag is used in a restriction which does not have the &lt;tt&gt;limited&lt;/tt&gt; flag, no KoD responses will result.&lt;/dd&gt;
&lt;dt id=&#34;limited&#34;&gt;&lt;tt&gt;limited&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Deny time service if the packet violates the rate limits established by the &lt;tt&gt;discard&lt;/tt&gt; command. This does not apply to &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; queries.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;lowpriotrap&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Declare traps set by matching hosts to be low priority. The number of traps a server can maintain is limited (the current limit is 3). Traps are usually assigned on a first come, first served basis, with later trap requestors being denied service. This flag modifies the assignment algorithm by allowing low priority traps to be overridden by later requests for normal priority traps.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;mssntp&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Enable Microsoft Windows MS-SNTP authentication using Active Directory services.&lt;/dd&gt; 


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    Potential users should be aware that these services involve a TCP connection to another process that could potentially block, denying services to other users. Therefore, this flag should be used only for a dedicated server with no clients other than MS-SNTP.

&lt;/div&gt;

&lt;dt&gt;&lt;tt&gt;noepeer&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Deny packets that would mobilize an ephemeral peering association, even if authenticated.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;nomodify&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Deny &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; queries which attempt to modify the state of the server (i.e., run time reconfiguration). Queries which return information are permitted.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;noquery&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Deny &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; queries. Time service is not affected.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;nopeer&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Deny packets that might mobilize an association unless authenticated. This includes broadcast, symmetric-active and manycast server packets when a configured association does not exist. It also includes &lt;tt&gt;pool&lt;/tt&gt; associations, so if you want to use servers from a &lt;tt&gt;pool&lt;/tt&gt; directive and also want to use &lt;tt&gt;nopeer&lt;/tt&gt; by default, you&#39;ll want a &lt;tt&gt;&#34;restrict source ...&#34;&lt;/tt&gt; line as well that does _not_ include the &lt;tt&gt;nopeer&lt;/tt&gt; directive. Note that this flag does not apply to packets that do not attempt to mobilize an association.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;noserve&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Deny all packets except &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; queries.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;notrap&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Decline to provide mode 6 control message trap service to matching hosts. The trap service is a subsystem of the &lt;tt&gt;ntpdc&lt;/tt&gt; control message protocol which is intended for use by remote event logging programs.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;notrust&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Deny packets that are not cryptographically authenticated. Note carefully how this flag interacts with the &lt;tt&gt;auth&lt;/tt&gt; option of the &lt;tt&gt;enable&lt;/tt&gt; and &lt;tt&gt;disable&lt;/tt&gt; commands. If &lt;tt&gt;auth&lt;/tt&gt; is enabled, which is the default, authentication is required for all packets that might mobilize an association. If &lt;tt&gt;auth&lt;/tt&gt; is disabled, but the &lt;tt&gt;notrust&lt;/tt&gt; flag is not present, an association can be mobilized whether or not authenticated. If &lt;tt&gt;auth&lt;/tt&gt; is disabled, but the &lt;tt&gt;notrust&lt;/tt&gt; flag is present, authentication is required only for the specified address/mask range.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;ntpport&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;This is actually a match algorithm modifier, rather than a restriction flag. Its presence causes the restriction entry to be matched only if the source port in the packet is the standard NTP UDP port (123). A restrict line containing &lt;tt&gt;ntpport&lt;/tt&gt; is considered more specific than one with the same address and mask, but lacking &lt;tt&gt;ntpport&lt;/tt&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;serverresponse fuzz&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;When reponding to server requests, fuzz the low order bits of the &lt;tt&gt;reftime&lt;/tt&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;version&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Deny packets that do not match the current NTP version.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/dd&gt;
&lt;dd&gt;Default restriction list entries with the flags &lt;tt&gt;ignore, ntpport&lt;/tt&gt;, for each of the local host&#39;s interface addresses are inserted into the table at startup to prevent the server from attempting to synchronize to its own time. A default entry is also always present, though if it is otherwise unconfigured; no flags are associated with the default entry (i.e., everything besides your own NTP server is unrestricted).&lt;/dd&gt;
&lt;/dl&gt;
      </description>
    </item>
    
    <item>
      <title>Archives: Access Control Options</title>
      <link>/archives/4.1.0/accopt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.1.0/accopt/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/pogo6.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;from &lt;em&gt;Pogo&lt;/em&gt;, Walt Kelly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The skunk watches for intruders and sprays.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.0/accopt/#access-control-support&#34;&gt;Access Control Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.0/accopt/#the-kiss-of-death-packet&#34;&gt;The Kiss-of-Death Packet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.0/accopt/#access-control-commands&#34;&gt;Access Control Commands&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;access-control-support&#34;&gt;Access Control Support&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntpd&lt;/tt&gt; implements a general purpose address-and-mask based restriction list. The list is sorted by address and by mask, and the list is searched in this order for matches, with the last match found defining the restriction flags associated with the incoming packets. The source address of incoming packets is used for the match, with the 32- bit address being and&amp;rsquo;ed with the mask associated with the restriction entry and then compared with the entry&amp;rsquo;s address (which has also been and&amp;rsquo;ed with the mask) to look for a match. Additional information and examples can be found in the  &lt;a href=&#34;/archives/4.1.0/notes&#34;&gt;Notes on Configuring NTP and Setting up a NTP Subnet&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;The restriction facility was implemented in conformance with the access policies for the original NSFnet backbone time servers. While this facility may be otherwise useful for keeping unwanted or broken remote time servers from affecting your own, it should not be considered an alternative to the standard NTP authentication facility. Source address based restrictions are easily circumvented by a determined cracker.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;the-kiss-of-death-packet&#34;&gt;The Kiss-of-Death Packet&lt;/h4&gt;
&lt;p&gt;Ordinarily, packets denied service are simply dropped with no further action except incrementing statistics counters. Sometimes a more proactive response is needed, such as a server message that explicitly requests the client to stop sending and leave a message for the system operator. A special packet format has been created for this purpose called the kiss-of-death packet. If the &lt;tt&gt;kod&lt;/tt&gt; flag is set and either service is denied or the client limit is exceeded, the server it returns the packet and sets the leap bits unsynchronized, stratum zero and the ASCII string &amp;ldquo;DENY&amp;rdquo; in the reference source identifier field. If the &lt;tt&gt;kod&lt;/tt&gt; flag is not set, the server simply drops the packet.&lt;/p&gt;
&lt;p&gt;A client or peer receiving a kiss-of-death packet performs a set of sanity checks to minimize security exposure. If this is the first packet received from the server, the client assumes an access denied condition at the server. It updates the stratum and reference identifier peer variables and sets the access denied (test 4) bit in the peer flash variable. If this bit is set, the client sends no packets to the server. If this is not the first packet, the client assumes a client limit condition at the server, but does not update the peer variables. In either case, a message is sent to the system log.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;access-control-commands&#34;&gt;Access Control Commands&lt;/h4&gt;
&lt;dt id=&#34;restrict&#34;&gt;&lt;tt&gt;_numeric_address_ [mask _numeric_mask_] [_flag_][...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The &lt;tt&gt;&lt;em&gt;numeric_address&lt;/em&gt;&lt;/tt&gt; argument, expressed in dotted-quad form, is the address of an host or network. The &lt;tt&gt;mask&lt;/tt&gt; argument, also expressed in dotted-quad form, defaults to &lt;tt&gt;255.255.255.255&lt;/tt&gt;, meaning that the &lt;tt&gt;numeric_address&lt;/tt&gt; is treated as the address of an individual host. A default entry (address &lt;tt&gt;0.0.0.0&lt;/tt&gt;, mask &lt;tt&gt;0.0.0.0&lt;/tt&gt;) is always included and, given the sort algorithm, is always the first entry in the list. Note that, while &lt;tt&gt;numeric_address&lt;/tt&gt; is normally given in dotted-quad format, the text string &lt;tt&gt;default&lt;/tt&gt;, with no mask option, may be used to indicate the default entry.&lt;/p&gt;
&lt;p&gt;In the current implementation, &lt;tt&gt;flag&lt;/tt&gt; always restricts access, i.e., an entry with no flags indicates that free access to the server is to be given. The flags are not orthogonal, in that more restrictive flags will often make less restrictive ones redundant. The flags can generally be classed into two catagories, those which restrict time service and those which restrict informational queries and attempts to do run-time reconfiguration of the server. One or more of the following flags may be specified:&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;kod&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â If access is denied, send a kiss-of-death packet.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;ignore&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Ignore all packets from hosts which match this entry. If this flag is specified neither queries nor time server polls will be responded to.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;noquery&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Ignore all NTP mode 6 and 7 packets (i.e. information queries and configuration requests) from the source. Time service is not affected.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;nomodify&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Ignore all NTP mode 6 and 7 packets which attempt to modify the state of the server (i.e. run time reconfiguration). Queries which return information are permitted.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;notrap&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Decline to provide mode 6 control message trap service to matching hosts. The trap service is a subsystem of the mode 6 control message protocol which is intended for use by remote event logging programs.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;lowpriotrap&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Declare traps set by matching hosts to be low priority. The number of traps a server can maintain is limited (the current limit is 3). Traps are usually assigned on a first come, first served basis, with later trap requestors being denied service. This flag modifies the assignment algorithm by allowing low priority traps to be overridden by later requests for normal priority traps.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;noserve&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Ignore NTP packets whose mode is other than 6 or 7. In effect, time service is denied, though queries may still be permitted.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;nopeer&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Provide stateless time service to polling hosts, but do not allocate peer memory resources to these hosts even if they otherwise might be considered useful as future synchronization partners.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;notrust&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Treat these hosts normally in other respects, but never use them as synchronization sources.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;limited&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â These hosts are subject to limitation of number of clients from the same net. Net in this context refers to the IP notion of net (class A, class B, class C, etc.). Only the first &lt;tt&gt;client_limit&lt;/tt&gt; hosts that have shown up at the server and that have been active during the last &lt;tt&gt;client_limit_period&lt;/tt&gt; seconds are accepted. Requests from other clients from the same net are rejected. Only time request packets are taken into account. Query packets sent by the &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; programs are not subject to these limits. A history of clients is kept using the monitoring capability of &lt;tt&gt;ntpd&lt;/tt&gt;. Thus, monitoring is always active as long as there is a restriction entry with the &lt;tt&gt;limited&lt;/tt&gt; flag.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;ntpport&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â This is actually a match algorithm modifier, rather than a restriction flag. Its presence causes the restriction entry to be matched only if the source port in the packet is the standard NTP UDP port (123). Both &lt;tt&gt;ntpport&lt;/tt&gt; and &lt;tt&gt;non-ntpport&lt;/tt&gt; may be specified. The &lt;tt&gt;ntpport&lt;/tt&gt; is considered more specific and is sorted later in the list.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;version&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Ignore these hosts if not the current NTP version.&lt;/p&gt;
&lt;p&gt;Default restriction list entries with the flags &lt;tt&gt;ignore, interface, ntpport&lt;/tt&gt;, for each of the local host&amp;rsquo;s interface addresses are inserted into the table at startup to prevent the server from attempting to synchronize to its own time. A default entry is also always present, though if it is otherwise unconfigured; no flags are associated with the default entry (i.e., everything besides your own NTP server is unrestricted).&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;clientlimit _limit_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Set the &lt;tt&gt;client_limit&lt;/tt&gt; variable, which limits the number of simultaneous access-controlled clients. The default value for this variable is 3.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;clientperiod _period_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Set the &lt;tt&gt;client_limit_period&lt;/tt&gt; variable, which specifies the number of seconds after which a client is considered inactive and thus no longer is counted for client limit restriction. The default value for this variable is 3600 seconds.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Access Control Options</title>
      <link>/archives/4.1.1/accopt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.1.1/accopt/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/pogo6.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;from &lt;em&gt;Pogo&lt;/em&gt;, Walt Kelly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The skunk watches for intruders and sprays.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.1/accopt/#access-control-support&#34;&gt;Access Control Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.1/accopt/#the-kiss-of-death-packet&#34;&gt;The Kiss-of-Death Packet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.1/accopt/#access-control-commands&#34;&gt;Access Control Commands&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;access-control-support&#34;&gt;Access Control Support&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntpd&lt;/tt&gt; implements a general purpose address-and-mask based restriction list. The list is sorted by address and by mask, and the list is searched in this order for matches, with the last match found defining the restriction flags associated with the incoming packets. The source address of incoming packets is used for the match, with the 32- bit address being and&amp;rsquo;ed with the mask associated with the restriction entry and then compared with the entry&amp;rsquo;s address (which has also been and&amp;rsquo;ed with the mask) to look for a match. Additional information and examples can be found in the  &lt;a href=&#34;/archives/4.1.1/notes&#34;&gt;Notes on Configuring NTP and Setting up a NTP Subnet&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;The restriction facility was implemented in conformance with the access policies for the original NSFnet backbone time servers. While this facility may be otherwise useful for keeping unwanted or broken remote time servers from affecting your own, it should not be considered an alternative to the standard NTP authentication facility. Source address based restrictions are easily circumvented by a determined cracker.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;the-kiss-of-death-packet&#34;&gt;The Kiss-of-Death Packet&lt;/h4&gt;
&lt;p&gt;Ordinarily, packets denied service are simply dropped with no further action except incrementing statistics counters. Sometimes a more proactive response is needed, such as a server message that explicitly requests the client to stop sending and leave a message for the system operator. A special packet format has been created for this purpose called the kiss-of-death packet. If the &lt;tt&gt;kod&lt;/tt&gt; flag is set and either service is denied or the client limit is exceeded, the server it returns the packet and sets the leap bits unsynchronized, stratum zero and the ASCII string &amp;ldquo;DENY&amp;rdquo; in the reference source identifier field. If the &lt;tt&gt;kod&lt;/tt&gt; flag is not set, the server simply drops the packet.&lt;/p&gt;
&lt;p&gt;A client or peer receiving a kiss-of-death packet performs a set of sanity checks to minimize security exposure. If this is the first packet received from the server, the client assumes an access denied condition at the server. It updates the stratum and reference identifier peer variables and sets the access denied (test 4) bit in the peer flash variable. If this bit is set, the client sends no packets to the server. If this is not the first packet, the client assumes a client limit condition at the server, but does not update the peer variables. In either case, a message is sent to the system log.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;access-control-commands&#34;&gt;Access Control Commands&lt;/h4&gt;
&lt;dt id=&#34;restrict&#34;&gt;&lt;tt&gt;_numeric_address_ [mask _numeric_mask_] [_flag_][...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The &lt;tt&gt;&lt;em&gt;numeric_address&lt;/em&gt;&lt;/tt&gt; argument, expressed in dotted-quad form, is the address of an host or network. The &lt;tt&gt;mask&lt;/tt&gt; argument, also expressed in dotted-quad form, defaults to &lt;tt&gt;255.255.255.255&lt;/tt&gt;, meaning that the &lt;tt&gt;numeric_address&lt;/tt&gt; is treated as the address of an individual host. A default entry (address &lt;tt&gt;0.0.0.0&lt;/tt&gt;, mask &lt;tt&gt;0.0.0.0&lt;/tt&gt;) is always included and, given the sort algorithm, is always the first entry in the list. Note that, while &lt;tt&gt;numeric_address&lt;/tt&gt; is normally given in dotted-quad format, the text string &lt;tt&gt;default&lt;/tt&gt;, with no mask option, may be used to indicate the default entry.&lt;/p&gt;
&lt;p&gt;In the current implementation, &lt;tt&gt;flag&lt;/tt&gt; always restricts access, i.e., an entry with no flags indicates that free access to the server is to be given. The flags are not orthogonal, in that more restrictive flags will often make less restrictive ones redundant. The flags can generally be classed into two catagories, those which restrict time service and those which restrict informational queries and attempts to do run-time reconfiguration of the server. One or more of the following flags may be specified:&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;kod&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â If access is denied, send a kiss-of-death packet.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;ignore&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Ignore all packets from hosts which match this entry. If this flag is specified neither queries nor time server polls will be responded to.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;noquery&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Ignore all NTP mode 6 and 7 packets (i.e. information queries and configuration requests) from the source. Time service is not affected.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;nomodify&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Ignore all NTP mode 6 and 7 packets which attempt to modify the state of the server (i.e. run time reconfiguration). Queries which return information are permitted.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;notrap&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Decline to provide mode 6 control message trap service to matching hosts. The trap service is a subsystem of the mode 6 control message protocol which is intended for use by remote event logging programs.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;lowpriotrap&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Declare traps set by matching hosts to be low priority. The number of traps a server can maintain is limited (the current limit is 3). Traps are usually assigned on a first come, first served basis, with later trap requestors being denied service. This flag modifies the assignment algorithm by allowing low priority traps to be overridden by later requests for normal priority traps.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;noserve&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Ignore NTP packets whose mode is other than 6 or 7. In effect, time service is denied, though queries may still be permitted.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;nopeer&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Provide stateless time service to polling hosts, but do not allocate peer memory resources to these hosts even if they otherwise might be considered useful as future synchronization partners.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;notrust&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Treat these hosts normally in other respects, but never use them as synchronization sources.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;limited&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â These hosts are subject to limitation of number of clients from the same net. Net in this context refers to the IP notion of net (class A, class B, class C, etc.). Only the first &lt;tt&gt;client_limit&lt;/tt&gt; hosts that have shown up at the server and that have been active during the last &lt;tt&gt;client_limit_period&lt;/tt&gt; seconds are accepted. Requests from other clients from the same net are rejected. Only time request packets are taken into account. Query packets sent by the &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; programs are not subject to these limits. A history of clients is kept using the monitoring capability of &lt;tt&gt;ntpd&lt;/tt&gt;. Thus, monitoring is always active as long as there is a restriction entry with the &lt;tt&gt;limited&lt;/tt&gt; flag.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;ntpport&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â This is actually a match algorithm modifier, rather than a restriction flag. Its presence causes the restriction entry to be matched only if the source port in the packet is the standard NTP UDP port (123). Both &lt;tt&gt;ntpport&lt;/tt&gt; and &lt;tt&gt;non-ntpport&lt;/tt&gt; may be specified. The &lt;tt&gt;ntpport&lt;/tt&gt; is considered more specific and is sorted later in the list.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;version&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Ignore these hosts if not the current NTP version.&lt;/p&gt;
&lt;p&gt;Default restriction list entries with the flags &lt;tt&gt;ignore, interface, ntpport&lt;/tt&gt;, for each of the local host&amp;rsquo;s interface addresses are inserted into the table at startup to prevent the server from attempting to synchronize to its own time. A default entry is also always present, though if it is otherwise unconfigured; no flags are associated with the default entry (i.e., everything besides your own NTP server is unrestricted).&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;clientlimit _limit_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Set the &lt;tt&gt;client_limit&lt;/tt&gt; variable, which limits the number of simultaneous access-controlled clients. The default value for this variable is 3.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;clientperiod _period_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Set the &lt;tt&gt;client_limit_period&lt;/tt&gt; variable, which specifies the number of seconds after which a client is considered inactive and thus no longer is counted for client limit restriction. The default value for this variable is 3600 seconds.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Access Control Options</title>
      <link>/archives/4.1.2/accopt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.1.2/accopt/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/pogo6.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;from &lt;em&gt;Pogo&lt;/em&gt;, Walt Kelly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The skunk watches for intruders and sprays.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.2/accopt/#access-control-support&#34;&gt;Access Control Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.2/accopt/#the-kiss-of-death-packet&#34;&gt;The Kiss-of-Death Packet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.2/accopt/#access-control-commands&#34;&gt;Access Control Commands&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;access-control-support&#34;&gt;Access Control Support&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntpd&lt;/tt&gt; implements a general purpose address-and-mask based restriction list. The list is sorted by address and by mask, and the list is searched in this order for matches, with the last match found defining the restriction flags associated with the incoming packets. The source address of incoming packets is used for the match, with the 32- bit address being and&amp;rsquo;ed with the mask associated with the restriction entry and then compared with the entry&amp;rsquo;s address (which has also been and&amp;rsquo;ed with the mask) to look for a match. Additional information and examples can be found in the  &lt;a href=&#34;/archives/4.1.2/notes&#34;&gt;Notes on Configuring NTP and Setting up a NTP Subnet&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;The restriction facility was implemented in conformance with the access policies for the original NSFnet backbone time servers. While this facility may be otherwise useful for keeping unwanted or broken remote time servers from affecting your own, it should not be considered an alternative to the standard NTP authentication facility. Source address based restrictions are easily circumvented by a determined cracker.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;the-kiss-of-death-packet&#34;&gt;The Kiss-of-Death Packet&lt;/h4&gt;
&lt;p&gt;Ordinarily, packets denied service are simply dropped with no further action except incrementing statistics counters. Sometimes a more proactive response is needed, such as a server message that explicitly requests the client to stop sending and leave a message for the system operator. A special packet format has been created for this purpose called the kiss-of-death packet. If the &lt;tt&gt;kod&lt;/tt&gt; flag is set and either service is denied or the client limit is exceeded, the server it returns the packet and sets the leap bits unsynchronized, stratum zero and the ASCII string &amp;ldquo;DENY&amp;rdquo; in the reference source identifier field. If the &lt;tt&gt;kod&lt;/tt&gt; flag is not set, the server simply drops the packet.&lt;/p&gt;
&lt;p&gt;A client or peer receiving a kiss-of-death packet performs a set of sanity checks to minimize security exposure. If this is the first packet received from the server, the client assumes an access denied condition at the server. It updates the stratum and reference identifier peer variables and sets the access denied (test 4) bit in the peer flash variable. If this bit is set, the client sends no packets to the server. If this is not the first packet, the client assumes a client limit condition at the server, but does not update the peer variables. In either case, a message is sent to the system log.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;access-control-commands&#34;&gt;Access Control Commands&lt;/h4&gt;
&lt;dt id=&#34;restrict&#34;&gt;&lt;tt&gt;_numeric_address_ [mask _numeric_mask_] [_flag_][...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The &lt;tt&gt;&lt;em&gt;numeric_address&lt;/em&gt;&lt;/tt&gt; argument, expressed in dotted-quad form, is the address of an host or network. The &lt;tt&gt;mask&lt;/tt&gt; argument, also expressed in dotted-quad form, defaults to &lt;tt&gt;255.255.255.255&lt;/tt&gt;, meaning that the &lt;tt&gt;numeric_address&lt;/tt&gt; is treated as the address of an individual host. A default entry (address &lt;tt&gt;0.0.0.0&lt;/tt&gt;, mask &lt;tt&gt;0.0.0.0&lt;/tt&gt;) is always included and, given the sort algorithm, is always the first entry in the list. Note that, while &lt;tt&gt;numeric_address&lt;/tt&gt; is normally given in dotted-quad format, the text string &lt;tt&gt;default&lt;/tt&gt;, with no mask option, may be used to indicate the default entry.&lt;/p&gt;
&lt;p&gt;In the current implementation, &lt;tt&gt;flag&lt;/tt&gt; always restricts access, i.e., an entry with no flags indicates that free access to the server is to be given. The flags are not orthogonal, in that more restrictive flags will often make less restrictive ones redundant. The flags can generally be classed into two catagories, those which restrict time service and those which restrict informational queries and attempts to do run-time reconfiguration of the server. One or more of the following flags may be specified:&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;kod&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â If access is denied, send a kiss-of-death packet.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;ignore&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Ignore all packets from hosts which match this entry. If this flag is specified neither queries nor time server polls will be responded to.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;noquery&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Ignore all NTP mode 6 and 7 packets (i.e. information queries and configuration requests) from the source. Time service is not affected.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;nomodify&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Ignore all NTP mode 6 and 7 packets which attempt to modify the state of the server (i.e. run time reconfiguration). Queries which return information are permitted.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;notrap&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Decline to provide mode 6 control message trap service to matching hosts. The trap service is a subsystem of the mode 6 control message protocol which is intended for use by remote event logging programs.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;lowpriotrap&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Declare traps set by matching hosts to be low priority. The number of traps a server can maintain is limited (the current limit is 3). Traps are usually assigned on a first come, first served basis, with later trap requestors being denied service. This flag modifies the assignment algorithm by allowing low priority traps to be overridden by later requests for normal priority traps.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;noserve&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Ignore NTP packets whose mode is other than 6 or 7. In effect, time service is denied, though queries may still be permitted.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;nopeer&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Provide stateless time service to polling hosts, but do not allocate peer memory resources to these hosts even if they otherwise might be considered useful as future synchronization partners.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;notrust&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Treat these hosts normally in other respects, but never use them as synchronization sources.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;limited&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â These hosts are subject to limitation of number of clients from the same net. Net in this context refers to the IP notion of net (class A, class B, class C, etc.). Only the first &lt;tt&gt;client_limit&lt;/tt&gt; hosts that have shown up at the server and that have been active during the last &lt;tt&gt;client_limit_period&lt;/tt&gt; seconds are accepted. Requests from other clients from the same net are rejected. Only time request packets are taken into account. Query packets sent by the &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; programs are not subject to these limits. A history of clients is kept using the monitoring capability of &lt;tt&gt;ntpd&lt;/tt&gt;. Thus, monitoring is always active as long as there is a restriction entry with the &lt;tt&gt;limited&lt;/tt&gt; flag.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;ntpport&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â This is actually a match algorithm modifier, rather than a restriction flag. Its presence causes the restriction entry to be matched only if the source port in the packet is the standard NTP UDP port (123). Both &lt;tt&gt;ntpport&lt;/tt&gt; and &lt;tt&gt;non-ntpport&lt;/tt&gt; may be specified. The &lt;tt&gt;ntpport&lt;/tt&gt; is considered more specific and is sorted later in the list.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;version&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Ignore these hosts if not the current NTP version.&lt;/p&gt;
&lt;p&gt;Default restriction list entries with the flags &lt;tt&gt;ignore, interface, ntpport&lt;/tt&gt;, for each of the local host&amp;rsquo;s interface addresses are inserted into the table at startup to prevent the server from attempting to synchronize to its own time. A default entry is also always present, though if it is otherwise unconfigured; no flags are associated with the default entry (i.e., everything besides your own NTP server is unrestricted).&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;clientlimit _limit_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Set the &lt;tt&gt;client_limit&lt;/tt&gt; variable, which limits the number of simultaneous access-controlled clients. The default value for this variable is 3.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;clientperiod _period_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Set the &lt;tt&gt;client_limit_period&lt;/tt&gt; variable, which specifies the number of seconds after which a client is considered inactive and thus no longer is counted for client limit restriction. The default value for this variable is 3600 seconds.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Access Control Options</title>
      <link>/archives/4.2.0/accopt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/accopt/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/pogo6.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;from &lt;em&gt;Pogo&lt;/em&gt;, Walt Kelly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The skunk watches for intruders and sprays.&lt;/p&gt;
&lt;p&gt;Last update: 03:02 AM UTC Monday, October 13, 2003&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/accopt/#access-control-support&#34;&gt;Access Control Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/accopt/#the-kiss-of-death-packet&#34;&gt;The Kiss-of-Death Packet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/accopt/#access-control-commands&#34;&gt;Access Control Commands&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;access-control-support&#34;&gt;Access Control Support&lt;/h4&gt;
&lt;p&gt;The &lt;tt&gt;ntpd&lt;/tt&gt; daemon implements a general purpose address/mask based restriction list. The list contains address/match entries sorted first by increasing address values and and then by increasing mask values. A match occurs when the bitwise AND of the mask and the packet source address is equal to the bitwise AND of the mask and address in the list. The list is searched in order with the last match found defining the restriction flags associated with the entry. Additional information and examples can be found in the &lt;a href=&#34;/archives/4.2.0/notes&#34;&gt;Notes on Configuring NTP and Setting up a NTP Subnet&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;The restriction facility was implemented in conformance with the access policies for the original NSFnet backbone time servers. Later the facility was expanded to deflect cryptographic and clogging attacks. While this facility may be useful for keeping unwanted or broken or malicious clients from congesting innocent servers, it should not be considered an alternative to the NTP authentication facilities. Source address based restrictions are easily circumvented by a determined cracker.&lt;/p&gt;
&lt;p&gt;Clients can be denied service because they are explicitly included in the restrict list created by the &lt;tt&gt;restrict&lt;/tt&gt; command or implicitly as the result of cryptographic or rate limit violations. Cryptographic violations include certificate or identity verification failure; rate limit violations generally result from defective NTP implementations that send packets at abusive rates. Some violations cause denied service only for the offending packet, others cause denied service for a timed period and others cause the denied service for an indefinite period. When a client or network is denied access for an indefinite period, the only way at present to remove the restrictions is by restarting the server.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;the-kiss-of-death-packet&#34;&gt;The Kiss-of-Death Packet&lt;/h4&gt;
&lt;p&gt;Ordinarily, packets denied service are simply dropped with no further action except incrementing statistics counters. Sometimes a more proactive response is needed, such as a server message that explicitly requests the client to stop sending and leave a message for the system operator. A special packet format has been created for this purpose called the &amp;ldquo;kiss-o&#39;-death&amp;rdquo; (KoD) packet. KoD packets have the leap bits set unsynchronized and stratum set to zero and the reference identifier field set to a four-byte ASCII code. If the &lt;tt&gt;noserve&lt;/tt&gt; or &lt;tt&gt;notrust&lt;/tt&gt; flag of the matching restrict list entry is set, the code is &amp;ldquo;DENY&amp;rdquo;; if the &lt;tt&gt;limited&lt;/tt&gt; flag is set and the rate limit is exceeded, the code is &amp;ldquo;RATE&amp;rdquo;. Finally, if a cryptographic violation occurs, the code is &amp;ldquo;CRYP&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;A client receiving a KoD performs a set of sanity checks to minimize security exposure, then updates the stratum and reference identifier peer variables, sets the access denied (TEST4) bit in the peer flash variable and sends a message to the log. As long as the TEST4 bit is set, the client will send no further packets to the server. The only way at present to recover from this condition is to restart the protocol at both the client and server. This happens automatically at the client when the association times out. It will happen at the server only if the server operator cooperates.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;access-control-commands&#34;&gt;Access Control Commands&lt;/h4&gt;
&lt;dt id=&#34;discard&#34;&gt;&lt;tt&gt;discard [ average _avg_ ][ minimum _min_ ] [ monitor _prob_ ]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Set the parameters of the &lt;tt&gt;limited&lt;/tt&gt; facility which protects the server from client abuse. The &lt;tt&gt;average&lt;/tt&gt; subcommand specifies the minimum average packet spacing, while the &lt;tt&gt;minimum&lt;/tt&gt; subcommand specifies the minimum packet spacing. Packets that violate these minima are discarded and a kiss-o&#39;-death packet returned if enabled. The default minimum average and minimum are 5 and 2, respectively. The monitor subcommand specifies the probability of discard for packets that overflow the rate-control window.&lt;/p&gt;
&lt;dt id=&#34;restrict&#34;&gt;&lt;tt&gt;restrict _address_ [mask _mask_] [_flag_][...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The &lt;tt&gt;&lt;em&gt;address&lt;/em&gt;&lt;/tt&gt; argument expressed in dotted-quad form is the address of a host or network. Alternatively, the &lt;tt&gt;address&lt;/tt&gt; argument can be a valid host DNS name. The &lt;tt&gt;mask&lt;/tt&gt; argument expressed in dotted-quad form defaults to &lt;tt&gt;255.255.255.255&lt;/tt&gt;, meaning that the &lt;tt&gt;address&lt;/tt&gt; is treated as the address of an individual host. A default entry (address &lt;tt&gt;0.0.0.0&lt;/tt&gt;, mask &lt;tt&gt;0.0.0.0&lt;/tt&gt;) is always included and is always the first entry in the list. Note that text string &lt;tt&gt;default&lt;/tt&gt;, with no mask option, may be used to indicate the default entry.&lt;/p&gt;
&lt;p&gt;In the current implementation, &lt;tt&gt;flag&lt;/tt&gt; always restricts access, i.e., an entry with no flags indicates that free access to the server is to be given. The flags are not orthogonal, in that more restrictive flags will often make less restrictive ones redundant. The flags can generally be classed into two catagories, those which restrict time service and those which restrict informational queries and attempts to do run-time reconfiguration of the server. One or more of the following flags may be specified:&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;ignore&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Deny packets of all kinds, including &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; queries.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;kod&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â If this flag is set when an access violation occurs, a kiss-o&#39;-death (KoD) packet is sent. KoD packets are rate limited to no more than one per second. If another KoD packet occurs within one second after the last one, the packet is dropped.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;limited&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Deny service if the packet spacing violates the lower limits specified in the &lt;tt&gt;discard&lt;/tt&gt; command. A history of clients is kept using the monitoring capability of &lt;tt&gt;ntpd&lt;/tt&gt;. Thus, monitoring is always active as long as there is a restriction entry with the &lt;tt&gt;limited&lt;/tt&gt; flag.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;lowpriotrap&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Declare traps set by matching hosts to be low priority. The number of traps a server can maintain is limited (the current limit is 3). Traps are usually assigned on a first come, first served basis, with later trap requestors being denied service. This flag modifies the assignment algorithm by allowing low priority traps to be overridden by later requests for normal priority traps.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;nomodify&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Deny &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; queries which attempt to modify the state of the server (i.e., run time reconfiguration). Queries which return information are permitted.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;noquery&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Deny &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; queries. Time service is not affected.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;nopeer&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Deny packets which would result in mobilizing a new association.  This includes broadcast, symmetric-active and manycast client packets when a configured association does not exist.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;noserve&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Deny all packets except &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; queries.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;notrap&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Decline to provide mode 6 control message trap service to matching hosts. The trap service is a subsystem of the &lt;tt&gt;ntpdc&lt;/tt&gt; control message protocol which is intended for use by remote event logging programs.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;notrust&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Deny packets unless the packet is cryptographically authenticated.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;ntpport&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;non-ntpport&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â This is actually a match algorithm modifier, rather than a restriction flag. Its presence causes the restriction entry to be matched only if the source port in the packet is the standard NTP UDP port (123). Both &lt;tt&gt;ntpport&lt;/tt&gt; and &lt;tt&gt;non-ntpport&lt;/tt&gt; may be specified. The &lt;tt&gt;ntpport&lt;/tt&gt; is considered more specific and is sorted later in the list.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;version&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Deny packets that do not match the current NTP version.&lt;/p&gt;
&lt;p&gt;Default restriction list entries with the flags &lt;tt&gt;ignore, interface, ntpport&lt;/tt&gt;, for each of the local host&amp;rsquo;s interface addresses are inserted into the table at startup to prevent the server from attempting to synchronize to its own time. A default entry is also always present, though if it is otherwise unconfigured; no flags are associated with the default entry (i.e., everything besides your own NTP server is unrestricted).&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Access Control Options</title>
      <link>/archives/4.2.2-series/accopt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.2-series/accopt/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/pogo6.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;from &lt;em&gt;Pogo&lt;/em&gt;, Walt Kelly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The skunk watches for intruders and sprays.&lt;/p&gt;
&lt;p&gt;Last update: 18:35 UTC Thursday, July 28, 2005&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.2-series/accopt/#access-control-support&#34;&gt;Access Control Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.2-series/accopt/#the-kiss-of-death-packet&#34;&gt;The Kiss-of-Death Packet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.2-series/accopt/#access-control-commands&#34;&gt;Access Control Commands&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;access-control-support&#34;&gt;Access Control Support&lt;/h4&gt;
&lt;p&gt;The &lt;tt&gt;ntpd&lt;/tt&gt; daemon implements a general purpose address/mask based restriction list. The list contains address/match entries sorted first by increasing address values and and then by increasing mask values. A match occurs when the bitwise AND of the mask and the packet source address is equal to the bitwise AND of the mask and address in the list. The list is searched in order with the last match found defining the restriction flags associated with the entry. Additional information and examples can be found in the &lt;a href=&#34;/archives/4.2.2-series/notes&#34;&gt;Notes on Configuring NTP and Setting up a NTP Subnet&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;The restriction facility was implemented in conformance with the access policies for the original NSFnet backbone time servers. Later the facility was expanded to deflect cryptographic and clogging attacks. While this facility may be useful for keeping unwanted or broken or malicious clients from congesting innocent servers, it should not be considered an alternative to the NTP authentication facilities. Source address based restrictions are easily circumvented by a determined cracker.&lt;/p&gt;
&lt;p&gt;Clients can be denied service because they are explicitly included in the restrict list created by the &lt;tt&gt;restrict&lt;/tt&gt; command or implicitly as the result of cryptographic or rate limit violations. Cryptographic violations include certificate or identity verification failure; rate limit violations generally result from defective NTP implementations that send packets at abusive rates. Some violations cause denied service only for the offending packet, others cause denied service for a timed period and others cause the denied service for an indefinate period. When a client or network is denied access for an indefinate period, the only way at present to remove the restrictions is by restarting the server.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;the-kiss-of-death-packet&#34;&gt;The Kiss-of-Death Packet&lt;/h4&gt;
&lt;p&gt;Ordinarily, packets denied service are simply dropped with no further action except incrementing statistics counters. Sometimes a more proactive response is needed, such as a server message that explicitly requests the client to stop sending and leave a message for the system operator. A special packet format has been created for this purpose called the &amp;ldquo;kiss-o&#39;-death&amp;rdquo; (KoD) packet. KoD packets have the leap bits set unsynchronized and stratum set to zero and the reference identifier field set to a four-byte ASCII code. If the &lt;tt&gt;noserve&lt;/tt&gt; or &lt;tt&gt;notrust&lt;/tt&gt; flag of the matching restrict list entry is set, the code is &amp;ldquo;DENY&amp;rdquo;; if the &lt;tt&gt;limited&lt;/tt&gt; flag is set and the rate limit is exceeded, the code is &amp;ldquo;RATE&amp;rdquo;. Finally, if a cryptographic violation occurs, the code is &amp;ldquo;CRYP&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;A client receiving a KoD performs a set of sanity checks to minimize security exposure, then updates the stratum and reference identifier peer variables, sets the access denied (TEST4) bit in the peer flash variable and sends a message to the log. As long as the TEST4 bit is set, the client will send no further packets to the server. The only way at present to recover from this condition is to restart the protocol at both the client and server. This happens automatically at the client when the association times out. It will happen at the server only if the server operator cooperates.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;access-control-commands&#34;&gt;Access Control Commands&lt;/h4&gt;
&lt;dt id=&#34;discard&#34;&gt;&lt;tt&gt;discard [ average _avg_ ][ minimum _min_ ] [ monitor _prob_ ]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Set the parameters of the &lt;tt&gt;limited&lt;/tt&gt; facility which protects the server from client abuse. The &lt;tt&gt;average&lt;/tt&gt; subcommand specifies the minimum average packet spacing, while the &lt;tt&gt;minimum&lt;/tt&gt; subcommand specifies the minimum packet spacing. Packets that violate these minima are discarded and a kiss-o&#39;-death packet returned if enabled. The default minimum average and minimum are 5 and 2, respectively. The monitor subcommand specifies the probability of discard for packets that overflow the rate-control window.&lt;/p&gt;
&lt;dt id=&#34;restrict&#34;&gt;&lt;tt&gt;restrict _address_ [mask _mask_] [_flag_][...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The &lt;tt&gt;&lt;em&gt;address&lt;/em&gt;&lt;/tt&gt; argument expressed in dotted-quad form is the address of a host or network. Alternatively, the &lt;tt&gt;address&lt;/tt&gt; argument can be a valid host DNS name. The &lt;tt&gt;mask&lt;/tt&gt; argument expressed in dotted-quad form defaults to &lt;tt&gt;255.255.255.255&lt;/tt&gt;, meaning that the &lt;tt&gt;address&lt;/tt&gt; is treated as the address of an individual host. A default entry (address &lt;tt&gt;0.0.0.0&lt;/tt&gt;, mask &lt;tt&gt;0.0.0.0&lt;/tt&gt;) is always included and is always the first entry in the list. Note that text string &lt;tt&gt;default&lt;/tt&gt;, with no mask option, may be used to indicate the default entry.&lt;/p&gt;
&lt;p&gt;In the current implementation, &lt;tt&gt;flag&lt;/tt&gt; always restricts access, i.e., an entry with no flags indicates that free access to the server is to be given. The flags are not orthogonal, in that more restrictive flags will often make less restrictive ones redundant. The flags can generally be classed into two catagories, those which restrict time service and those which restrict informational queries and attempts to do run-time reconfiguration of the server. One or more of the following flags may be specified:&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;ignore&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Deny packets of all kinds, including &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; queries.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;kod&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â If this flag is set when an access violation occurs, a kiss-o&#39;-death (KoD) packet is sent. KoD packets are rate limited to no more than one per second. If another KoD packet occurs within one second after the last one, the packet is dropped.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;limited&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Deny service if the packet spacing violates the lower limits specified in the &lt;tt&gt;discard&lt;/tt&gt; command. A history of clients is kept using the monitoring capability of &lt;tt&gt;ntpd&lt;/tt&gt;. Thus, monitoring is always active as long as there is a restriction entry with the &lt;tt&gt;limited&lt;/tt&gt; flag.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;lowpriotrap&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Declare traps set by matching hosts to be low priority. The number of traps a server can maintain is limited (the current limit is 3). Traps are usually assigned on a first come, first served basis, with later trap requestors being denied service. This flag modifies the assignment algorithm by allowing low priority traps to be overridden by later requests for normal priority traps.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;nomodify&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Deny &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; queries which attempt to modify the state of the server (i.e., run time reconfiguration). Queries which return information are permitted.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;noquery&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Deny &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; queries. Time service is not affected.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;nopeer&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Deny packets which would result in mobilizing a new association.  This includes broadcast, symmetric-active and manycast client packets when a configured association does not exist.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;noserve&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Deny all packets except &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; queries.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;notrap&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Decline to provide mode 6 control message trap service to matching hosts. The trap service is a subsystem of the &lt;tt&gt;ntpdc&lt;/tt&gt; control message protocol which is intended for use by remote event logging programs.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;notrust&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Deny packets unless the packet is cryptographically authenticated.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;ntpport&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;non-ntpport&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â This is actually a match algorithm modifier, rather than a restriction flag. Its presence causes the restriction entry to be matched only if the source port in the packet is the standard NTP UDP port (123). Both &lt;tt&gt;ntpport&lt;/tt&gt; and &lt;tt&gt;non-ntpport&lt;/tt&gt; may be specified. The &lt;tt&gt;ntpport&lt;/tt&gt; is considered more specific and is sorted later in the list.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;version&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Deny packets that do not match the current NTP version.&lt;/p&gt;
&lt;p&gt;Default restriction list entries with the flags &lt;tt&gt;ignore, interface, ntpport&lt;/tt&gt;, for each of the local host&amp;rsquo;s interface addresses are inserted into the table at startup to prevent the server from attempting to synchronize to its own time. A default entry is also always present, though if it is otherwise unconfigured; no flags are associated with the default entry (i.e., everything besides your own NTP server is unrestricted).&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Access Control Options</title>
      <link>/archives/4.2.4-series/accopt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.4-series/accopt/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/pogo6.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;from &lt;em&gt;Pogo&lt;/em&gt;, Walt Kelly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The skunk watches for intruders and sprays.&lt;/p&gt;
&lt;p&gt;Last update: 18:35 UTC Thursday, July 28, 2005&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.4-series/accopt/#access-control-support&#34;&gt;Access Control Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.4-series/accopt/#the-kiss-of-death-packet&#34;&gt;The Kiss-of-Death Packet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.4-series/accopt/#access-control-commands&#34;&gt;Access Control Commands&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;access-control-support&#34;&gt;Access Control Support&lt;/h4&gt;
&lt;p&gt;The &lt;tt&gt;ntpd&lt;/tt&gt; daemon implements a general purpose address/mask based restriction list. The list contains address/match entries sorted first by increasing address values and and then by increasing mask values. A match occurs when the bitwise AND of the mask and the packet source address is equal to the bitwise AND of the mask and address in the list. The list is searched in order with the last match found defining the restriction flags associated with the entry. Additional information and examples can be found in the &lt;a href=&#34;/archives/4.2.4-series/notes&#34;&gt;Notes on Configuring NTP and Setting up a NTP Subnet&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;The restriction facility was implemented in conformance with the access policies for the original NSFnet backbone time servers. Later the facility was expanded to deflect cryptographic and clogging attacks. While this facility may be useful for keeping unwanted or broken or malicious clients from congesting innocent servers, it should not be considered an alternative to the NTP authentication facilities. Source address based restrictions are easily circumvented by a determined cracker.&lt;/p&gt;
&lt;p&gt;Clients can be denied service because they are explicitly included in the restrict list created by the &lt;tt&gt;restrict&lt;/tt&gt; command or implicitly as the result of cryptographic or rate limit violations. Cryptographic violations include certificate or identity verification failure; rate limit violations generally result from defective NTP implementations that send packets at abusive rates. Some violations cause denied service only for the offending packet, others cause denied service for a timed period and others cause the denied service for an indefinate period. When a client or network is denied access for an indefinate period, the only way at present to remove the restrictions is by restarting the server.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;the-kiss-of-death-packet&#34;&gt;The Kiss-of-Death Packet&lt;/h4&gt;
&lt;p&gt;Ordinarily, packets denied service are simply dropped with no further action except incrementing statistics counters. Sometimes a more proactive response is needed, such as a server message that explicitly requests the client to stop sending and leave a message for the system operator. A special packet format has been created for this purpose called the &amp;ldquo;kiss-o&#39;-death&amp;rdquo; (KoD) packet. KoD packets have the leap bits set unsynchronized and stratum set to zero and the reference identifier field set to a four-byte ASCII code. If the &lt;tt&gt;noserve&lt;/tt&gt; or &lt;tt&gt;notrust&lt;/tt&gt; flag of the matching restrict list entry is set, the code is &amp;ldquo;DENY&amp;rdquo;; if the &lt;tt&gt;limited&lt;/tt&gt; flag is set and the rate limit is exceeded, the code is &amp;ldquo;RATE&amp;rdquo;. Finally, if a cryptographic violation occurs, the code is &amp;ldquo;CRYP&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;A client receiving a KoD performs a set of sanity checks to minimize security exposure, then updates the stratum and reference identifier peer variables, sets the access denied (TEST4) bit in the peer flash variable and sends a message to the log. As long as the TEST4 bit is set, the client will send no further packets to the server. The only way at present to recover from this condition is to restart the protocol at both the client and server. This happens automatically at the client when the association times out. It will happen at the server only if the server operator cooperates.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;access-control-commands&#34;&gt;Access Control Commands&lt;/h4&gt;
&lt;dt id=&#34;discard&#34;&gt;&lt;tt&gt;discard [ average _avg_ ][ minimum _min_ ] [ monitor _prob_ ]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Set the parameters of the &lt;tt&gt;limited&lt;/tt&gt; facility which protects the server from client abuse. The &lt;tt&gt;average&lt;/tt&gt; subcommand specifies the minimum average packet spacing, while the &lt;tt&gt;minimum&lt;/tt&gt; subcommand specifies the minimum packet spacing. Packets that violate these minima are discarded and a kiss-o&#39;-death packet returned if enabled. The default minimum average and minimum are 5 and 2, respectively. The monitor subcommand specifies the probability of discard for packets that overflow the rate-control window.&lt;/p&gt;
&lt;dt id=&#34;restrict&#34;&gt;&lt;tt&gt;restrict _address_ [mask _mask_] [_flag_][...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The &lt;tt&gt;&lt;em&gt;address&lt;/em&gt;&lt;/tt&gt; argument expressed in dotted-quad form is the address of a host or network. Alternatively, the &lt;tt&gt;address&lt;/tt&gt; argument can be a valid host DNS name. The &lt;tt&gt;mask&lt;/tt&gt; argument expressed in dotted-quad form defaults to &lt;tt&gt;255.255.255.255&lt;/tt&gt;, meaning that the &lt;tt&gt;address&lt;/tt&gt; is treated as the address of an individual host. A default entry (address &lt;tt&gt;0.0.0.0&lt;/tt&gt;, mask &lt;tt&gt;0.0.0.0&lt;/tt&gt;) is always included and is always the first entry in the list. Note that text string &lt;tt&gt;default&lt;/tt&gt;, with no mask option, may be used to indicate the default entry.&lt;/p&gt;
&lt;p&gt;In the current implementation, &lt;tt&gt;flag&lt;/tt&gt; always restricts access, i.e., an entry with no flags indicates that free access to the server is to be given. The flags are not orthogonal, in that more restrictive flags will often make less restrictive ones redundant. The flags can generally be classed into two catagories, those which restrict time service and those which restrict informational queries and attempts to do run-time reconfiguration of the server. One or more of the following flags may be specified:&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;ignore&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Deny packets of all kinds, including &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; queries.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;kod&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â If this flag is set when an access violation occurs, a kiss-o&#39;-death (KoD) packet is sent. KoD packets are rate limited to no more than one per second. If another KoD packet occurs within one second after the last one, the packet is dropped .&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;limited&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Deny service if the packet spacing violates the lower limits specified in the &lt;tt&gt;discard&lt;/tt&gt; command. A history of clients is kept using the monitoring capability of &lt;tt&gt;ntpd&lt;/tt&gt;. Thus, monitoring is always active as long as there is a restriction entry with the &lt;tt&gt;limited&lt;/tt&gt; flag.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;lowpriotrap&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Declare traps set by matching hosts to be low priority. The number of traps a server can maintain is limited (the current limit is 3). Traps are usually assigned on a first come, first served basis, with later trap requestors being denied service. This flag modifies the assignment algorithm by allowing low priority traps to be overridden by later requests for normal priority traps.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;nomodify&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Deny &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; queries which attempt to modify the state of the server (i.e., run time reconfiguration). Queries which return information are permitted.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;noquery&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Deny &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; queries. Time service is not affected.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;nopeer&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Deny packets which would result in mobilizing a new association.  This includes broadcast, symmetric-active and manycast client packets when a configured association does not exist.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;noserve&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Deny all packets except &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; queries.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;notrap&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Decline to provide mode 6 control message trap service to matching hosts. The trap service is a subsystem of the &lt;tt&gt;ntpdc&lt;/tt&gt; control message protocol which is intended for use by remote event logging programs.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;notrust&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Deny packets unless the packet is cryptographically authenticated.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;ntpport&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;non-ntpport&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â This is actually a match algorithm modifier, rather than a restriction flag. Its presence causes the restriction entry to be matched only if the source port in the packet is the standard NTP UDP port (123). Both &lt;tt&gt;ntpport&lt;/tt&gt; and &lt;tt&gt;non-ntpport&lt;/tt&gt; may be specified. The &lt;tt&gt;ntpport&lt;/tt&gt; is considered more specific and is sorted later in the list.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;version&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Deny packets that do not match the current NTP version.&lt;/p&gt;
&lt;p&gt;Default restriction list entries with the flags &lt;tt&gt;ignore, interface, ntpport&lt;/tt&gt;, for each of the local host&amp;rsquo;s interface addresses are inserted into the table at startup to prevent the server from attempting to synchronize to its own time. A default entry is also always present, though if it is otherwise unconfigured; no flags are associated with the default entry (i.e., everything besides your own NTP server is unrestricted).&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Access Control Options</title>
      <link>/archives/4.2.6-series/accopt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.6-series/accopt/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/pogo6.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;from &lt;em&gt;Pogo&lt;/em&gt;, Walt Kelly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The skunk watches for intruders and sprays.&lt;/p&gt;
&lt;p&gt;Last update: 30-Sep-2009 17:16 UTC&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.6-series/accopt/#access-control-support&#34;&gt;Access Control Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.6-series/accopt/#access-control-commands&#34;&gt;Access Control Commands&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;access-control-support&#34;&gt;Access Control Support&lt;/h4&gt;
&lt;p&gt;The &lt;tt&gt;ntpd&lt;/tt&gt; daemon implements a general purpose access control list (ACL) containing address/match entries sorted first by increasing address values and then by increasing mask values. A match occurs when the bitwise AND of the mask and the packet source address is equal to the bitwise AND of the mask and address in the list. The list is searched in order with the last match found defining the restriction flags associated with the entry.&lt;/p&gt;
&lt;p&gt;An example may clarify how it works. Our campus has two class-B networks, 128.4 for the ECE and CIS departments and 128.175 for the rest of campus. Let&amp;rsquo;s assume (not true!) that subnet 128.4.1 homes critical services like class rosters and spread sheets. A suitable ACL might be&lt;/p&gt;
&lt;pre&gt;restrict default nopeer				# deny new associations
restrict 128.175.0.0 mask 255.255.0.0 		# allow campus access
restrict 128.4.0.0 mask 255.255.0.0 none	# allow ECE and CIS access
restrict 128.4.1.0 mask 255.255.255.0 notrust # require authentication on subnet 1
restrict time.nist.gov				# allow access
&lt;/pre&gt;
&lt;p&gt;While this facility may be useful for keeping unwanted, broken or malicious clients from congesting innocent servers, it should not be considered an alternative to the NTP authentication facilities. Source address based restrictions are easily circumvented by a determined cracker.&lt;/p&gt;
&lt;h4 id=&#34;access-control-commands&#34;&gt;Access Control Commands&lt;/h4&gt;
&lt;dt id=&#34;discard&#34;&gt;&lt;tt&gt;discard [ average _avg_ ][ minimum _min_ ] [ monitor _prob_ ]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Set the parameters of the rate control facility which protects the server from client abuse. If the &lt;tt&gt;limited&lt;/tt&gt; flag is present in the ACL, packets that violate these limits are discarded. If in addition the &lt;tt&gt;kod&lt;/tt&gt; restriction is present, a kiss-o&#39;-death packet is returned.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;average &lt;em&gt;avg&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specify the minimum average interpacket spacing (minimum average headway time) in log&lt;sub&gt;2&lt;/sub&gt; s with default 3.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;minimum &lt;em&gt;min&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specify the minimum interpacket spacing (guard time) in log&lt;sub&gt;2&lt;/sub&gt; s with default 1.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;monitor&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specify the probability of discard for packets that overflow the rate-control window. This is a performance optimization for servers with aggregate arrivals of 1000 packets per second or more.&lt;/p&gt;
&lt;dt id=&#34;restrict&#34;&gt;&lt;tt&gt;restrict _address_ [mask _mask_] [_flag_][...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The &lt;tt&gt;&lt;em&gt;address&lt;/em&gt;&lt;/tt&gt; argument expressed in dotted-quad form is the address of a host or network. Alternatively, the &lt;tt&gt;&lt;em&gt;address&lt;/em&gt;&lt;/tt&gt; argument can be a valid host DNS name. The &lt;tt&gt;&lt;em&gt;mask&lt;/em&gt;&lt;/tt&gt; argument expressed in dotted-quad form defaults to 255.255.255.255, meaning that the &lt;tt&gt;&lt;em&gt;address&lt;/em&gt;&lt;/tt&gt; is treated as the address of an individual host. A default entry (address 0.0.0.0, mask 0.0.0.0) is always included and is always the first entry in the list. Note that the text string &lt;tt&gt;default&lt;/tt&gt;, with no mask option, may be used to indicate the default entry.&lt;/p&gt;
&lt;p&gt;Some flags have the effect to deny service, some have the effect to enable service and some are conditioned by other flags. The flags. are not orthogonal, in that more restrictive flags will often make less restrictive ones redundant. The flags that deny service are classed in two categories, those that restrict time service and those that restrict informational queries and attempts to do run-time reconfiguration of the server. One or more of the following flags may be specified:&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;flake&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Discard received NTP packets with probability 0.1; that is, on average drop one packet in ten. This is for testing and amusement. The name comes from Bob Braden&amp;rsquo;s &lt;em&gt;flakeway&lt;/em&gt;, which once did a similar thing for early Internet testing.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;ignore&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Deny packets of all kinds, including &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; queries.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;kod&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Send a kiss-o&#39;-death (KoD) packet if the &lt;tt&gt;limited&lt;/tt&gt; flag is present and a packet violates the rate limits established by the &lt;tt&gt;discard&lt;/tt&gt; command. KoD packets are themselves rate limited for each source address separately. If this flag is not present, packets that violate the rate limits are discarded.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;limited&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Deny time service if the packet violates the rate limits established by the &lt;tt&gt;discard&lt;/tt&gt; command. This does not apply to &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; queries.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;lowpriotrap&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Declare traps set by matching hosts to be low priority. The number of traps a server can maintain is limited (the current limit is 3). Traps are usually assigned on a first come, first served basis, with later trap requestors being denied service. This flag modifies the assignment algorithm by allowing low priority traps to be overridden by later requests for normal priority traps.&lt;/p&gt;
&lt;p&gt;Â Â Â Â mssntp&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Enable Microsoft Windows MS-SNTP authentication using Active Directory services. &lt;strong&gt;Note: Potential users should be aware that these services involve a TCP connection to another process that could potentially block, denying services to other users. Therefore, this flag should be used only for a dedicated server with no clients other than MS-SNTP&lt;/strong&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;nomodify&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Deny &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; queries which attempt to modify the state of the server (i.e., run time reconfiguration). Queries which return information are permitted.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;noquery&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Deny &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; queries. Time service is not affected.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;nopeer&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Deny packets that might mobilize an association unless authenticated. This includes broadcast, symmetric-active and manycast server packets when a configured association does not exist. Note that this flag does not apply to packets that do not attempt to mobilize an association.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;noserve&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Deny all packets except &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; queries.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;notrap&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Decline to provide mode 6 control message trap service to matching hosts. The trap service is a subsystem of the &lt;tt&gt;ntpdc&lt;/tt&gt; control message protocol which is intended for use by remote event logging programs.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;notrust&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Deny packets that are not cryptographically authenticated. Note carefully how this flag interacts with the &lt;tt&gt;auth&lt;/tt&gt; option of the &lt;tt&gt;enable&lt;/tt&gt; and &lt;tt&gt;disable&lt;/tt&gt; commands. If &lt;tt&gt;auth&lt;/tt&gt; is enabled, which is the default, authentication is required for all packets that might mobilize an association. If &lt;tt&gt;auth&lt;/tt&gt; is disabled, but the &lt;tt&gt;notrust&lt;/tt&gt; flag is not present, an association can be mobilized whether or not authenticated. If &lt;tt&gt;auth&lt;/tt&gt; is disabled, but the &lt;tt&gt;notrust&lt;/tt&gt; flag is present, authentication is required only for the specified address/mask range.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;ntpport&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;non-ntpport&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â This is actually a match algorithm modifier, rather than a restriction flag. Its presence causes the restriction entry to be matched only if the source port in the packet is the standard NTP UDP port (123). Both &lt;tt&gt;ntpport&lt;/tt&gt; and &lt;tt&gt;non-ntpport&lt;/tt&gt; may be specified. The &lt;tt&gt;ntpport&lt;/tt&gt; is considered more specific and is sorted later in the list.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;version&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Deny packets that do not match the current NTP version.&lt;/p&gt;
&lt;p&gt;Default restriction list entries with the flags &lt;tt&gt;ignore, ntpport&lt;/tt&gt;, for each of the local host&amp;rsquo;s interface addresses are inserted into the table at startup to prevent the server from attempting to synchronize to its own time. A default entry is also always present, though if it is otherwise unconfigured; no flags are associated with the default entry (i.e., everything besides your own NTP server is unrestricted).&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Access Control Support</title>
      <link>/archives/4.2.8-series/access/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.8-series/access/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/pogo6.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;from &lt;em&gt;Pogo&lt;/em&gt;, Walt Kelly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The skunk watches for intruders and sprays.&lt;/p&gt;
&lt;p&gt;Last update: 26-Jul-2017 20:10 UTC&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The &lt;tt&gt;ntpd&lt;/tt&gt; daemon implements a general purpose access control list (ACL) containing address/match entries sorted first by increasing address values and then by increasing mask values. A match occurs when the bitwise AND of the mask and the packet source address is equal to the bitwise AND of the mask and address in the list. The list is searched in order with the last match found defining the restriction flags associated with the entry.&lt;/p&gt;
&lt;p&gt;The ACL is specified as a list of &lt;tt&gt;restrict&lt;/tt&gt; commands in the following format:&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;restrict &lt;em&gt;address&lt;/em&gt; [mask &lt;em&gt;mask&lt;/em&gt;] [&lt;em&gt;flag&lt;/em&gt;][&amp;hellip;]&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;&lt;em&gt;address&lt;/em&gt;&lt;/tt&gt; argument expressed in dotted-quad form is the address of a host or network. Alternatively, the &lt;tt&gt;&lt;em&gt;address&lt;/em&gt;&lt;/tt&gt; argument can be a valid host DNS name. The &lt;tt&gt;&lt;em&gt;mask&lt;/em&gt;&lt;/tt&gt; argument expressed in IPv4 or IPv6 numeric address form defaults to all mask bits on, meaning that the &lt;tt&gt;&lt;em&gt;address&lt;/em&gt;&lt;/tt&gt; is treated as the address of an individual host. A default entry (address 0.0.0.0, mask 0.0.0.0 for IPv4 and address :: mask :: for IPv6) is always the first entry in the list. &lt;tt&gt;restrict default&lt;/tt&gt;, with no mask option, modifies both IPv4 and IPv6 default entries. &lt;tt&gt;restrict source&lt;/tt&gt; configures a template restriction automatically added at runtime for each association, whether configured, ephemeral, or preemptable, and removed when the association is demobilized.&lt;/p&gt;
&lt;p&gt;Some flags have the effect to deny service, some have the effect to enable service and some are conditioned by other flags. The flags are not orthogonal, in that more restrictive flags will often make less restrictive ones redundant. The flags that deny service are classed in two categories, those that restrict time service and those that restrict informational queries and attempts to do run-time reconfiguration of the server.&lt;/p&gt;
&lt;p&gt;An example may clarify how it works. Our campus has two class-B networks, 128.4 for the ECE and CIS departments and 128.175 for the rest of campus. Let&amp;rsquo;s assume (not true!) that subnet 128.4.1 homes critical services like class rosters and spread sheets. A suitable ACL might look like this:&lt;/p&gt;
&lt;pre&gt;restrict default nopeer			# deny new associations
restrict 128.175.0.0 mask 255.255.0.0 		# allow campus access
restrict 128.4.0.0 mask 255.255.0.0 none	# allow ECE and CIS access
restrict 128.4.1.0 mask 255.255.255.0 notrust   # require authentication on subnet 1
restrict time.nist.gov				# allow access
&lt;/pre&gt;
&lt;p&gt;While this facility may be useful for keeping unwanted, broken or malicious clients from congesting innocent servers, it should not be considered an alternative to the NTP authentication facilities. Source address based restrictions are easily circumvented by a determined cracker.&lt;/p&gt;
&lt;p&gt;Default restriction list entries with the flags &lt;tt&gt;ignore, ntpport&lt;/tt&gt;, for each of the local host&amp;rsquo;s interface addresses are inserted into the table at startup to prevent the server from attempting to synchronize to its own time. A default entry is also always present, though if it is otherwise unconfigured; no flags are associated with the default entry (i.e., everything besides your own NTP server is unrestricted).&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: AIX Hints</title>
      <link>/archives/hints/aix/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/hints/aix/</guid>
      <description>
        
        
        &lt;div id=&#34;body&#34;&gt;
&lt;pre&gt;Problem with recent ANSI compilers

On some systems, including AIX, the compiler quits on the ntp_refclock.c
file when processing the refclock_report() routine. The problem, which
is eithre a feature or a bug, has to do with an unwanted promotion of
the u_char argument to an int and a failure of the compiler to recognize
the preceding prototype. A workaround is to use ANSI syntax to delare
the arguments. Since ANSI compilers are not universally available, this
syntax can&#39;t be used in the stock distribution.

(Message # 60: 2884 bytes, New)
Date: Sat, 19 Aug 1995 13:20:50 -0400
From: &#34;R. Bernstein&#34; &lt;rocky@panix.com&gt;Newsgroups: comp.protocols.time.ntp
to: mills@udel.edu
return-receipt-to: rocky@panix.com
Subject: time and AIX 3.2.5 raw tty bug

This posting isn&#39;t strictly about NTP, any program that may stop the
clock or set the clock backwards is subject to the AIX 3.2.5 bug.

On AIX 3.2.5, there is a bug in the tty driver for a raw device which
may crash the box under certain conditions: basically a read() on a
raw tty in effect, a character was read but not as many as specified
by VMIN when a read timeout occurred. VTIME specifies the timeout. See
the AIX manual page on termios.h or that include file. for Information
on VMIN (or MIN) VTIME (or TIME).

A remedy other than to not use raw tty&#39;s is to apply patch U435110.

Details of the problem report follow.

&gt; ABSTRACT:
&gt; IX43779: TRAP IN PSX_TIMEO
&gt;
&gt; ORIGINATING DETAILS:
&gt; Stacktrace shows:
&gt; IAR:      01460214   posixdd:psx_timeo  + 8bf4: ti 4,r12,0x0
&gt; *LR:      014601a0   posixdd:psx_timeo  + 8b80
&gt; 00212c60: 014604f4   posixdd:psx_timer  + 8ed4
&gt; 00212cc0: 0144b74c   ttydd:tty_do_offlevel  + 4284
&gt; 00212d20: 000216fc  .i_offlevel + 8c
&gt; 00212d70: 00021d78  .i_softint + c8
&gt; 00001004: 00008714  .finish_interrupt + 80
&gt;
&gt; RESPONDER SUMMARY:
&gt; AIX asserted in psx_timeo(). Reason for the assert was that
&gt; the current time was behind psx_ctime. Since this state
&gt; can occur when the current time is changed after a character
&gt; is received but before the VTIME interbyte timer pops, we
&gt; should not assert on this.
&gt;
&gt; RESPONDER CONCLUSION:
&gt; Removed the requirement that current time &gt; psx_ctime by
&gt; adding a new L_ntimersub macro that is used instead of the
&gt; ntimersub macro in time.h. Also added a test for (current
&gt; time - psx_ctime) being negative, in that case we do not
&gt; adjust the new timeout.
&gt;
&gt; Reported to Correct a PTF in Error:     NO
&gt; Reported as a Highly pervasive problem: NO
&gt;
&gt; PE Apar?:       NoPE
&gt; Hiper Apar?:    NoHiper
&gt; Status:         CLOSED  PER
&gt; Component Name: AIX V3 FOR RS/6
&gt; Version:        320
&gt; Component ID:   575603001
&gt; Submitted:      94/05/03
&gt; Closed:         94/05/05
&gt; ChangeTeam:     TX2527
&gt;
&gt; APAR FIXED BY:  U431696  U432151  U432844  U432870  U432979
&gt; U433049  U433081  U433459  U433876  U433906  U434598  U434453
&gt; U434672  U434737  U435110&lt;/rocky@panix.com&gt; &lt;/pre&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Arbiter 1088A/B GPS Receiver</title>
      <link>/archives/drivers/driver11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/drivers/driver11/</guid>
      <description>
        
        
        &lt;p&gt;Author: David L. Mills (&lt;a href=&#34;mailto:mills@udel.edu&#34;&gt;mills@udel.edu&lt;/a&gt;)&lt;br&gt;
Last update: 11-Sep-2010 05:56 UTC&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver11/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver11/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver11/#fudge-factors&#34;&gt;Fudge Factors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver11/#additional-information&#34;&gt;Additional Information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;Address: 127.127.11.&lt;em&gt;u&lt;/em&gt;&lt;br&gt;
Reference ID: &lt;tt&gt;GPS&lt;/tt&gt;&lt;br&gt;
Driver ID: &lt;tt&gt;GPS_ARBITER&lt;/tt&gt;&lt;br&gt;
Serial Port: &lt;tt&gt;/dev/gps_u_&lt;/tt&gt;; 9600 baud, 8-bits, no parity&lt;br&gt;
Features: &lt;tt&gt;tty_clk&lt;/tt&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;This driver supports the Arbiter 1088A/B Satellite Controlled Clock. The claimed accuracy of this clock is 100 ns relative to the PPS output when receiving four or more satellites.&lt;/p&gt;
&lt;p&gt;The receiver should be configured before starting the NTP daemon, in order to establish reliable position and operating conditions. It does not initiate surveying or hold mode. For use with NTP, the daylight savings time feature should be disables (&lt;tt&gt;D0&lt;/tt&gt; command) and the broadcast mode set to operate in UTC (&lt;tt&gt;BU&lt;/tt&gt; command).&lt;/p&gt;
&lt;p&gt;The timecode format supported by this driver is selected by the poll sequence &lt;tt&gt;B5&lt;/tt&gt;, which initiates a line in the following format to be repeated once per second until turned off by the &lt;tt&gt;B0&lt;/tt&gt; command.&lt;/p&gt;
&lt;p&gt;Format &lt;tt&gt;B5&lt;/tt&gt; (24 ASCII printing characters):&lt;/p&gt;
&lt;pre&gt;&lt;cr&gt;&lt;lf&gt;i yy ddd hh:mm:ss.000bbb

on-time = &lt;cr&gt;
i = synchronization flag (&#39; &#39; = locked, &#39;?&#39; = unlocked)
yy = year of century
ddd = day of year
hh:mm:ss = hours, minutes, seconds
.000 = fraction of second (not used)
bbb = tailing spaces for fill&lt;/pre&gt;
&lt;p&gt;The alarm condition is indicated by a &lt;code&gt;?&lt;/code&gt; at &lt;code&gt;i&lt;/code&gt;, which indicates the receiver is not synchronized. In normal operation, a line consisting of the timecode followed by the time quality character &lt;code&gt;TQ&lt;/code&gt; followed by the receiver status string &lt;code&gt;SR&lt;/code&gt; is written to the clockstats file.&lt;/p&gt;
&lt;p&gt;The time quality character is encoded in IEEE P1344 standard:&lt;/p&gt;
&lt;p&gt;Format &lt;tt&gt;TQ&lt;/tt&gt; (IEEE P1344 estimated worst-case time quality)&lt;/p&gt;
&lt;pre&gt;0       clock locked, maximum accuracy
F       clock failure, time not reliable
4       clock unlocked, accuracy &lt; 1 us
5       clock unlocked, accuracy &lt; 10 us
6       clock unlocked, accuracy &lt; 100 us
7       clock unlocked, accuracy &lt; 1 ms
8       clock unlocked, accuracy &lt; 10 ms
9       clock unlocked, accuracy &lt; 100 ms
A       clock unlocked, accuracy &lt; 1 s
B       clock unlocked, accuracy &lt; 10 s&lt;/pre&gt;
&lt;p&gt;The status string is encoded as follows:&lt;/p&gt;
&lt;p&gt;Format &lt;tt&gt;SR&lt;/tt&gt; (25 ASCII printing characters)&lt;/p&gt;
&lt;pre&gt;V=vv S=ss T=t P=pdop E=ee

vv = satellites visible
ss = relative signal strength
t = satellites tracked
pdop = position dilution of precision (meters)
ee = hardware errors&lt;/pre&gt;
&lt;p&gt;A three-stage median filter is used to reduce jitter and provide a dispersion measure. The driver makes no attempt to correct for the intrinsic jitter of the radio itself.&lt;/p&gt;
&lt;h4 id=&#34;monitor-data&#34;&gt;Monitor Data&lt;/h4&gt;
&lt;p&gt;When enabled by the &lt;tt&gt;flag4&lt;/tt&gt; fudge flag, an additional line containing the latitude, longitude, elevation and optional deviation data is written to the &lt;tt&gt;clockstats&lt;/tt&gt; file. The deviation data operates with an external pulse-per-second (PPS) input, such as a cesium oscillator or another radio clock. The PPS input should be connected to the B event channel and the radio initialized for deviation data on that channel. The deviation data consists of the mean offset and standard deviation of the external PPS signal relative the GPS signal, both in microseconds over the last 16 seconds.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;fudge-factors&#34;&gt;Fudge Factors&lt;/h4&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;tt&gt;time1 _time_&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Specifies the time offset calibration factor, in seconds and fraction, with default 0.0.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;time2 _time_&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Not used by this driver.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;stratum _number_&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Specifies the driver stratum, in decimal from 0 to 15, with default 0.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;refid _string_&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Specifies the driver reference identifier, an ASCII string from one to four characters, with default &lt;tt&gt;GPS&lt;/tt&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;flag1 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Not used by this driver.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;flag2 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Not used by this driver.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;flag3 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Not used by this driver.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;flag4 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Enable verbose &lt;tt&gt;clockstats&lt;/tt&gt; recording if set.&lt;/dd&gt;
&lt;/dl&gt;
&lt;hr&gt;
&lt;h4 id=&#34;additional-information&#34;&gt;Additional Information&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;/archives/4.2.8-series/refclock&#34;&gt;Reference Clock Drivers&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Arcron MSF Receiver</title>
      <link>/archives/drivers/driver27/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/drivers/driver27/</guid>
      <description>
        
        
        &lt;p&gt;Last update: 21-Oct-2010 23:44 UTC&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver27/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver27/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver27/#monitor-data&#34;&gt;Monitor Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver27/#fudge-factors&#34;&gt;Fudge Factors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver27/#additional-information&#34;&gt;Additional Information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;Address: 127.127.27.&lt;em&gt;u&lt;/em&gt;&lt;br&gt;
Reference ID: &lt;tt&gt;MSFa&lt;/tt&gt; / &lt;tt&gt;MSF&lt;/tt&gt; / &lt;tt&gt;DCF&lt;/tt&gt; / &lt;tt&gt;WWVB&lt;/tt&gt;&lt;br&gt;
Driver ID: &lt;tt&gt;MSF_ARCRON&lt;/tt&gt;&lt;br&gt;
Serial Port: &lt;tt&gt;/dev/arc_u_&lt;/tt&gt;; 300 baud, 8-bits, 2-stop, no parity&lt;br&gt;
Features: &lt;tt&gt;tty_clk&lt;/tt&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;This driver supports the Arcron MSF, DCF and WWVB receivers. The clock reports its ID as &amp;ldquo;&lt;tt&gt;MSFa&lt;/tt&gt;&#39;&#39;, &amp;ldquo;&lt;tt&gt;MSF&lt;/tt&gt;&#39;&#39;, &amp;ldquo;&lt;tt&gt;DCF&lt;/tt&gt;&#39;&#39; or &amp;ldquo;&lt;tt&gt;WWVB&lt;/tt&gt;&#39;&#39; to indicate the time source.&lt;/p&gt;
&lt;p&gt;This documentation describes v1.3 (2003/2/21) of the source and has been tested against ntpd 4.1.0 on linux x86. Changes from v1.1 and v1.2 include patches to work with the new ntp-4 code, clock support for DCF and WWVB configurable via mode flag, an option to ignore resync request (for those of us at the fringes of the WWVB signal, for instance), averaging of the signal quality poll and several bug fixes, code cleanup and standardizations. In all other respects, the driver works as per v1.1 if a mode is not specified.&lt;/p&gt;
&lt;p&gt;To use the alternate modes, the mode flag must be specified. If the mode flag is 0, or unspecified, the original MSF version is assumed. This should assure backwards compatibility and should not break existing setups.&lt;/p&gt;
&lt;p&gt;The previous documentation described version V1.1 (1997/06/23) of the source and had been tested (amongst others) against ntpd3-5.90 on Solaris-1 (SunOS 4.1.3_U1 on an SS1 serving as a router and firewall) and against ntpd3-5.90 on Solaris-2.5 (on a SS1+ and TurboSPARC 170MHz). That code will claimed increased stability, reduced jitter and more efficiency (fewer context switches) with the &lt;tt&gt;tty_clk&lt;/tt&gt; discipline/STREAMS module installed, but this has not been tested. For a to-do list see the comments at the start of the code.&lt;/p&gt;
&lt;p&gt;This code has been significantly slimmed down since the V1.0 version, roughly halving the memory footprint of its code and data.&lt;/p&gt;
&lt;p&gt;This driver is designed to allow the unit to run from batteries as designed, for something approaching the 2.5 years expected in the usual stand-alone mode, but no battery-life measurements have been taken.&lt;/p&gt;
&lt;p&gt;Much of this code is originally from the other refclock driver files with thanks. The code was originally made to work with the clock by &lt;a href=&#34;mailto:derek@toybox.demon.co.uk&#34;&gt;Derek Mulcahy&lt;/a&gt;, with modifications by &lt;a href=&#34;mailto:d@hd.org&#34;&gt;Damon Hart-Davis&lt;/a&gt;. Thanks also to &lt;a href=&#34;mailto:lyndond@sentinet.co.uk&#34;&gt;Lyndon David&lt;/a&gt; for some of the specifications of the clock. &lt;a href=&#34;mailto:palfille@partners.org&#34;&gt;Paul Alfille&lt;/a&gt; added support for the WWVB clock. &lt;a href=&#34;mailto:cprice@cs-home.com&#34;&gt;Christopher Price&lt;/a&gt; added enhanced support for the MSF, DCF and WWVB clocks.&lt;/p&gt;
&lt;p&gt;There is support for a Tcl/Tk monitor written by Derek Mulcahy that examines the output stats; see the &lt;a href=&#34;http://www2.exnet.com/NTP/ARC/ARC.html&#34;&gt;ARC Rugby MSF Receiver&lt;/a&gt; page for more details and the code.&lt;/p&gt;
&lt;p&gt;Look at the notes at the start of the code for further information; some of the more important details follow.&lt;/p&gt;
&lt;p&gt;The driver interrogates the clock at each poll (ie every 64s by default) for a timestamp. The clock responds at the start of the next second (with the start bit of the first byte being on-time). In the default or original MSF mode, the time is in `local&#39; format, including the daylight savings adjustment when it is in effect. The driver code converts the time back to UTC. In modes 1-3 the driver can be configured for UTC or local time depending on the setting of flag1.&lt;/p&gt;
&lt;p&gt;The clock claims to be accurate to within about 20ms of the broadcast time, and given the low data transmission speed from clock to host, and the fact that the clock is not in continuous sync with MSF, it seems sensible to set the `precision&#39; of this clock to -5 or -4, -4 being used in this code, which builds in a reported dispersion of over 63ms (ie says ``This clock is not very good.&#39;&#39;). You can improve the reported precision to -4 (and thus reduce the base dispersion to about 31ms) by setting the fudge &lt;tt&gt;flag3&lt;/tt&gt; to &lt;tt&gt;1&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Even a busy and slow IP link can yield lower dispersions than this from polls of primary time servers on the Internet, which reinforces the idea that this clock should be used as a backup in case of problems with such an IP link, or in the unfortunate event of failure of more accurate sources such as GPS.&lt;/p&gt;
&lt;p&gt;By default this clock reports itself to be at stratum 2 rather than the usual stratum 0 for a refclock, because it is not really suited to be used as other than a backup source. The stratum reported can be changed with the &lt;tt&gt;stratum&lt;/tt&gt; directive to be whatever you like. After careful monitoring of your clock, and appropriate choice of the &lt;tt&gt;time1&lt;/tt&gt; fudge factor to remove systematic errors in the clock&amp;rsquo;s reported time, you might fudge the clock to stratum 1 to allow a stratum-2 secondary server to sync to it.&lt;/p&gt;
&lt;p&gt;In default mode, the driver code arranges to resync the clock to MSF at intervals of a little less than an hour (deliberately avoiding the same time each hour to avoid any systematic problems with the signal or host). Whilst resyncing, the driver supplements the normal polls for time from the clock with polls for the reception signal quality reported by the clock. If the signal quality is too low (0&amp;ndash;2 out of a range of 0&amp;ndash;5), we chose not to trust the clock until the next resync (which we bring forward by about half an hour). If we don&amp;rsquo;t catch the resync, and so don&amp;rsquo;t know the signal quality, we do trust the clock (because this would generally be when the signal is very good and a resync happens quickly), but we still bring the next resync forward and reduce the reported precision (and thus increase reported dispersion).&lt;/p&gt;
&lt;p&gt;If we force resyncs to MSF too often we will needlessly exhaust the batteries the unit runs from. During clock resync this driver tries to take enough time samples to avoid &lt;tt&gt;ntpd&lt;/tt&gt; losing sync in case this clock is the current peer. By default the clock would only resync to MSF about once per day, which would almost certainly not be acceptable for NTP purposes.&lt;/p&gt;
&lt;p&gt;The driver does not force an immediate resync of the clock to MSF when it starts up to avoid excessive battery drain in case &lt;tt&gt;ntpd&lt;/tt&gt; is going to be repeatedly restarted for any reason, and also to allow enough samples of the clock to be taken for &lt;tt&gt;ntpd&lt;/tt&gt; to sync immediately to this clock (and not remain unsynchronised or to sync briefly to another configured peer, only to hop back in a few poll times, causing unnecessary disturbance). This behaviour should not cause problems because the driver will not accept the timestamps from the clock if the status flag delivered with the time code indicates that the last resync attempt was unsuccessful, so the initial timestamps will be close to reality, even if with up to a day&amp;rsquo;s clock drift in the worst case (the clock by default resyncs to MSF once per day).&lt;/p&gt;
&lt;p&gt;When alternate modes 1-3 are selected, the driver can be configured to ignore the resync requests by setting &lt;tt&gt;flag2&lt;/tt&gt; to 1. This allows clocks at the fringe of the signal to resync at night when signals are stronger.&lt;/p&gt;
&lt;p&gt;The clock has a peculiar RS232 arrangement where the transmit lines are powered from the receive lines, presumably to minimise battery drain. This arrangement has two consequences:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Your RS232 interface must drive both +ve and -ve&lt;/li&gt;
&lt;li&gt;You must (in theory) wait for an echo and a further 10ms between characters&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This driver, running on standard Sun and x86 hardware, seems to work fine; note the use of the &lt;tt&gt;send_slow()&lt;/tt&gt; routine to queue up command characters to be sent once every two seconds.&lt;/p&gt;
&lt;p&gt;Three commands are sent to the clock by this driver. Each command consists of a single letter (of which only the bottom four bits are significant), followed by a CR (ASCII 13). Each character sent to the clock should be followed by a delay to allow the unit to echo the character, and then by a further 10ms. Following the echo of the command string, there may be a response (ie in the case of the &lt;tt&gt;g&lt;/tt&gt; and &lt;tt&gt;o&lt;/tt&gt; commands below), which in the case of the &lt;tt&gt;o&lt;/tt&gt; command may be delayed by up to 1 second so as the start bit of the first byte of the response can arrive on time. The commands and their responses are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;tt&gt;g&lt;/tt&gt; CR&lt;/strong&gt;
Request for signal quality. Answer only valid during (late part of) resync to MSF signal. The response consists of two characters as follows:&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;First Bit Number&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Second Bit Number&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;parity&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;parity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;always 0&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;always 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;always 1&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;always 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;always 1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;always 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;always 0&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;always 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;always 0&lt;/td&gt;
&lt;td&gt;2&amp;ndash;0&lt;/td&gt;
&lt;td&gt;reception signal quality in the range 0&amp;ndash;5 (very poor to very good); if in the range 0&amp;ndash;2 no successful reception is to be expected. The reported value drops to zero when not resyncing, ie when first returned byte is not &lt;code&gt;3&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;always 1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0 if no reception attempt at the moment; 1 if reception attempt (ie resync) in progress&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;tt&gt;h&lt;/tt&gt; CR&lt;/strong&gt;
Request to resync to signal. Can take up from about 30s to 360s. Drains batteries so should not be used excessively. After this the clock time and date should be correct and the phase within 20ms of time as transmitted from the source signal (remember to allow for propagation time). By default the clock resyncs once per day in the late evening/early morning (presumably to catch transitions to/from daylight saving time quickly). This driver code, by default, resyncs at least once per hour to minimise clock wander.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;tt&gt;o&lt;/tt&gt; CR&lt;/strong&gt;
Request timestamp. Start bit of first byte of response is on-time, so may be delayed up to 1 second. Note that the driver will convert time to GMT, if required. The response data is as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;hours tens (hours range from 00 to 23)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hours units&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;minutes tens (minutes range from 00 to 59)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;minutes units&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;seconds tens (seconds presumed to range from 00 to 60 to allow for leap second)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;seconds units&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;day of week 1 (Monday) to 7 (Sunday)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;day of month tens (day ranges from 01 to 31)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;day of month units&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;month tens (months range from 01 to 12)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;month units&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;year tens (years range from 00 to 99)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;year units&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BST/UTC status (Ignored in WWVB version)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Bit Number&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;parity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;always 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;always 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;always 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;MSF: always 0&lt;br&gt; WWVB: Leap year indicator bit&lt;br&gt; 0 = non-leap year&lt;br&gt; 1 = leap year&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;MSF: 1 if UTC is in effect (reverse of bit 1)&lt;br&gt; WWVB: Leap second warning bit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;MSF: 1 if BST is in effect (reverse of bit 2)&lt;br&gt; WWVB: 0 if ST is in effect&lt;br&gt; 1 if DST is in effect&lt;br&gt; 1 if transition from ST with bit 0 is set to 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;MSF: 1 if BST/UTC change pending&lt;br&gt; WWVB: 0 if ST is in effect&lt;br&gt; 1 if DST is in effect&lt;br&gt; 0 if transition from DST with bit 1 is set to 0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol start=&#34;15&#34;&gt;
&lt;li&gt;clock status&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Bit Number&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;parity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;always 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;always 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;always 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt; if low battery is detected&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt; if last resync failed (though officially undefined for the MSF clock, officially defined for WWVB)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt; if at least one reception attempt was successful&lt;br&gt; MSF: since 0230&lt;br&gt; DCF: since 0300&lt;br&gt; WWVB: resets if not successful between 0300-0400&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt; if the clock has valid time&amp;mdash;reset to zero when clock is reset (eg at power-up), and set to 1 after first successful resync attempt.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The driver only accepts time from the clock if the bottom three bits of the status byte are &lt;tt&gt;011&lt;/tt&gt; or &lt;tt&gt;flag2&lt;/tt&gt; is set to 1 to ignore resync requests. For the MSF clock, if the UK parliament decides to move us to +0100/+0200 time as opposed to the current +0000/+0100 time, it is not clear what effect that will have on the time broadcast by MSF, and therefore on this driver&amp;rsquo;s usefulness.&lt;/p&gt;
&lt;p&gt;A typical &lt;tt&gt;ntp.conf&lt;/tt&gt; configuration file for this driver might be:&lt;/p&gt;
&lt;pre&gt;# hostname(n) means we expect (n) to be the stratum at which hostname runs.

#------------------------------------------------------------------------------
# SYNCHRONISATION PARTNERS
# ========================

# Default configuration (Original MSF mode)s...
server 127.127.27.0 mode 333 # ARCRON MSF radio clock
# Fudge stratum and other features as required.
# ADJUST time1 VALUE FOR YOUR HOST, CLOCK AND LOCATION!
fudge 127.127.27.0 stratum 1 time1 0.016 flag3 1
# WWVB users should change that line to:
server 127.127.27.0 mode 3 # ARCRON WWVB radio clock
fudge 127.127.27.0 stratum 1 time1 0.030 flag1 1 flag3 1

peer 11.22.33.9 # tick(1--2).
peer 11.22.33.4 # tock(3), boot/NFS server.

# This shouldn&#39;t get swept away unless left untouched for a long time.
driftfile /var/tmp/ntp.drift

#------------------------------------------------------------------------------
# RESTRICTIONS
# ============

# By default, don&#39;t trust and don&#39;t allow modifications.  Ignore in fact.
restrict default ignore notrust nomodify

# Allow others in our subnet to check us out...
restrict 11.22.33.0 mask 255.255.255.0 nomodify notrust

# Trust our peers for time.  Don&#39;t trust others in case they are insane.
restrict 127.127.27.0 nomodify
restrict 11.22.33.4 nomodify
restrict 11.22.33.9 nomodify

# Allow anything from the local host.
restrict 127.0.0.1&lt;/pre&gt;
&lt;p&gt;There are a few &lt;tt&gt;#define&lt;/tt&gt;s in the code that you might wish to play with:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;tt&gt;ARCRON_KEEN&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;With this defined, the code is relatively trusting of the clock, and assumes that you will have the clock as one of a few time sources, so will bend over backwards to use the time from the clock when available and avoid &lt;tt&gt;ntpd&lt;/tt&gt; dropping sync from the clock where possible. You may wish to undefine this, especially if you have better sources of time or your reception is ropey. However, there are many checks built in even with this flag defined.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;ARCRON_MULTIPLE_SAMPLES&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;When is defined, we regard each character in the returned timecode as at a known delay from the start of the second, and use the smallest (most negative) offset implied by any such character, ie with the smallest kernel-induced display, and use that. This helps to reduce jitter and spikes.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;ARCRON_LEAPSECOND_KEEN&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;When is defined, we try to do a resync to MSF as soon as possible in the first hour of the morning of the first day of the first and seventh months, ie just after a leap-second insertion or deletion would happen if it is going to. This should help compensate for the fact that this clock does not continuously sample MSF, which compounds the fact that MSF itself gives no warning of an impending leap-second event. This code did not seem functional at the leap-second insertion of 30th June 1997 so is by default disabled.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;PRECISION&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Currently set to &lt;tt&gt;-4&lt;/tt&gt;, but you may wish to set it to &lt;tt&gt;-5&lt;/tt&gt; if you are more conservative, or to &lt;tt&gt;-6&lt;/tt&gt; if you have particularly good experience with the clock and you live on the edge. Note that the &lt;tt&gt;flag3&lt;/tt&gt; fudge value will improve the reported dispersion one notch if clock signal quality is known good. So maybe just leave this alone.&lt;/dd&gt;
&lt;/dl&gt;
&lt;hr&gt;
&lt;h4 id=&#34;monitor-data&#34;&gt;Monitor Data&lt;/h4&gt;
&lt;p&gt;Each timecode is written to the &lt;tt&gt;clockstats&lt;/tt&gt; file with a signal quality value appended (&lt;code&gt;0&lt;/code&gt;-&lt;code&gt;5&lt;/code&gt; as reported by the clock, or &lt;code&gt;6&lt;/code&gt; for unknown).&lt;/p&gt;
&lt;p&gt;Each resync and result (plus gaining or losing MSF sync) is logged to the system log at level &lt;tt&gt;LOG_NOTICE&lt;/tt&gt;; note that each resync drains the unit&amp;rsquo;s batteries, so the syslog entry seems justified.&lt;/p&gt;
&lt;p&gt;Syslog entries are of the form:&lt;/p&gt;
&lt;pre&gt;May 10 10:15:24 oolong ntpd[615]: ARCRON: unit 0: sending resync command
May 10 10:17:32 oolong ntpd[615]: ARCRON: sync finished, signal quality 5: OK, will use clock
May 10 11:13:01 oolong ntpd[615]: ARCRON: unit 0: sending resync command
May 10 11:14:06 oolong ntpd[615]: ARCRON: sync finished, signal quality -1: UNKNOWN, will use clock anyway
May 10 11:41:49 oolong ntpd[615]: ARCRON: unit 0: sending resync command
May 10 11:43:57 oolong ntpd[615]: ARCRON: sync finished, signal quality 5: OK, will use clock
May 10 12:39:26 oolong ntpd[615]: ARCRON: unit 0: sending resync command
May 10 12:41:34 oolong ntpd[615]: ARCRON: sync finished, signal quality 3: OK, will use clock&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;fudge-factors&#34;&gt;Fudge Factors&lt;/h4&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;tt&gt;mode 0 | 1 | 2 | 3&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Specifies the clock hardware model. This parameter is optional, it defaults to the original mode of operation.&lt;/dd&gt;
&lt;dd&gt;Supported modes of operation:&lt;/dd&gt;
&lt;dd&gt;0 - Default, Original MSF&lt;/dd&gt;
&lt;dd&gt;1 - Updated MSF&lt;/dd&gt;
&lt;dd&gt;2 - New DCF77&lt;/dd&gt;
&lt;dd&gt;3 - New WWVB&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;time1 _time_&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Specifies the time offset calibration factor, in seconds and fraction, with default 0.0. On a Sun SparcStation 1 running SunOS 4.1.3_U1, with the receiver in London, a value of 0.020 (20ms) seems to be appropriate.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;time2 _time_&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Not currently used by this driver.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;stratum _number_&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Specifies the driver stratum, in decimal from 0 to 15, with default 2. It is suggested that the clock be not be fudged higher than stratum 1 so that it is used a backup time source rather than a primary when more accurate sources are available.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;refid _string_&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Specifies the driver reference identifier, an ASCII string from one to four characters, with default &lt;tt&gt;MSFa&lt;/tt&gt;. When used in modes 1-3, the driver will report either &lt;tt&gt;MSF&lt;/tt&gt;, &lt;tt&gt;DCF&lt;/tt&gt;, or &lt;tt&gt;WWVB&lt;/tt&gt; respectively.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;flag1 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;(Modes 1-3) If set to 0 (the default), the clock is set to UTC time. If set to 1, the clock is set to localtime.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;flag2 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;(Modes 1-3) If set to 0 (the default), the clock will be forced to resync approximately every hour. If set to 1, the clock will resync per normal operations (approximately midnight).&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;flag3 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;If set to 1, better precision is reported (and thus lower dispersion) while clock&#39;s received signal quality is known to be good.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;flag4 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Not used by this driver.&lt;/dd&gt;
&lt;/dl&gt;
&lt;hr&gt;
&lt;h4 id=&#34;additional-information&#34;&gt;Additional Information&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;/archives/4.2.8-series/refclock&#34;&gt;Reference Clock Drivers&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;http://www2.exnet.com/NTP/ARC/ARC.html&#34;&gt;ARC Rugby MSF Receiver&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Association Management</title>
      <link>/archives/4.1.0/assoc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.1.0/assoc/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice51.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Make sure who your friends are.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.0/assoc/#association-modes&#34;&gt;Association Modes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.0/assoc/#clientserver-mode&#34;&gt;Client/Server Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.0/assoc/#symmetric-activepassive-mode&#34;&gt;Symmetric Active/Passive Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.0/assoc/#broadcast-mode&#34;&gt;Broadcast Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.0/assoc/#ip-multicast-support&#34;&gt;IP Multicast Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.0/assoc/#multicasting&#34;&gt;Multicasting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.0/assoc/#manycasting&#34;&gt;Manycasting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.0/assoc/#burst-modes&#34;&gt;Burst Modes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;association-modes&#34;&gt;Association Modes&lt;/h4&gt;
&lt;p&gt;NTP Version 4 (NTPv4) incorporates new features and refinements to the NTP Version 3 (NTPv3) algorithms; however, it continues the tradition of backwards compatibility with older versions. A number of new operating modes for automatic server discovery and improved accuracy in occasionally connected networks are provided. Following is an overview of the new features; additional information is available on the &lt;a href=&#34;/archives/4.1.0/confopt&#34;&gt;Configuration Options&lt;/a&gt; and &lt;a href=&#34;/archives/4.1.0/authopt&#34;&gt;Authentication Options&lt;/a&gt; pages and in the papers, reports, memoranda and briefings at &lt;a href=&#34;http://www.ntp.org&#34;&gt;www.ntp.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are two types of associations: persistent associations, which result from configuration file commands, and ephemeral associations, which result from protocol operations described below. A persistent association is never demobilized, although it may become dormant when the associated server becomes unreachable. An ephemeral association is mobilized when a message arrives from a server; for instance, a symmetric passive association is mobilized upon arrival of a symmetric active message. A broadcast client association is mobilized upon arrival of a broadcast server message, while a manycast client association is mobilized upon arrival of a manycast server message.&lt;/p&gt;
&lt;p&gt;Ordinarily, successful mobilization of an ephemeral association requires the server to be cryptographically authenticated to the dependent client. This can be done using either symmetric-key or public-key cryptography, as described in the &lt;a href=&#34;/archives/4.1.0/authopt&#34;&gt;Authentication Options&lt;/a&gt; page. The cryptographic means insure an unbroken chain of trust between the dependent client and the primary servers at the root of the synchronization subnet. We call this chain the &lt;em&gt;provenance&lt;/em&gt; of the client and define new vocabulary as to proventicate a client or provide proventic credentials. Once mobilized, ephemeral associations are demobilized when either (a) the server becomes unreachable or (b) the server refreshes the key media without notifying the client.&lt;/p&gt;
&lt;p&gt;There are three principal modes of operation: client/server, symmetric active/passive and broadcast. In addition, there are two modes using IP multicast support: multicast and manycast. These modes are selected based on the scope of service, intended flow of time and proventic values and means of configuration. Following is a summary of the operations in each mode.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;clientserver-mode&#34;&gt;Client/Server Mode&lt;/h4&gt;
&lt;p&gt;Client/server mode is probably the most common configuration in the Internet today. It operates in the classic remote-procedure-call (RPC) paradigm with stateless servers. In this mode a client sends a request to the server and expects a reply at some future time. In some contexts this would be described as a &amp;ldquo;pull&amp;rdquo; operation, in that the client pulls the time and proventic values from the server. A client is configured in client mode using the &lt;tt&gt;server&lt;/tt&gt; (sic) command and specifying the server IPv4 or IPv6 DNS name or address; the server requires no prior configuration. The original NTPv3 authentication scheme is applicable in this mode, as well as the new NTPv4 Autokey proventication scheme. In addition, two burst modes described below can be used in appropriate cases.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;symmetric-activepassive-mode&#34;&gt;Symmetric Active/Passive Mode&lt;/h4&gt;
&lt;p&gt;Symmetric active/passive mode is intended for configurations where a clique of low-stratum peers operate as mutual backups for each other. Each peer operates with one or more primary reference sources, such as a radio clock, or a subset of secondary servers known to be reliable and proventicated. Should one of the peers lose all reference sources or simply cease operation, the other peers will automatically reconfigure so that time and proventication values can flow from the surviving peers to all the others in the clique. In some contexts this would be described as a &amp;ldquo;push-pull&amp;rdquo; operation, in that the peer either pulls or pushes the time and proventic values depending on the particular configuration.&lt;/p&gt;
&lt;p&gt;Symmetric peers operate with their sources in some NTP mode and with each other in symmetric mode. A peer is configured in symmetric active mode using the &lt;tt&gt;peer&lt;/tt&gt; command and specifying the other peer DNS name or address. The other peer can also be configured in symmetric active mode in a similar way. However, if the other peer is not specifically configured in this way, a symmetric passive association is mobilized upon arrival of a symmetric active message. Since an intruder can impersonate a symmetric active peer and inject false time values, symmetric mode should always be cryptographically validated. The original NTPv3 authentication scheme is applicable in this mode, as well as the new NTPv4 Autokey proventication scheme.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;broadcast-mode&#34;&gt;Broadcast Mode&lt;/h4&gt;
&lt;p&gt;Broadcast mode is intended for configurations involving one or a few servers and a possibly very large client population. A broadcast server is configured using the &lt;tt&gt;broadcast&lt;/tt&gt; command and a local subnet address. A broadcast client is configured using the &lt;tt&gt;broadcastclient&lt;/tt&gt; command, in which case it responds to broadcast messages received on any interface. Since an intruder can impersonate a broadcast server and inject false time values, this mode should always be cryptographically validated. The original NTPv3 authentication scheme is applicable in this mode, as well as the new NTPv4 Autokey proventication scheme.&lt;/p&gt;
&lt;p&gt;The server generates broadcast messages continuously at intervals specified by the &lt;tt&gt;minpoll&lt;/tt&gt; keyword and with a time-to-live span specified by the &lt;tt&gt;ttl&lt;/tt&gt; keyword. A NTPv4 broadcast client responds to the first proventicated message received by waiting a short interval randomized over the &lt;tt&gt;minpoll&lt;/tt&gt; interval, in order to avoid implosion at the server. Then, the client polls the server in burst mode in order to reliably set the host clock and validate the source. This normally results in a volley of eight client/server cycles over a 30-s interval during which both the synchronization and cryptographic protocols run concurrently. When the next broadcast message is received after the volley, the client computes the offset between the apparent broadcast time and the (unicast) client time. This offset is used to compensate for the propagation time between the broadcast server and client. Once the offset is computed, the server continues as before and the client sends no further messages.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;ip-multicast-support&#34;&gt;IP Multicast Support&lt;/h4&gt;
&lt;p&gt;Broadcast mode in both NTPv3 and NTPv4 is limited to directly connected subnets such as Ethernets which support broadcast technology. Ordinarily, this technology does not operate beyond the first hop router or gateway. Where service is intended beyond the local subnet, IP multicasting can be used where supported by the operating system and the routers support the Internet Group Management Protocol (IGMP). Most current kernels and available routers do support IP multicast technology, although service providers are sometimes reluctant to deploy it.&lt;/p&gt;
&lt;p&gt;A general discussion of IP multicast technology is beyond the scope here. In simple terms a host or router sending to a IP multicast group (class D) address expects all hosts or routers listening on this address to receive the message. There is no intrinsic limit on the number of senders or receivers and senders can be receivers and vice versa. The IANA has assigned multicast group address 224.0.1.1 to NTP, but this address should be used only where the multicast span can be reliably constrained to protect neighbor networks. In general, administratively scoped group addresses should be used, as described in RFC-2365, or GLOP group addresses, as described in RFC-2770.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;multicasting&#34;&gt;Multicasting&lt;/h4&gt;
&lt;p&gt;IP multicasting can be used to extend the scope of a timekeeping subnet in two ways: multicasting and manycasting. A multicast client is configured using the &lt;tt&gt;broadcast&lt;/tt&gt; command, but with a multicast group (class D) address instead of a local subnet broadcast address. However, there is a subtle difference between broadcasting and multicasting. Broadcasting is specific to each interface and local subnet address. If more than one interface is attached to a machine, a separate &lt;tt&gt;broadcast&lt;/tt&gt; command applies to each one separately. This provides a way to limit exposure in a firewall, for example.&lt;/p&gt;
&lt;p&gt;IP multicasting is a different paradigm. A multicast message has the same format as a broadcast message and is configured with the same &lt;tt&gt;broadcast&lt;/tt&gt; command, but with a multicast group address instead of a local subnet address. By design, multicast messages travel from the sender via a shortest-path or shared tree to the receivers, which may require these messages emit from one or all interfaces, but carry a common source address. However, it is possible to configure multiple multicast group addresses using multiple &lt;tt&gt;broadcast&lt;/tt&gt; commands. Other than these particulars, multicast messages are processed just like broadcast messages. Note that the calibration feature in broadcast mode is extremely important, since IP multicast messages can travel far different paths through the IP routing fabric than ordinary IP unicast messages.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;manycasting&#34;&gt;Manycasting&lt;/h4&gt;
&lt;p&gt;Manycasting is a automatic discovery and configuration paradigm new to NTPv4. It is intended as a means for a multicast client to troll the nearby network neighborhood to find cooperating manycast servers, validate them using cryptographic means and evaluate their time values with respect to other servers that might be lurking in the vicinity. The intended result is that each manycast client mobilizes client associations with the &amp;ldquo;best&amp;rdquo; three of the available manycast servers, yet automatically reconfigures to sustain this number of servers should one or another fail.&lt;/p&gt;
&lt;p&gt;Note that the manycasting paradigm does not coincide with the anycasting paradigm described in RFC-1546, which is designed to find a single server from a clique of servers providing the same service. The manycasting paradigm is designed to find a plurality of redundant servers, in this case willing NTP servers.&lt;/p&gt;
&lt;p&gt;A persistent manycast client association is configured using the &lt;tt&gt;server&lt;/tt&gt; command, but with a multicast (class D) group address instead of an ordinary IP (class A, B, C) address. It sends client mode messages to this address at the maximum feasible poll interval and minimum feasible time-to-live hops, depending on how many servers have already been found. There can be as many manycast client associations as different group addresss, each one serving as a template for a future ephemeral client/server mode association.&lt;/p&gt;
&lt;p&gt;Manycast servers configured with the &lt;tt&gt;manycastserver&lt;/tt&gt; command listen on the specified group address for manycast client messages. Note the distinction between manycast client, which is configured with a &lt;tt&gt;server&lt;/tt&gt; command, and manycast server, which is configured with a &lt;tt&gt;manycastserver&lt;/tt&gt; command. If a manycast server is in range of the current time-to-live and is itself synchronized to a valid source and operating at a stratum level equal to or lower than the manycast client, it replies to the manycast client message with an ordinary server mode message.&lt;/p&gt;
&lt;p&gt;The manycast client receiving this message mobilizes an ephemeral client association as in ordinary client/server mode according to the matching manycast client template. Then, the client polls the server at its unicast address in burst mode in order to reliably set the host clock and validate the source. This normally results in a volley of eight client/server cycles over a 30-s interval during which both the synchronization and cryptographic protocols run concurrently. Following the volley, the client runs the NTP intersection and clustering algorithms, which act to discard all but the best three associations. The surviving associations then continue in ordinary client/server mode.&lt;/p&gt;
&lt;p&gt;The manycast client polling program is designed to reduce as much as possible the volume of messages and the effects of implosion due to near-simultaneous arrival of manycast server messages. The program uses a poll interval eight times the system poll interval, which starts out at the &lt;tt&gt;minpoll&lt;/tt&gt; value and under normal circumstances increases gradually to the &lt;tt&gt;maxpolll&lt;/tt&gt; value. Initially, the time-to-live is set at one hop. At each retransmission the time-to-live is incremented by one until at least three manycast servers are found. Further retransmissions use the same time-to-live value.&lt;/p&gt;
&lt;p&gt;If less than three servers are found when the time-to-live has reached the maximum specified by the &lt;tt&gt;ttl&lt;/tt&gt; keyword, the poll interval is doubled. For each transmission after that, the poll interval is doubled again until reaching the maximum of eight times the value specified by the &lt;tt&gt;maxpoll&lt;/tt&gt; keyword. Further transmissions use the same poll interval and time-to-live values.&lt;/p&gt;
&lt;p&gt;The above scenario happens for each manycast client message, which repeats at the designated poll interval. However, once the ephemeral client association is mobilized, subsequent manycast server replies are discarded, since they will fail the message digest test. If during a poll interval the number of client associations falls below three, all manycast client prototype associations are reset to the initial poll interval and time-to-live values and operation resumes from the beginning. It is important in manycast mode to avoid frequent manycast client messages, since each one requires all manycast servers in range to respond. The result could well be an implosion, either minor or major, depending on the number of servers in range. The recommended value for &lt;tt&gt;maxpoll&lt;/tt&gt; is 12 (4,096 s) and for &lt;tt&gt;ttl&lt;/tt&gt; is 7.&lt;/p&gt;
&lt;p&gt;It is possible and frequently useful to configure a host as both a manycast client and manycast server. A number of hosts configured this way and sharing a common group address will automatically organize themselves in an optimum configuration based on the smallest synchronization distance computed by the NTP mitigation algorithms. For example, consider an NTP subnet of two primary servers and maybe a dozen dependent clients. All servers and clients are configured as both multicast client and multicast server with multicast group address 239.1.1.1. In addition, the primary servers are configured for a primary reference source such as a GPS receiver. Once operations have stabilized in this scenario, the primary servers will affiliate with the primary reference source and each other, since they both operate at the same stratum (1), but not with any client, since clients operate at a higher stratum. The clients will find both primary servers and in addition, one of their own at the minimum synchronization distance. If one of the primary servers loses its GPS receiver, it will continue to operate as a client and other clients will time out the corresponding association and re-associate accordingly.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;burst-modes&#34;&gt;Burst Modes&lt;/h4&gt;
&lt;p&gt;There are two burst modes that can be enabled in client/server mode using the &lt;tt&gt;iburst&lt;/tt&gt; and &lt;tt&gt;burst&lt;/tt&gt; keywords. In either mode a single poll initiates a burst of eight client messages at intervals randomized over the range 1-4 s. However, the interval between the first and second messages is increased to about 16 s in order for a dialup modem to complete a call, if necessary. Received server messages update the NTPv4 clock filter, which selects the best (most accurate) time values. When the last client message in the burst is sent, the next received server message updates the system variables and sets the system clock in the usual manner, as if only a single client/server cycle had occurred. The result is not only a rapid and reliable setting of the system clock, but a considerable reduction in network jitter.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;iburst&lt;/tt&gt; keyword can be configured for cases where it is important to set the clock quickly when an association is first mobilized or first becomes reachable or when the network attachment requires an initial calling or training procedure. The burst is initiated only when the server first becomes reachable and results in good accuracy with intermittent connections typical of PPP and ISDN services. Outlyers due to initial dial-up delays, etc., are avoided and the client sets the clock within 30 s after the first message.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;burst&lt;/tt&gt; keyword can be configured in cases of excessive network jitter or when the network attachment requires an initial calling or training procedure. The burst is initiated at each poll interval when the server is reachable. The burst does produce additional network overhead and can cause trouble if used indiscriminately. It should only be used where the poll interval is expected to settle to values at or above 1024 s.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Association Management</title>
      <link>/archives/4.1.1/assoc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.1.1/assoc/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice51.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Make sure who your friends are.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.1/assoc/#association-modes&#34;&gt;Association Modes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.1/assoc/#clientserver-mode&#34;&gt;Client/Server Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.1/assoc/#symmetric-activepassive-mode&#34;&gt;Symmetric Active/Passive Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.1/assoc/#broadcast-mode&#34;&gt;Broadcast Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.1/assoc/#ip-multicast-support&#34;&gt;IP Multicast Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.1/assoc/#multicasting&#34;&gt;Multicasting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.1/assoc/#manycasting&#34;&gt;Manycasting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.1/assoc/#burst-modes&#34;&gt;Burst Modes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;association-modes&#34;&gt;Association Modes&lt;/h4&gt;
&lt;p&gt;NTP Version 4 (NTPv4) incorporates new features and refinements to the NTP Version 3 (NTPv3) algorithms; however, it continues the tradition of backwards compatibility with older versions. A number of new operating modes for automatic server discovery and improved accuracy in occasionally connected networks are provided. Following is an overview of the new features; additional information is available on the &lt;a href=&#34;/archives/4.1.1/confopt&#34;&gt;Configuration Options&lt;/a&gt; and &lt;a href=&#34;/archives/4.1.1/authopt&#34;&gt;Authentication Options&lt;/a&gt; pages and in the papers, reports, memoranda and briefings at &lt;a href=&#34;http://www.ntp.org&#34;&gt;www.ntp.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are two types of associations: persistent associations, which result from configuration file commands, and ephemeral associations, which result from protocol operations described below. A persistent association is never demobilized, although it may become dormant when the associated server becomes unreachable. An ephemeral association is mobilized when a message arrives from a server; for instance, a symmetric passive association is mobilized upon arrival of a symmetric active message. A broadcast client association is mobilized upon arrival of a broadcast server message, while a manycast client association is mobilized upon arrival of a manycast server message.&lt;/p&gt;
&lt;p&gt;Ordinarily, successful mobilization of an ephemeral association requires the server to be cryptographically authenticated to the dependent client. This can be done using either symmetric-key or public-key cryptography, as described in the &lt;a href=&#34;/archives/4.1.1/authopt&#34;&gt;Authentication Options&lt;/a&gt; page. The cryptographic means insure an unbroken chain of trust between the dependent client and the primary servers at the root of the synchronization subnet. We call this chain the &lt;em&gt;provenance&lt;/em&gt; of the client and define new vocabulary as to proventicate a client or provide proventic credentials. Once mobilized, ephemeral associations are demobilized when either (a) the server becomes unreachable or (b) the server refreshes the key media without notifying the client.&lt;/p&gt;
&lt;p&gt;There are three principal modes of operation: client/server, symmetric active/passive and broadcast. In addition, there are two modes using IP multicast support: multicast and manycast. These modes are selected based on the scope of service, intended flow of time and proventic values and means of configuration. Following is a summary of the operations in each mode.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;clientserver-mode&#34;&gt;Client/Server Mode&lt;/h4&gt;
&lt;p&gt;Client/server mode is probably the most common configuration in the Internet today. It operates in the classic remote-procedure-call (RPC) paradigm with stateless servers. In this mode a client sends a request to the server and expects a reply at some future time. In some contexts this would be described as a &amp;ldquo;pull&amp;rdquo; operation, in that the client pulls the time and proventic values from the server. A client is configured in client mode using the &lt;tt&gt;server&lt;/tt&gt; (sic) command and specifying the server IPv4 or IPv6 DNS name or address; the server requires no prior configuration. The original NTPv3 authentication scheme is applicable in this mode, as well as the new NTPv4 Autokey proventication scheme. In addition, two burst modes described below can be used in appropriate cases.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;symmetric-activepassive-mode&#34;&gt;Symmetric Active/Passive Mode&lt;/h4&gt;
&lt;p&gt;Symmetric active/passive mode is intended for configurations where a clique of low-stratum peers operate as mutual backups for each other. Each peer operates with one or more primary reference sources, such as a radio clock, or a subset of secondary servers known to be reliable and proventicated. Should one of the peers lose all reference sources or simply cease operation, the other peers will automatically reconfigure so that time and proventication values can flow from the surviving peers to all the others in the clique. In some contexts this would be described as a &amp;ldquo;push-pull&amp;rdquo; operation, in that the peer either pulls or pushes the time and proventic values depending on the particular configuration.&lt;/p&gt;
&lt;p&gt;Symmetric peers operate with their sources in some NTP mode and with each other in symmetric mode. A peer is configured in symmetric active mode using the &lt;tt&gt;peer&lt;/tt&gt; command and specifying the other peer DNS name or address. The other peer can also be configured in symmetric active mode in a similar way. However, if the other peer is not specifically configured in this way, a symmetric passive association is mobilized upon arrival of a symmetric active message. Since an intruder can impersonate a symmetric active peer and inject false time values, symmetric mode should always be cryptographically validated. The original NTPv3 authentication scheme is applicable in this mode, as well as the new NTPv4 Autokey proventication scheme.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;broadcast-mode&#34;&gt;Broadcast Mode&lt;/h4&gt;
&lt;p&gt;Broadcast mode is intended for configurations involving one or a few servers and a possibly very large client population. A broadcast server is configured using the &lt;tt&gt;broadcast&lt;/tt&gt; command and a local subnet address. A broadcast client is configured using the &lt;tt&gt;broadcastclient&lt;/tt&gt; command, in which case it responds to broadcast messages received on any interface. Since an intruder can impersonate a broadcast server and inject false time values, this mode should always be cryptographically validated. The original NTPv3 authentication scheme is applicable in this mode, as well as the new NTPv4 Autokey proventication scheme.&lt;/p&gt;
&lt;p&gt;The server generates broadcast messages continuously at intervals specified by the &lt;tt&gt;minpoll&lt;/tt&gt; keyword and with a time-to-live span specified by the &lt;tt&gt;ttl&lt;/tt&gt; keyword. A NTPv4 broadcast client responds to the first proventicated message received by waiting a short interval randomized over the &lt;tt&gt;minpoll&lt;/tt&gt; interval, in order to avoid implosion at the server. Then, the client polls the server in burst mode in order to reliably set the host clock and validate the source. This normally results in a volley of eight client/server cycles over a 30-s interval during which both the synchronization and cryptographic protocols run concurrently. When the next broadcast message is received after the volley, the client computes the offset between the apparent broadcast time and the (unicast) client time. This offset is used to compensate for the propagation time between the broadcast server and client. Once the offset is computed, the server continues as before and the client sends no further messages.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;ip-multicast-support&#34;&gt;IP Multicast Support&lt;/h4&gt;
&lt;p&gt;Broadcast mode in both NTPv3 and NTPv4 is limited to directly connected subnets such as Ethernets which support broadcast technology. Ordinarily, this technology does not operate beyond the first hop router or gateway. Where service is intended beyond the local subnet, IP multicasting can be used where supported by the operating system and the routers support the Internet Group Management Protocol (IGMP). Most current kernels and available routers do support IP multicast technology, although service providers are sometimes reluctant to deploy it.&lt;/p&gt;
&lt;p&gt;A general discussion of IP multicast technology is beyond the scope here. In simple terms a host or router sending to a IP multicast group (class D) address expects all hosts or routers listening on this address to receive the message. There is no intrinsic limit on the number of senders or receivers and senders can be receivers and vice versa. The IANA has assigned multicast group address 224.0.1.1 to NTP, but this address should be used only where the multicast span can be reliably constrained to protect neighbor networks. In general, administratively scoped group addresses should be used, as described in RFC-2365, or GLOP group addresses, as described in RFC-2770.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;multicasting&#34;&gt;Multicasting&lt;/h4&gt;
&lt;p&gt;IP multicasting can be used to extend the scope of a timekeeping subnet in two ways: multicasting and manycasting. A multicast client is configured using the &lt;tt&gt;broadcast&lt;/tt&gt; command, but with a multicast group (class D) address instead of a local subnet broadcast address. However, there is a subtle difference between broadcasting and multicasting. Broadcasting is specific to each interface and local subnet address. If more than one interface is attached to a machine, a separate &lt;tt&gt;broadcast&lt;/tt&gt; command applies to each one separately. This provides a way to limit exposure in a firewall, for example.&lt;/p&gt;
&lt;p&gt;IP multicasting is a different paradigm. A multicast message has the same format as a broadcast message and is configured with the same &lt;tt&gt;broadcast&lt;/tt&gt; command, but with a multicast group address instead of a local subnet address. By design, multicast messages travel from the sender via a shortest-path or shared tree to the receivers, which may require these messages emit from one or all interfaces, but carry a common source address. However, it is possible to configure multiple multicast group addresses using multiple &lt;tt&gt;broadcast&lt;/tt&gt; commands. Other than these particulars, multicast messages are processed just like broadcast messages. Note that the calibration feature in broadcast mode is extremely important, since IP multicast messages can travel far different paths through the IP routing fabric than ordinary IP unicast messages.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;manycasting&#34;&gt;Manycasting&lt;/h4&gt;
&lt;p&gt;Manycasting is a automatic discovery and configuration paradigm new to NTPv4. It is intended as a means for a multicast client to troll the nearby network neighborhood to find cooperating manycast servers, validate them using cryptographic means and evaluate their time values with respect to other servers that might be lurking in the vicinity. The intended result is that each manycast client mobilizes client associations with the &amp;ldquo;best&amp;rdquo; three of the available manycast servers, yet automatically reconfigures to sustain this number of servers should one or another fail.&lt;/p&gt;
&lt;p&gt;Note that the manycasting paradigm does not coincide with the anycasting paradigm described in RFC-1546, which is designed to find a single server from a clique of servers providing the same service. The manycasting paradigm is designed to find a plurality of redundant servers, in this case willing NTP servers.&lt;/p&gt;
&lt;p&gt;A persistent manycast client association is configured using the &lt;tt&gt;server&lt;/tt&gt; command, but with a multicast (class D) group address instead of an ordinary IP (class A, B, C) address. It sends client mode messages to this address at the maximum feasible poll interval and minimum feasible time-to-live hops, depending on how many servers have already been found. There can be as many manycast client associations as different group addresss, each one serving as a template for a future ephemeral client/server mode association.&lt;/p&gt;
&lt;p&gt;Manycast servers configured with the &lt;tt&gt;manycastserver&lt;/tt&gt; command listen on the specified group address for manycast client messages. Note the distinction between manycast client, which is configured with a &lt;tt&gt;server&lt;/tt&gt; command, and manycast server, which is configured with a &lt;tt&gt;manycastserver&lt;/tt&gt; command. If a manycast server is in range of the current time-to-live and is itself synchronized to a valid source and operating at a stratum level equal to or lower than the manycast client, it replies to the manycast client message with an ordinary server mode message.&lt;/p&gt;
&lt;p&gt;The manycast client receiving this message mobilizes an ephemeral client association as in ordinary client/server mode according to the matching manycast client template. Then, the client polls the server at its unicast address in burst mode in order to reliably set the host clock and validate the source. This normally results in a volley of eight client/server cycles over a 30-s interval during which both the synchronization and cryptographic protocols run concurrently. Following the volley, the client runs the NTP intersection and clustering algorithms, which act to discard all but the best three associations. The surviving associations then continue in ordinary client/server mode.&lt;/p&gt;
&lt;p&gt;The manycast client polling program is designed to reduce as much as possible the volume of messages and the effects of implosion due to near-simultaneous arrival of manycast server messages. The program uses a poll interval eight times the system poll interval, which starts out at the &lt;tt&gt;minpoll&lt;/tt&gt; value and under normal circumstances increases gradually to the &lt;tt&gt;maxpolll&lt;/tt&gt; value. Initially, the time-to-live is set at one hop. At each retransmission the time-to-live is incremented by one until at least three manycast servers are found. Further retransmissions use the same time-to-live value.&lt;/p&gt;
&lt;p&gt;If less than three servers are found when the time-to-live has reached the maximum specified by the &lt;tt&gt;ttl&lt;/tt&gt; keyword, the poll interval is doubled. For each transmission after that, the poll interval is doubled again until reaching the maximum of eight times the value specified by the &lt;tt&gt;maxpoll&lt;/tt&gt; keyword. Further transmissions use the same poll interval and time-to-live values.&lt;/p&gt;
&lt;p&gt;The above scenario happens for each manycast client message, which repeats at the designated poll interval. However, once the ephemeral client association is mobilized, subsequent manycast server replies are discarded, since they will fail the message digest test. If during a poll interval the number of client associations falls below three, all manycast client prototype associations are reset to the initial poll interval and time-to-live values and operation resumes from the beginning. It is important in manycast mode to avoid frequent manycast client messages, since each one requires all manycast servers in range to respond. The result could well be an implosion, either minor or major, depending on the number of servers in range. The recommended value for &lt;tt&gt;maxpoll&lt;/tt&gt; is 12 (4,096 s) and for &lt;tt&gt;ttl&lt;/tt&gt; is 7.&lt;/p&gt;
&lt;p&gt;It is possible and frequently useful to configure a host as both a manycast client and manycast server. A number of hosts configured this way and sharing a common group address will automatically organize themselves in an optimum configuration based on the smallest synchronization distance computed by the NTP mitigation algorithms. For example, consider an NTP subnet of two primary servers and maybe a dozen dependent clients. All servers and clients are configured as both multicast client and multicast server with multicast group address 239.1.1.1. In addition, the primary servers are configured for a primary reference source such as a GPS receiver. Once operations have stabilized in this scenario, the primary servers will affiliate with the primary reference source and each other, since they both operate at the same stratum (1), but not with any client, since clients operate at a higher stratum. The clients will find both primary servers and in addition, one of their own at the minimum synchronization distance. If one of the primary servers loses its GPS receiver, it will continue to operate as a client and other clients will time out the corresponding association and re-associate accordingly.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;burst-modes&#34;&gt;Burst Modes&lt;/h4&gt;
&lt;p&gt;There are two burst modes that can be enabled in client/server mode using the &lt;tt&gt;iburst&lt;/tt&gt; and &lt;tt&gt;burst&lt;/tt&gt; keywords. In either mode a single poll initiates a burst of eight client messages at intervals randomized over the range 1-4 s. However, the interval between the first and second messages is increased to about 16 s in order for a dialup modem to complete a call, if necessary. Received server messages update the NTPv4 clock filter, which selects the best (most accurate) time values. When the last client message in the burst is sent, the next received server message updates the system variables and sets the system clock in the usual manner, as if only a single client/server cycle had occurred. The result is not only a rapid and reliable setting of the system clock, but a considerable reduction in network jitter.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;iburst&lt;/tt&gt; keyword can be configured for cases where it is important to set the clock quickly when an association is first mobilized or first becomes reachable or when the network attachment requires an initial calling or training procedure. The burst is initiated only when the server first becomes reachable and results in good accuracy with intermittent connections typical of PPP and ISDN services. Outlyers due to initial dial-up delays, etc., are avoided and the client sets the clock within 30 s after the first message.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;burst&lt;/tt&gt; keyword can be configured in cases of excessive network jitter or when the network attachment requires an initial calling or training procedure. The burst is initiated at each poll interval when the server is reachable. The burst does produce additional network overhead and can cause trouble if used indiscriminately. It should only be used where the poll interval is expected to settle to values at or above 1024 s.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Association Management</title>
      <link>/archives/4.1.2/assoc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.1.2/assoc/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice51.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Make sure who your friends are.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.2/assoc/#association-modes&#34;&gt;Association Modes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.2/assoc/#clientserver-mode&#34;&gt;Client/Server Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.2/assoc/#symmetric-activepassive-mode&#34;&gt;Symmetric Active/Passive Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.2/assoc/#broadcast-mode&#34;&gt;Broadcast Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.2/assoc/#ip-multicast-support&#34;&gt;IP Multicast Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.2/assoc/#multicasting&#34;&gt;Multicasting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.2/assoc/#manycasting&#34;&gt;Manycasting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.2/assoc/#burst-modes&#34;&gt;Burst Modes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;association-modes&#34;&gt;Association Modes&lt;/h4&gt;
&lt;p&gt;NTP Version 4 (NTPv4) incorporates new features and refinements to the NTP Version 3 (NTPv3) algorithms; however, it continues the tradition of backwards compatibility with older versions. A number of new operating modes for automatic server discovery and improved accuracy in occasionally connected networks are provided. Following is an overview of the new features; additional information is available on the &lt;a href=&#34;/archives/4.1.2/confopt&#34;&gt;Configuration Options&lt;/a&gt; and &lt;a href=&#34;/archives/4.1.2/authopt&#34;&gt;Authentication Options&lt;/a&gt; pages and in the papers, reports, memoranda and briefings at &lt;a href=&#34;http://www.ntp.org&#34;&gt;www.ntp.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are two types of associations: persistent associations, which result from configuration file commands, and ephemeral associations, which result from protocol operations described below. A persistent association is never demobilized, although it may become dormant when the associated server becomes unreachable. An ephemeral association is mobilized when a message arrives from a server; for instance, a symmetric passive association is mobilized upon arrival of a symmetric active message. A broadcast client association is mobilized upon arrival of a broadcast server message, while a manycast client association is mobilized upon arrival of a manycast server message.&lt;/p&gt;
&lt;p&gt;Ordinarily, successful mobilization of an ephemeral association requires the server to be cryptographically authenticated to the dependent client. This can be done using either symmetric-key or public-key cryptography, as described in the &lt;a href=&#34;/archives/4.1.2/authopt&#34;&gt;Authentication Options&lt;/a&gt; page. The cryptographic means insure an unbroken chain of trust between the dependent client and the primary servers at the root of the synchronization subnet. We call this chain the &lt;em&gt;provenance&lt;/em&gt; of the client and define new vocabulary as to proventicate a client or provide proventic credentials. Once mobilized, ephemeral associations are demobilized when either (a) the server becomes unreachable or (b) the server refreshes the key media without notifying the client.&lt;/p&gt;
&lt;p&gt;There are three principal modes of operation: client/server, symmetric active/passive and broadcast. In addition, there are two modes using IP multicast support: multicast and manycast. These modes are selected based on the scope of service, intended flow of time and proventic values and means of configuration. Following is a summary of the operations in each mode.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;clientserver-mode&#34;&gt;Client/Server Mode&lt;/h4&gt;
&lt;p&gt;Client/server mode is probably the most common configuration in the Internet today. It operates in the classic remote-procedure-call (RPC) paradigm with stateless servers. In this mode a client sends a request to the server and expects a reply at some future time. In some contexts this would be described as a &amp;ldquo;pull&amp;rdquo; operation, in that the client pulls the time and proventic values from the server. A client is configured in client mode using the &lt;tt&gt;server&lt;/tt&gt; (sic) command and specifying the server IPv4 or IPv6 DNS name or address; the server requires no prior configuration. The original NTPv3 authentication scheme is applicable in this mode, as well as the new NTPv4 Autokey proventication scheme. In addition, two burst modes described below can be used in appropriate cases.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;symmetric-activepassive-mode&#34;&gt;Symmetric Active/Passive Mode&lt;/h4&gt;
&lt;p&gt;Symmetric active/passive mode is intended for configurations where a clique of low-stratum peers operate as mutual backups for each other. Each peer operates with one or more primary reference sources, such as a radio clock, or a subset of secondary servers known to be reliable and proventicated. Should one of the peers lose all reference sources or simply cease operation, the other peers will automatically reconfigure so that time and proventication values can flow from the surviving peers to all the others in the clique. In some contexts this would be described as a &amp;ldquo;push-pull&amp;rdquo; operation, in that the peer either pulls or pushes the time and proventic values depending on the particular configuration.&lt;/p&gt;
&lt;p&gt;Symmetric peers operate with their sources in some NTP mode and with each other in symmetric mode. A peer is configured in symmetric active mode using the &lt;tt&gt;peer&lt;/tt&gt; command and specifying the other peer DNS name or address. The other peer can also be configured in symmetric active mode in a similar way. However, if the other peer is not specifically configured in this way, a symmetric passive association is mobilized upon arrival of a symmetric active message. Since an intruder can impersonate a symmetric active peer and inject false time values, symmetric mode should always be cryptographically validated. The original NTPv3 authentication scheme is applicable in this mode, as well as the new NTPv4 Autokey proventication scheme.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;broadcast-mode&#34;&gt;Broadcast Mode&lt;/h4&gt;
&lt;p&gt;Broadcast mode is intended for configurations involving one or a few servers and a possibly very large client population. A broadcast server is configured using the &lt;tt&gt;broadcast&lt;/tt&gt; command and a local subnet address. A broadcast client is configured using the &lt;tt&gt;broadcastclient&lt;/tt&gt; command, in which case it responds to broadcast messages received on any interface. Since an intruder can impersonate a broadcast server and inject false time values, this mode should always be cryptographically validated. The original NTPv3 authentication scheme is applicable in this mode, as well as the new NTPv4 Autokey proventication scheme.&lt;/p&gt;
&lt;p&gt;The server generates broadcast messages continuously at intervals specified by the &lt;tt&gt;minpoll&lt;/tt&gt; keyword and with a time-to-live span specified by the &lt;tt&gt;ttl&lt;/tt&gt; keyword. A NTPv4 broadcast client responds to the first proventicated message received by waiting a short interval randomized over the &lt;tt&gt;minpoll&lt;/tt&gt; interval, in order to avoid implosion at the server. Then, the client polls the server in burst mode in order to reliably set the host clock and validate the source. This normally results in a volley of eight client/server cycles over a 30-s interval during which both the synchronization and cryptographic protocols run concurrently. When the next broadcast message is received after the volley, the client computes the offset between the apparent broadcast time and the (unicast) client time. This offset is used to compensate for the propagation time between the broadcast server and client. Once the offset is computed, the server continues as before and the client sends no further messages.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;ip-multicast-support&#34;&gt;IP Multicast Support&lt;/h4&gt;
&lt;p&gt;Broadcast mode in both NTPv3 and NTPv4 is limited to directly connected subnets such as Ethernets which support broadcast technology. Ordinarily, this technology does not operate beyond the first hop router or gateway. Where service is intended beyond the local subnet, IP multicasting can be used where supported by the operating system and the routers support the Internet Group Management Protocol (IGMP). Most current kernels and available routers do support IP multicast technology, although service providers are sometimes reluctant to deploy it.&lt;/p&gt;
&lt;p&gt;A general discussion of IP multicast technology is beyond the scope here. In simple terms a host or router sending to a IP multicast group (class D) address expects all hosts or routers listening on this address to receive the message. There is no intrinsic limit on the number of senders or receivers and senders can be receivers and vice versa. The IANA has assigned multicast group address 224.0.1.1 to NTP, but this address should be used only where the multicast span can be reliably constrained to protect neighbor networks. In general, administratively scoped group addresses should be used, as described in RFC-2365, or GLOP group addresses, as described in RFC-2770.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;multicasting&#34;&gt;Multicasting&lt;/h4&gt;
&lt;p&gt;IP multicasting can be used to extend the scope of a timekeeping subnet in two ways: multicasting and manycasting. A multicast client is configured using the &lt;tt&gt;broadcast&lt;/tt&gt; command, but with a multicast group (class D) address instead of a local subnet broadcast address. However, there is a subtle difference between broadcasting and multicasting. Broadcasting is specific to each interface and local subnet address. If more than one interface is attached to a machine, a separate &lt;tt&gt;broadcast&lt;/tt&gt; command applies to each one separately. This provides a way to limit exposure in a firewall, for example.&lt;/p&gt;
&lt;p&gt;IP multicasting is a different paradigm. A multicast message has the same format as a broadcast message and is configured with the same &lt;tt&gt;broadcast&lt;/tt&gt; command, but with a multicast group address instead of a local subnet address. By design, multicast messages travel from the sender via a shortest-path or shared tree to the receivers, which may require these messages emit from one or all interfaces, but carry a common source address. However, it is possible to configure multiple multicast group addresses using multiple &lt;tt&gt;broadcast&lt;/tt&gt; commands. Other than these particulars, multicast messages are processed just like broadcast messages. Note that the calibration feature in broadcast mode is extremely important, since IP multicast messages can travel far different paths through the IP routing fabric than ordinary IP unicast messages.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;manycasting&#34;&gt;Manycasting&lt;/h4&gt;
&lt;p&gt;Manycasting is a automatic discovery and configuration paradigm new to NTPv4. It is intended as a means for a multicast client to troll the nearby network neighborhood to find cooperating manycast servers, validate them using cryptographic means and evaluate their time values with respect to other servers that might be lurking in the vicinity. The intended result is that each manycast client mobilizes client associations with the &amp;ldquo;best&amp;rdquo; three of the available manycast servers, yet automatically reconfigures to sustain this number of servers should one or another fail.&lt;/p&gt;
&lt;p&gt;Note that the manycasting paradigm does not coincide with the anycasting paradigm described in RFC-1546, which is designed to find a single server from a clique of servers providing the same service. The manycasting paradigm is designed to find a plurality of redundant servers, in this case willing NTP servers.&lt;/p&gt;
&lt;p&gt;A persistent manycast client association is configured using the &lt;tt&gt;server&lt;/tt&gt; command, but with a multicast (class D) group address instead of an ordinary IP (class A, B, C) address. It sends client mode messages to this address at the maximum feasible poll interval and minimum feasible time-to-live hops, depending on how many servers have already been found. There can be as many manycast client associations as different group addresss, each one serving as a template for a future ephemeral client/server mode association.&lt;/p&gt;
&lt;p&gt;Manycast servers configured with the &lt;tt&gt;manycastserver&lt;/tt&gt; command listen on the specified group address for manycast client messages. Note the distinction between manycast client, which is configured with a &lt;tt&gt;server&lt;/tt&gt; command, and manycast server, which is configured with a &lt;tt&gt;manycastserver&lt;/tt&gt; command. If a manycast server is in range of the current time-to-live and is itself synchronized to a valid source and operating at a stratum level equal to or lower than the manycast client, it replies to the manycast client message with an ordinary server mode message.&lt;/p&gt;
&lt;p&gt;The manycast client receiving this message mobilizes an ephemeral client association as in ordinary client/server mode according to the matching manycast client template. Then, the client polls the server at its unicast address in burst mode in order to reliably set the host clock and validate the source. This normally results in a volley of eight client/server cycles over a 30-s interval during which both the synchronization and cryptographic protocols run concurrently. Following the volley, the client runs the NTP intersection and clustering algorithms, which act to discard all but the best three associations. The surviving associations then continue in ordinary client/server mode.&lt;/p&gt;
&lt;p&gt;The manycast client polling program is designed to reduce as much as possible the volume of messages and the effects of implosion due to near-simultaneous arrival of manycast server messages. The program uses a poll interval eight times the system poll interval, which starts out at the &lt;tt&gt;minpoll&lt;/tt&gt; value and under normal circumstances increases gradually to the &lt;tt&gt;maxpolll&lt;/tt&gt; value. Initially, the time-to-live is set at one hop. At each retransmission the time-to-live is incremented by one until at least three manycast servers are found. Further retransmissions use the same time-to-live value.&lt;/p&gt;
&lt;p&gt;If less than three servers are found when the time-to-live has reached the maximum specified by the &lt;tt&gt;ttl&lt;/tt&gt; keyword, the poll interval is doubled. For each transmission after that, the poll interval is doubled again until reaching the maximum of eight times the value specified by the &lt;tt&gt;maxpoll&lt;/tt&gt; keyword. Further transmissions use the same poll interval and time-to-live values.&lt;/p&gt;
&lt;p&gt;The above scenario happens for each manycast client message, which repeats at the designated poll interval. However, once the ephemeral client association is mobilized, subsequent manycast server replies are discarded, since they will fail the message digest test. If during a poll interval the number of client associations falls below three, all manycast client prototype associations are reset to the initial poll interval and time-to-live values and operation resumes from the beginning. It is important in manycast mode to avoid frequent manycast client messages, since each one requires all manycast servers in range to respond. The result could well be an implosion, either minor or major, depending on the number of servers in range. The recommended value for &lt;tt&gt;maxpoll&lt;/tt&gt; is 12 (4,096 s) and for &lt;tt&gt;ttl&lt;/tt&gt; is 7.&lt;/p&gt;
&lt;p&gt;It is possible and frequently useful to configure a host as both a manycast client and manycast server. A number of hosts configured this way and sharing a common group address will automatically organize themselves in an optimum configuration based on the smallest synchronization distance computed by the NTP mitigation algorithms. For example, consider an NTP subnet of two primary servers and maybe a dozen dependent clients. All servers and clients are configured as both multicast client and multicast server with multicast group address 239.1.1.1. In addition, the primary servers are configured for a primary reference source such as a GPS receiver. Once operations have stabilized in this scenario, the primary servers will affiliate with the primary reference source and each other, since they both operate at the same stratum (1), but not with any client, since clients operate at a higher stratum. The clients will find both primary servers and in addition, one of their own at the minimum synchronization distance. If one of the primary servers loses its GPS receiver, it will continue to operate as a client and other clients will time out the corresponding association and re-associate accordingly.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;burst-modes&#34;&gt;Burst Modes&lt;/h4&gt;
&lt;p&gt;There are two burst modes that can be enabled in client/server mode using the &lt;tt&gt;iburst&lt;/tt&gt; and &lt;tt&gt;burst&lt;/tt&gt; keywords. In either mode a single poll initiates a burst of eight client messages at intervals randomized over the range 1-4 s. However, the interval between the first and second messages is increased to about 16 s in order for a dialup modem to complete a call, if necessary. Received server messages update the NTPv4 clock filter, which selects the best (most accurate) time values. When the last client message in the burst is sent, the next received server message updates the system variables and sets the system clock in the usual manner, as if only a single client/server cycle had occurred. The result is not only a rapid and reliable setting of the system clock, but a considerable reduction in network jitter.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;iburst&lt;/tt&gt; keyword can be configured for cases where it is important to set the clock quickly when an association is first mobilized or first becomes reachable or when the network attachment requires an initial calling or training procedure. The burst is initiated only when the server first becomes reachable and results in good accuracy with intermittent connections typical of PPP and ISDN services. Outlyers due to initial dial-up delays, etc., are avoided and the client sets the clock within 30 s after the first message.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;burst&lt;/tt&gt; keyword can be configured in cases of excessive network jitter or when the network attachment requires an initial calling or training procedure. The burst is initiated at each poll interval when the server is reachable. The burst does produce additional network overhead and can cause trouble if used indiscriminately. It should only be used where the poll interval is expected to settle to values at or above 1024 s.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Association Management</title>
      <link>/archives/4.2.0/assoc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/assoc/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice51.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Make sure who your friends are.&lt;/p&gt;
&lt;p&gt;Last update: 03:03 AM UTC Monday, October 13, 2003&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/assoc/#association-modes&#34;&gt;Association Modes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/assoc/#clientserver-mode&#34;&gt;Client/Server Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/assoc/#symmetric-activepassive-mode&#34;&gt;Symmetric Active/Passive Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/assoc/#broadcastmulticast-modes&#34;&gt;Broadcast/Multicast Modes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/assoc/#multicasting&#34;&gt;Multicasting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/assoc/#manycasting&#34;&gt;Manycasting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/assoc/#burst-modes&#34;&gt;Burst Modes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;association-modes&#34;&gt;Association Modes&lt;/h4&gt;
&lt;p&gt;NTP Version 4 (NTPv4) incorporates new features and refinements to the NTP Version 3 (NTPv3) algorithms; however, it continues the tradition of backwards compatibility with older versions. A number of new operating modes for automatic server discovery and improved accuracy in occasionally connected networks are provided. Following is an overview of the new features; additional information is available on the &lt;a href=&#34;/archives/4.2.0/confopt&#34;&gt;Configuration Options&lt;/a&gt; and &lt;a href=&#34;/archives/4.2.0/authopt&#34;&gt;Authentication Options&lt;/a&gt; pages and in the papers, reports, memoranda and briefings at &lt;a href=&#34;http://www.ntp.org&#34;&gt;www.ntp.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are two types of associations: persistent associations, which result from configuration file commands, and ephemeral associations, which result from protocol operations described below. A persistent association is never demobilized, although it may become dormant when the associated server becomes unreachable. An ephemeral association is mobilized when a message arrives from a server; for instance, a symmetric passive association is mobilized upon arrival of a symmetric active message. A broadcast client association is mobilized upon arrival of a broadcast server message, while a Manycast client association is mobilized upon arrival of a Manycast server message.&lt;/p&gt;
&lt;p&gt;Ordinarily, successful mobilization of an ephemeral association requires the server to be cryptographically authenticated to the dependent client. This can be done using either symmetric-key or public-key cryptography, as described in the &lt;a href=&#34;/archives/4.2.0/authopt&#34;&gt;Authentication Options&lt;/a&gt; page. The cryptographic means insure an unbroken chain of trust between the dependent client and the primary servers at the root of the synchronization subnet. We call this chain the &lt;em&gt;provenance&lt;/em&gt; of the client and define new vocabulary as to proventicate a client or provide proventic credentials. Once mobilized, ephemeral associations are demobilized when either (a) the server becomes unreachable or (b) the server refreshes the key media without notifying the client.&lt;/p&gt;
&lt;p&gt;There are three principal modes of operation: client/server, symmetric active/passive and broadcast. In addition, there are two modes using IP multicast support: multicast and manycast. These modes are selected based on the scope of service, intended flow of time and proventic values and means of configuration. Following is a summary of the operations in each mode.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;clientserver-mode&#34;&gt;Client/Server Mode&lt;/h4&gt;
&lt;p&gt;Client/server mode is probably the most common configuration in the Internet today. It operates in the classic remote-procedure-call (RPC) paradigm with stateless servers. In this mode a client sends a request to the server and expects a reply at some future time. In some contexts this would be described as a &amp;ldquo;pull&amp;rdquo; operation, in that the client pulls the time and proventic values from the server. A client is configured in client mode using the &lt;tt&gt;server&lt;/tt&gt; (sic) command and specifying the server IPv4 or IPv6 DNS name or address; the server requires no prior configuration. The original NTPv3 authentication scheme is applicable in this mode, as well as the new NTPv4 Autokey proventication scheme. In addition, two burst modes described below can be used in appropriate cases.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;symmetric-activepassive-mode&#34;&gt;Symmetric Active/Passive Mode&lt;/h4&gt;
&lt;p&gt;Symmetric active/passive mode is intended for configurations where a clique of low-stratum peers operate as mutual backups for each other. Each peer operates with one or more primary reference sources, such as a radio clock, or a subset of secondary servers known to be reliable and proventicated. Should one of the peers lose all reference sources or simply cease operation, the other peers will automatically reconfigure so that time and proventication values can flow from the surviving peers to all the others in the clique. In some contexts this would be described as a &amp;ldquo;push-pull&amp;rdquo; operation, in that the peer either pulls or pushes the time and proventic values depending on the particular configuration.&lt;/p&gt;
&lt;p&gt;Symmetric peers operate with their sources in some NTP mode and with each other in symmetric mode. A peer is configured in symmetric active mode using the &lt;tt&gt;peer&lt;/tt&gt; command and specifying the other peer IPv4 or IPv6 DNS name or address. The other peer can also be configured in symmetric active mode in a similar way. However, if the other peer is not specifically configured in this way, a symmetric passive association is mobilized upon arrival of a symmetric active message. Since an intruder can impersonate a symmetric active peer and inject false time values, symmetric mode should always be cryptographically validated. The original NTPv3 authentication scheme is applicable in this mode, as well as the new NTPv4 Autokey proventication scheme.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;broadcastmulticast-modes&#34;&gt;Broadcast/Multicast Modes&lt;/h4&gt;
&lt;p&gt;IPv4 broadcast mode in both NTPv3 and NTPv4 is limited to directly connected subnets such as Ethernets which support broadcast technology. Ordinarily, this technology does not operate beyond the first hop router or gateway. In IPv6 and where service is intended beyond the local subnet, IP multicasting can be used where supported by the operating system and the routers support the Internet Group Management Protocol (IGMP). Most current kernels and available routers do support IP multicast technology, although service providers are sometimes reluctant to deploy it.&lt;/p&gt;
&lt;p&gt;IPv4 broadcast mode is intended for configurations involving one or a few servers and a possibly very large client population on the same subnet. A broadcast server is configured using the &lt;tt&gt;broadcast&lt;/tt&gt; command and a IPv4 local subnet broadcast address. A broadcast client is configured using the &lt;tt&gt;broadcastclient&lt;/tt&gt; command, in which case it responds to broadcast messages received on any interface. Since an intruder can impersonate a broadcast server and inject false time values, this mode should always be cryptographically validated. The original NTPv3 authentication scheme is applicable in this mode, as well as the new NTPv4 Autokey proventication scheme.&lt;/p&gt;
&lt;p&gt;The server generates broadcast messages continuously at intervals specified by the &lt;tt&gt;minpoll&lt;/tt&gt; keyword and with a time-to-live span specified by the &lt;tt&gt;ttl&lt;/tt&gt; keyword. A broadcast client responds to the first message received by waiting a short interval to avoid implosion at the server. Then, the client polls the server in burst mode in order to quickly set the host clock and validate the source. This normally results in a volley of eight client/server cycles at 2-s intervals during which both the synchronization and cryptographic protocols run concurrently. Following the volley, the client computes the offset between the apparent broadcast time and the (unicast) client time. This offset is used to compensate for the propagation time between the broadcast server and client. Once the offset is computed, the server continues as before and the client sends no further messages. If for some reason the broadcast server does not respond to client messages, the client will time out the volley and continue in listen-only mode with a default propagation delay.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;multicasting&#34;&gt;Multicasting&lt;/h4&gt;
&lt;p&gt;Multicasting can be used to extend the scope of a timekeeping subnet in two ways: multicasting and manycasting. A general discussion of IP multicast technology is beyond the scope of this page. In simple terms a host or router sending to a IPv4 or IPv6 multicast group address expects all hosts or routers listening on this address to receive the message. There is no intrinsic limit on the number of senders or receivers and senders can be receivers and vice versa. The IANA has assigned multicast group address IPv4 224.0.1.1 and IPv6 FF05::101 (site local) to NTP, but these addresses should be used only where the multicast span can be reliably constrained to protect neighbor networks. In general, administratively scoped IPv4 group addresses should be used, as described in RFC-2365, or GLOP group addresses, as described in RFC-2770.&lt;/p&gt;
&lt;p&gt;A multicast server is configured using the &lt;tt&gt;broadcast&lt;/tt&gt; command, but with a multicast group address instead of a broadcast address. A multicast client is configured using the &lt;tt&gt;multicastclient&lt;/tt&gt; command with a multicast group address. However, there is a subtle difference between IPv4 broadcasting and multicasting. IPv4 broadcasting is specific to each interface and local subnet address. If more than one interface is attached to a machine, a separate &lt;tt&gt;broadcast&lt;/tt&gt; command applies to each one separately. This provides a way to limit exposure in a firewall, for example. For IPv6 the same distinction can be made using link-local prefix FF02 for each interface and site-local FF05 for all interfaces.&lt;/p&gt;
&lt;p&gt;IP multicasting is a different paradigm. By design, multicast messages travel from the sender via a shortest-path or shared tree to the receivers, which may require these messages emit from one or all interfaces, but carry a common source address. However, it is possible to configure multiple multicast group addresses using multiple &lt;tt&gt;broadcast&lt;/tt&gt; or &lt;tt&gt;multicastclient&lt;/tt&gt; commands. Other than these particulars, multicast messages are processed just like broadcast messages. Note that the calibration feature in broadcast mode is extremely important, since IP multicast messages can travel far different paths through the IP routing fabric than ordinary IP unicast messages.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;manycasting&#34;&gt;Manycasting&lt;/h4&gt;
&lt;p&gt;Manycasting is a automatic discovery and configuration paradigm new to NTPv4. It is intended as a means for a multicast client to troll the nearby network neighborhood to find cooperating manycast servers, validate them using cryptographic means and evaluate their time values with respect to other servers that might be lurking in the vicinity. The intended result is that each manycast client mobilizes client associations with some number of the &amp;ldquo;best&amp;rdquo; of the nearby anycast servers, yet automatically reconfigures to sustain this number of servers should one or another fail. Additional information is on the &lt;a href=&#34;/archives/4.2.0/manyopt&#34;&gt;Automatic NTP Configuration Options&lt;/a&gt; page.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;burst-modes&#34;&gt;Burst Modes&lt;/h4&gt;
&lt;p&gt;There are two burst modes where a single poll event triggers a burst of eight packets at 2-s intervals instead of the usual one. The &lt;tt&gt;burst&lt;/tt&gt; mode sends a burst when the server is reachable, while the &lt;tt&gt;iburst&lt;/tt&gt; mode sends a burst when the server is unreachable. Each mode is independently of the other and both can be used if necessary. The &lt;tt&gt;calldelay&lt;/tt&gt; command can be used to increase the interval between the first and second packets in the burst in order to allow a modem to complete a call. Received server packets update the clock filter, which selects the best (most accurate) time values. When the last packet in the burst is sent, the next received packet updates the system variables and sets the system clock in the usual manner, as if only a single client/server cycle had occurred. The result is not only a rapid and reliable setting of the system clock, but a considerable reduction in network jitter.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;iburst&lt;/tt&gt; keyword is used where it is important to set the clock quickly when an association is first mobilized or first becomes reachable or when the network attachment requires an initial calling or training procedure. The burst is initiated only when the server first becomes reachable and results in good accuracy with intermittent connections typical of PPP and ISDN services. Outlyers due to initial dial-up delays, etc., are avoided and the client sets the clock within a few seconds after the first message.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;burst&lt;/tt&gt; keyword can be configured in cases of excessive network jitter or when the network attachment requires an initial calling or training procedure. The burst is initiated at each poll interval when the server is reachable. The burst does produce additional network overhead and can cause trouble if used indiscriminately. It should only be used where the poll interval is expected to settle to values at or above 1024 s.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Association Management</title>
      <link>/archives/4.2.2-series/assoc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.2-series/assoc/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice51.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Make sure who your friends are.&lt;/p&gt;
&lt;p&gt;Last update: 18:35 UTC Thursday, July 28, 2005&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.2-series/assoc/#association-modes&#34;&gt;Association Modes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.2-series/assoc/#clientserver-mode&#34;&gt;Client/Server Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.2-series/assoc/#symmetric-activepassive-mode&#34;&gt;Symmetric Active/Passive Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.2-series/assoc/#broadcastmulticast-modes&#34;&gt;Broadcast/Multicast Modes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.2-series/assoc/#multicasting&#34;&gt;Multicasting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.2-series/assoc/#manycasting&#34;&gt;Manycasting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.2-series/assoc/#burst-modes&#34;&gt;Burst Modes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;association-modes&#34;&gt;Association Modes&lt;/h4&gt;
&lt;p&gt;NTP Version 4 (NTPv4) incorporates new features and refinements to the NTP Version 3 (NTPv3) algorithms; however, it continues the tradition of backwards compatibility with older versions. A number of new operating modes for automatic server discovery and improved accuracy in occasionally connected networks are provided. Following is an overview of the new features; additional information is available on the &lt;a href=&#34;/archives/4.2.2-series/confopt&#34;&gt;Configuration Options&lt;/a&gt; and &lt;a href=&#34;/archives/4.2.2-series/authopt&#34;&gt;Authentication Options&lt;/a&gt; pages and in the papers, reports, memoranda and briefings at &lt;a href=&#34;http://www.ntp.org&#34;&gt;www.ntp.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are two types of associations: persistent associations, which result from configuration file commands, and ephemeral associations, which result from protocol operations described below. A persistent association is never demobilized, although it may become dormant when the associated server becomes unreachable. An ephemeral association is mobilized when a message arrives from a server; for instance, a symmetric passive association is mobilized upon arrival of a symmetric active message. A broadcast client association is mobilized upon arrival of a broadcast server message, while a Manycast client association is mobilized upon arrival of a Manycast server message.&lt;/p&gt;
&lt;p&gt;Ordinarily, successful mobilization of an ephemeral association requires the server to be cryptographically authenticated to the dependent client. This can be done using either symmetric-key or public-key cryptography, as described in the &lt;a href=&#34;/archives/4.2.2-series/authopt&#34;&gt;Authentication Options&lt;/a&gt; page. The cryptographic means insure an unbroken chain of trust between the dependent client and the primary servers at the root of the synchronization subnet. We call this chain the &lt;em&gt;provenance&lt;/em&gt; of the client and define new vocabulary as to proventicate a client or provide proventic credentials. Once mobilized, ephemeral associations are demobilized when either (a) the server becomes unreachable or (b) the server refreshes the key media without notifying the client.&lt;/p&gt;
&lt;p&gt;There are three principal modes of operation: client/server, symmetric active/passive and broadcast. In addition, there are two modes using IP multicast support: multicast and manycast. These modes are selected based on the scope of service, intended flow of time and proventic values and means of configuration. Following is a summary of the operations in each mode.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;clientserver-mode&#34;&gt;Client/Server Mode&lt;/h4&gt;
&lt;p&gt;Client/server mode is probably the most common configuration in the Internet today. It operates in the classic remote-procedure-call (RPC) paradigm with stateless servers. In this mode a client sends a request to the server and expects a reply at some future time. In some contexts this would be described as a &amp;ldquo;pull&amp;rdquo; operation, in that the client pulls the time and proventic values from the server. A client is configured in client mode using the &lt;tt&gt;server&lt;/tt&gt; (sic) command and specifying the server IPv4 or IPv6 DNS name or address; the server requires no prior configuration. The original NTPv3 authentication scheme is applicable in this mode, as well as the new NTPv4 Autokey proventication scheme. In addition, two burst modes described below can be used in appropriate cases.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;symmetric-activepassive-mode&#34;&gt;Symmetric Active/Passive Mode&lt;/h4&gt;
&lt;p&gt;Symmetric active/passive mode is intended for configurations were a clique of low-stratum peers operate as mutual backups for each other. Each peer operates with one or more primary reference sources, such as a radio clock, or a subset of secondary servers known to be reliable and proventicated. Should one of the peers lose all reference sources or simply cease operation, the other peers will automatically reconfigure so that time and proventication values can flow from the surviving peers to all the others in the clique. In some contexts this would be described as a &amp;ldquo;push-pull&amp;rdquo; operation, in that the peer either pulls or pushes the time and proventic values depending on the particular configuration.&lt;/p&gt;
&lt;p&gt;Symmetric peers operate with their sources in some NTP mode and with each other in symmetric mode. A peer is configured in symmetric active mode using the &lt;tt&gt;peer&lt;/tt&gt; command and specifying the other peer IPv4 or IPv6 DNS name or address. The other peer can also be configured in symmetric active mode in a similar way. However, if the other peer is not specifically configured in this way, a symmetric passive association is mobilized upon arrival of a symmetric active message. Since an intruder can impersonate a symmetric active peer and inject false time values, symmetric mode should always be cryptographically validated. The original NTPv3 authentication scheme is applicable in this mode, as well as the new NTPv4 Autokey proventication scheme.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;broadcastmulticast-modes&#34;&gt;Broadcast/Multicast Modes&lt;/h4&gt;
&lt;p&gt;IPv4 broadcast mode in both NTPv3 and NTPv4 is limited to directly connected subnets such as Ethernets which support broadcast technology. Ordinarily, this technology does not operate beyond the first hop router or gateway. In IPv6 and where service is intended beyond the local subnet, IP multicasting can be used where supported by the operating system and the routers support the Internet Group Management Protocol (IGMP). Most current kernels and available routers do support IP multicast technology, although service providers are sometimes reluctant to deploy it.&lt;/p&gt;
&lt;p&gt;IPv4 broadcast mode is intended for configurations involving one or a few servers and a possibly very large client population on the same subnet. A broadcast server is configured using the &lt;tt&gt;broadcast&lt;/tt&gt; command and a IPv4 local subnet broadcast address. A broadcast client is configured using the &lt;tt&gt;broadcastclient&lt;/tt&gt; command, in which case it responds to broadcast messages received on any interface. Since an intruder can impersonate a broadcast server and inject false time values, this mode should always be cryptographically validated. The original NTPv3 authentication scheme is applicable in this mode, as well as the new NTPv4 Autokey proventication scheme.&lt;/p&gt;
&lt;p&gt;The server generates broadcast messages continuously at intervals specified by the &lt;tt&gt;minpoll&lt;/tt&gt; keyword and with a time-to-live span specified by the &lt;tt&gt;ttl&lt;/tt&gt; keyword. A broadcast client responds to the first message received by waiting a short interval to avoid implosion at the server. Then, the client polls the server in burst mode in order to quickly set the host clock and validate the source. This normally results in a volley of eight client/server cycles at 2-s intervals during which both the synchronization and cryptographic protocols run concurrently. Following the volley, the client computes the offset between the apparent broadcast time and the (unicast) client time. This offset is used to compensate for the propagation time between the broadcast server and client. Once the offset is computed, the server continues as before and the client sends no further messages. If for some reason the broadcast server does not respond to client messages, the client will time out the volley and continue in listen-only mode with a default propagation delay.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;multicasting&#34;&gt;Multicasting&lt;/h4&gt;
&lt;p&gt;Multicasting can be used to extend the scope of a timekeeping subnet in two ways: multicasting and manycasting. A general discussion of IP multicast technology is beyond the scope of this page. In simple terms a host or router sending to a IPv4 or IPv6 multicast group address expects all hosts or routers listening on this address to receive the message. There is no intrinsic limit on the number of senders or receivers and senders can be receivers and vice versa. The IANA has assigned multicast group address IPv4 224.0.1.1 and IPv6 FF05::101 (site local) to NTP, but these addresses should be used only where the multicast span can be reliably constrained to protect neighbor networks. In general, administratively scoped IPv4 group addresses should be used, as described in RFC-2365, or GLOP group addresses, as described in RFC-2770.&lt;/p&gt;
&lt;p&gt;A multicast server is configured using the &lt;tt&gt;broadcast&lt;/tt&gt; command, but with a multicast group address instead of a broadcast address. A multicast client is configured using the &lt;tt&gt;multicastclient&lt;/tt&gt; command with a multicast group address. However, there is a subtle difference between IPv4 broadcasting and multicasting. IPv4 broadcasting is specific to each interface and local subnet address. If more than one interface is attached to a machine, a separate &lt;tt&gt;broadcast&lt;/tt&gt; command applies to each one separately. This provides a way to limit exposure in a firewall, for example. For IPv6 the same distinction can be made using link-local prefix FF02 for each interface and site-local FF05 for all interfacesl.&lt;/p&gt;
&lt;p&gt;IP multicasting is a different paradigm. By design, multicast messages travel from the sender via a shortest-path or shared tree to the receivers, which may require these messages emit from one or all interfaces, but carry a common source address. However, it is possible to configure multiple multicast group addresses using multiple &lt;tt&gt;broadcast&lt;/tt&gt; or &lt;tt&gt;multicastclient&lt;/tt&gt; commands. Other than these particulars, multicast messages are processed just like broadcast messages. Note that the calibration feature in broadcast mode is extremely important, since IP multicast messages can travel far different paths through the IP routing fabric than ordinary IP unicast messages.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;manycasting&#34;&gt;Manycasting&lt;/h4&gt;
&lt;p&gt;Manycasting is a automatic discovery and configuration paradigm new to NTPv4. It is intended as a means for a multicast client to troll the nearby network neighborhood to find cooperating manycast servers, validate them using cryptographic means and evaluate their time values with respect to other servers that might be lurking in the vicinity. The intended result is that each manycast client mobilizes client associations with some number of the &amp;ldquo;best&amp;rdquo; of the nearby anycast servers, yet automatically reconfigures to sustain this number of servers should one or another fail. Additional information is on the &lt;a href=&#34;/archives/4.2.2-series/manyopt&#34;&gt;Automatic NTP Configuration Options&lt;/a&gt; page.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;burst-modes&#34;&gt;Burst Modes&lt;/h4&gt;
&lt;p&gt;There are two burst modes where a single poll event triggers a burst of eight packets at 2-s intervals instead of the usual one. The &lt;tt&gt;burst&lt;/tt&gt; mode sends a burst when the server is reachable, while the &lt;tt&gt;iburst&lt;/tt&gt; mode sends a burst when the server is unreachable. Each mode is independently of the other and both can be used if necessary. The &lt;tt&gt;calldelay&lt;/tt&gt; command can be used to increase the interval between the first and second packets in the burst in order to allow a modem to complete a call. Received server packets update the clock filter, which selects the best (most accurate) time values. When the last packet in the burst is sent, the next received packet updates the system variables and sets the system clock in the usual manner, as if only a single client/server cycle had occurred. The result is not only a rapid and reliable setting of the system clock, but a considerable reduction in network jitter.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;iburst&lt;/tt&gt; keyword is used where it is important to set the clock quickly when an association is first mobilized or first becomes reachable or when the network attachment requires an initial calling or training procedure. The burst is initiated only when the server first becomes reachable and results in good accuracy with intermittent connections typical of PPP and ISDN services. Outlyers due to initial dial-up delays, etc., are avoided and the client sets the clock within a few seconds after the first message.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;burst&lt;/tt&gt; keyword can be configured in cases of excessive network jitter or when the network attachment requires an initial calling or training procedure. The burst is initiated at each poll interval when the server is reachable. The burst does produce additional network overhead and can cause trouble if used indiscriminately. It should only be used where the poll interval is expected to settle to values at or above 1024 s.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Association Management</title>
      <link>/archives/4.2.4-series/assoc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.4-series/assoc/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice51.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Make sure who your friends are.&lt;/p&gt;
&lt;p&gt;Last update: 18:35 UTC Thursday, July 28, 2005&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.4-series/assoc/#association-modes&#34;&gt;Association Modes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.4-series/assoc/#clientserver-mode&#34;&gt;Client/Server Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.4-series/assoc/#symmetric-activepassive-mode&#34;&gt;Symmetric Active/Passive Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.4-series/assoc/#broadcastmulticast-modes&#34;&gt;Broadcast/Multicast Modes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.4-series/assoc/#multicasting&#34;&gt;Multicasting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.4-series/assoc/#manycasting&#34;&gt;Manycasting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.4-series/assoc/#burst-modes&#34;&gt;Burst Modes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;association-modes&#34;&gt;Association Modes&lt;/h4&gt;
&lt;p&gt;NTP Version 4 (NTPv4) incorporates new features and refinements to the NTP Version 3 (NTPv3) algorithms; however, it continues the tradition of backwards compatibility with older versions. A number of new operating modes for automatic server discovery and improved accuracy in occasionally connected networks are provided. Following is an overview of the new features; additional information is available on the &lt;a href=&#34;/archives/4.2.4-series/confopt&#34;&gt;Configuration Options&lt;/a&gt; and &lt;a href=&#34;/archives/4.2.4-series/authopt&#34;&gt;Authentication Options&lt;/a&gt; pages and in the papers, reports, memoranda and briefings at &lt;a href=&#34;http://www.ntp.org&#34;&gt;www.ntp.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are two types of associations: persistent associations, which result from configuration file commands, and ephemeral associations, which result from protocol operations described below. A persistent association is never demobilized, although it may become dormant when the associated server becomes unreachable. An ephemeral association is mobilized when a message arrives from a server; for instance, a symmetric passive association is mobilized upon arrival of a symmetric active message. A broadcast client association is mobilized upon arrival of a broadcast server message, while a Manycast client association is mobilized upon arrival of a Manycast server message.&lt;/p&gt;
&lt;p&gt;Ordinarily, successful mobilization of an ephemeral association requires the server to be cryptographically authenticated to the dependent client. This can be done using either symmetric-key or public-key cryptography, as described in the &lt;a href=&#34;/archives/4.2.4-series/authopt&#34;&gt;Authentication Options&lt;/a&gt; page. The cryptographic means insure an unbroken chain of trust between the dependent client and the primary servers at the root of the synchronization subnet. We call this chain the &lt;em&gt;provenance&lt;/em&gt; of the client and define new vocabulary as to proventicate a client or provide proventic credentials. Once mobilized, ephemeral associations are demobilized when either (a) the server becomes unreachable or (b) the server refreshes the key media without notifying the client.&lt;/p&gt;
&lt;p&gt;There are three principal modes of operation: client/server, symmetric active/passive and broadcast. In addition, there are two modes using IP multicast support: multicast and manycast. These modes are selected based on the scope of service, intended flow of time and proventic values and means of configuration. Following is a summary of the operations in each mode.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;clientserver-mode&#34;&gt;Client/Server Mode&lt;/h4&gt;
&lt;p&gt;Client/server mode is probably the most common configuration in the Internet today. It operates in the classic remote-procedure-call (RPC) paradigm with stateless servers. In this mode a client sends a request to the server and expects a reply at some future time. In some contexts this would be described as a &amp;ldquo;pull&amp;rdquo; operation, in that the client pulls the time and proventic values from the server. A client is configured in client mode using the &lt;tt&gt;server&lt;/tt&gt; (sic) command and specifying the server IPv4 or IPv6 DNS name or address; the server requires no prior configuration. The original NTPv3 authentication scheme is applicable in this mode, as well as the new NTPv4 Autokey proventication scheme. In addition, two burst modes described below can be used in appropriate cases.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;symmetric-activepassive-mode&#34;&gt;Symmetric Active/Passive Mode&lt;/h4&gt;
&lt;p&gt;Symmetric active/passive mode is intended for configurations were a clique of low-stratum peers operate as mutual backups for each other. Each peer operates with one or more primary reference sources, such as a radio clock, or a subset of secondary servers known to be reliable and proventicated. Should one of the peers lose all reference sources or simply cease operation, the other peers will automatically reconfigure so that time and proventication values can flow from the surviving peers to all the others in the clique. In some contexts this would be described as a &amp;ldquo;push-pull&amp;rdquo; operation, in that the peer either pulls or pushes the time and proventic values depending on the particular configuration.&lt;/p&gt;
&lt;p&gt;Symmetric peers operate with their sources in some NTP mode and with each other in symmetric mode. A peer is configured in symmetric active mode using the &lt;tt&gt;peer&lt;/tt&gt; command and specifying the other peer IPv4 or IPv6 DNS name or address. The other peer can also be configured in symmetric active mode in a similar way. However, if the other peer is not specifically configured in this way, a symmetric passive association is mobilized upon arrival of a symmetric active message. Since an intruder can impersonate a symmetric active peer and inject false time values, symmetric mode should always be cryptographically validated. The original NTPv3 authentication scheme is applicable in this mode, as well as the new NTPv4 Autokey proventication scheme.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;broadcastmulticast-modes&#34;&gt;Broadcast/Multicast Modes&lt;/h4&gt;
&lt;p&gt;IPv4 broadcast mode in both NTPv3 and NTPv4 is limited to directly connected subnets such as Ethernets which support broadcast technology. Ordinarily, this technology does not operate beyond the first hop router or gateway. In IPv6 and where service is intended beyond the local subnet, IP multicasting can be used where supported by the operating system and the routers support the Internet Group Management Protocol (IGMP). Most current kernels and available routers do support IP multicast technology, although service providers are sometimes reluctant to deploy it.&lt;/p&gt;
&lt;p&gt;IPv4 broadcast mode is intended for configurations involving one or a few servers and a possibly very large client population on the same subnet. A broadcast server is configured using the &lt;tt&gt;broadcast&lt;/tt&gt; command and a IPv4 local subnet broadcast address. A broadcast client is configured using the &lt;tt&gt;broadcastclient&lt;/tt&gt; command, in which case it responds to broadcast messages received on any interface. Since an intruder can impersonate a broadcast server and inject false time values, this mode should always be cryptographically validated. The original NTPv3 authentication scheme is applicable in this mode, as well as the new NTPv4 Autokey proventication scheme.&lt;/p&gt;
&lt;p&gt;The server generates broadcast messages continuously at intervals specified by the &lt;tt&gt;minpoll&lt;/tt&gt; keyword and with a time-to-live span specified by the &lt;tt&gt;ttl&lt;/tt&gt; keyword. A broadcast client responds to the first message received by waiting a short interval to avoid implosion at the server. Then, the client polls the server in burst mode in order to quickly set the host clock and validate the source. This normally results in a volley of eight client/server cycles at 2-s intervals during which both the synchronization and cryptographic protocols run concurrently. Following the volley, the client computes the offset between the apparent broadcast time and the (unicast) client time. This offset is used to compensate for the propagation time between the broadcast server and client. Once the offset is computed, the server continues as before and the client sends no further messages. If for some reason the broadcast server does not respond to client messages, the client will time out the volley and continue in listen-only mode with a default propagation delay.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;multicasting&#34;&gt;Multicasting&lt;/h4&gt;
&lt;p&gt;Multicasting can be used to extend the scope of a timekeeping subnet in two ways: multicasting and manycasting. A general discussion of IP multicast technology is beyond the scope of this page. In simple terms a host or router sending to a IPv4 or IPv6 multicast group address expects all hosts or routers listening on this address to receive the message. There is no intrinsic limit on the number of senders or receivers and senders can be receivers and vice versa. The IANA has assigned multicast group address IPv4 224.0.1.1 and IPv6 FF05::101 (site local) to NTP, but these addresses should be used only where the multicast span can be reliably constrained to protect neighbor networks. In general, administratively scoped IPv4 group addresses should be used, as described in RFC-2365, or GLOP group addresses, as described in RFC-2770.&lt;/p&gt;
&lt;p&gt;A multicast server is configured using the &lt;tt&gt;broadcast&lt;/tt&gt; command, but with a multicast group address instead of a broadcast address. A multicast client is configured using the &lt;tt&gt;multicastclient&lt;/tt&gt; command with a multicast group address. However, there is a subtle difference between IPv4 broadcasting and multicasting. IPv4 broadcasting is specific to each interface and local subnet address. If more than one interface is attached to a machine, a separate &lt;tt&gt;broadcast&lt;/tt&gt; command applies to each one separately. This provides a way to limit exposure in a firewall, for example. For IPv6 the same distinction can be made using link-local prefix FF02 for each interface and site-local FF05 for all interfacesl.&lt;/p&gt;
&lt;p&gt;IP multicasting is a different paradigm. By design, multicast messages travel from the sender via a shortest-path or shared tree to the receivers, which may require these messages emit from one or all interfaces, but carry a common source address. However, it is possible to configure multiple multicast group addresses using multiple &lt;tt&gt;broadcast&lt;/tt&gt; or &lt;tt&gt;multicastclient&lt;/tt&gt; commands. Other than these particulars, multicast messages are processed just like broadcast messages. Note that the calibration feature in broadcast mode is extremely important, since IP multicast messages can travel far different paths through the IP routing fabric than ordinary IP unicast messages.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;manycasting&#34;&gt;Manycasting&lt;/h4&gt;
&lt;p&gt;Manycasting is a automatic discovery and configuration paradigm new to NTPv4. It is intended as a means for a multicast client to troll the nearby network neighborhood to find cooperating manycast servers, validate them using cryptographic means and evaluate their time values with respect to other servers that might be lurking in the vicinity. The intended result is that each manycast client mobilizes client associations with some number of the &amp;ldquo;best&amp;rdquo; of the nearby anycast servers, yet automatically reconfigures to sustain this number of servers should one or another fail. Additional information is on the &lt;a href=&#34;/archives/4.2.4-series/manyopt&#34;&gt;Automatic NTP Configuration Options&lt;/a&gt; page.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;burst-modes&#34;&gt;Burst Modes&lt;/h4&gt;
&lt;p&gt;There are two burst modes where a single poll event triggers a burst of eight packets at 2-s intervals instead of the usual one. The &lt;tt&gt;burst&lt;/tt&gt; mode sends a burst when the server is reachable, while the &lt;tt&gt;iburst&lt;/tt&gt; mode sends a burst when the server is unreachable. Each mode is independently of the other and both can be used if necessary. The &lt;tt&gt;calldelay&lt;/tt&gt; command can be used to increase the interval between the first and second packets in the burst in order to allow a modem to complete a call. Received server packets update the clock filter, which selects the best (most accurate) time values. When the last packet in the burst is sent, the next received packet updates the system variables and sets the system clock in the usual manner, as if only a single client/server cycle had occurred. The result is not only a rapid and reliable setting of the system clock, but a considerable reduction in network jitter.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;iburst&lt;/tt&gt; keyword is used where it is important to set the clock quickly when an association is first mobilized or first becomes reachable or when the network attachment requires an initial calling or training procedure. The burst is initiated only when the server first becomes reachable and results in good accuracy with intermittent connections typical of PPP and ISDN services. Outlyers due to initial dial-up delays, etc., are avoided and the client sets the clock within a few seconds after the first message.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;burst&lt;/tt&gt; keyword can be configured in cases of excessive network jitter or when the network attachment requires an initial calling or training procedure. The burst is initiated at each poll interval when the server is reachable. The burst does produce additional network overhead and can cause trouble if used indiscriminately. It should only be used where the poll interval is expected to settle to values at or above 1024 s.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Association Management</title>
      <link>/archives/4.2.6-series/assoc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.6-series/assoc/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice51.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Make sure who your friends are.&lt;/p&gt;
&lt;p&gt;Last update: 21:56 UTC Friday, December 28, 2007&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.6-series/assoc/#association-modes&#34;&gt;Association Modes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.6-series/assoc/#clientserver-mode&#34;&gt;Client/Server Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.6-series/assoc/#symmetric-activepassive-mode&#34;&gt;Symmetric Active/Passive Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.6-series/assoc/#broadcastmulticast-modes&#34;&gt;Broadcast/Multicast Modes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.6-series/assoc/#manycast-mode&#34;&gt;Manycast Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.6-series/assoc/#orphan-mode&#34;&gt;Orphan Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.6-series/assoc/#burst-options&#34;&gt;Burst Options&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;association-modes&#34;&gt;Association Modes&lt;/h4&gt;
&lt;p&gt;This page describes the various modes of operation provided in NTPv4. Details about the configuration commands and options are given on the &lt;a href=&#34;/archives/4.2.6-series/confopt&#34;&gt;Configuration Options&lt;/a&gt; page. Details about the cryptographic authentication schemes are given on the &lt;a href=&#34;/archives/4.2.6-series/authopt&#34;&gt;Authentication Options&lt;/a&gt; page. Details about the automatic server discovery schemes are described on the &lt;a href=&#34;/archives/4.2.6-series/manyopt&#34;&gt;Automatic Server Discovery Schemes&lt;/a&gt; page. Additional information is available in the papers, reports, memoranda and briefings on the &lt;a href=&#34;http://www.eecis.udel.edu/~mills/ntp.html&#34;&gt;NTP Project&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;There are three types of associations in NTP: persistent, preemptable and ephemeral. Persistent associations are mobilized by a configuration command and never demobilized. Preemptable associations, which are new to NTPv4, are mobilized by a configuration command which includes the prempt option and are demobilized by a &amp;ldquo;better&amp;rdquo; server or by timeout, but only if the number of survivors exceeds the threshold set by the tos maxclock configuration command. Ephemeral associations are mobilized upon arrival of designated messages and demobilized by timeout.&lt;/p&gt;
&lt;p&gt;Ordinarily, successful mobilization of ephemeral associations requires the server to be cryptographically authenticated to the client. This can be done using either symmetric key or Autokey public key cryptography, as described in the &lt;a href=&#34;/archives/4.2.6-series/authopt&#34;&gt;Authentication Options&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;There are three principal modes of operation in NTP: client/server, symmetric active/passive and broadcast/multicast. There are three automatic server discovery schemes in NTP: broadcast/multicast, manycast and pool described on the &lt;a href=&#34;/archives/4.2.6-series/manyopt&#34;&gt;Automatic Server Discovery Schemes&lt;/a&gt; page. In addition, the orphan mode and burst options described on this page can be used in appropriate cases.&lt;/p&gt;
&lt;p&gt;Following is a summary of the operations in each mode. Note that reference to option applies to the commands described on the &lt;a href=&#34;/archives/4.2.6-series/confopt&#34;&gt;Configuration Options&lt;/a&gt; page. See that page for applicability and defaults.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;clientserver-mode&#34;&gt;Client/Server Mode&lt;/h4&gt;
&lt;p&gt;Client/server mode is the most common configuration in the Internet today. It operates in the classic remote-procedure-call (RPC) paradigm with stateless servers and stateful clients. In this mode a host sends a client (mode 3) request to the specified server and expects a server (mode 4) reply at some future time. In some contexts this would be described as a &amp;ldquo;pull&amp;rdquo; operation, in that the host pulls the time and related values from the server.&lt;/p&gt;
&lt;p&gt;A host is configured in client mode using the &lt;tt&gt;server&lt;/tt&gt; (sic) command and specifying the server DNS name or IPv4 or IPv6 address; the server requires no prior configuration. The &lt;tt&gt;iburst&lt;/tt&gt; option described later on this page is recommended for clients, as this speeds up initial synchronization from several minutes to several seconds. The &lt;tt&gt;burst&lt;/tt&gt; option described later on this page can be useful to reduce jitter on very noisy dial-up or ISDN network links.&lt;/p&gt;
&lt;p&gt;Ordinarily, the program automatically manages the poll interval between the default minimum and maximum values. The &lt;tt&gt;minpoll&lt;/tt&gt; and &lt;tt&gt;maxpoll&lt;/tt&gt; options can be used to bracket the range. Unless noted otherwise, these options should not be used with reference clock drivers.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;symmetric-activepassive-mode&#34;&gt;Symmetric Active/Passive Mode&lt;/h4&gt;
&lt;p&gt;Symmetric active/passive mode is intended for configurations were a clique of low-stratum peers operate as mutual backups for each other. Each peer operates with one or more primary reference sources, such as a radio clock, or a set of secondary (stratum, 2) servers known to be reliable and authentic. Should one of the peers lose all reference sources or simply cease operation, the other peers will automatically reconfigure so that time and related values can flow from the surviving peers to all hosts in the subnet. In some contexts this would be described as a &amp;ldquo;push-pull&amp;rdquo; operation, in that the peer either pulls or pushes the time and related values depending on the particular configuration.&lt;/p&gt;
&lt;p&gt;In symmetric active mode a peer symmetric active (mode 1) message to a designated peer. If a matching configured symmetric active association is found, the designated peer returns a symmetric active message. If no matching association is found, the designated peer mobilizes a ephemeral symmetric passive association and returns a symmetric passive (mode 2) message. Since an intruder can impersonate a symmetric active peer and cause a spurious symmetric passive association to be mobilized, symmetric passive mode should always be cryptographically validated.&lt;/p&gt;
&lt;p&gt;A peer is configured in symmetric active mode using the &lt;tt&gt;peer&lt;/tt&gt; command and specifying the other peer DNS name or IPv4 or IPv6 address. The &lt;tt&gt;burst&lt;/tt&gt; and &lt;tt&gt;iburst&lt;/tt&gt; options should not be used in symmetric modes, as this can upset the intended symmetry of the protocol and result in spurious duplicate or dropped messages.&lt;/p&gt;
&lt;p&gt;As symmetric modes are most often used as root servers for moderate to large subnets where rapid response is required, it is generally best to set the minimum and maximum poll intervals of each root server to the same value using the &lt;tt&gt;minpoll&lt;/tt&gt; and &lt;tt&gt;maxpoll&lt;/tt&gt; options.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;broadcastmulticast-modes&#34;&gt;Broadcast/Multicast Modes&lt;/h4&gt;
&lt;p&gt;NTP broadcast and multicast modes are intended for configurations involving one or a few servers and a possibly very large client population. Broadcast mode can be used with Ethernet, FDDI and WiFi spans interconnected by hubs or switches. Ordinarily, broadcast packets do not extend beyond a level-3 router. Where service is intended beyond a level-3 router, multicast mode can be used. Additional information is on the &lt;a href=&#34;/archives/4.2.6-series/manyopt&#34;&gt;Automatic NTP Configuration Options&lt;/a&gt; page.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;manycast-mode&#34;&gt;Manycast Mode&lt;/h4&gt;
&lt;p&gt;Manycast mode is a automatic discovery and configuration paradigm new to NTPv4. It is intended as a means for a multicast client to troll the nearby network neighborhood to find cooperating manycast servers, validate them using cryptographic means and evaluate their time values with respect to other servers that might be lurking in the vicinity. The intended result is that each manycast client mobilizes ephemeral client associations with some number of the &amp;ldquo;best&amp;rdquo; of the nearby manycast servers, yet automatically reconfigures to sustain this number of servers should one or another fail. Additional information is on the &lt;a href=&#34;/archives/4.2.6-series/manyopt&#34;&gt;Automatic NTP Configuration Options&lt;/a&gt; page.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;orphan-mode&#34;&gt;Orphan Mode&lt;/h4&gt;
&lt;p&gt;Sometimes an NTP subnet becomes isolated from all UTC sources such as local reference clocks or Internet time servers. In such cases it may be necessary that the subnet servers and clients remain synchronized to a common timescale, not necessarily the UTC timescale. Previously, this function was provided by the local clock driver to simulate a UTC source. A server with this driver could be used to synchronize other hosts in the subnet directly or indirectly.&lt;/p&gt;
&lt;p&gt;There are many disadvantages using the local clock driver, primarily that the subnet is vulnerable to single-point failures and multiple server redundancy is not possible. Orphan mode is intended to replace the local clock driver. It provides a single simulated UTC source with multiple servers and provides seamless switching as servers fail and recover.&lt;/p&gt;
&lt;p&gt;A common configuration for private networks includes one or more core servers operating at the lowest stratum. Good practice is to configure each of these servers as backup for the others using symmetric or broadcast modes. As long as at least one core server can reach a UTC source, the entire subnet can synchronize to it.&lt;/p&gt;
&lt;p&gt;If no UTC sources are available to any core server, one of them can provide a simulated UTC source for all other hosts in the subnet. However, only one core server can simulate the UTC source and all direct dependents, called orphan children, must select the same one, called the orphan parent.&lt;/p&gt;
&lt;p&gt;A host is enabled for orphan mode using the &lt;tt&gt;tos orphan &lt;em&gt;stratum&lt;/em&gt;&lt;/tt&gt; command, where &lt;tt&gt;&lt;em&gt;stratum&lt;/em&gt;&lt;/tt&gt; is some stratum less than 16 and greater than any anticipated stratum that might occur with configured Internet time servers. However, sufficient headroom should remain so every subnet host dependent on the orphan children has stratum less than 16. Where no associations for other servers or reference clocks are configured, the orphan stratum can be set to 1. These are the same considerations that guide the local clock driver stratum selection.&lt;/p&gt;
&lt;p&gt;A orphan parent with no sources shows reference ID &lt;code&gt;LOOP&lt;/code&gt; if operating at stratum 1 and 127.0.0.1 (Unix loopback address) otherwise. While ordinary NTP clients use a selection metric based on delay and dispersion, orphan children use a metric computed from the IP address of each core server. Each orphan child chooses the orphan parent as the root server with the smallest metric.&lt;/p&gt;
&lt;p&gt;For orphan mode to work well, each core server with available sources should operate at the same stratum. All core servers and orphan children should include the same &lt;code&gt;tos&lt;/code&gt; command in the configuration file. Each orphan child should include in the configuration file all root servers.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/archives/pic/peer.gif&#34; alt=&#34;gif&#34;&gt;&lt;/p&gt;
&lt;p&gt;For example, consider the peer network configuration above, where two or more campus primary or secondary (stratum 2) servers are configured with reference clocks or public Internet primary servers and with each other using symmetric modes. With this configuration a server that loses all sources continues to discipline the system clock using the other servers as backup. Only the core servers and orphan children need to be enabled for orphan mode.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/archives/pic/broad.gif&#34; alt=&#34;gif&#34;&gt;&lt;/p&gt;
&lt;p&gt;For broadcast networks each core server is configured in both broadcast server and broadcast client modes as shown above. Orphan children operate as broadcast clients of all core servers. As in peer networks, the core servers back up each other and only they and the orphan children need to be enabled for orphan mode.&lt;/p&gt;
&lt;p&gt;In normal operation subnet hosts operate below stratum 5, so the subnet is automatically configured as described in the NTP specification. If all UTC sources are lost, all core servers become orphans and the orphan children will select the same root server to become the orphan parent.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;burst-options&#34;&gt;Burst Options&lt;/h4&gt;
&lt;p&gt;There are two burst options where a single poll event triggers a burst of eight packets at 2-s intervals instead of the normal one packet. They should be used only with the &lt;tt&gt;server&lt;/tt&gt; and &lt;tt&gt;pool&lt;/tt&gt; commands, but not with reference clock drivers nor symmetric peers. The &lt;tt&gt;burst&lt;/tt&gt; option sends a burst when the server is reachable, while the &lt;tt&gt;iburst&lt;/tt&gt; option sends a burst when the server is unreachable. Each mode is independently of the other and both can be used at the same time. In either mode the client sends one packet, waits for the reply, then sends the remaining packets in the burst. This may be useful to allow a modem to complete a call.&lt;/p&gt;
&lt;p&gt;In both modes received server packets update the clock filter, which selects the best (most accurate) time values. When the last packet in the burst is sent, the next received packet updates the system variables and adjusts the system clock as if only a single packet exchange had occurred.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;iburst&lt;/tt&gt; option is useful where the system clock must be set quickly or when the network attachment requires an initial calling or training sequence. The burst is initiated only when the server first becomes reachable. This improves accuracy with intermittent connections typical of PPP and ISDN services. Outliers due to initial dial-up delays, etc., are avoided and the client sets the clock within a few seconds after the first received packet.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;burst&lt;/tt&gt; option can be configured in cases of excessive network jitter or when the network attachment requires an initial calling or training sequence. The burst is initiated at each poll interval when the server is reachable. The number of packets in the burst is determined by the poll interval so that the average interval between packets is no less than 16. At a poll interval of 16 s, only one packet is sent in the burst; at 32 s, two packets are sent and so forth until at 128 s and above eight packets are sent.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Association Management</title>
      <link>/archives/4.2.8-series/assoc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.8-series/assoc/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice51.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Make sure who your friends are.&lt;/p&gt;
&lt;p&gt;Last update: 31-Jan-2014 06:54 UTC&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.8-series/assoc/#association-modes&#34;&gt;Association Modes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.8-series/assoc/#clientserver-mode&#34;&gt;Client/Server Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.8-series/assoc/#symmetric-activepassive-mode&#34;&gt;Symmetric Active/Passive Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.8-series/assoc/#broadcastmulticast-modes&#34;&gt;Broadcast/Multicast Modes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.8-series/assoc/#manycast-and-pool-modes&#34;&gt;Manycast and Pool Modes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.8-series/assoc/#poll-interval-management&#34;&gt;Poll Interval Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.8-series/assoc/#burst-options&#34;&gt;Burst Options&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;association-modes&#34;&gt;Association Modes&lt;/h4&gt;
&lt;p&gt;This page describes the various modes of operation provided in NTPv4. There are three types of associations in NTP: &lt;em&gt;persistent&lt;/em&gt;, &lt;em&gt;preemptable&lt;/em&gt; and &lt;em&gt;ephemeral&lt;/em&gt;. Persistent associations are mobilized by a configuration command and never demobilized. Preemptable associations, which are new to NTPv4, are mobilized by a configuration command which includes the &lt;tt&gt;preempt&lt;/tt&gt; option or upon arrival of an automatic server discovery packet. They are are demobilized by timeout or when preempted by a &amp;ldquo;better&amp;rdquo; server, as described on the &lt;a href=&#34;/archives/4.2.8-series/discover&#34;&gt;Automatic Server Discovery Schemes&lt;/a&gt; page. Ephemeral associations are mobilized upon arrival of broadcast or multicast server packets and demobilized by timeout.&lt;/p&gt;
&lt;p&gt;Ordinarily, successful mobilization of ephemeral associations requires the server to be cryptographically authenticated to the client. This can be done using either symmetric key or Autokey public key cryptography, as described on the &lt;a href=&#34;/archives/4.2.8-series/authentic&#34;&gt;Authentication Support&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;There are three principal modes of operation in NTP: client/server, symmetric active/passive and broadcast/multicast. There are three automatic server discovery schemes in NTP: broadcast/multicast, manycast and pool described on the &lt;a href=&#34;/archives/4.2.8-series/discover&#34;&gt;Automatic Server Discovery Schemes&lt;/a&gt; page. In addition, the &lt;a href=&#34;/archives/4.2.8-series/assoc/#burst-options&#34;&gt;burst options&lt;/a&gt; and &lt;a href=&#34;/archives/4.2.8-series/orphan&#34;&gt;orphan mode&lt;/a&gt; can be used in appropriate cases.&lt;/p&gt;
&lt;p&gt;Following is a summary of the operations in each mode. Note that reference to option applies to the commands described on the &lt;a href=&#34;/archives/4.2.8-series/confopt&#34;&gt;Server Commands and Options&lt;/a&gt; page. See that page for applicability and defaults.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;clientserver-mode&#34;&gt;Client/Server Mode&lt;/h4&gt;
&lt;p&gt;Client/server mode is the most common configuration in the Internet today. It operates in the classic remote-procedure-call (RPC) paradigm with stateless servers and stateful clients. In this mode a host sends a client (mode 3) request to the specified server and expects a server (mode 4) reply at some future time. In some contexts this would be described as a &amp;ldquo;pull&amp;rdquo; operation, in that the host pulls the time and related values from the server.&lt;/p&gt;
&lt;p&gt;A host is configured in client mode using the &lt;tt&gt;server&lt;/tt&gt; (sic) command and specifying the server DNS name or IPv4 or IPv6 address; the server requires no prior configuration. The &lt;tt&gt;iburst&lt;/tt&gt; option described later on this page is recommended for clients, as this speeds up initial synchronization from several minutes to several seconds. The &lt;tt&gt;burst&lt;/tt&gt; option described later on this page can be useful to reduce jitter on very noisy dial-up or ISDN network links.&lt;/p&gt;
&lt;p&gt;Ordinarily, the program automatically manages the poll interval between the default minimum and maximum values. The &lt;tt&gt;minpoll&lt;/tt&gt; and &lt;tt&gt;maxpoll&lt;/tt&gt; options can be used to bracket the range. Unless noted otherwise, these options should not be used with reference clock drivers.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;symmetric-activepassive-mode&#34;&gt;Symmetric Active/Passive Mode&lt;/h4&gt;
&lt;p&gt;Symmetric active/passive mode is intended for configurations where a clique of low-stratum peers operate as mutual backups for each other. Each peer operates with one or more primary reference sources, such as a reference clock, or a set of secondary (stratum, 2) servers known to be reliable and authentic. Should one of the peers lose all reference sources or simply cease operation, the other peers will automatically reconfigure so that time and related values can flow from the surviving peers to all hosts in the subnet. In some contexts this would be described as a &amp;ldquo;push-pull&amp;rdquo; operation, in that the peer either pulls or pushes the time and related values depending on the particular configuration.&lt;/p&gt;
&lt;p&gt;A symmetric active peer sends a symmetric active (mode 1) message to a designated peer. If a matching configured symmetric active association is found, the designated peer returns a symmetric active message. If no matching association is found, the designated peer mobilizes a ephemeral symmetric passive association and returns a symmetric passive (mode 2) message. Since an intruder can impersonate a symmetric active peer and cause a spurious symmetric passive association to be mobilized, symmetric passive mode should always be cryptographically validated.&lt;/p&gt;
&lt;p&gt;A peer is configured in symmetric active mode using the &lt;tt&gt;peer&lt;/tt&gt; command and specifying the other peer DNS name or IPv4 or IPv6 address. The &lt;tt&gt;burst&lt;/tt&gt; and &lt;tt&gt;iburst&lt;/tt&gt; options should not be used in symmetric modes, as this can upset the intended symmetry of the protocol and result in spurious duplicate or dropped messages.&lt;/p&gt;
&lt;p&gt;As symmetric modes are most often used as root servers for moderate to large subnets where rapid response is required, it is generally best to set the minimum and maximum poll intervals of each root server to the same value using the &lt;tt&gt;minpoll&lt;/tt&gt; and &lt;tt&gt;maxpoll&lt;/tt&gt; options.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;broadcastmulticast-modes&#34;&gt;Broadcast/Multicast Modes&lt;/h4&gt;
&lt;p&gt;NTP broadcast and multicast modes are intended for configurations involving one or a few servers and a possibly very large client population. Broadcast mode can be used with Ethernet, FDDI and WiFi spans interconnected by hubs or switches. Ordinarily, broadcast packets do not extend beyond a level-3 router. Where service is intended beyond a level-3 router, multicast mode can be used. Additional information is on the &lt;a href=&#34;/archives/4.2.8-series/discover&#34;&gt;Automatic NTP Configuration Options&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;A server is configured to send broadcast or multicast messages using the &lt;tt&gt;broadcast&lt;/tt&gt; command and specifying the subnet address for broadcast or the multicast group address for multicast. A broadcast client is enabled using the &lt;a href=&#34;/archives/4.2.8-series/confopt/#auxiliary-commands&#34;&gt;&lt;tt&gt;broadcastclient&lt;/tt&gt;&lt;/a&gt; command, while a multicast client is enabled using the &lt;a href=&#34;/archives/4.2.8-series/confopt/#auxiliary-commands&#34;&gt;&lt;tt&gt;multicastclient&lt;/tt&gt;&lt;/a&gt; command and specifying the multicast group address. Multiple commands of either type can be used. However, the association is not mobilized until the first broadcast or multicast message is actually received.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;manycast-and-pool-modes&#34;&gt;Manycast and Pool Modes&lt;/h4&gt;
&lt;p&gt;Manycast and pool modes are automatic discovery and configuration paradigms new to NTPv4. They are intended as a means for a client to troll the nearby network neighborhood to find cooperating willing servers, validate them using cryptographic means and evaluate their time values with respect to other servers that might be lurking in the vicinity. The intended result is that each client mobilizes ephemeral client associations with some number of the &amp;ldquo;best&amp;rdquo; of the nearby servers, yet automatically reconfigures to sustain this number of servers should one or another fail. Additional information is on the &lt;a href=&#34;/archives/4.2.8-series/discover&#34;&gt;Automatic Server Discovery Schemes&lt;/a&gt; page.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;poll-interval-management&#34;&gt;Poll Interval Management&lt;/h4&gt;
&lt;p&gt;NTP uses an intricate heuristic algorithm to automatically control the poll interval for maximum accuracy consistent with minimum network overhead. The algorithm measures the incidental offset and jitter to determine the best poll interval. When &lt;tt&gt;ntpd&lt;/tt&gt; starts, the interval is the default minimum 64 s. Under normal conditions when the clock discipline has stabilized, the interval increases in steps to the default maximum 1024 s. In addition, should a server become unreachable after some time, the interval increases in steps to the maximum in order to reduce network overhead. Additional information about the algorithm is on the &lt;a href=&#34;/archives/4.2.8-series/poll&#34;&gt;Poll Program&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;The default poll interval range is suitable for most conditions, but can be changed using options on the &lt;a href=&#34;/archives/4.2.8-series/confopt&#34;&gt;Server Commands and Options&lt;/a&gt; and &lt;a href=&#34;/archives/4.2.8-series/miscopt&#34;&gt;Miscellaneous Options&lt;/a&gt; pages. However, when using maximum intervals much larger than the default, the residual clock frequency error must be small enough for the discipline loop to capture and correct. The capture range is 500 PPM with a 64-s interval decreasing by a factor of two for each interval doubling. At a 36-hr interval, for example, the capture range is only 0.24 PPM.&lt;/p&gt;
&lt;p&gt;In the NTPv4 specification and reference implementation, the poll interval is expressed in log&lt;sub&gt;2&lt;/sub&gt; units, properly called the &lt;em&gt;poll exponent.&lt;/em&gt; It is constrained by the lower limit &lt;tt&gt;minpoll&lt;/tt&gt; and upper limit &lt;tt&gt;maxpoll&lt;/tt&gt; options of the &lt;a href=&#34;/archives/4.2.8-series/confopt/#server-command-options&#34;&gt;&lt;tt&gt;server&lt;/tt&gt;&lt;/a&gt; command. The limits default to 6 (64 s) and 10 (1024 s), respectively, which are appropriate for the vast majority of cases.&lt;/p&gt;
&lt;p&gt;As a rule of thumb, the expected errors increase by a factor of two as the poll interval increases by a factor of four. The poll interval algorithm slowly increases the poll interval when jitter dominates the error budget, but quickly reduces the interval when wander dominates it. More information about this algorithm is on the &lt;a href=&#34;/archives/4.2.8-series/warp&#34;&gt;How NTP Works&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;There is normally no need to change the poll limits, as the poll interval is managed automatically as a function of prevailing jitter and wander. The most common exceptions are the following.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;With fast, lightly loaded LANs and modern processors, the nominal Allan intercept is about 500 s. In these cases the expected errors can be further reduced using a poll exponent of 4 (16 s). In the case of the pulse-per-second (PPS) driver, this is the recommended value.&lt;/li&gt;
&lt;li&gt;With symmetric modes the most stable behavior results when both peers are configured in symmetric active mode with matching poll intervals of 6 (64 s).&lt;/li&gt;
&lt;li&gt;The poll interval should not be modified for reference clocks, with the single exception the ACTS telephone modem driver. In this case the recommended minimum and maximum intervals are 12 (1.1 hr) and 17 (36 hr), respectively.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;burst-options&#34;&gt;Burst Options&lt;/h4&gt;
&lt;p&gt;Occasionally it is necessary to send packets temporarily at intervals less than the poll interval. For instance, with the &lt;tt&gt;burst&lt;/tt&gt; and &lt;tt&gt;iburst&lt;/tt&gt; options of the &lt;a href=&#34;/archives/4.2.8-series/confopt/#server-command-options&#34;&gt;&lt;tt&gt;server&lt;/tt&gt;&lt;/a&gt; command, the poll program sends a burst of several packets at 2-s intervals. In either case the poll program avoids sending needless packets if the server is not responding. The client begins a burst with a single packet. When the first packet is received from the server, the client continues with the remaining packets in the burst. If the first packet is not received within 64 s, it will be sent again for two additional retries before beginning backoff. The result is to minimize network load if the server is not responding. Additional details are on the &lt;a href=&#34;/archives/4.2.8-series/poll&#34;&gt;Poll Program&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;There are two burst options where a single poll event triggers a burst. They should be used only with the &lt;tt&gt;server&lt;/tt&gt; and &lt;tt&gt;pool&lt;/tt&gt; commands, but not with reference clock drivers nor symmetric mode peers. In both modes, received server packets update the clock filter, which selects the best (most accurate) time values. When the last packet in the burst is sent, the next received packet updates the system variables and adjusts the system clock as if only a single packet exchange had occurred.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;iburst&lt;/tt&gt; option is useful where the system clock must be set quickly or when the network attachment requires an initial calling or training sequence, as in PPP or ISDN services. In general, this option is recommended for &lt;tt&gt;server&lt;/tt&gt; and &lt;tt&gt;pool&lt;/tt&gt; commands. A burst is sent only when the server is unreachable; in particular, when first starting up. Ordinarily, the clock is set within a few seconds after the first received packet. See the &lt;a href=&#34;/archives/4.2.8-series/clock&#34;&gt;Clock State Machine&lt;/a&gt; page for further details about the startup behavior.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;burst&lt;/tt&gt; option is useful in cases of severe network jitter or when the network attachment requires an initial calling or training sequence. This option is recommended when the minimum poll exponent is larger than 10 (1024 s). A burst is sent only when the server is reachable. The number of packets in the burst is determined by the poll interval so that the average interval between packets (headway) is no less than the minimum poll interval for the association.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Austron 2200A/2201A GPS Receivers</title>
      <link>/archives/drivers/driver10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/drivers/driver10/</guid>
      <description>
        
        
        &lt;p&gt;Author: David L. Mills (&lt;a href=&#34;mailto:mills@udel.edu&#34;&gt;mills@udel.edu&lt;/a&gt;)&lt;br&gt;
Last update: 11-Sep-2010 05:56 UTC&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver10/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver10/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver10/#monitor-data&#34;&gt;Monitor Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver10/#fudge-factors&#34;&gt;Fudge Factors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver10/#additional-information&#34;&gt;Additional Information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;Address: 127.127.10.&lt;em&gt;u&lt;/em&gt;&lt;br&gt;
Reference ID: &lt;tt&gt;GPS&lt;/tt&gt;&lt;br&gt;
Driver ID: &lt;tt&gt;GPS_AS2201&lt;/tt&gt;&lt;br&gt;
Serial Port: &lt;tt&gt;/dev/gps_u_&lt;/tt&gt;; 9600 baud, 8-bits, no parity&lt;br&gt;
Features: &lt;tt&gt;tty_clk&lt;/tt&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;This driver supports the Austron 2200A/2201A GPS/LORAN Synchronized Clock and Timing Receiver connected via a serial port. It supports several special features of the clock, including the Input Buffer Module, Output Buffer Module, IRIG-B Interface Module and LORAN Assist Module. It requires the RS232 Buffered Serial Interface module for communication with the driver.&lt;/p&gt;
&lt;p&gt;For use with a single computer, the receiver can be connected directly to the receiver. For use with multiple computers, one of them is connected directly to the receiver and generates the polling messages. The other computers just listen to the receiver output directly or through a buffer amplifier. For computers that just listen, &lt;tt&gt;fudge flag2&lt;/tt&gt; must be set and the &lt;tt&gt;ppsclock&lt;/tt&gt; streams module configured on each of them.&lt;/p&gt;
&lt;p&gt;This receiver is capable of a comprehensive and large volume of statistics and operational data. The specific data collection commands and attributes are embedded in the driver source code; however, the collection process can be enabled or disabled using the flag4 flag. If set, collection is enabled; if not, which is the default, it is disabled. A comprehensive suite of data reduction and summary scripts is in the ./scripts/stats directory of the ntp3 distribution.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;monitor-data&#34;&gt;Monitor Data&lt;/h4&gt;
&lt;p&gt;When enabled by the &lt;tt&gt;flag4&lt;/tt&gt; fudge flag, every received timecode is written as-is to the &lt;tt&gt;clockstats&lt;/tt&gt; file.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;fudge-factors&#34;&gt;Fudge Factors&lt;/h4&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;tt&gt;time1 _time_&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Specifies the time offset calibration factor, in seconds and fraction, with default 0.0.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;time2 _time_&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Not used by this driver.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;stratum _number_&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Specifies the driver stratum, in decimal from 0 to 15, with default 0.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;refid _string_&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Specifies the driver reference identifier, an ASCII string from one to four characters, with default &lt;tt&gt;GPS&lt;/tt&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;flag1 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Not used by this driver.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;flag2 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Set for computers that listen-only.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;flag3 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Not used by this driver.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;flag4 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Enable verbose &lt;tt&gt;clockstats&lt;/tt&gt; recording if set.&lt;/dd&gt;
&lt;/dl&gt;
&lt;hr&gt;
&lt;h4 id=&#34;additional-information&#34;&gt;Additional Information&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;/archives/4.2.8-series/refclock&#34;&gt;Reference Clock Drivers&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Authentication Commands and Options</title>
      <link>/archives/4.2.8-series/authopt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.8-series/authopt/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice44.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/%7emills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Our resident cryptographer; now you see him, now you don&amp;rsquo;t.&lt;/p&gt;
&lt;p&gt;Last update: 24-Jul-2018 07:27 UTC&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;commands-and-options&#34;&gt;Commands and Options&lt;/h4&gt;
&lt;p&gt;Unless noted otherwise, further information about these commands is on the &lt;a href=&#34;/archives/4.2.8-series/authentic&#34;&gt;Authentication Support&lt;/a&gt; page.&lt;/p&gt;
&lt;dl&gt;
&lt;dt id=&#34;automax&#34;&gt;&lt;tt&gt;automax [_logsec_]&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Specifies the interval between regenerations of the session key list used with the Autokey protocol, as a power of 2 in seconds. Note that the size of the key list for each association depends on this interval and the current poll interval. The default interval is 12 (about 1.1 hr). For poll intervals above the specified interval, a session key list with a single entry will be regenerated for every message sent. See the [Autokey Public Key Authentication](autokey.html) page for further information.&lt;/dd&gt;
&lt;dt id=&#34;controlkey&#34;&gt;&lt;tt&gt;controlkey _keyid_&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Specifies the key ID for the [&lt;tt&gt;ntpq&lt;/tt&gt;](ntpq.html) utility, which uses the standard protocol defined in RFC-1305\. The &lt;tt&gt;_keyid_&lt;/tt&gt; argument is the key ID for a [trusted key](authopt.html#trustedkey), where the value can be in the range 1 to 65535, inclusive.&lt;/dd&gt;
&lt;dt id=&#34;crypto&#34;&gt;&lt;tt&gt;crypto [digest _digest_] [host _name_] [ident _name_] [pw _password_] [randfile _file_]&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;This command activates the Autokey public key cryptography and loads the required host keys and certificate. If one or more files are unspecified, the default names are used. Unless the complete path and name of the file are specified, the location of a file is relative to the keys directory specified in the &lt;tt&gt;keysdir&lt;/tt&gt; configuration command with default &lt;tt&gt;/usr/local/etc&lt;/tt&gt;. See the [Autokey Public Key Authentication](autokey.html) page for further information. Following are the options.&lt;/dd&gt;
&lt;dd&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;tt&gt;digest&lt;/tt&gt; _digest_&lt;/dt&gt;
&lt;dd&gt;Specify the message digest algorithm, with default MD5\. If the OpenSSL library is installed, &lt;tt&gt;_digest_&lt;/tt&gt; can be be any message digest algorithm supported by the library. The current selections are: &lt;tt&gt;MD2&lt;/tt&gt;, &lt;tt&gt;MD4&lt;/tt&gt;, &lt;tt&gt;MD5,&lt;/tt&gt; &lt;tt&gt;MDC2&lt;/tt&gt;, &lt;tt&gt;RIPEMD160&lt;/tt&gt;, &lt;tt&gt;SHA&lt;/tt&gt; and &lt;tt&gt;SHA1&lt;/tt&gt;. All participants in an Autokey subnet must use the same algorithm. The Autokey message digest algorithm is separate and distinct from the symmetric key message digest algorithm. Note: If compliance with FIPS 140-2 is required, the algorithm must be ether &lt;tt&gt;SHA&lt;/tt&gt; or &lt;tt&gt;SHA1&lt;/tt&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;host _name_&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Specify the cryptographic media names for the host, sign and certificate files. If this option is not specified, the default name is the string returned by the Unix &lt;tt&gt;gethostname()&lt;/tt&gt; routine.&lt;/dd&gt;
&lt;dd&gt;&lt;span class=&#34;style1&#34;&gt;Note: In the latest Autokey version, this option has no effect other than to change the cryptographic media file names.&lt;/span&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;ident _group_&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Specify the cryptographic media names for the identity scheme files. If this option is not specified, the default name is the string returned by the Unix &lt;tt&gt;gethostname()&lt;/tt&gt; routine.&lt;/dd&gt;
&lt;dd&gt;&lt;span class=&#34;style1&#34;&gt;Note: In the latest Autokey version, this option has no effect other than to change the cryptographic media file names.&lt;/span&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;pw _password_&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Specifies the password to decrypt files previously encrypted by the &lt;tt&gt;ntp-keygen&lt;/tt&gt; program with the &lt;tt&gt;-p&lt;/tt&gt; option. If this option is not specified, the default password is the string returned by the Unix &lt;tt&gt;gethostname()&lt;/tt&gt; routine.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;randfile _file_&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Specifies the location of the random seed file used by the OpenSSL library. The defaults are described on the [&lt;tt&gt;ntp-keygen&lt;/tt&gt; page](keygen.html).&lt;/dd&gt;
&lt;/dl&gt;
&lt;/dd&gt;
&lt;dt id=&#34;ident&#34;&gt;&lt;tt&gt;ident _group_&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Specifies the group name for ephemeral associations mobilized by broadcast and symmetric passive modes. See the [Autokey Public-Key Authentication](autokey.html) page for further information.&lt;/dd&gt;
&lt;dt id=&#34;keys&#34;&gt;&lt;tt&gt;keys _path_&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Specifies the complete directory path for the key file containing the key IDs, key types and keys used by &lt;tt&gt;ntpd&lt;/tt&gt;, &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; when operating with symmetric key cryptography. The format of the keyfile is described on the [&lt;tt&gt;ntp-keygen&lt;/tt&gt; page](keygen.html). This is the same operation as the &lt;tt&gt;-k&lt;/tt&gt; command line option. Note that the directory path for Autokey cryptographic media is specified by the &lt;tt&gt;keysdir&lt;/tt&gt; command.&lt;/dd&gt;
&lt;dt id=&#34;keysdir&#34;&gt;&lt;tt&gt;keysdir _path_&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Specifies the complete directory path for the Autokey cryptographic keys, parameters and certificates. The default is &lt;tt&gt;/usr/local/etc/&lt;/tt&gt;. Note that the path for the symmetric keys file is specified by the &lt;tt&gt;keys&lt;/tt&gt; command.&lt;/dd&gt;
&lt;dt id=&#34;requestkey&#34;&gt;&lt;tt&gt;requestkey _keyid_&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Specifies the key ID for the [&lt;tt&gt;ntpdc&lt;/tt&gt;](ntpdc.html) utility program, which uses a proprietary protocol specific to this implementation of &lt;tt&gt;ntpd&lt;/tt&gt;. The &lt;tt&gt;_keyid_&lt;/tt&gt; argument is a key ID for a [trusted key](authopt.html#trustedkey), in the range 1 to 65535, inclusive.&lt;/dd&gt;
&lt;dt id=&#34;revoke&#34;&gt;&lt;tt&gt;revoke [_logsec_]&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Specifies the interval between re-randomization of certain cryptographic values used by the Autokey scheme, as a power of 2 in seconds, with default 17 (36 hr). See the [Autokey Public-Key Authentication](autokey.html) page for further information.&lt;/dd&gt;
&lt;dt id=&#34;trustedkey&#34;&gt;&lt;tt&gt;trustedkey [_keyid_ | (_lowid_ ... _highid_)] [...]&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Specifies the key ID(s) which are trusted for the purposes of authenticating peers with symmetric key cryptography. Key IDs used to authenticate &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; operations must be listed here and additionally be enabled with [controlkey](authopt.html#controlkey) and/or [requestkey](authopt.html#requestkey). The authentication procedure for time transfer requires that both the local and remote NTP servers employ the same key ID and secret for this purpose, although different keys IDs may be used with different servers. Ranges of trusted key IDs may be specified: &lt;tt&gt;trustedkey (1 ... 19) 1000 (100 ... 199)&lt;/tt&gt; enables the lowest 120 key IDs which start with the digit 1\. The spaces surrounding the ellipsis are required when specifying a range.&lt;/dd&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Authentication Options</title>
      <link>/archives/4.1.0/authopt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.1.0/authopt/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice44.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/%7emills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Our resident cryptographer; now you see him, now you don&amp;rsquo;t.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.0/authopt/#authentication-support&#34;&gt;Authentication Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.0/authopt/#symmetric-key-scheme&#34;&gt;Symmetric Key Scheme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.0/authopt/#public-key-scheme&#34;&gt;Public Key Scheme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.0/authopt/#leapseconds-table&#34;&gt;Leapseconds Table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.0/authopt/#key-management&#34;&gt;Key Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.0/authopt/#authentication-commands&#34;&gt;Authentication Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.0/authopt/#files&#34;&gt;Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.0/authopt/#bugs&#34;&gt;Bugs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;authentication-support&#34;&gt;Authentication Support&lt;/h4&gt;
&lt;p&gt;Authentication support allows the NTP client to verify that the server is in fact known and trusted and not an intruder intending accidentally or on purpose to masquerade as that server. The NTPv3 specification RFC-1305 defines an scheme which provides cryptographic authentication of received NTP packets. Originally, this was done using the Data Encryption Standard (DES) algorithm operating in Cipher Block Chaining (CBC) mode, commonly called
DES-CBC. Subsequently, this was augmented by the RSA Message Digest 5 (MD5) algorithm using a private key, commonly called keyed-MD5. Either algorithm computes a message digest, or one-way hash, which can be used to verify the server has the correct private key and key identifier.&lt;/p&gt;
&lt;p&gt;NTPv4 retains the NTPv3 schemes, properly described as symmetric-key cryptography and, in addition, provides a new Autokey scheme based on public-key cryptography. Public-key cryptography is generally considered more secure than symmetric-key cryptography, since the security is based on a private value which is generated by each server and never revealed. With Autokey all key distribution and management functions involve only public values, which considerably simplifies key distribution and storage.&lt;/p&gt;
&lt;p&gt;Authentication is configured separately for each association using the &lt;tt&gt;key&lt;/tt&gt; or &lt;tt&gt;autokey&lt;/tt&gt; subcommands on the &lt;tt&gt;peer&lt;/tt&gt;, &lt;tt&gt;server&lt;/tt&gt;, &lt;tt&gt;broadcast&lt;/tt&gt; and &lt;tt&gt;manycastclient&lt;/tt&gt; commands as described in the &lt;a href=&#34;/archives/4.1.0/config&#34;&gt;Configuration Options&lt;/a&gt; page. The authentication
options described below specify the suite of keys, select the key for each configured association and manage the configuration operations.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;auth&lt;/tt&gt; flag controls whether new associations or remote configuration commands require cryptographic authentication. This flag can be set or reset by the &lt;tt&gt;enable&lt;/tt&gt; and &lt;tt&gt;disable&lt;/tt&gt; configuration commands and also by remote configuration commands sent by a &lt;tt&gt;ntpdc&lt;/tt&gt; program running in another machine. If this flag is enabled, which is the default case, new broadcast client and symmetric passive associations and remote configuration commands must be cryptographically authenticated using either symmetric-key or public-key schemes. If this flag is disabled, these operations are effective even if not cryptographic authenticated. It should be understood that operating in the latter mode invites a significant vulnerability where a rogue hacker can seriously disrupt client timekeeping.&lt;/p&gt;
&lt;p&gt;In networks with firewalls and large numbers of broadcast clients it may be acceptable to disable authentication, since that avoids key distribution and simplifies network maintenance. However, when the configuration file contains host names, or when a server or client is configured remotely, host names are resolved using the DNS and a separate name resolution process. In order to protect against bogus name server messages, name resolution messages are authenticated using an internally generated key which is normally invisible to the user. However, if cryptographic support is disabled, the name resolution process will fail. This can be avoided either by specifying IP addresses instead of host names, which is generally inadvisable, or by enabling the flag for
name resolution and disabled it once the name resolution process is complete.&lt;/p&gt;
&lt;p&gt;An attractive alternative where multicast support is available is manycast mode, in which clients periodically troll for servers. Cryptographic authentication in this mode uses public-key schemes as described below. The principle advantage of this manycast mode is that potential servers need not be configured in advance, since the client finds them during regular operation, and the configuration files for all clients can be identical.&lt;/p&gt;
&lt;p&gt;In addition to the default symmetric-key cryptographic support, support for public-key cryptography is available if the requisite &lt;tt&gt;rsaref20&lt;/tt&gt; software distribution has been installed before building the distribution. Public-key cryptography provides secure authentication of servers without compromising accuracy and stability. The security model and protocol schemes for both symmetric-key and public-key cryptography are described below.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;symmetric-key-scheme&#34;&gt;Symmetric Key Scheme&lt;/h4&gt;
&lt;p&gt;The original RFC-1305 specification allows any one of possibly 65,534 keys, each distinguished by a 32-bit key identifier, to authenticate an association. The servers and clients involved must agree on the key and key identifier to authenticate NTP packets. Keys and related information are specified in a key file, usually called &lt;tt&gt;ntp.keys&lt;/tt&gt;, which must be distributed and stored using secure means beyond the scope of the NTP protocol itself. Besides the keys used for ordinary NTP associations, additional keys can be used as passwords for the &lt;a href=&#34;/archives/4.1.0/ntpq&#34;&gt;ntpq&lt;/a&gt; and &lt;a href=&#34;/archives/4.1.0/ntpdc&#34;&gt;ntpdc&lt;/a&gt; utility programs.&lt;/p&gt;
&lt;p&gt;When &lt;tt&gt;ntpd&lt;/tt&gt; is first started, it reads the key file specified in the &lt;tt&gt;keys&lt;/tt&gt; configuration command and installs the keys in the key cache. However, individual keys must be activated with the &lt;tt&gt;trustedkey&lt;/tt&gt; command before use. This allows, for instance, the installation of possibly several batches of keys and then activating or deactivating each batch remotely using &lt;tt&gt;ntpdc&lt;/tt&gt;. This also provides a revocation capability that can be used if a key becomes compromised. The &lt;tt&gt;requestkey&lt;/tt&gt; command selects the key used as the password for the &lt;tt&gt;ntpdc&lt;/tt&gt; utility, while the &lt;tt&gt;controlkey&lt;/tt&gt; command selects the key used as the password for the &lt;tt&gt;ntpq&lt;/tt&gt; utility.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;public-key-scheme&#34;&gt;Public Key Scheme&lt;/h4&gt;
&lt;p&gt;The original NTPv3 authentication scheme described in RFC-1305 continues to be supported; however, in NTPv4 an additional authentication scheme called Autokey is available. It uses MD5 message digest, RSA public-key signature and Diffie-Hellman key agreement algorithms available from several sources, but not included in the NTPv4 software distribution. In order to be effective, the &lt;tt&gt;rsaref20&lt;/tt&gt; package must be installed as described in the &lt;tt&gt;README.rsa&lt;/tt&gt; file. Once installed, the configure and build process automatically detects it and compiles the routines required. The Autokey scheme has several modes of operation corresponding to the various NTP modes supported. RSA signatures with timestamps are used in all modes to verify the source of cryptographic values. All modes use a special cookie which can be computed independently by the client and server. In symmetric modes the cookie is constructed using the Diffie-Hellman key agreement algorithm. In other modes the cookie is constructed from the IP addresses and a private value known only to the server. All modes use in addition a variant of the S-KEY scheme, in which a pseudo-random key list is generated and used in reverse order. These schemes are described along with an executive summary, current status, briefing slides and reading list, on the &lt;a href=&#34;http://www.eecis.udel.edu/~mills/autokey.html&#34;&gt;Autonomous Authentication&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;The cryptographic values used by the Autokey scheme are incorporated as a set of files generated by the &lt;a href=&#34;/archives/4.1.0/genkeys&#34;&gt;&lt;tt&gt;ntp-genkeys&lt;/tt&gt;&lt;/a&gt; program, including the symmetric private keys, public/private key pair, and the agreement parameters. See the &lt;tt&gt;ntp-genkeys&lt;/tt&gt; page for a description of the formats of these files. They contain cryptographic values generated by the algorithms of the &lt;tt&gt;rsaref20&lt;/tt&gt; package and are in printable ASCII format. All file names include the timestamp, in NTP seconds, following the default names given below. Since the file data are derived from random values seeded by the system clock and the file name includes the timestamp, every generation produces a different file and different file name.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;ntp.keys&lt;/tt&gt; file contains the DES/MD5 private keys. It must be distributed by secure means to other servers and clients sharing the same security compartment and made visible only to root. While this file is not used with the Autokey scheme, it is needed to authenticate some remote configuration commands used by the &lt;a href=&#34;/archives/4.1.0/ntpq&#34;&gt;&lt;tt&gt;ntpq&lt;/tt&gt;&lt;/a&gt; and &lt;a href=&#34;/archives/4.1.0/ntpdc&#34;&gt;&lt;tt&gt;ntpdc&lt;/tt&gt;&lt;/a&gt; utilities. The &lt;tt&gt;ntpkey&lt;/tt&gt; file contains the RSA private key. It is useful only to the machine that generated it and never shared with any other daemon or application program, so must be made visible only to root.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;ntp_dh&lt;/tt&gt; file contains the agreement parameters, which are used only in symmetric (active and passive) modes. It is necessary that both peers beginning a symmetric-mode association share the same parameters, but it does not matter which &lt;tt&gt;ntp_dh&lt;/tt&gt; file generates them. If one of the peers contains the parameters, the other peer obtains them using the Autokey protocol. If both peers contain the parameters, the most recent copy is used by both peers. If a peer does not have the parameters, they will be requested by all associations, either configured or not; but, none of the associations can proceed until one of them has received the parameters. Once loaded, the parameters can be provided on request to other clients and servers. The &lt;tt&gt;ntp_dh&lt;/tt&gt; file can be also be distributed using insecure means, since the data are public values.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;ntpkey__host_&lt;/tt&gt; file contains the RSA public key, where &lt;tt&gt;_host_&lt;/tt&gt; is the name of the host. Each host must have its own &lt;tt&gt;ntpkey__host_&lt;/tt&gt; file, which is normally provided to other hosts using the Autokey protocol Each &lt;tt&gt;server&lt;/tt&gt; or &lt;tt&gt;peer&lt;/tt&gt; association requires the public key associated with the particular server or peer to be loaded either directly from a local file or indirectly from the server using the Autokey protocol. These files can be widely distributed and stored using insecure means, since the data are public values.&lt;/p&gt;
&lt;p&gt;The optional &lt;tt&gt;ntpkey_certif__host_&lt;/tt&gt; file contains the PKI certificate for the host. This provides a binding between the host hame and RSA public key. In the current implementation the certificate is obtained by a client, if present, but the contents are ignored.&lt;/p&gt;
&lt;p&gt;Due to the widespread use of interface-specific naming, the host names used in configured and mobilized associations are determined by the Unix &lt;tt&gt;gethostname()&lt;/tt&gt; library routine. Both the &lt;tt&gt;ntp-genkeys&lt;/tt&gt; program and the Autokey protocol derive the name of the public key file using the name returned by this routine. While every server and client is required to load their own public and private keys, the public keys for each client or peer association can be obtained from the server or peer using the Autokey protocol. Note however, that at the current stage of development the authenticity of the server or peer and the cryptographic binding of the server name, address and public key is not yet established by a certificate authority or web of trust.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;leapseconds-table&#34;&gt;Leapseconds Table&lt;/h4&gt;
&lt;p&gt;The NIST provides a table showing the epoch for all historic occasions of leap second insertion since 1972. The leapsecond table shows each epoch of insertion along with the offset of International Atomic Time (TAI) with respect to Coordinated Universtal Time (UTC), as disseminated by NTP. The table can be obtained directly from NIST national time servers using &lt;tt&gt;ftp&lt;/tt&gt; as the ASCII file &lt;tt&gt;pub/leap-seconds&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;While not strictly a security function, the Autokey protocol provides means to securely retrieve the leapsecond table from a server or peer. Servers load the leapsecond table directly from the file specified in the &lt;tt&gt;crypto&lt;/tt&gt; command, while clients can obtain the table indirectly from the servers using the Autokey protocol. Once loaded, the table can be provided on request to other clients and servers.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;key-management&#34;&gt;Key Management&lt;/h4&gt;
&lt;p&gt;All key files are installed by default in &lt;tt&gt;/usr/local/etc&lt;/tt&gt;, which is normally in a shared filesystem in NFS-mounted networks and avoids installing them in each machine separately. The default can be overridden by the &lt;tt&gt;keysdir&lt;/tt&gt; configuration command. However, this is not a good place to install the private key file, since each machine needs its own file. A suitable place to install it is in &lt;tt&gt;/etc&lt;/tt&gt;, which is normally not in a shared filesystem.&lt;/p&gt;
&lt;p&gt;The recommended practice is to keep the timestamp extensions when installing a file and to install a link from the default name (without the timestamp extension) to the actual file. This allows new file generations to be activated simply by changing the link. However, &lt;tt&gt;ntpd&lt;/tt&gt; parses the link name when present to extract the extension value and sends it along with the public key and host name when requested. This allows clients to verify that the file and generation time are always current. However, the actual location of each file can be overridden by the &lt;tt&gt;crypto&lt;/tt&gt; configuration command.&lt;/p&gt;
&lt;p&gt;All cryptographic keys and related parameters should be regenerated on a periodic and automatic basis, like once per month. The &lt;tt&gt;ntp-genkeys&lt;/tt&gt; program uses the same timestamp extension for all files generated at one time, so each generation is distinct and can be readily recognized in monitoring data. While a public/private key pair must be generated by every server and client, the public keys and agreement parameters do not need to be explicitly copied to all machines in the same security compartment, since they can be obtained automatically using the Autokey protocol. However, it is necessary that all primary servers have the same agreement parameter file. The recommended way to do this is for one of the primary servers to generate that file and then copy it to the other primary servers in the same compartment using the Unix &lt;tt&gt;rdist&lt;/tt&gt; command. Future versions of the Autokey protocol are to contain provisions for an agreement protocol to do this automatically.&lt;/p&gt;
&lt;p&gt;Servers and clients can make a new generation in the following way. All machines have loaded the old generation at startup and are operating normally. At designated intervals, each machine generates a new public/private key pair and makes links from the default file names to the new file names. The &lt;tt&gt;ntpd&lt;/tt&gt; is then restarted and loads the new generation, with result clients no longer can authenticate correctly. The Autokey protocol is designed so that after a few minutes the clients time out and restart the protocol from the beginning, with result the new generation is loaded and operation continues as before. A similar procedure can be used for the agreement parameter file, but in this case precautions must be take to be sure that all machines with this file have the same copy.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;authentication-commands&#34;&gt;Authentication Commands&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;autokey [_logsec_]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the interval between regenerations of the session key list used with the Autokey protocol. Note that the size of the key list for each association depends on this interval and the current poll interval. The default interval is 12 (4096 s or about 1.1 hours). For poll intervals above the specified interval, a session key list with a single entry will be regenerated for every message sent.&lt;/p&gt;
&lt;dt id=&#34;controlkey&#34;&gt;&lt;tt&gt;controlkey _key_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the key identifier to use with the &lt;a href=&#34;/archives/4.1.0/ntpq&#34;&gt;&lt;tt&gt;ntpq&lt;/tt&gt;&lt;/a&gt; utility, which uses the standard protocol defined in RFC-1305. The &lt;tt&gt;&lt;em&gt;key&lt;/em&gt;&lt;/tt&gt; argument is the key identifier for a trusted key, where the value can be in the range 1 to 65534, inclusive.&lt;/p&gt;
&lt;dt id=&#34;crypto&#34;&gt;&lt;tt&gt;[flags _flags_] [privatekey _file_] [publickey _file_] [dhparms _file_] [leap _file_]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command requires the NTP daemon build process be configured with the RSA library. This command activates public-key cryptography and loads the required RSA private and public key files and the optional Diffie-Hellman agreement parameter file, if present. If one or more files are left unspecified, the default names are used as described below. Following are the subcommands:&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;privatekey &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the RSA private key file, which otherwise defaults to &lt;tt&gt;/usr/local/etc/ntpkey&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;publickey &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the RSA public key file, which otherwise defaults to &lt;tt&gt;/usr/local/etc/ntpkey_host_&lt;/tt&gt;, where host is the name of the generating machine.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;dhparms &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;Â Â Â Â &lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the Diffie-Hellman parameters file, which otherwise defaults to &lt;tt&gt;/usr/local/etc/ntpkey_dh&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;leap &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the leapsecond table file, which otherwise defaults to &lt;tt&gt;/usr/local/etc/ntpkey_leap&lt;/tt&gt;.&lt;/p&gt;
&lt;dt id=&#34;keys&#34;&gt;&lt;tt&gt;keys _keyfile_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the location of the DES/MD5 private key file containing the keys and key identifiers used by &lt;tt&gt;ntpd&lt;/tt&gt;, &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; when operating with symmetric-key mode.&lt;/p&gt;
&lt;dt id=&#34;keysdir&#34;&gt;&lt;tt&gt;keysdir _path_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command requires the NTP daemon build process be configured with the RSA library. It specifies the default directory path for the private key file, agreement parameters file and one or more public key files. The default when this command does not appear in the configuration file is &lt;tt&gt;/usr/local/etc/&lt;/tt&gt;.&lt;/p&gt;
&lt;dt id=&#34;requestkey&#34;&gt;&lt;tt&gt;requestkey _key_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the key identifier to use with the &lt;a href=&#34;/archives/4.1.0/ntpdc&#34;&gt;&lt;tt&gt;ntpdc&lt;/tt&gt;&lt;/a&gt; program, which uses a proprietary protocol specific to this implementation of &lt;tt&gt;ntpd&lt;/tt&gt;. The &lt;tt&gt;&lt;em&gt;key&lt;/em&gt;&lt;/tt&gt; argument is a key identifier for the trusted key, where the value can be in the range 1 to 65534, inclusive.&lt;/p&gt;
&lt;dt id=&#34;revoke&#34;&gt;&lt;tt&gt;revoke [_logsec_]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the interval between re-randomization of certain cryptographic values used by the Autokey scheme, as a power of 2 in seconds. These values need to be updated frequently in order to deflect brute-force attacks on the algorithms of the scheme; however, updating some values is a relatively expensive operation. The default interval is 16 (65,536 s or about 18 hours). For poll intervals above the specified interval, the values will be updated for every message sent.&lt;/p&gt;
&lt;dt id=&#34;trustedkey&#34;&gt;&lt;tt&gt;trustedkey [_key_] [...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the key identifiers which are trusted for the purposes of authenticating peers with symmetric-key cryptography, as well as keys used by the &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; programs. The authentication procedures require that both the local and remote servers share the same key and key identifier for this purpose, although different keys can be used with different servers. The &lt;tt&gt;key&lt;/tt&gt; arguments are 32-bit unsigned integers with values from 1 to 65,534.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;files&#34;&gt;Files&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntp.keys&lt;/tt&gt; private MD5 keys&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;ntpkey&lt;/tt&gt; RSA private key&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;ntpkey_&lt;i&gt;host&lt;/i&gt;&lt;/tt&gt; RSA public key&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;ntp_dh&lt;/tt&gt; Diffie-Hellman agreement parameters&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;bugs&#34;&gt;Bugs&lt;/h4&gt;
&lt;p&gt;The &lt;tt&gt;ntpkey_&lt;i&gt;host&lt;/i&gt;&lt;/tt&gt; files are really digital certificates. These should be obtained via secure directory services when they become universally available.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Authentication Options</title>
      <link>/archives/4.1.1/authopt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.1.1/authopt/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice44.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/%7emills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Our resident cryptographer; now you see him, now you don&amp;rsquo;t.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.1/authopt/#authentication-support&#34;&gt;Authentication Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.1/authopt/#symmetric-key-scheme&#34;&gt;Symmetric Key Scheme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.1/authopt/#public-key-scheme&#34;&gt;Public Key Scheme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.1/authopt/#leapseconds-table&#34;&gt;Leapseconds Table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.1/authopt/#key-management&#34;&gt;Key Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.1/authopt/#authentication-commands&#34;&gt;Authentication Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.1/authopt/#files&#34;&gt;Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.1/authopt/#bugs&#34;&gt;Bugs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;authentication-support&#34;&gt;Authentication Support&lt;/h4&gt;
&lt;p&gt;Authentication support allows the NTP client to verify that the server is in fact known and trusted and not an intruder intending accidentally or on purpose to masquerade as that server. The NTPv3 specification RFC-1305 defines an scheme which provides cryptographic authentication of received NTP packets. Originally, this was done using the Data Encryption Standard (DES) algorithm operating in Cipher Block Chaining (CBC) mode, commonly called
DES-CBC. Subsequently, this was augmented by the RSA Message Digest 5 (MD5) algorithm using a private key, commonly called keyed-MD5. Either algorithm computes a message digest, or one-way hash, which can be used to verify the server has the correct private key and key identifier.&lt;/p&gt;
&lt;p&gt;NTPv4 retains the NTPv3 schemes, properly described as symmetric-key cryptography and, in addition, provides a new Autokey scheme based on public-key cryptography. Public-key cryptography is generally considered more secure than symmetric-key cryptography, since the security is based on a private value which is generated by each server and never revealed. With Autokey all key distribution and management functions involve only public values, which considerably simplifies key distribution and storage.&lt;/p&gt;
&lt;p&gt;Authentication is configured separately for each association using the &lt;tt&gt;key&lt;/tt&gt; or &lt;tt&gt;autokey&lt;/tt&gt; subcommands on the &lt;tt&gt;peer&lt;/tt&gt;, &lt;tt&gt;server&lt;/tt&gt;, &lt;tt&gt;broadcast&lt;/tt&gt; and &lt;tt&gt;manycastclient&lt;/tt&gt; commands as described in the &lt;a href=&#34;/archives/4.1.1/config&#34;&gt;Configuration Options&lt;/a&gt; page. The authentication
options described below specify the suite of keys, select the key for each configured association and manage the configuration operations.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;auth&lt;/tt&gt; flag controls whether new associations or remote configuration commands require cryptographic authentication. This flag can be set or reset by the &lt;tt&gt;enable&lt;/tt&gt; and &lt;tt&gt;disable&lt;/tt&gt; configuration commands and also by remote configuration commands sent by a &lt;tt&gt;ntpdc&lt;/tt&gt; program running in another machine. If this flag is enabled, which is the default case, new broadcast client and symmetric passive associations and remote configuration commands must be cryptographically authenticated using either symmetric-key or public-key schemes. If this flag is disabled, these operations are effective even if not cryptographic authenticated. It should be understood that operating in the latter mode invites a significant vulnerability where a rogue hacker can seriously disrupt client timekeeping.&lt;/p&gt;
&lt;p&gt;In networks with firewalls and large numbers of broadcast clients it may be acceptable to disable authentication, since that avoids key distribution and simplifies network maintenance. However, when the configuration file contains host names, or when a server or client is configured remotely, host names are resolved using the DNS and a separate name resolution process. In order to protect against bogus name server messages, name resolution messages are authenticated using an internally generated key which is normally invisible to the user. However, if cryptographic support is disabled, the name resolution process will fail. This can be avoided either by specifying IP addresses instead of host names, which is generally inadvisable, or by enabling the flag for
name resolution and disabled it once the name resolution process is complete.&lt;/p&gt;
&lt;p&gt;An attractive alternative where multicast support is available is manycast mode, in which clients periodically troll for servers. Cryptographic authentication in this mode uses public-key schemes as described below. The principle advantage of this manycast mode is that potential servers need not be configured in advance, since the client finds them during regular operation, and the configuration files for all clients can be identical.&lt;/p&gt;
&lt;p&gt;In addition to the default symmetric-key cryptographic support, support for public-key cryptography is available if the requisite &lt;tt&gt;rsaref20&lt;/tt&gt; software distribution has been installed before building the distribution. Public-key cryptography provides secure authentication of servers without compromising accuracy and stability. The security model and protocol schemes for both symmetric-key and public-key cryptography are described below.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;symmetric-key-scheme&#34;&gt;Symmetric Key Scheme&lt;/h4&gt;
&lt;p&gt;The original RFC-1305 specification allows any one of possibly 65,534 keys, each distinguished by a 32-bit key identifier, to authenticate an association. The servers and clients involved must agree on the key and key identifier to authenticate NTP packets. Keys and related information are specified in a key file, usually called &lt;tt&gt;ntp.keys&lt;/tt&gt;, which must be distributed and stored using secure means beyond the scope of the NTP protocol itself. Besides the keys used for ordinary NTP associations, additional keys can be used as passwords for the &lt;a href=&#34;/archives/4.1.1/ntpq&#34;&gt;ntpq&lt;/a&gt; and &lt;a href=&#34;/archives/4.1.1/ntpdc&#34;&gt;ntpdc&lt;/a&gt; utility programs.&lt;/p&gt;
&lt;p&gt;When &lt;tt&gt;ntpd&lt;/tt&gt; is first started, it reads the key file specified in the &lt;tt&gt;keys&lt;/tt&gt; configuration command and installs the keys in the key cache. However, individual keys must be activated with the &lt;tt&gt;trustedkey&lt;/tt&gt; command before use. This allows, for instance, the installation of possibly several batches of keys and then activating or deactivating each batch remotely using &lt;tt&gt;ntpdc&lt;/tt&gt;. This also provides a revocation capability that can be used if a key becomes compromised. The &lt;tt&gt;requestkey&lt;/tt&gt; command selects the key used as the password for the &lt;tt&gt;ntpdc&lt;/tt&gt; utility, while the &lt;tt&gt;controlkey&lt;/tt&gt; command selects the key used as the password for the &lt;tt&gt;ntpq&lt;/tt&gt; utility.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;public-key-scheme&#34;&gt;Public Key Scheme&lt;/h4&gt;
&lt;p&gt;The original NTPv3 authentication scheme described in RFC-1305 continues to be supported; however, in NTPv4 an additional authentication scheme called Autokey is available. It uses MD5 message digest, RSA public-key signature and Diffie-Hellman key agreement algorithms available from several sources, but not included in the NTPv4 software distribution. In order to be effective, the &lt;tt&gt;rsaref20&lt;/tt&gt; package must be installed as described in the &lt;tt&gt;README.rsa&lt;/tt&gt; file. Once installed, the configure and build process automatically detects it and compiles the routines required. The Autokey scheme has several modes of operation corresponding to the various NTP modes supported. RSA signatures with timestamps are used in all modes to verify the source of cryptographic values. All modes use a special cookie which can be computed independently by the client and server. In symmetric modes the cookie is constructed using the Diffie-Hellman key agreement algorithm. In other modes the cookie is constructed from the IP addresses and a private value known only to the server. All modes use in addition a variant of the S-KEY scheme, in which a pseudo-random key list is generated and used in reverse order. These schemes are described along with an executive summary, current status, briefing slides and reading list, on the &lt;a href=&#34;http://www.eecis.udel.edu/~mills/autokey.html&#34;&gt;Autonomous Authentication&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;The cryptographic values used by the Autokey scheme are incorporated as a set of files generated by the &lt;a href=&#34;/archives/4.1.1/genkeys&#34;&gt;&lt;tt&gt;ntp-genkeys&lt;/tt&gt;&lt;/a&gt; program, including the symmetric private keys, public/private key pair, and the agreement parameters. See the &lt;tt&gt;ntp-genkeys&lt;/tt&gt; page for a description of the formats of these files. They contain cryptographic values generated by the algorithms of the &lt;tt&gt;rsaref20&lt;/tt&gt; package and are in printable ASCII format. All file names include the timestamp, in NTP seconds, following the default names given below. Since the file data are derived from random values seeded by the system clock and the file name includes the timestamp, every generation produces a different file and different file name.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;ntp.keys&lt;/tt&gt; file contains the DES/MD5 private keys. It must be distributed by secure means to other servers and clients sharing the same security compartment and made visible only to root. While this file is not used with the Autokey scheme, it is needed to authenticate some remote configuration commands used by the &lt;a href=&#34;/archives/4.1.1/ntpq&#34;&gt;&lt;tt&gt;ntpq&lt;/tt&gt;&lt;/a&gt; and &lt;a href=&#34;/archives/4.1.1/ntpdc&#34;&gt;&lt;tt&gt;ntpdc&lt;/tt&gt;&lt;/a&gt; utilities. The &lt;tt&gt;ntpkey&lt;/tt&gt; file contains the RSA private key. It is useful only to the machine that generated it and never shared with any other daemon or application program, so must be made visible only to root.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;ntp_dh&lt;/tt&gt; file contains the agreement parameters, which are used only in symmetric (active and passive) modes. It is necessary that both peers beginning a symmetric-mode association share the same parameters, but it does not matter which &lt;tt&gt;ntp_dh&lt;/tt&gt; file generates them. If one of the peers contains the parameters, the other peer obtains them using the Autokey protocol. If both peers contain the parameters, the most recent copy is used by both peers. If a peer does not have the parameters, they will be requested by all associations, either configured or not; but, none of the associations can proceed until one of them has received the parameters. Once loaded, the parameters can be provided on request to other clients and servers. The &lt;tt&gt;ntp_dh&lt;/tt&gt; file can be also be distributed using insecure means, since the data are public values.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;ntpkey__host_&lt;/tt&gt; file contains the RSA public key, where &lt;tt&gt;_host_&lt;/tt&gt; is the name of the host. Each host must have its own &lt;tt&gt;ntpkey__host_&lt;/tt&gt; file, which is normally provided to other hosts using the Autokey protocol Each &lt;tt&gt;server&lt;/tt&gt; or &lt;tt&gt;peer&lt;/tt&gt; association requires the public key associated with the particular server or peer to be loaded either directly from a local file or indirectly from the server using the Autokey protocol. These files can be widely distributed and stored using insecure means, since the data are public values.&lt;/p&gt;
&lt;p&gt;The optional &lt;tt&gt;ntpkey_certif__host_&lt;/tt&gt; file contains the PKI certificate for the host. This provides a binding between the host hame and RSA public key. In the current implementation the certificate is obtained by a client, if present, but the contents are ignored.&lt;/p&gt;
&lt;p&gt;Due to the widespread use of interface-specific naming, the host names used in configured and mobilized associations are determined by the Unix &lt;tt&gt;gethostname()&lt;/tt&gt; library routine. Both the &lt;tt&gt;ntp-genkeys&lt;/tt&gt; program and the Autokey protocol derive the name of the public key file using the name returned by this routine. While every server and client is required to load their own public and private keys, the public keys for each client or peer association can be obtained from the server or peer using the Autokey protocol. Note however, that at the current stage of development the authenticity of the server or peer and the cryptographic binding of the server name, address and public key is not yet established by a certificate authority or web of trust.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;leapseconds-table&#34;&gt;Leapseconds Table&lt;/h4&gt;
&lt;p&gt;The NIST provides a table showing the epoch for all historic occasions of leap second insertion since 1972. The leapsecond table shows each epoch of insertion along with the offset of International Atomic Time (TAI) with respect to Coordinated Universtal Time (UTC), as disseminated by NTP. The table can be obtained directly from NIST national time servers using &lt;tt&gt;ftp&lt;/tt&gt; as the ASCII file &lt;tt&gt;pub/leap-seconds&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;While not strictly a security function, the Autokey protocol provides means to securely retrieve the leapsecond table from a server or peer. Servers load the leapsecond table directly from the file specified in the &lt;tt&gt;crypto&lt;/tt&gt; command, while clients can obtain the table indirectly from the servers using the Autokey protocol. Once loaded, the table can be provided on request to other clients and servers.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;key-management&#34;&gt;Key Management&lt;/h4&gt;
&lt;p&gt;All key files are installed by default in &lt;tt&gt;/usr/local/etc&lt;/tt&gt;, which is normally in a shared filesystem in NFS-mounted networks and avoids installing them in each machine separately. The default can be overridden by the &lt;tt&gt;keysdir&lt;/tt&gt; configuration command. However, this is not a good place to install the private key file, since each machine needs its own file. A suitable place to install it is in &lt;tt&gt;/etc&lt;/tt&gt;, which is normally not in a shared filesystem.&lt;/p&gt;
&lt;p&gt;The recommended practice is to keep the timestamp extensions when installing a file and to install a link from the default name (without the timestamp extension) to the actual file. This allows new file generations to be activated simply by changing the link. However, &lt;tt&gt;ntpd&lt;/tt&gt; parses the link name when present to extract the extension value and sends it along with the public key and host name when requested. This allows clients to verify that the file and generation time are always current. However, the actual location of each file can be overridden by the &lt;tt&gt;crypto&lt;/tt&gt; configuration command.&lt;/p&gt;
&lt;p&gt;All cryptographic keys and related parameters should be regenerated on a periodic and automatic basis, like once per month. The &lt;tt&gt;ntp-genkeys&lt;/tt&gt; program uses the same timestamp extension for all files generated at one time, so each generation is distinct and can be readily recognized in monitoring data. While a public/private key pair must be generated by every server and client, the public keys and agreement parameters do not need to be explicitly copied to all machines in the same security compartment, since they can be obtained automatically using the Autokey protocol. However, it is necessary that all primary servers have the same agreement parameter file. The recommended way to do this is for one of the primary servers to generate that file and then copy it to the other primary servers in the same compartment using the Unix &lt;tt&gt;rdist&lt;/tt&gt; command. Future versions of the Autokey protocol are to contain provisions for an agreement protocol to do this automatically.&lt;/p&gt;
&lt;p&gt;Servers and clients can make a new generation in the following way. All machines have loaded the old generation at startup and are operating normally. At designated intervals, each machine generates a new public/private key pair and makes links from the default file names to the new file names. The &lt;tt&gt;ntpd&lt;/tt&gt; is then restarted and loads the new generation, with result clients no longer can authenticate correctly. The Autokey protocol is designed so that after a few minutes the clients time out and restart the protocol from the beginning, with result the new generation is loaded and operation continues as before. A similar procedure can be used for the agreement parameter file, but in this case precautions must be take to be sure that all machines with this file have the same copy.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;authentication-commands&#34;&gt;Authentication Commands&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;autokey [_logsec_]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the interval between regenerations of the session key list used with the Autokey protocol. Note that the size of the key list for each association depends on this interval and the current poll interval. The default interval is 12 (4096 s or about 1.1 hours). For poll intervals above the specified interval, a session key list with a single entry will be regenerated for every message sent.&lt;/p&gt;
&lt;dt id=&#34;controlkey&#34;&gt;&lt;tt&gt;controlkey _key_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the key identifier to use with the &lt;a href=&#34;/archives/4.1.1/ntpq&#34;&gt;&lt;tt&gt;ntpq&lt;/tt&gt;&lt;/a&gt; utility, which uses the standard protocol defined in RFC-1305. The &lt;tt&gt;&lt;em&gt;key&lt;/em&gt;&lt;/tt&gt; argument is the key identifier for a trusted key, where the value can be in the range 1 to 65534, inclusive.&lt;/p&gt;
&lt;dt id=&#34;crypto&#34;&gt;&lt;tt&gt;[flags _flags_] [privatekey _file_] [publickey _file_] [dhparms _file_] [leap _file_]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command requires the NTP daemon build process be configured with the RSA library. This command activates public-key cryptography and loads the required RSA private and public key files and the optional Diffie-Hellman agreement parameter file, if present. If one or more files are left unspecified, the default names are used as described below. Following are the subcommands:&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;privatekey &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the RSA private key file, which otherwise defaults to &lt;tt&gt;/usr/local/etc/ntpkey&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;publickey &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the RSA public key file, which otherwise defaults to &lt;tt&gt;/usr/local/etc/ntpkey_host_&lt;/tt&gt;, where host is the name of the generating machine.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;dhparms &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;Â Â Â Â &lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the Diffie-Hellman parameters file, which otherwise defaults to &lt;tt&gt;/usr/local/etc/ntpkey_dh&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;leap &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the leapsecond table file, which otherwise defaults to &lt;tt&gt;/usr/local/etc/ntpkey_leap&lt;/tt&gt;.&lt;/p&gt;
&lt;dt id=&#34;keys&#34;&gt;&lt;tt&gt;keys _keyfile_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the location of the DES/MD5 private key file containing the keys and key identifiers used by &lt;tt&gt;ntpd&lt;/tt&gt;, &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; when operating with symmetric-key mode.&lt;/p&gt;
&lt;dt id=&#34;keysdir&#34;&gt;&lt;tt&gt;keysdir _path_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command requires the NTP daemon build process be configured with the RSA library. It specifies the default directory path for the private key file, agreement parameters file and one or more public key files. The default when this command does not appear in the configuration file is &lt;tt&gt;/usr/local/etc/&lt;/tt&gt;.&lt;/p&gt;
&lt;dt id=&#34;requestkey&#34;&gt;&lt;tt&gt;requestkey _key_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the key identifier to use with the &lt;a href=&#34;/archives/4.1.1/ntpdc&#34;&gt;&lt;tt&gt;ntpdc&lt;/tt&gt;&lt;/a&gt; program, which uses a proprietary protocol specific to this implementation of &lt;tt&gt;ntpd&lt;/tt&gt;. The &lt;tt&gt;&lt;em&gt;key&lt;/em&gt;&lt;/tt&gt; argument is a key identifier for the trusted key, where the value can be in the range 1 to 65534, inclusive.&lt;/p&gt;
&lt;dt id=&#34;revoke&#34;&gt;&lt;tt&gt;revoke [_logsec_]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the interval between re-randomization of certain cryptographic values used by the Autokey scheme, as a power of 2 in seconds. These values need to be updated frequently in order to deflect brute-force attacks on the algorithms of the scheme; however, updating some values is a relatively expensive operation. The default interval is 16 (65,536 s or about 18 hours). For poll intervals above the specified interval, the values will be updated for every message sent.&lt;/p&gt;
&lt;dt id=&#34;trustedkey&#34;&gt;&lt;tt&gt;trustedkey [_key_] [...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the key identifiers which are trusted for the purposes of authenticating peers with symmetric-key cryptography, as well as keys used by the &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; programs. The authentication procedures require that both the local and remote servers share the same key and key identifier for this purpose, although different keys can be used with different servers. The &lt;tt&gt;key&lt;/tt&gt; arguments are 32-bit unsigned integers with values from 1 to 65,534.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;files&#34;&gt;Files&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntp.keys&lt;/tt&gt; private MD5 keys&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;ntpkey&lt;/tt&gt; RSA private key&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;ntpkey_&lt;i&gt;host&lt;/i&gt;&lt;/tt&gt; RSA public key&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;ntp_dh&lt;/tt&gt; Diffie-Hellman agreement parameters&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;bugs&#34;&gt;Bugs&lt;/h4&gt;
&lt;p&gt;The &lt;tt&gt;ntpkey_&lt;i&gt;host&lt;/i&gt;&lt;/tt&gt; files are really digital certificates. These should be obtained via secure directory services when they become universally available.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Authentication Options</title>
      <link>/archives/4.1.2/authopt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.1.2/authopt/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice44.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/%7emills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Our resident cryptographer; now you see him, now you don&amp;rsquo;t.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.2/authopt/#authentication-support&#34;&gt;Authentication Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.2/authopt/#symmetric-key-scheme&#34;&gt;Symmetric Key Scheme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.2/authopt/#public-key-scheme&#34;&gt;Public Key Scheme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.2/authopt/#leapseconds-table&#34;&gt;Leapseconds Table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.2/authopt/#key-management&#34;&gt;Key Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.2/authopt/#authentication-commands&#34;&gt;Authentication Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.2/authopt/#files&#34;&gt;Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.1.2/authopt/#bugs&#34;&gt;Bugs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;authentication-support&#34;&gt;Authentication Support&lt;/h4&gt;
&lt;p&gt;Authentication support allows the NTP client to verify that the server is in fact known and trusted and not an intruder intending accidentally or on purpose to masquerade as that server. The NTPv3 specification RFC-1305 defines an scheme which provides cryptographic authentication of received NTP packets. Originally, this was done using the Data Encryption Standard (DES) algorithm operating in Cipher Block Chaining (CBC) mode, commonly called
DES-CBC. Subsequently, this was augmented by the RSA Message Digest 5 (MD5) algorithm using a private key, commonly called keyed-MD5. Either algorithm computes a message digest, or one-way hash, which can be used to verify the server has the correct private key and key identifier.&lt;/p&gt;
&lt;p&gt;NTPv4 retains the NTPv3 schemes, properly described as symmetric-key cryptography and, in addition, provides a new Autokey scheme based on public-key cryptography. Public-key cryptography is generally considered more secure than symmetric-key cryptography, since the security is based on a private value which is generated by each server and never revealed. With Autokey all key distribution and management functions involve only public values, which considerably simplifies key distribution and storage.&lt;/p&gt;
&lt;p&gt;Authentication is configured separately for each association using the &lt;tt&gt;key&lt;/tt&gt; or &lt;tt&gt;autokey&lt;/tt&gt; subcommands on the &lt;tt&gt;peer&lt;/tt&gt;, &lt;tt&gt;server&lt;/tt&gt;, &lt;tt&gt;broadcast&lt;/tt&gt; and &lt;tt&gt;manycastclient&lt;/tt&gt; commands as described in the &lt;a href=&#34;/archives/4.1.2/config&#34;&gt;Configuration Options&lt;/a&gt; page. The authentication
options described below specify the suite of keys, select the key for each configured association and manage the configuration operations.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;auth&lt;/tt&gt; flag controls whether new associations or remote configuration commands require cryptographic authentication. This flag can be set or reset by the &lt;tt&gt;enable&lt;/tt&gt; and &lt;tt&gt;disable&lt;/tt&gt; configuration commands and also by remote configuration commands sent by a &lt;tt&gt;ntpdc&lt;/tt&gt; program running in another machine. If this flag is enabled, which is the default case, new broadcast client and symmetric passive associations and remote configuration commands must be cryptographically authenticated using either symmetric-key or public-key schemes. If this flag is disabled, these operations are effective even if not cryptographic authenticated. It should be understood that operating in the latter mode invites a significant vulnerability where a rogue hacker can seriously disrupt client timekeeping.&lt;/p&gt;
&lt;p&gt;In networks with firewalls and large numbers of broadcast clients it may be acceptable to disable authentication, since that avoids key distribution and simplifies network maintenance. However, when the configuration file contains host names, or when a server or client is configured remotely, host names are resolved using the DNS and a separate name resolution process. In order to protect against bogus name server messages, name resolution messages are authenticated using an internally generated key which is normally invisible to the user. However, if cryptographic support is disabled, the name resolution process will fail. This can be avoided either by specifying IP addresses instead of host names, which is generally inadvisable, or by enabling the flag for
name resolution and disabled it once the name resolution process is complete.&lt;/p&gt;
&lt;p&gt;An attractive alternative where multicast support is available is manycast mode, in which clients periodically troll for servers. Cryptographic authentication in this mode uses public-key schemes as described below. The principle advantage of this manycast mode is that potential servers need not be configured in advance, since the client finds them during regular operation, and the configuration files for all clients can be identical.&lt;/p&gt;
&lt;p&gt;In addition to the default symmetric-key cryptographic support, support for public-key cryptography is available if the requisite &lt;tt&gt;rsaref20&lt;/tt&gt; software distribution has been installed before building the distribution. Public-key cryptography provides secure authentication of servers without compromising accuracy and stability. The security model and protocol schemes for both symmetric-key and public-key cryptography are described below.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;symmetric-key-scheme&#34;&gt;Symmetric Key Scheme&lt;/h4&gt;
&lt;p&gt;The original RFC-1305 specification allows any one of possibly 65,534 keys, each distinguished by a 32-bit key identifier, to authenticate an association. The servers and clients involved must agree on the key and key identifier to authenticate NTP packets. Keys and related information are specified in a key file, usually called &lt;tt&gt;ntp.keys&lt;/tt&gt;, which must be distributed and stored using secure means beyond the scope of the NTP protocol itself. Besides the keys used for ordinary NTP associations, additional keys can be used as passwords for the &lt;a href=&#34;/archives/4.1.2/ntpq&#34;&gt;ntpq&lt;/a&gt; and &lt;a href=&#34;/archives/4.1.2/ntpdc&#34;&gt;ntpdc&lt;/a&gt; utility programs.&lt;/p&gt;
&lt;p&gt;When &lt;tt&gt;ntpd&lt;/tt&gt; is first started, it reads the key file specified in the &lt;tt&gt;keys&lt;/tt&gt; configuration command and installs the keys in the key cache. However, individual keys must be activated with the &lt;tt&gt;trustedkey&lt;/tt&gt; command before use. This allows, for instance, the installation of possibly several batches of keys and then activating or deactivating each batch remotely using &lt;tt&gt;ntpdc&lt;/tt&gt;. This also provides a revocation capability that can be used if a key becomes compromised. The &lt;tt&gt;requestkey&lt;/tt&gt; command selects the key used as the password for the &lt;tt&gt;ntpdc&lt;/tt&gt; utility, while the &lt;tt&gt;controlkey&lt;/tt&gt; command selects the key used as the password for the &lt;tt&gt;ntpq&lt;/tt&gt; utility.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;public-key-scheme&#34;&gt;Public Key Scheme&lt;/h4&gt;
&lt;p&gt;The original NTPv3 authentication scheme described in RFC-1305 continues to be supported; however, in NTPv4 an additional authentication scheme called Autokey is available. It uses MD5 message digest, RSA public-key signature and Diffie-Hellman key agreement algorithms available from several sources, but not included in the NTPv4 software distribution. In order to be effective, the &lt;tt&gt;rsaref20&lt;/tt&gt; package must be installed as described in the &lt;tt&gt;README.rsa&lt;/tt&gt; file. Once installed, the configure and build process automatically detects it and compiles the routines required. The Autokey scheme has several modes of operation corresponding to the various NTP modes supported. RSA signatures with timestamps are used in all modes to verify the source of cryptographic values. All modes use a special cookie which can be computed independently by the client and server. In symmetric modes the cookie is constructed using the Diffie-Hellman key agreement algorithm. In other modes the cookie is constructed from the IP addresses and a private value known only to the server. All modes use in addition a variant of the S-KEY scheme, in which a pseudo-random key list is generated and used in reverse order. These schemes are described along with an executive summary, current status, briefing slides and reading list, on the &lt;a href=&#34;http://www.eecis.udel.edu/~mills/autokey.html&#34;&gt;Autonomous Authentication&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;The cryptographic values used by the Autokey scheme are incorporated as a set of files generated by the &lt;a href=&#34;/archives/4.1.2/genkeys&#34;&gt;&lt;tt&gt;ntp-genkeys&lt;/tt&gt;&lt;/a&gt; program, including the symmetric private keys, public/private key pair, and the agreement parameters. See the &lt;tt&gt;ntp-genkeys&lt;/tt&gt; page for a description of the formats of these files. They contain cryptographic values generated by the algorithms of the &lt;tt&gt;rsaref20&lt;/tt&gt; package and are in printable ASCII format. All file names include the timestamp, in NTP seconds, following the default names given below. Since the file data are derived from random values seeded by the system clock and the file name includes the timestamp, every generation produces a different file and different file name.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;ntp.keys&lt;/tt&gt; file contains the DES/MD5 private keys. It must be distributed by secure means to other servers and clients sharing the same security compartment and made visible only to root. While this file is not used with the Autokey scheme, it is needed to authenticate some remote configuration commands used by the &lt;a href=&#34;/archives/4.1.2/ntpq&#34;&gt;&lt;tt&gt;ntpq&lt;/tt&gt;&lt;/a&gt; and &lt;a href=&#34;/archives/4.1.2/ntpdc&#34;&gt;&lt;tt&gt;ntpdc&lt;/tt&gt;&lt;/a&gt; utilities. The &lt;tt&gt;ntpkey&lt;/tt&gt; file contains the RSA private key. It is useful only to the machine that generated it and never shared with any other daemon or application program, so must be made visible only to root.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;ntp_dh&lt;/tt&gt; file contains the agreement parameters, which are used only in symmetric (active and passive) modes. It is necessary that both peers beginning a symmetric-mode association share the same parameters, but it does not matter which &lt;tt&gt;ntp_dh&lt;/tt&gt; file generates them. If one of the peers contains the parameters, the other peer obtains them using the Autokey protocol. If both peers contain the parameters, the most recent copy is used by both peers. If a peer does not have the parameters, they will be requested by all associations, either configured or not; but, none of the associations can proceed until one of them has received the parameters. Once loaded, the parameters can be provided on request to other clients and servers. The &lt;tt&gt;ntp_dh&lt;/tt&gt; file can be also be distributed using insecure means, since the data are public values.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;ntpkey__host_&lt;/tt&gt; file contains the RSA public key, where &lt;tt&gt;_host_&lt;/tt&gt; is the name of the host. Each host must have its own &lt;tt&gt;ntpkey__host_&lt;/tt&gt; file, which is normally provided to other hosts using the Autokey protocol Each &lt;tt&gt;server&lt;/tt&gt; or &lt;tt&gt;peer&lt;/tt&gt; association requires the public key associated with the particular server or peer to be loaded either directly from a local file or indirectly from the server using the Autokey protocol. These files can be widely distributed and stored using insecure means, since the data are public values.&lt;/p&gt;
&lt;p&gt;The optional &lt;tt&gt;ntpkey_certif__host_&lt;/tt&gt; file contains the PKI certificate for the host. This provides a binding between the host hame and RSA public key. In the current implementation the certificate is obtained by a client, if present, but the contents are ignored.&lt;/p&gt;
&lt;p&gt;Due to the widespread use of interface-specific naming, the host names used in configured and mobilized associations are determined by the Unix &lt;tt&gt;gethostname()&lt;/tt&gt; library routine. Both the &lt;tt&gt;ntp-genkeys&lt;/tt&gt; program and the Autokey protocol derive the name of the public key file using the name returned by this routine. While every server and client is required to load their own public and private keys, the public keys for each client or peer association can be obtained from the server or peer using the Autokey protocol. Note however, that at the current stage of development the authenticity of the server or peer and the cryptographic binding of the server name, address and public key is not yet established by a certificate authority or web of trust.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;leapseconds-table&#34;&gt;Leapseconds Table&lt;/h4&gt;
&lt;p&gt;The NIST provides a table showing the epoch for all historic occasions of leap second insertion since 1972. The leapsecond table shows each epoch of insertion along with the offset of International Atomic Time (TAI) with respect to Coordinated Universtal Time (UTC), as disseminated by NTP. The table can be obtained directly from NIST national time servers using &lt;tt&gt;ftp&lt;/tt&gt; as the ASCII file &lt;tt&gt;pub/leap-seconds&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;While not strictly a security function, the Autokey protocol provides means to securely retrieve the leapsecond table from a server or peer. Servers load the leapsecond table directly from the file specified in the &lt;tt&gt;crypto&lt;/tt&gt; command, while clients can obtain the table indirectly from the servers using the Autokey protocol. Once loaded, the table can be provided on request to other clients and servers.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;key-management&#34;&gt;Key Management&lt;/h4&gt;
&lt;p&gt;All key files are installed by default in &lt;tt&gt;/usr/local/etc&lt;/tt&gt;, which is normally in a shared filesystem in NFS-mounted networks and avoids installing them in each machine separately. The default can be overridden by the &lt;tt&gt;keysdir&lt;/tt&gt; configuration command. However, this is not a good place to install the private key file, since each machine needs its own file. A suitable place to install it is in &lt;tt&gt;/etc&lt;/tt&gt;, which is normally not in a shared filesystem.&lt;/p&gt;
&lt;p&gt;The recommended practice is to keep the timestamp extensions when installing a file and to install a link from the default name (without the timestamp extension) to the actual file. This allows new file generations to be activated simply by changing the link. However, &lt;tt&gt;ntpd&lt;/tt&gt; parses the link name when present to extract the extension value and sends it along with the public key and host name when requested. This allows clients to verify that the file and generation time are always current. However, the actual location of each file can be overridden by the &lt;tt&gt;crypto&lt;/tt&gt; configuration command.&lt;/p&gt;
&lt;p&gt;All cryptographic keys and related parameters should be regenerated on a periodic and automatic basis, like once per month. The &lt;tt&gt;ntp-genkeys&lt;/tt&gt; program uses the same timestamp extension for all files generated at one time, so each generation is distinct and can be readily recognized in monitoring data. While a public/private key pair must be generated by every server and client, the public keys and agreement parameters do not need to be explicitly copied to all machines in the same security compartment, since they can be obtained automatically using the Autokey protocol. However, it is necessary that all primary servers have the same agreement parameter file. The recommended way to do this is for one of the primary servers to generate that file and then copy it to the other primary servers in the same compartment using the Unix &lt;tt&gt;rdist&lt;/tt&gt; command. Future versions of the Autokey protocol are to contain provisions for an agreement protocol to do this automatically.&lt;/p&gt;
&lt;p&gt;Servers and clients can make a new generation in the following way. All machines have loaded the old generation at startup and are operating normally. At designated intervals, each machine generates a new public/private key pair and makes links from the default file names to the new file names. The &lt;tt&gt;ntpd&lt;/tt&gt; is then restarted and loads the new generation, with result clients no longer can authenticate correctly. The Autokey protocol is designed so that after a few minutes the clients time out and restart the protocol from the beginning, with result the new generation is loaded and operation continues as before. A similar procedure can be used for the agreement parameter file, but in this case precautions must be take to be sure that all machines with this file have the same copy.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;authentication-commands&#34;&gt;Authentication Commands&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;autokey [_logsec_]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the interval between regenerations of the session key list used with the Autokey protocol. Note that the size of the key list for each association depends on this interval and the current poll interval. The default interval is 12 (4096 s or about 1.1 hours). For poll intervals above the specified interval, a session key list with a single entry will be regenerated for every message sent.&lt;/p&gt;
&lt;dt id=&#34;controlkey&#34;&gt;&lt;tt&gt;controlkey _key_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the key identifier to use with the &lt;a href=&#34;/archives/4.1.2/ntpq&#34;&gt;&lt;tt&gt;ntpq&lt;/tt&gt;&lt;/a&gt; utility, which uses the standard protocol defined in RFC-1305. The &lt;tt&gt;&lt;em&gt;key&lt;/em&gt;&lt;/tt&gt; argument is the key identifier for a trusted key, where the value can be in the range 1 to 65534, inclusive.&lt;/p&gt;
&lt;dt id=&#34;crypto&#34;&gt;&lt;tt&gt;[flags _flags_] [privatekey _file_] [publickey _file_] [dhparms _file_] [leap _file_]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command requires the NTP daemon build process be configured with the RSA library. This command activates public-key cryptography and loads the required RSA private and public key files and the optional Diffie-Hellman agreement parameter file, if present. If one or more files are left unspecified, the default names are used as described below. Following are the subcommands:&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;privatekey &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the RSA private key file, which otherwise defaults to &lt;tt&gt;/usr/local/etc/ntpkey&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;publickey &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the RSA public key file, which otherwise defaults to &lt;tt&gt;/usr/local/etc/ntpkey_host_&lt;/tt&gt;, where host is the name of the generating machine.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;dhparms &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;Â Â Â Â &lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the Diffie-Hellman parameters file, which otherwise defaults to &lt;tt&gt;/usr/local/etc/ntpkey_dh&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;leap &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the leapsecond table file, which otherwise defaults to &lt;tt&gt;/usr/local/etc/ntpkey_leap&lt;/tt&gt;.&lt;/p&gt;
&lt;dt id=&#34;keys&#34;&gt;&lt;tt&gt;keys _keyfile_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the location of the DES/MD5 private key file containing the keys and key identifiers used by &lt;tt&gt;ntpd&lt;/tt&gt;, &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; when operating with symmetric-key mode.&lt;/p&gt;
&lt;dt id=&#34;keysdir&#34;&gt;&lt;tt&gt;keysdir _path_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command requires the NTP daemon build process be configured with the RSA library. It specifies the default directory path for the private key file, agreement parameters file and one or more public key files. The default when this command does not appear in the configuration file is &lt;tt&gt;/usr/local/etc/&lt;/tt&gt;.&lt;/p&gt;
&lt;dt id=&#34;requestkey&#34;&gt;&lt;tt&gt;requestkey _key_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the key identifier to use with the &lt;a href=&#34;/archives/4.1.2/ntpdc&#34;&gt;&lt;tt&gt;ntpdc&lt;/tt&gt;&lt;/a&gt; program, which uses a proprietary protocol specific to this implementation of &lt;tt&gt;ntpd&lt;/tt&gt;. The &lt;tt&gt;&lt;em&gt;key&lt;/em&gt;&lt;/tt&gt; argument is a key identifier for the trusted key, where the value can be in the range 1 to 65534, inclusive.&lt;/p&gt;
&lt;dt id=&#34;revoke&#34;&gt;&lt;tt&gt;revoke [_logsec_]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the interval between re-randomization of certain cryptographic values used by the Autokey scheme, as a power of 2 in seconds. These values need to be updated frequently in order to deflect brute-force attacks on the algorithms of the scheme; however, updating some values is a relatively expensive operation. The default interval is 16 (65,536 s or about 18 hours). For poll intervals above the specified interval, the values will be updated for every message sent.&lt;/p&gt;
&lt;dt id=&#34;trustedkey&#34;&gt;&lt;tt&gt;trustedkey [_key_] [...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the key identifiers which are trusted for the purposes of authenticating peers with symmetric-key cryptography, as well as keys used by the &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; programs. The authentication procedures require that both the local and remote servers share the same key and key identifier for this purpose, although different keys can be used with different servers. The &lt;tt&gt;key&lt;/tt&gt; arguments are 32-bit unsigned integers with values from 1 to 65,534.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;files&#34;&gt;Files&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntp.keys&lt;/tt&gt; private MD5 keys&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;ntpkey&lt;/tt&gt; RSA private key&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;ntpkey_&lt;i&gt;host&lt;/i&gt;&lt;/tt&gt; RSA public key&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;ntp_dh&lt;/tt&gt; Diffie-Hellman agreement parameters&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;bugs&#34;&gt;Bugs&lt;/h4&gt;
&lt;p&gt;The &lt;tt&gt;ntpkey_&lt;i&gt;host&lt;/i&gt;&lt;/tt&gt; files are really digital certificates. These should be obtained via secure directory
services when they become universally available.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Authentication Options</title>
      <link>/archives/4.2.0/authopt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/authopt/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice44.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/%7emills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Our resident cryptographer; now you see him, now you don&amp;rsquo;t.&lt;/p&gt;
&lt;p&gt;Last update: 	03:05 AM UTC Monday, October 13, 2003&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/authopt/#authentication-support&#34;&gt;Authentication Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/authopt/#symmetric-key-cryptography&#34;&gt;Symmetric Key Cryptography&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/authopt/#public-key-cryptography&#34;&gt;Public Key Cryptography&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/authopt/#operation&#34;&gt;Operation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/authopt/#key-management&#34;&gt;Key Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/authopt/#authentication-commands&#34;&gt;Authentication Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/authopt/#error-codes&#34;&gt;Error Codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/authopt/#files&#34;&gt;Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/authopt/#leapseconds-table&#34;&gt;Leapseconds Table&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;authentication-support&#34;&gt;Authentication Support&lt;/h4&gt;
&lt;p&gt;Authentication support allows the NTP client to verify that the server is in fact known and trusted and not an intruder intending accidentally or on purpose to masquerade as that server. The NTPv3 specification RFC-1305 defines a scheme which provides cryptographic authentication of received NTP packets. Originally, this was done using the Data Encryption Standard (DES) algorithm operating in Cipher Block Chaining (CBC) mode, commonly called DES-CBC. Subsequently, this was replaced by the RSA Message Digest 5 (MD5) algorithm using a private key, commonly called keyed-MD5. Either algorithm computes a message digest, or one-way hash, which can be used to verify the server has the correct private key and key identifier.&lt;/p&gt;
&lt;p&gt;NTPv4 retains the NTPv3 scheme, properly described as symmetric key cryptography, and, in addition, provides a new Autokey scheme based on public key cryptography. Public key cryptography is generally considered more secure than symmetric key cryptography, since the security is based on a private value which is generated by each host and never revealed. With the exception of the group key described later, all key distribution and management functions involve only public values, which considerably simplifies key distribution and storage. Public key management is based on X.509 certificates, which can be provided by commercial services or produced by utility programs in the OpenSSL software library or the NTPv4 distribution.&lt;/p&gt;
&lt;p&gt;While the algorithms for symmetric key cryptography are included in the NTPv4 distribution, public key cryptography requires the OpenSSL software library to be installed before building the NTP distribution. Directions for doing that are on the &lt;a href=&#34;/archives/4.2.0/build&#34;&gt;Building and Installing the Distribution&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;Authentication is configured separately for each association using the &lt;tt&gt;key&lt;/tt&gt; or &lt;tt&gt;autokey&lt;/tt&gt; subcommand on the &lt;tt&gt;peer&lt;/tt&gt;, &lt;tt&gt;server&lt;/tt&gt;, &lt;tt&gt;broadcast&lt;/tt&gt; and &lt;tt&gt;manycastclient&lt;/tt&gt; configuration commands as described in the &lt;a href=&#34;/archives/4.2.0/confopt&#34;&gt;Configuration Options&lt;/a&gt; page. The authentication options described below specify the locations of the key files, if other than default, which symmetric keys are trusted and the interval between various operations, if other than default.&lt;/p&gt;
&lt;p&gt;Authentication is always enabled, although ineffective if not configured as described below. If a NTP packet arrives including a message authentication code (MAC), it is accepted only if it passes all cryptographic checks. The checks require correct key ID, key value and message digest. If the packet has been modified in any way or replayed by an intruder, it will fail one or more of these checks and be discarded. Furthermore, the Autokey scheme requires a preliminary protocol exchange to obtain the server certificate, verify its credentials and initialize the protocol.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;auth&lt;/tt&gt; flag controls whether new associations or remote configuration commands require cryptographic authentication. This flag can be set or reset by the &lt;tt&gt;enable&lt;/tt&gt; and &lt;tt&gt;disable&lt;/tt&gt; commands and also by remote configuration commands sent by a &lt;tt&gt;ntpdc&lt;/tt&gt; program running on another machine. If this flag is enabled, which is the default case, new broadcast/manycast client and symmetric passive associations and remote configuration commands must be cryptographically authenticated using either symmetric key or public key cryptography. If this flag is disabled, these operations are effective even if not cryptographic authenticated. It should be understood that operating with the &lt;tt&gt;auth&lt;/tt&gt; flag disabled invites a significant vulnerability where a rogue hacker can masquerade as a truechimer and seriously disrupt system timekeeping. It is important to note that this flag has no purpose other than to allow or disallow a new association in response to new broadcast and symmetric active messages and remote configuration commands and, in particular, the flag has no effect on the authentication process itself.&lt;/p&gt;
&lt;p&gt;An attractive alternative where multicast support is available is manycast mode, in which clients periodically troll for servers as described in the &lt;a href=&#34;/archives/4.2.0/manyopt&#34;&gt;Automatic NTP Configuration Options&lt;/a&gt; page. Either symmetric key or public key cryptographic authentication can be used in this mode. The principle advantage of manycast mode is that potential servers need not be configured in advance, since the client finds them during regular operation, and the configuration files for all clients can be identical.&lt;/p&gt;
&lt;p&gt;The security model and protocol schemes for both symmetric key and public key cryptography are summarized below; further details are in the briefings, papers and reports at the NTP project page linked from &lt;a href=&#34;http://www.ntp.org&#34;&gt;www.ntp.org&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;symmetric-key-cryptography&#34;&gt;Symmetric Key Cryptography&lt;/h4&gt;
&lt;p&gt;The original RFC-1305 specification allows any one of possibly 65,534 keys, each distinguished by a 32-bit key identifier, to authenticate an association. The servers and clients involved must agree on the key and key identifier to authenticate NTP packets. Keys and related information are specified in a key file, usually called &lt;tt&gt;ntp.keys&lt;/tt&gt;, which must be distributed and stored using secure means beyond the scope of the NTP protocol itself. Besides the keys used for ordinary NTP associations, additional keys can be used as passwords for the &lt;a href=&#34;/archives/4.2.0/ntpq&#34;&gt;ntpq&lt;/a&gt; and &lt;a href=&#34;/archives/4.2.0/ntpdc&#34;&gt;ntpdc&lt;/a&gt; utility programs.&lt;/p&gt;
&lt;p&gt;When &lt;tt&gt;ntpd&lt;/tt&gt; is first started, it reads the key file specified in the &lt;tt&gt;keys&lt;/tt&gt; configuration command and installs the keys in the key cache. However, individual keys must be activated with the &lt;tt&gt;trustedkey&lt;/tt&gt; command before use. This allows, for instance, the installation of possibly several batches of keys and then activating or deactivating each batch remotely using &lt;tt&gt;ntpdc&lt;/tt&gt;. This also provides a revocation capability that can be used if a key becomes compromised. The &lt;tt&gt;requestkey&lt;/tt&gt; command selects the key used as the password for the &lt;tt&gt;ntpdc&lt;/tt&gt; utility, while the &lt;tt&gt;controlkey&lt;/tt&gt; command selects the key used as the password for the &lt;tt&gt;ntpq&lt;/tt&gt; utility.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;public-key-cryptography&#34;&gt;Public Key Cryptography&lt;/h4&gt;
&lt;p&gt;NTPv4 supports the original NTPv3 symmetric key scheme described in RFC-1305 and in addition the Autokey protocol, which is based on public key cryptography. The Autokey Version 2 protocol described on the &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/proto.html&#34;&gt;Autokey Protocol&lt;/a&gt; page verifies packet integrity using MD5 message digests and verifies the source with digital signatures and any of several digest/signature schemes. Optional identity schemes described on the &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/ident.html&#34;&gt;Identity Schemes&lt;/a&gt; page and based on cryptographic challenge/response algorithms are also available. Using these schemes provides strong security against replay with or without modification, spoofing, masquerade and most forms of clogging attacks.&lt;/p&gt;
&lt;p&gt;The cryptographic means necessary for all Autokey operations is provided by the OpenSSL software library. This library is available from &lt;a href=&#34;https://www.openssl.org&#34;&gt;https://www.openssl.org&lt;/a&gt; and can be installed using the procedures outlined in the &lt;a href=&#34;/archives/4.2.0/build&#34;&gt;Building and Installing the Distribution&lt;/a&gt; page. Once installed, the configure and build process automatically detects the library and links the library routines required.&lt;/p&gt;
&lt;p&gt;The Autokey protocol has several modes of operation corresponding to the various NTP modes supported. Most modes use a special cookie which can be computed independently by the client and server, but encrypted in transmission. All modes use in addition a variant of the S-KEY scheme, in which a pseudo-random key list is generated and used in reverse order. These schemes are described along with an executive summary, current status, briefing slides and reading list on the &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/autokey.html&#34;&gt;Autonomous Authentication&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;The specific cryptographic environment used by Autokey servers and clients is determined by a set of files and soft links generated by the &lt;a href=&#34;/archives/4.2.0/keygen&#34;&gt;ntp-keygen&lt;/a&gt; program. This includes a required host key file, required host certificate file and optional sign key file, leapsecond file and identity scheme files. The digest/signature scheme is specified in the X.509 certificate along with the matching sign key. There are several schemes available in the OpenSSL software library, each identified by a specific string such as &lt;tt&gt;md5WithRSAEncryption&lt;/tt&gt;, which stands for the MD5 message digest with RSA encryption scheme. The current NTP distribution supports all the schemes in the OpenSSL library, including those based on RSA and DSA digital signatures.&lt;/p&gt;
&lt;p&gt;NTP secure groups can be used to define cryptographic compartments and security hierarchies. It is important that every host in the group be able to construct a certificate trail to one or more trusted hosts in the same group. Each group host runs the Autokey protocol to obtain the certificates for all hosts along the trail to one or more trusted hosts. This requires the configuration file in all hosts to be engineered so that, even under anticipated failure conditions, the NTP subnet will form such that every group host can find a trail to at least one trusted host.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;naming-and-addressing&#34;&gt;Naming and Addressing&lt;/h4&gt;
&lt;p&gt;It is important to note that Autokey does not use DNS to resolve addresses, since DNS can&amp;rsquo;t be completely trusted until the name servers have synchronized clocks. The cryptographic name used by Autokey to bind the host identity credentials and cryptographic values must be independent of interface, network and any other naming convention. The name appears in the host certificate in either or both the subject and issuer fields, so protection against DNS compromise is essential.&lt;/p&gt;
&lt;p&gt;By convention, the name of an Autokey host is the name returned by the Unix &lt;tt&gt;gethostname()&lt;/tt&gt; system call or equivalent in other systems. By the system design model, there are no provisions to allow alternate names or aliases. However, this is not to say that DNS aliases, different names for each interface, etc., are constrained in any way.&lt;/p&gt;
&lt;p&gt;It is also important to note that Autokey verifies authenticity using the host name, network address and public keys, all of which are bound together by the protocol specifically to deflect masquerade attacks. For this reason Autokey includes the source and destinatino IP addresses in message digest computations and so the same addresses must be available at both the server and client. For this reason operation with network address translation schemes is not possible. This reflects the intended robust security model where government and corporate NTP servers are operated outside firewall perimeters.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;operation&#34;&gt;Operation&lt;/h4&gt;
&lt;p&gt;A specific combination of authentication scheme (none, symmetric key, public key) and identity scheme is called a cryptotype, although not all combinations are compatible. There may be management configurations where the clients, servers and peers may not all support the same cryptotypes. A secure NTPv4 subnet can be configured in many ways while keeping in mind the principles explained above and in this section. Note however that some cryptotype combinations may successfully interoperate with each other, but may not represent good security practice.&lt;/p&gt;
&lt;p&gt;The cryptotype of an association is determined at the time of mobilization, either at configuration time or some time later when a message of appropriate cryptotype arrives. When mobilized by a &lt;tt&gt;server&lt;/tt&gt; or &lt;tt&gt;peer&lt;/tt&gt; configuration command and no &lt;tt&gt;key&lt;/tt&gt; or &lt;tt&gt;autokey&lt;/tt&gt; subcommands are present, the association is not authenticated; if the &lt;tt&gt;key&lt;/tt&gt; subcommand is present, the association is authenticated using the symmetric key ID specified; if the &lt;tt&gt;autokey&lt;/tt&gt; subcommand is present, the association is authenticated using Autokey.&lt;/p&gt;
&lt;p&gt;When multiple identity schemes are supported in the Autokey protocol, the first message exchange determines which one is used. The client request message contains bits corresponding to which schemes it has available. The server response message contains bits corresponding to which schemes it has available. Both server and client match the received bits with their own and select a common scheme.&lt;/p&gt;
&lt;p&gt;Following the principle that time is a public value, a server responds to any client packet that matches its cryptotype capabilities. Thus, a server receiving an unauthenticated packet will respond with an unauthenticated packet, while the same server receiving a packet of a cryptotype it supports will respond with packets of that cryptotype. However, unconfigured broadcast or manycast client associations or symmetric passive associations will not be mobilized unless the server supports a cryptotype compatible with the first packet received. By default, unauthenticated associations will not be mobilized unless overridden in a decidedly dangerous way.&lt;/p&gt;
&lt;p&gt;Some examples may help to reduce confusion. Client Alice has no specific cryptotype selected. Server Bob has both a symmetric key file and minimal Autokey files. Alice&amp;rsquo;s unauthenticated messages arrive at Bob, who replies with unauthenticated messages. Cathy has a copy of Bob&amp;rsquo;s symmetric key file and has selected key ID 4 in messages to Bob. Bob verifies the message with his key ID 4. If it&amp;rsquo;s the same key and the message is verified, Bob sends Cathy a reply authenticated with that key. If verification fails, Bob sends Cathy a thing called a crypto-NAK, which tells her something broke. She can see the evidence using the &lt;tt&gt;ntpq&lt;/tt&gt; program.&lt;/p&gt;
&lt;p&gt;Denise has rolled her own host key and certificate. She also uses one of the identity schemes as Bob. She sends the first Autokey message to Bob and they both dance the protocol authentication and identity steps. If all comes out okay, Denise and Bob continue as described above.&lt;/p&gt;
&lt;p&gt;It should be clear from the above that Bob can support all the girls at the same time, as long as he has compatible authentication and identity credentials. Now, Bob can act just like the girls in his own choice of servers; he can run multiple configured associations with multiple different servers (or the same server, although that might not be useful). But, wise security policy might preclude some cryptotype combinations; for instance, running an identity scheme with one server and no authentication with another might not be wise.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;key-management&#34;&gt;Key Management&lt;/h4&gt;
&lt;p&gt;The cryptographic values used by the Autokey protocol are incorporated as a set of files generated by the &lt;a href=&#34;/archives/4.2.0/keygen&#34;&gt;ntp-keygen&lt;/a&gt; utility program, including symmetric key, host key and public certificate files, as well as sign key, identity parameters and leapseconds files. Alternatively, host and sign keys and certificate files can be generated by the OpenSSL utilities and certificates can be imported from public certificate authorities. Note that symmetric keys are necessary for the &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; utility programs. The remaining files are necessary only for the Autokey protocol.&lt;/p&gt;
&lt;p&gt;Certificates imported from OpenSSL or public certificate authorities have certian limitations. The certificate should be in ASN.1 syntax, X.509 Version 3 format and encoded in PEM, which is the same format used by OpenSSL. The overall length of the certificate encoded in ASN.1 must not exceed 1024 bytes. The subject distinguished name field (&lt;tt&gt;CN&lt;/tt&gt;) is the fully qualified name of the host on which it is used; the remaining subject fields are ignored. The certificate extension fields must not contain either a subject key identifier or a issuer key identifier field; however, an extended key usage field for a trusted host must contain the value &lt;tt&gt;trustRoot;&lt;/tt&gt;. Other extension fields are ignored.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;authentication-commands&#34;&gt;Authentication Commands&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;autokey [_logsec_]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the interval between regenerations of the session key list used with the Autokey protocol. Note that the size of the key list for each association depends on this interval and the current poll interval. The default interval is 12 (4096 s or about 1.1 hours). For poll intervals above the specified interval, a session key list with a single entry will be regenerated for every message sent.&lt;/p&gt;
&lt;dt id=&#34;controlkey&#34;&gt;&lt;tt&gt;controlkey _key_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the key identifier to use with the &lt;a href=&#34;/archives/4.2.0/ntpq&#34;&gt;&lt;tt&gt;ntpq&lt;/tt&gt;&lt;/a&gt; utility, which uses the standard protocol defined in RFC-1305. The &lt;tt&gt;&lt;em&gt;key&lt;/em&gt;&lt;/tt&gt; argument is the key identifier for a trusted key, where the value can be in the range 1 to 65534, inclusive.&lt;/p&gt;
&lt;dt id=&#34;crypto&#34;&gt;&lt;tt&gt;crypto [cert _file_] [leap _file_] [randfile _file_] [host _file_] [sign _file_] [gq _file_] [gqpar _file_] [iffpar _file_] [mvpar _file_] [pw _password_]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command requires the OpenSSL library. It activates public key cryptography, selects the message digest and signature encryption scheme and loads the required private and public values described above. If one or more files are left unspecified, the default names are used as described above. Unless the complete path and name of the file are specified, the location of a file is relative to the keys directory specified in the &lt;tt&gt;keysdir&lt;/tt&gt; command or default &lt;tt&gt;/usr/local/etc&lt;/tt&gt;. Following are the subcommands:&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;cert &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the required host public certificate file. This overrides the link &lt;tt&gt;ntpkey_cert_hostname&lt;/tt&gt; in the keys directory.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;gqpar &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the client GQ parameters file. This overrides the link &lt;tt&gt;ntpkey_gq_hostname&lt;/tt&gt; in the keys directory.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;host &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;Â Â Â Â &lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the required host key file. This overrides the link &lt;tt&gt;ntpkey_key_hostname&lt;/tt&gt; in the keys directory.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;iffpar &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the optional IFF parameters file.This overrides the link &lt;tt&gt;ntpkey_iff_hostname&lt;/tt&gt; in the keys directory.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;leap &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the optional leapsecond file. This overrides the link &lt;tt&gt;ntpkey_leap&lt;/tt&gt; in the keys directory.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;mvpar &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the client MV parameters file. This overrides the link &lt;tt&gt;ntpkey_mv_hostname&lt;/tt&gt; in the keys directory.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;pw &lt;em&gt;password&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the password to decrypt files containing private keys and identity parameters. This is required only if these files have been encrypted.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;randfile &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the random seed file used by the OpenSSL library. The defaults are described in the main text above.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;sign &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the optional sign key file. This overrides the link &lt;tt&gt;ntpkey_sign_hostname&lt;/tt&gt; in the keys directory. If this file is not found, the host key is also the sign key.&lt;/p&gt;
&lt;dt id=&#34;keys&#34;&gt;&lt;tt&gt;keys _keyfile_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the complete path to the MD5 key file containing the keys and key identifiers used by &lt;tt&gt;ntpd&lt;/tt&gt;, &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; when operating with symmetric key cryptography. This is the same operation as the &lt;tt&gt;-k&lt;/tt&gt; command line option.&lt;/p&gt;
&lt;dt id=&#34;keysdir&#34;&gt;&lt;tt&gt;keysdir _path_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command specifies the default directory path for cryptographic keys, parameters and certificates. The default is &lt;tt&gt;/usr/local/etc/&lt;/tt&gt;.&lt;/p&gt;
&lt;dt id=&#34;requestkey&#34;&gt;&lt;tt&gt;requestkey _key_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the key identifier to use with the &lt;a href=&#34;/archives/4.2.0/ntpdc&#34;&gt;&lt;tt&gt;ntpdc&lt;/tt&gt;&lt;/a&gt; program, which uses a proprietary protocol specific to this implementation of &lt;tt&gt;ntpd&lt;/tt&gt;. The &lt;tt&gt;&lt;em&gt;key&lt;/em&gt;&lt;/tt&gt; argument is a key identifier for the trusted key, where the value can be in the range 1 to 65534, inclusive.&lt;/p&gt;
&lt;dt id=&#34;revoke&#34;&gt;&lt;tt&gt;revoke [_logsec_]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the interval between re-randomization of certain cryptographic values used by the Autokey scheme, as a power of 2 in seconds. These values need to be updated frequently in order to deflect brute-force attacks on the algorithms of the scheme; however, updating some values is a relatively expensive operation. The default interval is 16 (65,536 s or about 18 hours). For poll intervals above the specified interval, the values will be updated for every message sent.&lt;/p&gt;
&lt;dt id=&#34;trustedkey&#34;&gt;&lt;tt&gt;trustedkey [_key_] [...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the key identifiers which are trusted for the purposes of authenticating peers with symmetric key cryptography, as well as keys used by the &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; programs. The authentication procedures require that both the local and remote servers share the same key and key identifier for this purpose, although different keys can be used with different servers. The &lt;tt&gt;key&lt;/tt&gt; arguments are 32-bit unsigned integers with values from 1 to 65,534.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;error-codes&#34;&gt;Error Codes&lt;/h4&gt;
&lt;p&gt;The following error codes are reported via the NTP control and monitoring protocol trap mechanism.&lt;/p&gt;
&lt;dt&gt;101 bad field format or length&lt;/dt&gt;
&lt;p&gt;The packet has invalid version, length or format.&lt;/p&gt;
&lt;dt&gt;102 bad timestamp&lt;/dt&gt;
&lt;p&gt;The packet timestamp is the same or older than the most recent received. This could be due to a replay or a server clock time step.&lt;/p&gt;
&lt;dt&gt;103 bad filestamp&lt;/dt&gt;
&lt;p&gt;The packet filestamp is the same or older than the most recent received. This could be due to a replay or a key file generation error.&lt;/p&gt;
&lt;dt&gt;104 bad or missing public key&lt;/dt&gt;
&lt;p&gt;The public key is missing, has incorrect format or is an unsupported type.&lt;/p&gt;
&lt;dt&gt;105 unsupported digest type&lt;/dt&gt;
&lt;p&gt;The server requires an unsupported digest/signature scheme.&lt;/p&gt;
&lt;dt&gt;106 unsupported identity type&lt;/dt&gt;
&lt;p&gt;The client or server has requested an identity scheme the other does not support.&lt;/p&gt;
&lt;dt&gt;107 bad signature length&lt;/dt&gt;
&lt;p&gt;The signature length does not match the current public key.&lt;/p&gt;
&lt;dt&gt;108 signature not verified&lt;/dt&gt;
&lt;p&gt;The message fails the signature check. It could be bogus or signed by a different private key.&lt;/p&gt;
&lt;dt&gt;109 certificate not verified&lt;/dt&gt;
&lt;p&gt;The certificate is invalid or signed with the wrong key.&lt;/p&gt;
&lt;dt&gt;110 host certificate expired&lt;/dt&gt;
&lt;p&gt;The old server certificate has expired.&lt;/p&gt;
&lt;dt&gt;111 bad or missing cookie&lt;/dt&gt;
&lt;p&gt;The cookie is missing, corrupted or bogus.&lt;/p&gt;
&lt;dt&gt;112 bad or missing leapseconds table&lt;/dt&gt;
&lt;p&gt;The leapseconds table is missing, corrupted or bogus.&lt;/p&gt;
&lt;dt&gt;113 bad or missing certificate&lt;/dt&gt;
&lt;p&gt;The certificate is missing, corrupted or bogus.&lt;/p&gt;
&lt;dt&gt;114 bad or missing group key&lt;/dt&gt;
&lt;p&gt;The identity key is missing, corrupt or bogus.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;files&#34;&gt;Files&lt;/h4&gt;
&lt;p&gt;See the &lt;a href=&#34;/archives/4.2.0/keygen&#34;&gt;&lt;tt&gt;ntp-keygen&lt;/tt&gt;&lt;/a&gt; page.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;leapseconds-table&#34;&gt;Leapseconds Table&lt;/h4&gt;
&lt;p&gt;The NIST provides a file documenting the epoch for all historic occasions of leap second insertion since 1972. The leapsecond table shows each epoch of insertion along with the offset of International Atomic Time (TAI) with respect to Coordinated Universal Time (UTC), as disseminated by NTP. The table can be obtained directly from NIST national time servers using &lt;tt&gt;ftp&lt;/tt&gt; as the ASCII file &lt;tt&gt;pub/leap-seconds&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;While not strictly a security function, the Autokey protocol provides means to securely retrieve the leapsecond table from a server or peer. Servers load the leapsecond table directly from the file specified in the &lt;tt&gt;crypto&lt;/tt&gt; command, with default &lt;tt&gt;ntpkey_leap&lt;/tt&gt;, while clients can obtain the table indirectly from the servers using the Autokey protocol. Once loaded, the table can be provided on request to other clients and servers.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Authentication Options</title>
      <link>/archives/4.2.2-series/authopt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.2-series/authopt/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice44.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/%7emills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Our resident cryptographer; now you see him, now you don&amp;rsquo;t.&lt;/p&gt;
&lt;p&gt;Last update: 	16:25 UTC Monday, April 17, 2006&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.2-series/authopt/#authentication-support&#34;&gt;Authentication Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.2-series/authopt/#symmetric-key-cryptography&#34;&gt;Symmetric Key Cryptography&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.2-series/authopt/#public-key-cryptography&#34;&gt;Public Key Cryptography&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.2-series/authopt/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.2-series/authopt/#operation&#34;&gt;Operation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.2-series/authopt/#key-management&#34;&gt;Key Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.2-series/authopt/#authentication-commands&#34;&gt;Authentication Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.2-series/authopt/#error-codes&#34;&gt;Error Codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.2-series/authopt/#files&#34;&gt;Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.2-series/authopt/#leapseconds-table&#34;&gt;Leapseconds Table&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;authentication-support&#34;&gt;Authentication Support&lt;/h4&gt;
&lt;p&gt;Authentication support allows the NTP client to verify that the server is in fact known and trusted and not an intruder intending accidentally or on purpose to masquerade as that server. The NTPv3 specification RFC-1305 defines a scheme which provides cryptographic authentication of received NTP packets. Originally, this was done using the Data Encryption Standard (DES) algorithm operating in Cipher Block Chaining (CBC) mode, commonly called DES-CBC. Subsequently, this was replaced by the RSA Message Digest 5 (MD5) algorithm using a private key, commonly called keyed-MD5. Either algorithm computes a message digest, or one-way hash, which can be used to verify the server has the correct private key and key identifier.&lt;/p&gt;
&lt;p&gt;NTPv4 retains the NTPv3 scheme, properly described as symmetric key cryptography, and, in addition, provides a new Autokey scheme based on public key cryptography. Public key cryptography is generally considered more secure than symmetric key cryptography, since the security is based on a private value which is generated by each host and never revealed. With the exception of the group key described later, all key distribution and management functions involve only public values, which considerably simplifies key distribution and storage. Public key management is based on X.509 certificates, which can be provided by commercial services or produced by utility programs in the OpenSSL software library or the NTPv4 distribution.&lt;/p&gt;
&lt;p&gt;While the algorithms for symmetric key cryptography are included in the NTPv4 distribution, public key cryptography requires the OpenSSL software library to be installed before building the NTP distribution. This library is available from &lt;a href=&#34;https://www.openssl.org&#34;&gt;https://www.openssl.org&lt;/a&gt; and can be installed using the procedures outlined in the &lt;a href=&#34;/archives/4.2.2-series/build&#34;&gt;Building and Installing the Distribution&lt;/a&gt; page. Once installed, the configure and build process automatically detects the library and links the library routines required.&lt;/p&gt;
&lt;p&gt;Authentication is configured separately for each association using the &lt;tt&gt;key&lt;/tt&gt; or &lt;tt&gt;autokey&lt;/tt&gt; subcommand on the &lt;tt&gt;peer&lt;/tt&gt;, &lt;tt&gt;server&lt;/tt&gt;, &lt;tt&gt;broadcast&lt;/tt&gt; and &lt;tt&gt;manycastclient&lt;/tt&gt; configuration commands as described in the &lt;a href=&#34;/archives/4.2.2-series/confopt&#34;&gt;Configuration Options&lt;/a&gt; page. The authentication options described below specify the locations of the key files, if other than default, which symmetric keys are trusted and the interval between various operations, if other than default.&lt;/p&gt;
&lt;p&gt;Authentication is always enabled, although ineffective if not configured as described below. If a NTP packet arrives including a message authentication code (MAC), it is accepted only if it passes all cryptographic checks. The checks require correct key ID, key value and message digest. If the packet has been modified in any way or replayed by an intruder, it will fail one or more of these checks and be discarded. Furthermore, the Autokey scheme requires a preliminary protocol exchange to obtain the server certificate, verify its credentials and initialize the protocol&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;auth&lt;/tt&gt; flag controls whether new associations or remote configuration commands require cryptographic authentication. This flag can be set or reset by the &lt;tt&gt;enable&lt;/tt&gt; and &lt;tt&gt;disable&lt;/tt&gt; commands and also by remote configuration commands sent by a &lt;tt&gt;ntpdc&lt;/tt&gt; program running on another machine. If this flag is enabled, which is the default case, new broadcast/manycast client and symmetric passive associations and remote configuration commands must be cryptographically authenticated using either symmetric key or public key cryptography. If this flag is disabled, these operations are effective even if not cryptographic authenticated. It should be understood that operating with the &lt;tt&gt;auth&lt;/tt&gt; flag disabled invites a significant vulnerability where a rogue hacker can masquerade as a truechimer and seriously disrupt system timekeeping. It is important to note that this flag has no purpose other than to allow or disallow a new association in response to new broadcast and symmetric active messages and remote configuration commands and, in particular, the flag has no effect on the authentication process itself.&lt;/p&gt;
&lt;p&gt;The security model and protocol schemes for both symmetric key and public key cryptography are summarized below; further details are in the briefings, papers and reports at the NTP project page linked from &lt;a href=&#34;http://www.ntp.org&#34;&gt;www.ntp.org&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;symmetric-key-cryptography&#34;&gt;Symmetric Key Cryptography&lt;/h4&gt;
&lt;p&gt;The original RFC-1305 specification allows any one of possibly 65,534 keys, each distinguished by a 32-bit key identifier, to authenticate an association. The servers and clients involved must agree on the key and key identifier to authenticate NTP packets. Keys and related information are specified in a key file, usually called &lt;tt&gt;ntp.keys&lt;/tt&gt;, which must be distributed and stored using secure means beyond the scope of the NTP protocol itself. Besides the keys used for ordinary NTP associations, additional keys can be used as passwords for the &lt;a href=&#34;/archives/4.2.2-series/ntpq&#34;&gt;ntpq&lt;/a&gt; and &lt;a href=&#34;/archives/4.2.2-series/ntpdc&#34;&gt;ntpdc&lt;/a&gt; utility programs. Ordinarily, the &lt;tt&gt;ntp.keys&lt;/tt&gt; file is generated by the &lt;a href=&#34;/archives/4.2.2-series/keygen&#34;&gt;ntp-keygen&lt;/a&gt; program.&lt;/p&gt;
&lt;p&gt;When &lt;tt&gt;ntpd&lt;/tt&gt; is first started, it reads the key file specified in the &lt;tt&gt;keys&lt;/tt&gt; configuration command and installs the keys in the key cache. However, individual keys must be activated with the &lt;tt&gt;trustedkey&lt;/tt&gt; command before use. This allows, for instance, the installation of possibly several batches of keys and then activating or deactivating each batch remotely using &lt;tt&gt;ntpdc&lt;/tt&gt;. This also provides a revocation capability that can be used if a key becomes compromised. The &lt;tt&gt;requestkey&lt;/tt&gt; command selects the key used as the password for the &lt;tt&gt;ntpdc&lt;/tt&gt; utility, while the &lt;tt&gt;controlkey&lt;/tt&gt; command selects the key used as the password for the &lt;tt&gt;ntpq&lt;/tt&gt; utility.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;public-key-cryptography&#34;&gt;Public Key Cryptography&lt;/h4&gt;
&lt;p&gt;NTPv4 supports the original NTPv3 symmetric key scheme described in RFC-1305 and in addition the Autokey protocol, which is based on public key cryptography. The Autokey Version 2 protocol described on the &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/proto.html&#34;&gt;Autokey Protocol&lt;/a&gt; page verifies packet integrity using MD5 message digests and verifies the source with digital signatures and any of several digest/signature schemes. Optional identity schemes described on the &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/ident.html&#34;&gt;Identity Schemes&lt;/a&gt; page and based on cryptographic challenge/response algorithms are also available. Using these schemes provides strong security against replay with or without modification, spoofing, masquerade and most forms of clogging attacks.&lt;/p&gt;
&lt;p&gt;The Autokey protocol has several modes of operation corresponding to the various NTP modes supported. Most modes use a special cookie which can be computed independently by the client and server, but encrypted in transmission. All modes use in addition a variant of the S-KEY scheme, in which a pseudo-random key list is generated and used in reverse order. These schemes are described along with an executive summary, current status, briefing slides and reading list on the &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/autokey.html&#34;&gt;Autonomous Authentication&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;The specific cryptographic environment used by Autokey servers and clients is determined by a set of files and soft links generated by the &lt;a href=&#34;/archives/4.2.2-series/keygen&#34;&gt;ntp-keygen&lt;/a&gt; program. This includes a required host key file, required host certificate file and optional sign key file, leapsecond file and identity scheme files. The digest/signature scheme is specified in the X.509 certificate along with the matching sign key. There are several schemes available in the OpenSSL software library, each identified by a specific string such as &lt;tt&gt;md5WithRSAEncryption&lt;/tt&gt;, which stands for the MD5 message digest with RSA encryption scheme. The current NTP distribution supports all the schemes in the OpenSSL library, including those based on RSA and DSA digital signatures.&lt;/p&gt;
&lt;p&gt;NTP secure groups can be used to define cryptographic compartments and security hierarchies. It is important that every host in the group be able to construct a certificate trail to one or more trusted hosts in the same group. Each group host runs the Autokey protocol to obtain the certificates for all hosts along the trail to one or more trusted hosts. This requires the configuration file in all hosts to be engineered so that, even under anticipated failure conditions, the NTP subnet will form such that every group host can find a trail to at least one trusted host.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;naming-and-addressing&#34;&gt;Naming and Addressing&lt;/h4&gt;
&lt;p&gt;It is important to note that Autokey does not use DNS to resolve addresses, since DNS can&amp;rsquo;t be completely trusted until the name servers have synchronized clocks. The cryptographic name used by Autokey to bind the host identity credentials and cryptographic values must be independent of interface, network and any other naming convention. The name appears in the host certificate in either or both the subject and issuer fields, so protection against DNS compromise is essential.&lt;/p&gt;
&lt;p&gt;By convention, the name of an Autokey host is the name returned by the Unix &lt;tt&gt;gethostname()&lt;/tt&gt; system call or equivalent in other systems. By the system design model, there are no provisions to allow alternate names or aliases. However, this is not to say that DNS aliases, different names for each interface, etc., are constrained in any way.&lt;/p&gt;
&lt;p&gt;It is also important to note that Autokey verifies authenticity using the host name, network address and public keys, all of which are bound together by the protocol specifically to deflect masquerade attacks. For this reason Autokey includes the source and destinatino IP addresses in message digest computations and so the same addresses must be available at both the server and client. For this reason operation with network address translation schemes is not possible. This reflects the intended robust security model where government and corporate NTP servers are operated outside firewall perimeters.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;configuration&#34;&gt;Configuration&lt;/h4&gt;
&lt;p&gt;Autokey has an intimidating number of options, most of which are not necessary in typical scenarios. The simplest configuration consists of a subnet with one or more servers at the same low stratum acting as trusted hosts and with dependent clients at higher strata and sharing a single secure group and identity scheme. Each trusted host generates a host key, trusted certificate and group key. Each client generates a host key, normal certificate and installs the group key of each trusted host using secure means and renames it as the name of the trusted host.&lt;/p&gt;
&lt;p&gt;For example, trusted host Alice generates keys using&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ntp-keygen -H -T -I -p xyz&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;where H specifies a new host key, T the trusted certificate, I the IFF identity scheme and p the password used to encrypt the private key files. The group key file is &lt;tt&gt;ntpkey_IFFpar_alice.filestamp&lt;/tt&gt;, where filestamp represents the NTP time in seconds when the file was generated.&lt;/p&gt;
&lt;p&gt;Host Bob generate keys using&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ntp-keygen -H -p abc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;where &lt;tt&gt;abc&lt;/tt&gt; is different for each group host. The trusted host generates a password-protected group key using&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ntp-keygen -q xyz -p abc -e &amp;gt;temp&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;where &lt;tt&gt;xyz&lt;/tt&gt; is the trusted host password, abc is the password supplied by the client and &lt;tt&gt;temp&lt;/tt&gt; is a temporary file. This file is transmitted to Bob using secure means and renamed to the fully qualified host name for Alice preceded by the string &lt;tt&gt;ntpkey_iff_&lt;/tt&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;operation&#34;&gt;Operation&lt;/h4&gt;
&lt;p&gt;A specific combination of authentication scheme (none, symmetric key, public key) and identity scheme is called a cryptotype, although not all combinations are compatible. There may be management configurations where the clients, servers and peers may not all support the same cryptotypes. A secure NTPv4 subnet can be configured in many ways while keeping in mind the principles explained above and in this section. Note however that some cryptotype combinations may successfully interoperate with each other, but may not represent good security practice.&lt;/p&gt;
&lt;p&gt;The cryptotype of an association is determined at the time of mobilization, either at configuration time or some time later when a message of appropriate cryptotype arrives. When mobilized by a &lt;tt&gt;server&lt;/tt&gt; or &lt;tt&gt;peer&lt;/tt&gt; configuration command and no &lt;tt&gt;key&lt;/tt&gt; or &lt;tt&gt;autokey&lt;/tt&gt; subcommands are present, the association is not authenticated; if the &lt;tt&gt;key&lt;/tt&gt; subcommand is present, the association is authenticated using the symmetric key ID specified; if the &lt;tt&gt;autokey&lt;/tt&gt; subcommand is present, the association is authenticated using Autokey.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;key-management&#34;&gt;Key Management&lt;/h4&gt;
&lt;p&gt;The cryptographic values used by the Autokey protocol are incorporated as a set of files generated by the &lt;a href=&#34;/archives/4.2.2-series/keygen&#34;&gt;ntp-keygen&lt;/a&gt; utility program, including symmetric key, host key and public certificate files, as well as sign key, identity parameters and leapseconds files. Alternatively, host and sign keys and certificate files can be generated by the OpenSSL utilities and certificates can be imported from public certificate authorities. Note that symmetric keys are necessary for the &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; utility programs. The remaining files are necessary only for the Autokey protocol.&lt;/p&gt;
&lt;p&gt;Certificates imported from OpenSSL or public certificate authorities have certian limitations. The certificate should be in ASN.1 syntax, X.509 Version 3 format and encoded in PEM, which is the same format used by OpenSSL. The overall length of the certificate encoded in ASN.1 must not exceed 1024 bytes. The subject distinguished name field (&lt;tt&gt;CN&lt;/tt&gt;) is the fully qualified name of the host on which it is used; the remaining subject fields are ignored. The certificate extension fields must not contain either a subject key identifier or a issuer key identifier field; however, an extended key usage field for a trusted host must contain the value &lt;tt&gt;trustRoot;&lt;/tt&gt;. Other extension fields are ignored.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;authentication-commands&#34;&gt;Authentication Commands&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;autokey [_logsec_]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the interval between regenerations of the session key list used with the Autokey protocol. Note that the size of the key list for each association depends on this interval and the current poll interval. The default interval is 12 (4096 s or about 1.1 hours). For poll intervals above the specified interval, a session key list with a single entry will be regenerated for every message sent.&lt;/p&gt;
&lt;dt id=&#34;controlkey&#34;&gt;&lt;tt&gt;controlkey _key_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the key identifier to use with the &lt;a href=&#34;/archives/4.2.2-series/ntpq&#34;&gt;&lt;tt&gt;ntpq&lt;/tt&gt;&lt;/a&gt; utility, which uses the standard protocol defined in RFC-1305. The &lt;tt&gt;&lt;em&gt;key&lt;/em&gt;&lt;/tt&gt; argument is the key identifier for a trusted key, where the value can be in the range 1 to 65534, inclusive.&lt;/p&gt;
&lt;dt id=&#34;crypto&#34;&gt;&lt;tt&gt;crypto [cert _file_] [leap _file_] [randfile _file_] [host _file_] [sign _file_] [ident _scheme_] [iffpar _file_] [ggpar _file_] [mvpar _file_] [pw _password_]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command requires the OpenSSL library. It activates public key cryptography, selects the message digest and signature encryption scheme and loads the required private and public values described above. If one or more files are left unspecified, the default names are used as described above. Unless the complete path and name of the file are specified, the location of a file is relative to the keys directory specified in the &lt;tt&gt;keysdir&lt;/tt&gt; command or default &lt;tt&gt;/usr/local/etc&lt;/tt&gt;. Following are the subcommands:&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;cert &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the required host public certificate file. This overrides the link &lt;tt&gt;ntpkey_cert_hostname&lt;/tt&gt; in the keys directory.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;ggpar &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the client GQ parameters file. This overrides the link &lt;tt&gt;ntpkey_gq_hostname&lt;/tt&gt; in the keys directory.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;host &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;Â Â Â Â &lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the required host key file. This overrides the link &lt;tt&gt;ntpkey_key_hostname&lt;/tt&gt; in the keys directory.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;ident &lt;em&gt;scheme&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Requests the server identity &lt;tt&gt;scheme&lt;/tt&gt;, which can be &lt;tt&gt;IFF&lt;/tt&gt;, &lt;tt&gt;GQ&lt;/tt&gt; or &lt;tt&gt;MV&lt;/tt&gt;. This is used when the host will not be a server for a dependent client.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;iffpar &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the optional IFF parameters file.This overrides the link &lt;tt&gt;ntpkey_iff_hostname&lt;/tt&gt; in the keys directory.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;leap &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the client leapsecond file. This overrides the link &lt;tt&gt;ntpkey_leap&lt;/tt&gt; in the keys directory.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;mv&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Requests the MV server identity scheme.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;mvpar &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the client MV parameters file. This overrides the link &lt;tt&gt;ntpkey_mv_hostname&lt;/tt&gt; in the keys directory.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;pw &lt;em&gt;password&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the password to decrypt files containing private keys and identity parameters. This is required only if these files have been encrypted.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;randfile &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the random seed file used by the OpenSSL library. The defaults are described in the main text above.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;sign &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the optional sign key file. This overrides the link &lt;tt&gt;ntpkey_sign_hostname&lt;/tt&gt; in the keys directory. If this file is not found, the host key is also the sign key.&lt;/p&gt;
&lt;dt id=&#34;keys&#34;&gt;&lt;tt&gt;keys _keyfile_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the complete path to the MD5 key file containing the keys and key identifiers used by &lt;tt&gt;ntpd&lt;/tt&gt;, &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; when operating with symmetric key cryptography. This is the same operation as the &lt;tt&gt;-k&lt;/tt&gt; command line option.&lt;/p&gt;
&lt;dt id=&#34;keysdir&#34;&gt;&lt;tt&gt;keysdir _path_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command specifies the default directory path for cryptographic keys, parameters and certificates. The default is &lt;tt&gt;/usr/local/etc/&lt;/tt&gt;.&lt;/p&gt;
&lt;dt id=&#34;requestkey&#34;&gt;&lt;tt&gt;requestkey _key_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the key identifier to use with the &lt;a href=&#34;/archives/4.2.2-series/ntpdc&#34;&gt;&lt;tt&gt;ntpdc&lt;/tt&gt;&lt;/a&gt; program, which uses a proprietary protocol specific to this implementation of &lt;tt&gt;ntpd&lt;/tt&gt;. The &lt;tt&gt;&lt;em&gt;key&lt;/em&gt;&lt;/tt&gt; argument is a key identifier for the trusted key, where the value can be in the range 1 to 65534, inclusive.&lt;/p&gt;
&lt;dt id=&#34;revoke&#34;&gt;&lt;tt&gt;revoke [_logsec_]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the interval between re-randomization of certain cryptographic values used by the Autokey scheme, as a power of 2 in seconds. These values need to be updated frequently in order to deflect brute-force attacks on the algorithms of the scheme; however, updating some values is a relatively expensive operation. The default interval is 16 (65,536 s or about 18 hours). For poll intervals above the specified interval, the values will be updated for every message sent.&lt;/p&gt;
&lt;dt id=&#34;trustedkey&#34;&gt;&lt;tt&gt;trustedkey [_key_] [...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the key identifiers which are trusted for the purposes of authenticating peers with symmetric key cryptography, as well as keys used by the &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; programs. The authentication procedures require that both the local and remote servers share the same key and key identifier for this purpose, although different keys can be used with different servers. The &lt;tt&gt;key&lt;/tt&gt; arguments are 32-bit unsigned integers with values from 1 to 65,534.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;error-codes&#34;&gt;Error Codes&lt;/h4&gt;
&lt;p&gt;Errors can occur due to mismatched configurations, unexpected restarts, expired certificates and unfriendly people. In most cases the protocol state machine recovers automatically by retransmission, timeout and restart, where necessary. Some errors are due to mismatched keys, digest schemes or identity schemes and must be corrected by installing the correct media and/or correcting the configuration file. One of the most common errors is expired certificates, which must be regenerated and signed at least once per year using the &lt;a href=&#34;/archives/4.2.2-series/keygen&#34;&gt;&lt;tt&gt;ntp-keygen&lt;/tt&gt;&lt;/a&gt; program.&lt;/p&gt;
&lt;p&gt;The following error codes are reported via the NTP control and monitoring protocol trap mechanism.&lt;/p&gt;
&lt;dt&gt;101 bad field format or length&lt;/dt&gt;
&lt;p&gt;The packet has invalid version, length or format.&lt;/p&gt;
&lt;dt&gt;102 bad timestamp&lt;/dt&gt;
&lt;p&gt;The packet timestamp is the same or older than the most recent received. This could be due to a replay or a server clock time step.&lt;/p&gt;
&lt;dt&gt;103 bad filestamp&lt;/dt&gt;
&lt;p&gt;The packet filestamp is the same or older than the most recent received. This could be due to a replay or a key file generation error.&lt;/p&gt;
&lt;dt&gt;104 bad or missing public key&lt;/dt&gt;
&lt;p&gt;The public key is missing, has incorrect format or is an unsupported type.&lt;/p&gt;
&lt;dt&gt;105 unsupported digest type&lt;/dt&gt;
&lt;p&gt;The server requires an unsupported digest/signature scheme.&lt;/p&gt;
&lt;dt&gt;106 unsupported identity type&lt;/dt&gt;
&lt;p&gt;The client or server has requested an identity scheme the other does not support.&lt;/p&gt;
&lt;dt&gt;107 bad signature length&lt;/dt&gt;
&lt;p&gt;The signature length does not match the current public key.&lt;/p&gt;
&lt;dt&gt;108 signature not verified&lt;/dt&gt;
&lt;p&gt;The message fails the signature check. It could be bogus or signed by a different private key.&lt;/p&gt;
&lt;dt&gt;109 certificate not verified&lt;/dt&gt;
&lt;p&gt;The certificate is invalid or signed with the wrong key.&lt;/p&gt;
&lt;dt&gt;110 host certificate expired&lt;/dt&gt;
&lt;p&gt;The old server certificate has expired.&lt;/p&gt;
&lt;dt&gt;111 bad or missing cookie&lt;/dt&gt;
&lt;p&gt;The cookie is missing, corrupted or bogus.&lt;/p&gt;
&lt;dt&gt;112 bad or missing leapseconds table&lt;/dt&gt;
&lt;p&gt;The leapseconds table is missing, corrupted or bogus.&lt;/p&gt;
&lt;dt&gt;113 bad or missing certificate&lt;/dt&gt;
&lt;p&gt;The certificate is missing, corrupted or bogus.&lt;/p&gt;
&lt;dt&gt;114 bad or missing group key&lt;/dt&gt;
&lt;p&gt;The identity key is missing, corrupt or bogus.&lt;/p&gt;
&lt;dt&gt;115 protocol error&lt;/dt&gt;
&lt;p&gt;The protocol state machine has wedged due to unexpected restart.&lt;/p&gt;
&lt;dt&gt;116 (server certificate expired)&lt;/dt&gt;
&lt;p&gt;The old server certificate has expired.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;files&#34;&gt;Files&lt;/h4&gt;
&lt;p&gt;See the &lt;a href=&#34;/archives/4.2.2-series/keygen&#34;&gt;&lt;tt&gt;ntp-keygen&lt;/tt&gt;&lt;/a&gt; page.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;leapseconds-table&#34;&gt;Leapseconds Table&lt;/h4&gt;
&lt;p&gt;The NIST provides a file documenting the epoch for all historic occasions of leap second insertion since 1972. The leapsecond table shows each epoch of insertion along with the offset of International Atomic Time (TAI) with respect to Coordinated Universal Time (UTC), as disseminated by NTP. The table can be obtained directly from NIST national time servers using &lt;tt&gt;ftp&lt;/tt&gt; as the ASCII file &lt;tt&gt;pub/leap-seconds&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;While not strictly a security function, the Autokey protocol provides means to securely retrieve the leapsecond table from a server or peer. Servers load the leapsecond table directly from the file specified in the &lt;tt&gt;crypto&lt;/tt&gt; command, with default &lt;tt&gt;ntpkey_leap&lt;/tt&gt;, while clients can obtain the table indirectly from the servers using the Autokey protocol. Once loaded, the table can be provided on request to other clients and servers.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Authentication Options</title>
      <link>/archives/4.2.4-series/authopt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.4-series/authopt/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice44.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/%7emills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Our resident cryptographer; now you see him, now you don&amp;rsquo;t.&lt;/p&gt;
&lt;p&gt;Last update: 	01:29 UTC Wednesday, September 13, 2006&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.4-series/authopt/#authentication-support&#34;&gt;Authentication Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.4-series/authopt/#symmetric-key-cryptography&#34;&gt;Symmetric Key Cryptography&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.4-series/authopt/#public-key-cryptography&#34;&gt;Public Key Cryptography&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.4-series/authopt/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.4-series/authopt/#operation&#34;&gt;Operation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.4-series/authopt/#key-management&#34;&gt;Key Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.4-series/authopt/#authentication-commands&#34;&gt;Authentication Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.4-series/authopt/#error-codes&#34;&gt;Error Codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.4-series/authopt/#files&#34;&gt;Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.4-series/authopt/#leapseconds-table&#34;&gt;Leapseconds Table&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;authentication-support&#34;&gt;Authentication Support&lt;/h4&gt;
&lt;p&gt;Authentication support allows the NTP client to verify that the server is in fact known and trusted and not an intruder intending accidentally or on purpose to masquerade as that server. The NTPv3 specification RFC-1305 defines a scheme which provides cryptographic authentication of received NTP packets. Originally, this was done using the Data Encryption Standard (DES) algorithm operating in Cipher Block Chaining (CBC) mode, commonly called DES-CBC. Subsequently, this was replaced by the RSA Message Digest 5 (MD5) algorithm using a private key, commonly called keyed-MD5. Either algorithm computes a message digest, or one-way hash, which can be used to verify the server has the correct private key and key identifier.&lt;/p&gt;
&lt;p&gt;NTPv4 retains the NTPv3 scheme, properly described as symmetric key cryptography, and, in addition, provides a new Autokey scheme based on public key cryptography. Public key cryptography is generally considered more secure than symmetric key cryptography, since the security is based on a private value which is generated by each host and never revealed. With the exception of the group key described later, all key distribution and management functions involve only public values, which considerably simplifies key distribution and storage. Public key management is based on X.509 certificates, which can be provided by commercial services or produced by utility programs in the OpenSSL software library or the NTPv4 distribution.&lt;/p&gt;
&lt;p&gt;While the algorithms for symmetric key cryptography are included in the NTPv4 distribution, public key cryptography requires the OpenSSL software library to be installed before building the NTP distribution. This library is available from &lt;a href=&#34;https://www.openssl.org&#34;&gt;https://www.openssl.org&lt;/a&gt; and can be installed using the procedures outlined in the &lt;a href=&#34;/archives/4.2.4-series/build&#34;&gt;Building and Installing the Distribution&lt;/a&gt; page. Once installed, the configure and build process automatically detects the library and links the library routines required.&lt;/p&gt;
&lt;p&gt;Authentication is configured separately for each association using the &lt;tt&gt;key&lt;/tt&gt; or &lt;tt&gt;autokey&lt;/tt&gt; subcommand on the &lt;tt&gt;peer&lt;/tt&gt;, &lt;tt&gt;server&lt;/tt&gt;, &lt;tt&gt;broadcast&lt;/tt&gt; and &lt;tt&gt;manycastclient&lt;/tt&gt; configuration commands as described in the &lt;a href=&#34;/archives/4.2.4-series/confopt&#34;&gt;Configuration Options&lt;/a&gt; page. The authentication options described below specify the locations of the key files, if other than default, which symmetric keys are trusted and the interval between various operations, if other than default.&lt;/p&gt;
&lt;p&gt;Authentication is always enabled, although ineffective if not configured as described below. If a NTP packet arrives including a message authentication code (MAC), it is accepted only if it passes all cryptographic checks. The checks require correct key ID, key value and message digest. If the packet has been modified in any way or replayed by an intruder, it will fail one or more of these checks and be discarded. Furthermore, the Autokey scheme requires a preliminary protocol exchange to obtain the server certificate, verify its credentials and initialize the protocol&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;auth&lt;/tt&gt; flag controls whether new associations or remote configuration commands require cryptographic authentication. This flag can be set or reset by the &lt;tt&gt;enable&lt;/tt&gt; and &lt;tt&gt;disable&lt;/tt&gt; commands and also by remote configuration commands sent by a &lt;tt&gt;ntpdc&lt;/tt&gt; program running on another machine. If this flag is enabled, which is the default case, new broadcast/manycast client and symmetric passive associations and remote configuration commands must be cryptographically authenticated using either symmetric key or public key cryptography. If this flag is disabled, these operations are effective even if not cryptographic authenticated. It should be understood that operating with the &lt;tt&gt;auth&lt;/tt&gt; flag disabled invites a significant vulnerability where a rogue hacker can masquerade as a truechimer and seriously disrupt system timekeeping. It is important to note that this flag has no purpose other than to allow or disallow a new association in response to new broadcast and symmetric active messages and remote configuration commands and, in particular, the flag has no effect on the authentication process itself.&lt;/p&gt;
&lt;p&gt;The security model and protocol schemes for both symmetric key and public key cryptography are summarized below; further details are in the briefings, papers and reports at the NTP project page linked from &lt;a href=&#34;http://www.ntp.org&#34;&gt;www.ntp.org&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;symmetric-key-cryptography&#34;&gt;Symmetric Key Cryptography&lt;/h4&gt;
&lt;p&gt;The original RFC-1305 specification allows any one of possibly 65,534 keys, each distinguished by a 32-bit key identifier, to authenticate an association. The servers and clients involved must agree on the key and key identifier to authenticate NTP packets. Keys and related information are specified in a key file, usually called &lt;tt&gt;ntp.keys&lt;/tt&gt;, which must be distributed and stored using secure means beyond the scope of the NTP protocol itself. Besides the keys used for ordinary NTP associations, additional keys can be used as passwords for the &lt;a href=&#34;/archives/4.2.4-series/ntpq&#34;&gt;ntpq&lt;/a&gt; and &lt;a href=&#34;/archives/4.2.4-series/ntpdc&#34;&gt;ntpdc&lt;/a&gt; utility programs. Ordinarily, the &lt;tt&gt;ntp.keys&lt;/tt&gt; file is generated by the &lt;a href=&#34;/archives/4.2.4-series/keygen&#34;&gt;ntp-keygen&lt;/a&gt; program.&lt;/p&gt;
&lt;p&gt;When &lt;tt&gt;ntpd&lt;/tt&gt; is first started, it reads the key file specified in the &lt;tt&gt;keys&lt;/tt&gt; configuration command and installs the keys in the key cache. However, individual keys must be activated with the &lt;tt&gt;trustedkey&lt;/tt&gt; command before use. This allows, for instance, the installation of possibly several batches of keys and then activating or deactivating each batch remotely using &lt;tt&gt;ntpdc&lt;/tt&gt;. This also provides a revocation capability that can be used if a key becomes compromised. The &lt;tt&gt;requestkey&lt;/tt&gt; command selects the key used as the password for the &lt;tt&gt;ntpdc&lt;/tt&gt; utility, while the &lt;tt&gt;controlkey&lt;/tt&gt; command selects the key used as the password for the &lt;tt&gt;ntpq&lt;/tt&gt; utility.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;public-key-cryptography&#34;&gt;Public Key Cryptography&lt;/h4&gt;
&lt;p&gt;NTPv4 supports the original NTPv3 symmetric key scheme described in RFC-1305 and in addition the Autokey protocol, which is based on public key cryptography. The Autokey Version 2 protocol described on the &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/proto.html&#34;&gt;Autokey Protocol&lt;/a&gt; page verifies packet integrity using MD5 message digests and verifies the source with digital signatures and any of several digest/signature schemes. Optional identity schemes described on the &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/ident.html&#34;&gt;Identity Schemes&lt;/a&gt; page and based on cryptographic challenge/response algorithms are also available. Using these schemes provides strong security against replay with or without modification, spoofing, masquerade and most forms of clogging attacks.&lt;/p&gt;
&lt;p&gt;The Autokey protocol has several modes of operation corresponding to the various NTP modes supported. Most modes use a special cookie which can be computed independently by the client and server, but encrypted in transmission. All modes use in addition a variant of the S-KEY scheme, in which a pseudo-random key list is generated and used in reverse order. These schemes are described along with an executive summary, current status, briefing slides and reading list on the &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/autokey.html&#34;&gt;Autonomous Authentication&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;The specific cryptographic environment used by Autokey servers and clients is determined by a set of files and soft links generated by the &lt;a href=&#34;/archives/4.2.4-series/keygen&#34;&gt;ntp-keygen&lt;/a&gt; program. This includes a required host key file, required host certificate file and optional sign key file, leapsecond file and identity scheme files. The digest/signature scheme is specified in the X.509 certificate along with the matching sign key. There are several schemes available in the OpenSSL software library, each identified by a specific string such as &lt;tt&gt;md5WithRSAEncryption&lt;/tt&gt;, which stands for the MD5 message digest with RSA encryption scheme. The current NTP distribution supports all the schemes in the OpenSSL library, including those based on RSA and DSA digital signatures.&lt;/p&gt;
&lt;p&gt;NTP secure groups can be used to define cryptographic compartments and security hierarchies. It is important that every host in the group be able to construct a certificate trail to one or more trusted hosts in the same group. Each group host runs the Autokey protocol to obtain the certificates for all hosts along the trail to one or more trusted hosts. This requires the configuration file in all hosts to be engineered so that, even under anticipated failure conditions, the NTP subnet will form such that every group host can find a trail to at least one trusted host.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;naming-and-addressing&#34;&gt;Naming and Addressing&lt;/h4&gt;
&lt;p&gt;It is important to note that Autokey does not use DNS to resolve addresses, since DNS can&amp;rsquo;t be completely trusted until the name servers have synchronized clocks. The cryptographic name used by Autokey to bind the host identity credentials and cryptographic values must be independent of interface, network and any other naming convention. The name appears in the host certificate in either or both the subject and issuer fields, so protection against DNS compromise is essential.&lt;/p&gt;
&lt;p&gt;By convention, the name of an Autokey host is the name returned by the Unix &lt;tt&gt;gethostname()&lt;/tt&gt; system call or equivalent in other systems. By the system design model, there are no provisions to allow alternate names or aliases. However, this is not to say that DNS aliases, different names for each interface, etc., are constrained in any way.&lt;/p&gt;
&lt;p&gt;It is also important to note that Autokey verifies authenticity using the host name, network address and public keys, all of which are bound together by the protocol specifically to deflect masquerade attacks. For this reason Autokey includes the source and destinatino IP addresses in message digest computations and so the same addresses must be available at both the server and client. For this reason operation with network address translation schemes is not possible. This reflects the intended robust security model where government and corporate NTP servers are operated outside firewall perimeters.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;configuration&#34;&gt;Configuration&lt;/h4&gt;
&lt;p&gt;Autokey has an intimidating number of options, most of which are not necessary in typical scenarios. The simplest configuration consists of a subnet with one or more servers at the same low stratum acting as trusted hosts and with dependent clients at higher strata and sharing a single secure group and identity scheme. Each trusted host generates a host key, trusted certificate and group key. Each client generates a host key, normal certificate and installs the group key of each trusted host using secure means and renames it as the name of the trusted host.&lt;/p&gt;
&lt;p&gt;For example, trusted host Alice generates keys using&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ntp-keygen -H -T -I -p xyz&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;where H specifies a new host key, T the trusted certificate, I the IFF identity scheme and p the password used to encrypt the private key files. The group key file is &lt;tt&gt;ntpkey_IFFpar_alice.filestamp&lt;/tt&gt;, where filestamp represents the NTP time in seconds when the file was generated.&lt;/p&gt;
&lt;p&gt;Host Bob generate keys using&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ntp-keygen -H -p abc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;where &lt;tt&gt;abc&lt;/tt&gt; is different for each group host. The trusted host generates a password-protected group key using&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ntp-keygen -q xyz -p abc -e &amp;gt;temp&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;where &lt;tt&gt;xyz&lt;/tt&gt; is the trusted host password, abc is the password supplied by the client and &lt;tt&gt;temp&lt;/tt&gt; is a temporary file. This file is transmitted to Bob using secure means and renamed to the fully qualified host name for Alice preceded by the string &lt;tt&gt;ntpkey_iff_&lt;/tt&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;operation&#34;&gt;Operation&lt;/h4&gt;
&lt;p&gt;A specific combination of authentication scheme (none, symmetric key, public key) and identity scheme is called a cryptotype, although not all combinations are compatible. There may be management configurations where the clients, servers and peers may not all support the same cryptotypes. A secure NTPv4 subnet can be configured in many ways while keeping in mind the principles explained above and in this section. Note however that some cryptotype combinations may successfully interoperate with each other, but may not represent good security practice.&lt;/p&gt;
&lt;p&gt;The cryptotype of an association is determined at the time of mobilization, either at configuration time or some time later when a message of appropriate cryptotype arrives. When mobilized by a &lt;tt&gt;server&lt;/tt&gt; or &lt;tt&gt;peer&lt;/tt&gt; configuration command and no &lt;tt&gt;key&lt;/tt&gt; or &lt;tt&gt;autokey&lt;/tt&gt; subcommands are present, the association is not authenticated; if the &lt;tt&gt;key&lt;/tt&gt; subcommand is present, the association is authenticated using the symmetric key ID specified; if the &lt;tt&gt;autokey&lt;/tt&gt; subcommand is present, the association is authenticated using Autokey.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;key-management&#34;&gt;Key Management&lt;/h4&gt;
&lt;p&gt;The cryptographic values used by the Autokey protocol are incorporated as a set of files generated by the &lt;a href=&#34;/archives/4.2.4-series/keygen&#34;&gt;ntp-keygen&lt;/a&gt; utility program, including symmetric key, host key and public certificate files, as well as sign key, identity parameters and leapseconds files. Alternatively, host and sign keys and certificate files can be generated by the OpenSSL utilities and certificates can be imported from public certificate authorities. Note that symmetric keys are necessary for the &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; utility programs. The remaining files are necessary only for the Autokey protocol.&lt;/p&gt;
&lt;p&gt;Certificates imported from OpenSSL or public certificate authorities have certian limitations. The certificate should be in ASN.1 syntax, X.509 Version 3 format and encoded in PEM, which is the same format used by OpenSSL. The overall length of the certificate encoded in ASN.1 must not exceed 1024 bytes. The subject distinguished name field (&lt;tt&gt;CN&lt;/tt&gt;) is the fully qualified name of the host on which it is used; the remaining subject fields are ignored. The certificate extension fields must not contain either a subject key identifier or a issuer key identifier field; however, an extended key usage field for a trusted host must contain the value &lt;tt&gt;trustRoot;&lt;/tt&gt;. Other extension fields are ignored.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;authentication-commands&#34;&gt;Authentication Commands&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;autokey [_logsec_]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the interval between regenerations of the session key list used with the Autokey protocol. Note that the size of the key list for each association depends on this interval and the current poll interval. The default interval is 12 (4096 s or about 1.1 hours). For poll intervals above the specified interval, a session key list with a single entry will be regenerated for every message sent.&lt;/p&gt;
&lt;dt id=&#34;controlkey&#34;&gt;&lt;tt&gt;controlkey _key_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the key identifier to use with the &lt;a href=&#34;/archives/4.2.4-series/ntpq&#34;&gt;&lt;tt&gt;ntpq&lt;/tt&gt;&lt;/a&gt; utility, which uses the standard protocol defined in RFC-1305. The &lt;tt&gt;&lt;em&gt;key&lt;/em&gt;&lt;/tt&gt; argument is the key identifier for a trusted key, where the value can be in the range 1 to 65534, inclusive.&lt;/p&gt;
&lt;dt id=&#34;crypto&#34;&gt;&lt;tt&gt;crypto [cert _file_] [leap _file_] [randfile _file_] [host _file_] [sign _file_] [ident _scheme_] [iffpar _file_] [ggpar _file_] [mwpar _file_] [pw _password_]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command requires the OpenSSL library. It activates public key cryptography, selects the message digest and signature encryption scheme and loads the required private and public values described above. If one or more files are left unspecified, the default names are used as described above. Unless the complete path and name of the file are specified, the location of a file is relative to the keys directory specified in the &lt;tt&gt;keysdir&lt;/tt&gt; command or default &lt;tt&gt;/usr/local/etc&lt;/tt&gt;. Following are the subcommands:&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;cert &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the required host public certificate file. This overrides the link &lt;tt&gt;ntpkey_cert_hostname&lt;/tt&gt; in the keys directory.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;ggpar &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the client GQ parameters file. This overrides the link &lt;tt&gt;ntpkey_gq_hostname&lt;/tt&gt; in the keys directory.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;host &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;Â Â Â Â &lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the required host key file. This overrides the link &lt;tt&gt;ntpkey_key_hostname&lt;/tt&gt; in the keys directory.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;ident &lt;em&gt;scheme&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Requests the server identity &lt;tt&gt;scheme&lt;/tt&gt;, which can be &lt;tt&gt;IFF&lt;/tt&gt;, &lt;tt&gt;GQ&lt;/tt&gt; or &lt;tt&gt;MV&lt;/tt&gt;. This is used when the host will not be a server for a dependent client.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;iffpar &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the optional IFF parameters file.This overrides the link &lt;tt&gt;ntpkey_iff_hostname&lt;/tt&gt; in the keys directory.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;leap &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the client leapsecond file. This overrides the link &lt;tt&gt;ntpkey_leap&lt;/tt&gt; in the keys directory.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;mv&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Requests the MV server identity scheme.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;mvpar &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the client MV parameters file. This overrides the link &lt;tt&gt;ntpkey_mv_hostname&lt;/tt&gt; in the keys directory.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;pw &lt;em&gt;password&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the password to decrypt files containing private keys and identity parameters. This is required only if these files have been encrypted.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;randfile &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the random seed file used by the OpenSSL library. The defaults are described in the main text above.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;sign &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the optional sign key file. This overrides the link &lt;tt&gt;ntpkey_sign_hostname&lt;/tt&gt; in the keys directory. If this file is not found, the host key is also the sign key.&lt;/p&gt;
&lt;dt id=&#34;keys&#34;&gt;&lt;tt&gt;keys _keyfile_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the complete path to the MD5 key file containing the keys and key identifiers used by &lt;tt&gt;ntpd&lt;/tt&gt;, &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; when operating with symmetric key cryptography. This is the same operation as the &lt;tt&gt;-k&lt;/tt&gt; command line option.&lt;/p&gt;
&lt;dt id=&#34;keysdir&#34;&gt;&lt;tt&gt;keysdir _path_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command specifies the default directory path for cryptographic keys, parameters and certificates. The default is &lt;tt&gt;/usr/local/etc/&lt;/tt&gt;.&lt;/p&gt;
&lt;dt id=&#34;requestkey&#34;&gt;&lt;tt&gt;requestkey _key_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the key identifier to use with the &lt;a href=&#34;/archives/4.2.4-series/ntpdc&#34;&gt;&lt;tt&gt;ntpdc&lt;/tt&gt;&lt;/a&gt; program, which uses a proprietary protocol specific to this implementation of &lt;tt&gt;ntpd&lt;/tt&gt;. The &lt;tt&gt;&lt;em&gt;key&lt;/em&gt;&lt;/tt&gt; argument is a key identifier for the trusted key, where the value can be in the range 1 to 65534, inclusive.&lt;/p&gt;
&lt;dt id=&#34;revoke&#34;&gt;&lt;tt&gt;revoke [_logsec_]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the interval between re-randomization of certain cryptographic values used by the Autokey scheme, as a power of 2 in seconds. These values need to be updated frequently in order to deflect brute-force attacks on the algorithms of the scheme; however, updating some values is a relatively expensive operation. The default interval is 16 (65,536 s or about 18 hours). For poll intervals above the specified interval, the values will be updated for every message sent.&lt;/p&gt;
&lt;dt id=&#34;trustedkey&#34;&gt;&lt;tt&gt;trustedkey [_key_] [...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the key identifiers which are trusted for the purposes of authenticating peers with symmetric key cryptography, as well as keys used by the &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; programs. The authentication procedures require that both the local and remote servers share the same key and key identifier for this purpose, although different keys can be used with different servers. The &lt;tt&gt;key&lt;/tt&gt; arguments are 32-bit unsigned integers with values from 1 to 65,534.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;error-codes&#34;&gt;Error Codes&lt;/h4&gt;
&lt;p&gt;Errors can occur due to mismatched configurations, unexpected restarts, expired certificates and unfriendly people. In most cases the protocol state machine recovers automatically by retransmission, timeout and restart, where necessary. Some errors are due to mismatched keys, digest schemes or identity schemes and must be corrected by installing the correct media and/or correcting the configuration file. One of the most common errors is expired certificates, which must be regenerated and signed at least once per year using the &lt;a href=&#34;/archives/4.2.4-series/keygen&#34;&gt;&lt;tt&gt;ntp-keygen&lt;/tt&gt;&lt;/a&gt; program.&lt;/p&gt;
&lt;p&gt;The following error codes are reported via the NTP control and monitoring protocol trap mechanism.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;101 bad field format or length&lt;/dt&gt;
&lt;p&gt;The packet has invalid version, length or format.&lt;/p&gt;
&lt;dt&gt;102 bad timestamp&lt;/dt&gt;
&lt;p&gt;The packet timestamp is the same or older than the most recent received. This could be due to a replay or a server clock time step.&lt;/p&gt;
&lt;dt&gt;103 bad filestamp&lt;/dt&gt;
&lt;p&gt;The packet filestamp is the same or older than the most recent received. This could be due to a replay or a key file generation error.&lt;/p&gt;
&lt;dt&gt;104 bad or missing public key&lt;/dt&gt;
&lt;p&gt;The public key is missing, has incorrect format or is an unsupported type.&lt;/p&gt;
&lt;dt&gt;105 unsupported digest type&lt;/dt&gt;
&lt;p&gt;The server requires an unsupported digest/signature scheme.&lt;/p&gt;
&lt;dt&gt;106 unsupported identity type&lt;/dt&gt;
&lt;p&gt;The client or server has requested an identity scheme the other does not support.&lt;/p&gt;
&lt;dt&gt;107 bad signature length&lt;/dt&gt;
&lt;p&gt;The signature length does not match the current public key.&lt;/p&gt;
&lt;dt&gt;108 signature not verified&lt;/dt&gt;
&lt;p&gt;The message fails the signature check. It could be bogus or signed by a different private key.&lt;/p&gt;
&lt;dt&gt;109 certificate not verified&lt;/dt&gt;
&lt;p&gt;The certificate is invalid or signed with the wrong key.&lt;/p&gt;
&lt;dt&gt;110 host certificate expired&lt;/dt&gt;
&lt;p&gt;The old server certificate has expired.&lt;/p&gt;
&lt;dt&gt;111 bad or missing cookie&lt;/dt&gt;
&lt;p&gt;The cookie is missing, corrupted or bogus.&lt;/p&gt;
&lt;dt&gt;112 bad or missing leapseconds table&lt;/dt&gt;
&lt;p&gt;The leapseconds table is missing, corrupted or bogus.&lt;/p&gt;
&lt;dt&gt;113 bad or missing certificate&lt;/dt&gt;
&lt;p&gt;The certificate is missing, corrupted or bogus.&lt;/p&gt;
&lt;dt&gt;114 bad or missing group key&lt;/dt&gt;
&lt;p&gt;The identity key is missing, corrupt or bogus.&lt;/p&gt;
&lt;dt&gt;115 protocol error&lt;/dt&gt;
&lt;p&gt;The protocol state machine has wedged due to unexpected restart.&lt;/p&gt;
&lt;dt&gt;116 (server certificate expired)&lt;/dt&gt;
&lt;p&gt;The old server certificate has expired.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;files&#34;&gt;Files&lt;/h4&gt;
&lt;p&gt;See the &lt;a href=&#34;/archives/4.2.4-series/keygen&#34;&gt;&lt;tt&gt;ntp-keygen&lt;/tt&gt;&lt;/a&gt; page.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;leapseconds-table&#34;&gt;Leapseconds Table&lt;/h4&gt;
&lt;p&gt;The NIST provides a file documenting the epoch for all historic occasions of leap second insertion since 1972. The leapsecond table shows each epoch of insertion along with the offset of International Atomic Time (TAI) with respect to Coordinated Universal Time (UTC), as disseminated by NTP. The table can be obtained directly from NIST national time servers using &lt;tt&gt;ftp&lt;/tt&gt; as the ASCII file &lt;tt&gt;pub/leap-seconds&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;While not strictly a security function, the Autokey protocol provides means to securely retrieve the leapsecond table from a server or peer. Servers load the leapsecond table directly from the file specified in the &lt;tt&gt;crypto&lt;/tt&gt; command, with default &lt;tt&gt;ntpkey_leap&lt;/tt&gt;, while clients can obtain the table indirectly from the servers using the Autokey protocol. Once loaded, the table can be provided on request to other clients and servers.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Authentication Options</title>
      <link>/archives/4.2.6-series/authopt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.6-series/authopt/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice44.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/%7emills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Our resident cryptographer; now you see him, now you don&amp;rsquo;t.&lt;/p&gt;
&lt;p&gt;Last update: 	14-Apr-2010 20:49 UTC&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.6-series/authopt/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.6-series/authopt/#symmetric-key-cryptography&#34;&gt;Symmetric Key Cryptography&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.6-series/authopt/#public-key-cryptography&#34;&gt;Public Key Cryptography&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.6-series/authopt/#ntp-secure-groups&#34;&gt;NTP Secure Groups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.6-series/authopt/#identity-schemes-and-cryptotypes&#34;&gt;Identity Schemes and Cryptotypes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.6-series/authopt/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.6-series/authopt/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.6-series/authopt/#authentication-commands&#34;&gt;Authentication Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.6-series/authopt/#error-codes&#34;&gt;Error Codes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.6-series/authopt/#files&#34;&gt;Files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;introduction&#34;&gt;Introduction&lt;/h4&gt;
&lt;p&gt;This page describes the various cryptographic authentication provisions in NTPv4. Details about the configuration commands and options are given on the &lt;a href=&#34;/archives/4.2.6-series/confopt&#34;&gt;Configuration Options&lt;/a&gt; page. Details about the automatic server discovery schemes are described on the &lt;a href=&#34;/archives/4.2.6-series/manyopt&#34;&gt;Automatic Server Discovery Schemes&lt;/a&gt; page. Additional information is available in the papers, reports, memoranda and briefings cited on the &lt;a href=&#34;http://www.eecis.udel.edu/~mills/ntp.html&#34;&gt;NTP Project&lt;/a&gt; page. Authentication support allows the NTP client to verify that servers are in fact known and trusted and not intruders intending accidentally or intentionally to masquerade as a legitimate server.&lt;/p&gt;
&lt;p&gt;The NTPv3 specification RFC-1305 defines a scheme properly described as symmetric key cryptography. It uses the Data Encryption Standard (DES) algorithm operating in cipher-block chaining (CBC) mode. Subsequently, this scheme was replaced by the RSA Message Digest 5 (MD5) algorithm commonly called keyed-MD5. Either algorithm computes a message digest or one-way hash which can be used to verify the client has the same key and key identifier as the server. If the OpenSSL cryptographic library is installed, support is available for all algorithms included in the library. Note however, if conformance to FIPS 140-2 is required, only a limited subset of these algorithms is available.&lt;/p&gt;
&lt;p&gt;NTPv4 includes the NTPv3 scheme and optionally a new scheme based on public key cryptography and called Autokey. Public key cryptography is generally considered more secure than symmetric key cryptography, since the security is based on private and public values which are generated by each participant and where the private value is never revealed. Autokey uses X.509 public certificates, which can be produced by commercial services, utility programs in the OpenSSL software library or the &lt;a href=&#34;/archives/4.2.6-series/keygen&#34;&gt;&lt;tt&gt;ntp-keygen&lt;/tt&gt;&lt;/a&gt; utility program in the NTP software distribution.&lt;/p&gt;
&lt;p&gt;While the algorithms for MD5 symmetric key cryptography are included in the NTPv4 software distribution, modern algorithms for symmetric key and public key cryptograpny requires the OpenSSL software library to be installed before building the NTP distribution. This library is available from &lt;a href=&#34;https://www.openssl.org&#34;&gt;https://www.openssl.org&lt;/a&gt; and can be installed using the procedures outlined in the &lt;a href=&#34;/archives/4.2.6-series/build&#34;&gt;Building and Installing the Distribution&lt;/a&gt; page. Once installed, the configure and build process automatically detects the library and links the library routines required.&lt;/p&gt;
&lt;p&gt;Note that according to US law, NTP binaries including OpenSSL library components, including the OpenSSL library itself, cannot be exported outside the US without license from the US Department of Commerce. Builders outside the US are advised to obtain the OpenSSL library directly from OpenSSL, which is outside the US, and build outside the US.&lt;/p&gt;
&lt;p&gt;Authentication is configured separately for each association using the &lt;tt&gt;key&lt;/tt&gt; or &lt;tt&gt;autokey&lt;/tt&gt; option of the &lt;tt&gt;server&lt;/tt&gt; configuration command, as described in the &lt;a href=&#34;/archives/4.2.6-series/confopt&#34;&gt;Server Options&lt;/a&gt; page, and the options described on this page. The &lt;a href=&#34;/archives/4.2.6-series/keygen&#34;&gt;ntp-keygen&lt;/a&gt; page describes the files required for the various authentication schemes. Further details are in the briefings, papers and reports at the NTP project page linked from &lt;a href=&#34;http://www.ntp.org&#34;&gt;www.ntp.org&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;symmetric-key-cryptography&#34;&gt;Symmetric Key Cryptography&lt;/h4&gt;
&lt;p&gt;The original RFC-1305 specification allows any one of possibly 65,534 keys (excluding zero), each distinguished by a 32-bit key ID, to authenticate an association. The servers and clients involved must agree on the key, key ID and key type to authenticate NTP packets. If an NTP packet includes a message authentication code (MAC), consisting of a key ID and message digest, it is accepted only if the key ID matches a trusted key and the message digest is verified with this key. Note that for historic reasons the message digest algorithm is not consistent with RFC-1828. The digest is computed directly from the concatenation of the key string followed by the packet contents with the exception of the MAC itself.&lt;/p&gt;
&lt;p&gt;Keys and related information are specified in a keys file, usually called &lt;tt&gt;ntp.keys&lt;/tt&gt;, which must be distributed and stored using secure means beyond the scope of the NTP protocol itself. Besides the keys used for ordinary NTP associations, additional keys can be used as passwords for the &lt;tt&gt;&lt;a href=&#34;/archives/4.2.6-series/ntpq&#34;&gt;ntpq&lt;/a&gt;&lt;/tt&gt; and &lt;tt&gt;&lt;a href=&#34;/archives/4.2.6-series/ntpdc&#34;&gt;ntpdc&lt;/a&gt;&lt;/tt&gt; utility programs. Ordinarily, the &lt;tt&gt;ntp.keys&lt;/tt&gt; file is generated by the &lt;tt&gt;&lt;a href=&#34;/archives/4.2.6-series/keygen&#34;&gt;ntp-keygen&lt;/a&gt;&lt;/tt&gt; program, but it can be constructed and edited using an ordinary text editor. The program generates pseudo-random keys, one key for each line. Each line consists of three fields, the key identifier as a decimal number from 1 to 65534 inclusive, a key type chosen from the keywords of the &lt;tt&gt;digest&lt;/tt&gt; option of the &lt;tt&gt;crypto&lt;/tt&gt; command, and a 20-character printable ASCII string or a 40-character hex string as the key itself.&lt;/p&gt;
&lt;p&gt;When &lt;tt&gt;ntpd&lt;/tt&gt; is first started, it reads the key file specified by the &lt;tt&gt;keys&lt;/tt&gt; command and installs the keys in the key cache. However, individual keys must be activated with the &lt;tt&gt;trustedkey&lt;/tt&gt; configuration command before use. This allows, for instance, the installation of possibly several batches of keys and then activating a key remotely using &lt;tt&gt;ntpdc&lt;/tt&gt;. The &lt;tt&gt;requestkey&lt;/tt&gt; command selects the key ID used as the password for the &lt;tt&gt;ntpdc&lt;/tt&gt; utility, while the &lt;tt&gt;controlkey&lt;/tt&gt; command selects the key ID used as the password for the &lt;tt&gt;ntpq&lt;/tt&gt; utility.&lt;/p&gt;
&lt;p&gt;By default, the message digest algorithm is MD5 selected by the key type &lt;tt&gt;M&lt;/tt&gt; in the keys file. However, if the OpenSSL library is installed, any message digest algorithm supported by that library can be used. The key type is selected as the algorithm name given in the OpenSSL documentation. The key type is associated with the key and can be different for different keys. The server and client must share the same key, key ID and key type and both must be trusted. Note that if conformance to FIPS 140-2 is required, the message digest algorithm must conform to the Secure Hash Standard (SHS), which requires an algorithm from the Secure Hash Algorithm (SHA) family, and the digital signature encryption algorithm, if used, must conform to the Digital Signature Standard (DSS), which requires the Digital Signature Algorithm (DSA).&lt;/p&gt;
&lt;p&gt;In addition to the above means, &lt;tt&gt;ntpd&lt;/tt&gt; now supports Microsoft Windows MS-SNTP authentication using Active Directory services. This support was contributed by the Samba Team and is still in development. It is enabled using the &lt;tt&gt;mssntp&lt;/tt&gt; flag of the &lt;tt&gt;restrict&lt;/tt&gt; command described on the &lt;a href=&#34;/archives/4.2.6-series/authopt&#34;&gt;Access Control Options&lt;/a&gt; page. &lt;strong&gt;Note: Potential users should be aware that these services involve a TCP connection to another process that could potentially block, denying services to other users. Therefore, this flag should be used only for a dedicated server with no clients other than MS-SNTP.&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;public-key-cryptography&#34;&gt;Public Key Cryptography&lt;/h4&gt;
&lt;p&gt;NTPv4 supports the Autokey security protocol, which is based on public key cryptography. The Autokey Version 2 protocol described on the &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/proto.html&#34;&gt;Autokey Protocol&lt;/a&gt; page verifies packet integrity using MD5 message digests and verifies the source using digital signatures and any of several digest/signature schemes. Optional identity schemes described on the &lt;a href=&#34;http://www.eecis.udel.edu/~mills/ident.html&#34;&gt;Autokey Identity Schemes&lt;/a&gt; page are based on cryptographic challenge/response exchanges. These schemes provide strong security against replay with or without message modification, spoofing, masquerade and most forms of clogging attacks. These schemes are described along with an executive summary, current status, briefing slides and reading list on the &lt;a href=&#34;http://www.eecis.udel.edu/~mills/autokey.html&#34;&gt;Autonomous Authentication&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;Autokey authenticates individual packets using cookies bound to the IP source and destination addresses. The cookies must have the same addresses at both the server and client. For this reason operation with network address translation schemes is not possible. This reflects the intended robust security model where government and corporate NTP servers are operated outside firewall perimeters.&lt;/p&gt;
&lt;p&gt;There are three timeouts associated with the Autokey scheme. The key list timeout, which defaults to about 1.1 h, specifies the interval between generating new key lists. The revoke timeout, which defaults to about 36 h, specifies the interval between generating new private values. The restart timeout, with default about 5 d, specifies the interval between protocol restarts to refresh public values. In general, the behavior when these timeouts expire is not affected by the issues discussed on this page.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;ntp-secure-groups&#34;&gt;NTP Secure Groups&lt;/h4&gt;
&lt;p&gt;NTP secure groups are used to define cryptographic compartments and security hierarchies. All hosts belonging to a secure group have the same group name but different host names. The string specified in the &lt;tt&gt;host&lt;/tt&gt; option of the &lt;tt&gt;crypto&lt;/tt&gt; command is the name of the host and the name used in the host key, sign key and certificate files. The string specified in the &lt;tt&gt;ident&lt;/tt&gt; option of the &lt;tt&gt;crypto&lt;/tt&gt; command is the group name of all group hosts and the name used in the identity files. The file naming conventions are described on the &lt;a href=&#34;/archives/4.2.6-series/keygen&#34;&gt;ntp-keygen&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;Each group includes one or more trusted hosts (THs) operating at the root, or lowest stratum in the group. The group name is used in the subject and issuer fields of the TH self-signed trusted certificate for these hosts. The host name is used in the subject and issuer fields of the self-signed certificates for all other hosts.&lt;/p&gt;
&lt;p&gt;All group hosts are configured to provide an unbroken path, called a certificate trail, from each host, possibly via intermediate hosts and ending at a TH. When a host starts up, it recursively retrieves the certificates along the trail in order to verify group membership and avoid masquerade and middleman attacks.&lt;/p&gt;
&lt;p&gt;Secure groups can be configured as hierarchies where a TH of one group can be a client of one or more other groups operating at a lower stratum. A certificate trail consist of a chain of hosts starting at a client, leading through secondary servers of progressively lower stratum and ending at a TH. In one scenario, groups RED and GREEN can be cryptographically distinct, but both be clients of group BLUE operating at a lower stratum. In another scenario, group CYAN can be a client of multiple groups YELLOW and MAGENTA, both operating at a lower stratum. There are many other scenarios, but all must be configured to include only acyclic certificate trails.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;identity-schemes-and-cryptotypes&#34;&gt;Identity Schemes and Cryptotypes&lt;/h4&gt;
&lt;p&gt;All configurations include a public/private host key pair and matching certificate. Absent an identity scheme, this is a Trusted Certificate (TC) scheme. There are three identity schemes, IFF, GQ and MV described on the &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/ident.html&#34;&gt;Identity Schemes&lt;/a&gt; page. With these schemes all servers in the group have encrypted server identity keys, while clients have nonencrypted client identity parameters. The client parameters can be obtained from a trusted agent (TA), usually one of the THs of the lower stratum group. Further information on identity schemes is on the &lt;a href=&#34;http://www.eecis.udel.edu/~mills/ident.html&#34;&gt;Autokey Identity Schemes&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;A specific combination of authentication and identity schemes is called a cryptotype, which applies to clients and servers separately. A group can be configured using more than one cryptotype combination, although not all combinations are interoperable. Note however that some cryptotype combinations may successfully intemperate with each other, but may not represent good security practice. The server and client cryptotypes are defined by the the following codes.&lt;/p&gt;
&lt;dt&gt;NONE&lt;/dt&gt;
&lt;p&gt;A client or server is type NONE if authentication is not available or not configured. Packets exchanged between client and server have no MAC.&lt;/p&gt;
&lt;dt&gt;AUTH&lt;/dt&gt;
&lt;p&gt;A client or server is type AUTH if the &lt;tt&gt;key&lt;/tt&gt; option is specified with the &lt;tt&gt;server&lt;/tt&gt; configuration command and the client and server keys are compatible. Packets exchanged between clients and servers have a MAC.&lt;/p&gt;
&lt;dt&gt;PC&lt;/dt&gt;
&lt;p&gt;A client or server is type PC if the &lt;tt&gt;autokey&lt;/tt&gt; option is specified with the &lt;tt&gt;server&lt;/tt&gt; configuration command and compatible host key and private certificate files are present. Packets exchanged between clients and servers have a MAC.&lt;/p&gt;
&lt;dt&gt;TC&lt;/dt&gt;
&lt;p&gt;A client or server is type TC if the &lt;tt&gt;autokey&lt;/tt&gt; option is specified with the &lt;tt&gt;server&lt;/tt&gt; configuration command and compatible host key and public certificate files are present. Packets exchanged between clients and servers have a MAC.&lt;/p&gt;
&lt;dt&gt;IDENT&lt;/dt&gt;
&lt;p&gt;A client or server is type IDENT if the &lt;tt&gt;autokey&lt;/tt&gt; option is specified with the &lt;tt&gt;server&lt;/tt&gt; configuration command and compatible host key, public certificate and identity scheme files are present. Packets exchanged between clients and servers have a MAC.&lt;/p&gt;
&lt;/dl&gt;
&lt;p&gt;The compatible cryptotypes for clients and servers are listed in the following table.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Client/Server&lt;/th&gt;
&lt;th&gt;NONE&lt;/th&gt;
&lt;th&gt;AUTH&lt;/th&gt;
&lt;th&gt;PC&lt;/th&gt;
&lt;th&gt;TC&lt;/th&gt;
&lt;th&gt;IDENT&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;NONE&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes*&lt;/td&gt;
&lt;td&gt;yes*&lt;/td&gt;
&lt;td&gt;yes*&lt;/td&gt;
&lt;td&gt;yes*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AUTH&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PC&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TC&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IDENT&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;* These combinations are not valid if the restriction list includes the &lt;tt&gt;notrust&lt;/tt&gt; option.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;configuration&#34;&gt;Configuration&lt;/h4&gt;
&lt;p&gt;Autokey has an intimidating number of configuration options, most of which are not necessary in typical scenarios. The simplest scenario consists of a TH where the host name of the TH is also the name of the group. For the simplest identity scheme TC, the TH generates host key and trusted certificate files using the &lt;tt&gt;ntp-keygen -T&lt;/tt&gt; command, while the remaining group hosts use the same command with no options to generate the host key and public certificate files. All hosts use the &lt;tt&gt;crypto&lt;/tt&gt; configuration command with no options. Configuration with passwords is described in the &lt;a href=&#34;/archives/4.2.6-series/keygen&#34;&gt;ntp-keygen&lt;/a&gt; page. All group hosts are configured as an acyclic tree with root the TH.&lt;/p&gt;
&lt;p&gt;When an identity scheme is included, for example IFF, the TH generates host key, trusted certificate and private server identity key files using the &lt;tt&gt;ntp-keygen -T -I -i &lt;em&gt;group&lt;/em&gt;&lt;/tt&gt; command, where &lt;tt&gt;&lt;em&gt;group&lt;/em&gt;&lt;/tt&gt; is the group name. The remaining group hosts use the same command as above. All hosts use the &lt;tt&gt;crypto ident group&lt;/tt&gt; configuration command.&lt;/p&gt;
&lt;p&gt;Hosts with no dependent clients can retrieve client parameter files from an archive or web page. The &lt;tt&gt;ntp-keygen&lt;/tt&gt; can export these data using the &lt;tt&gt;-e&lt;/tt&gt; option. Hosts with dependent clients other than the TH must retrieve copies of the server key files using secure means. The &lt;tt&gt;ntp-keygen&lt;/tt&gt; can export these data using the &lt;tt&gt;-q&lt;/tt&gt; option. In either case the data are installed as a file and then renamed using the name given as the first line in the file, but without the filestamp.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;examples&#34;&gt;Examples&lt;/h4&gt;
&lt;p&gt;Consider a scenario involving three secure groups RED, GREEN and BLUE. RED and BLUE are typical of national laboratories providing certified time to the Internet at large. As shown ion the figure, RED TH mort and BLUE TH macabre run NTP symmetric mode with each other for monitoring or backup. For the purpose of illustration, assume both THs are primary servers. GREEN is typical of a large university providing certified time to the campus community. GREEN TH howland is a broadcast client of both RED and BLUE. BLUE uses the IFF scheme, while both RED and GREEN use the GQ scheme, but with different keys. YELLOW is a client of GREEN and for purposes of illustration a TH for YELLOW.&lt;/p&gt;
&lt;p&gt;The BLUE TH macabre uses configuration commands&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;crypto pw qqsv ident blue&lt;/tt&gt;&lt;br&gt;
&lt;tt&gt;peer mort autokey&lt;/tt&gt;&lt;br&gt;
&lt;tt&gt;broadcast &lt;em&gt;address&lt;/em&gt; autokey&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;where &lt;tt&gt;qqsv&lt;/tt&gt; is the password for macabre files and &lt;em&gt;address&lt;/em&gt; is the broadcast address for the local LAN. It generates BLUE files using the commands&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;ntp-keygen -p qqsv -T -G -i blue&lt;/tt&gt;&lt;br&gt;
&lt;tt&gt;ntp-keygen -p qqsv -e &amp;gt;ntpkey_gqpar_blue&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;The first line generates the host, trusted certificate and private GQ server keys file. The second generates the public GQ client parameters file, which can have any nonconflicting mnemonic name.&lt;/p&gt;
&lt;p&gt;The RED TH mort uses configuration commands&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;crypto pw xxx ident red&lt;/tt&gt;&lt;br&gt;
&lt;tt&gt;peer macabre autokey&lt;/tt&gt;&lt;br&gt;
&lt;tt&gt;broadcast &lt;em&gt;address&lt;/em&gt; autokey&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;where &lt;tt&gt;xxx&lt;/tt&gt; is the password for mort files. It generates RED files using the commands&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;ntp-keygen -p xxx -T -I -i red&lt;/tt&gt;&lt;br&gt;
&lt;tt&gt;ntp-keygen -p xxx -e &amp;gt;ntpkey_iffpar_red&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;The GREEN TH howland uses configuration commands&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;crypto pw yyy ident green&lt;/tt&gt;&lt;br&gt;
&lt;tt&gt;broadcastclient&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;where &lt;tt&gt;yyy&lt;/tt&gt; is the password for howland files. It generates GREEN files using the commands&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;ntp-keygen -p yyy -T -G -i green&lt;/tt&gt;&lt;br&gt;
&lt;tt&gt;ntp-keygen -p yyy -e &amp;gt;ntpkey_gqpar_green&lt;/tt&gt;&lt;br&gt;
&lt;tt&gt;ntp-keygen -p yyy -q zzz &amp;gt;zzz_ntpkey_gqkey_green&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;The first two lines serve the same purpose as the preceding examples. The third line generates a copy of the private GREEN server file for use on another server in the same group, say YELLOW, but encrypted with the &lt;tt&gt;zzz&lt;/tt&gt; password.&lt;/p&gt;
&lt;p&gt;A client of GREEN, for example YELLOW, uses the configuration commands&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;crypto pw abc ident green&lt;/tt&gt;&lt;br&gt;
&lt;tt&gt;server howland autokey&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;where &lt;tt&gt;abc&lt;/tt&gt; is the password for its files. It generates files using the command&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;ntp-keygen -p abc&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;The client retrieves the client file for that group from a public archive or web page using nonsecure means. In addition, each server in a group retrieves the private server keys file from the TH of that group, but it is encrypted and so must be sent using secure means. The files are installed in the keys directory with name taken from the first line in the file, but without the filestamp.&lt;/p&gt;
&lt;p&gt;Note that if servers of different groups, in this case RED and BLUE, share the same broadcast media, each server must have client files for all groups other than its own, while each client must have client files for all groups. Note also that this scenario is for illustration only and probably would not be wise for practical use, as if one of the TH reference clocks fails, the certificate trail becomes cyclic. In such cases the symmetric path between RED and BLUE, each in a different group, would not be a good idea.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;authentication-commands&#34;&gt;Authentication Commands&lt;/h4&gt;
&lt;dt id=&#34;automax&#34;&gt;&lt;tt&gt;automax [_logsec_]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the interval between regenerations of the session key list used with the Autokey protocol, as a power of 2 in seconds. Note that the size of the key list for each association depends on this interval and the current poll interval. The default interval is 12 (about 1.1 h). For poll intervals above the specified interval, a session key list with a single entry will be regenerated for every message sent.&lt;/p&gt;
&lt;dt id=&#34;controlkey&#34;&gt;&lt;tt&gt;controlkey _keyid_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the key ID to use with the &lt;a href=&#34;/archives/4.2.6-series/ntpq&#34;&gt;&lt;tt&gt;ntpq&lt;/tt&gt;&lt;/a&gt; utility, which uses the standard protocol defined in RFC-1305. The &lt;tt&gt;&lt;em&gt;keyid&lt;/em&gt;&lt;/tt&gt; argument is the key ID for a trusted key, where the value can be in the range 1 to 65534, inclusive.&lt;/p&gt;
&lt;dt id=&#34;crypto&#34;&gt;&lt;tt&gt;crypto [randfile _file_] [host _name_] [ident _name_] [pw _password_]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command requires the OpenSSL library. It activates public key cryptography and loads the required host key and public certificate. If one or more files are left unspecified, the default names are used as described below. Unless the complete path and name of the file are specified, the location of a file is relative to the keys directory specified in the &lt;tt&gt;keysdir&lt;/tt&gt; configuration command or default &lt;tt&gt;/usr/local/etc&lt;/tt&gt;. Following are the options.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;digest&lt;/tt&gt; &lt;tt&gt;MD2&lt;/tt&gt; | &lt;tt&gt;MD4&lt;/tt&gt; | &lt;tt&gt;MD5&lt;/tt&gt; | &lt;tt&gt;MDC2&lt;/tt&gt; | &lt;tt&gt;RIPEMD160&lt;/tt&gt; | &lt;tt&gt;SHA&lt;/tt&gt; | &lt;tt&gt;SHA1&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specify the message digest algorithm, with default MD5. If the OpenSSL library is installed, &lt;tt&gt;&lt;em&gt;name&lt;/em&gt;&lt;/tt&gt; can be be any message digest algorithm supported by the library not exceeding 160 bits in length. However, all Autokey participants in an Autokey subnet must use the same algorithm. Note that the Autokey message digest algorithm is separate and distinct form the symmetric key message digest algorithms. Note: If compliance with FIPS 140-2 is required, the algorithm must be ether &lt;tt&gt;SHA&lt;/tt&gt; or &lt;tt&gt;SHA1&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;host &lt;em&gt;name&lt;/em&gt;&lt;/tt&gt;Â Â Â Â &lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the string used when constructing the names for the host, sign and certificate files generated by the &lt;tt&gt;ntp-keygen&lt;/tt&gt; program with the &lt;tt&gt;-s &lt;em&gt;name&lt;/em&gt;&lt;/tt&gt; option.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;ident &lt;em&gt;name&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the string used in constructing the identity files generated by the &lt;tt&gt;ntp-keygen&lt;/tt&gt; program with the &lt;tt&gt;-i &lt;em&gt;name&lt;/em&gt;&lt;/tt&gt; option.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;pw &lt;em&gt;password&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the password to decrypt files previously encrypted by the &lt;tt&gt;ntp-keygen&lt;/tt&gt; program with the &lt;tt&gt;-p&lt;/tt&gt; option.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;randfile &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Specifies the location of the random seed file used by the OpenSSL library. The defaults are described on the &lt;tt&gt;ntp-keygen&lt;/tt&gt; page.&lt;/p&gt;
&lt;dt id=&#34;keys&#34;&gt;&lt;tt&gt;keys _keyfile_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the complete path to the MD5 key file containing the keys and key IDs used by &lt;tt&gt;ntpd&lt;/tt&gt;, &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; when operating with symmetric key cryptography. This is the same operation as the &lt;tt&gt;-k&lt;/tt&gt; command line option. Note that the directory path for Autokey media is specified by the &lt;tt&gt;keysdir&lt;/tt&gt; command.&lt;/p&gt;
&lt;dt id=&#34;keysdir&#34;&gt;&lt;tt&gt;keysdir _path_&lt;/tt&gt;K&lt;/dt&gt;
&lt;p&gt;This command specifies the default directory path for Autokey cryptographic keys, parameters and certificates. The default is &lt;tt&gt;/usr/local/etc/&lt;/tt&gt;. Note that the path for the symmetric keys file is specified by the &lt;tt&gt;keys&lt;/tt&gt; command.&lt;/p&gt;
&lt;dt id=&#34;requestkey&#34;&gt;&lt;tt&gt;requestkey _keyid_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the key ID to use with the &lt;a href=&#34;/archives/4.2.6-series/ntpdc&#34;&gt;&lt;tt&gt;ntpdc&lt;/tt&gt;&lt;/a&gt; utility program, which uses a proprietary protocol specific to this implementation of &lt;tt&gt;ntpd&lt;/tt&gt;. The &lt;tt&gt;&lt;em&gt;keyid&lt;/em&gt;&lt;/tt&gt; argument is a key ID for a trusted key, in the range 1 to 65534, inclusive.&lt;/p&gt;
&lt;dt id=&#34;revoke&#34;&gt;&lt;tt&gt;revoke [_logsec_]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the interval between re-randomization of certain cryptographic values used by the Autokey scheme, as a power of 2 in seconds. These values need to be updated frequently in order to deflect brute-force attacks on the algorithms; however, updating some values is a relatively expensive operation. The default interval is 17 (about 36 h). For poll intervals above the specified interval, the values will be updated for every message sent.&lt;/p&gt;
&lt;dt id=&#34;trustedkey&#34;&gt;&lt;tt&gt;trustedkey [_keyid_ | (_lowid_ ... _highid_)] [...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the key ID(s) which are trusted for the purposes of authenticating peers with symmetric key cryptography. Key IDs used to authenticate &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;ntpdc&lt;/tt&gt; operations must be listed here and additionally be enabled with &lt;em&gt;controlkey&lt;/em&gt; and/or &lt;em&gt;requestkey&lt;/em&gt;. The authentication procedure for time transfer require that both the local and remote NTP servers employ the same key ID and secret for this purpose, although different keys IDs may be used with different servers. Ranges of trusted key IDs may be specified: &amp;ldquo;&lt;tt&gt;trustedkey (1 &amp;hellip; 19) 1000 (100 &amp;hellip; 199)&lt;/tt&gt;&amp;rdquo; enables the lowest 120 key IDs which start with the digit 1. The spaces surrounding the ellipsis are required when specifying a range.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;error-codes&#34;&gt;Error Codes&lt;/h4&gt;
&lt;p&gt;Errors can occur due to mismatched configurations, unexpected protocol restarts, expired certificates and unfriendly people. In most cases the protocol state machine recovers automatically by retransmission, timeout and restart, where necessary. Some errors are due to mismatched keys, digest schemes or identity schemes and must be corrected by installing the correct media and/or correcting the configuration file. One of the most common errors is expired certificates, which must be regenerated and signed at least once per year using the &lt;a href=&#34;/archives/4.2.6-series/keygen&#34;&gt;&lt;tt&gt;ntp-keygen&lt;/tt&gt;&lt;/a&gt; program.&lt;/p&gt;
&lt;p&gt;The following error codes are reported via the NTP control and monitoring protocol trap mechanism and to the &lt;tt&gt;cryptostats&lt;/tt&gt; monitoring file if configured.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;101 bad field format or length&lt;/dt&gt;
&lt;p&gt;The packet has invalid version, length or format.&lt;/p&gt;
&lt;dt&gt;102 bad timestamp&lt;/dt&gt;
&lt;p&gt;The packet timestamp is the same or older than the most recent received. This could be due to a replay or a server clock time step.&lt;/p&gt;
&lt;dt&gt;103 bad filestamp&lt;/dt&gt;
&lt;p&gt;The packet filestamp is the same or older than the most recent received. This could be due to a replay or a key file generation error.&lt;/p&gt;
&lt;dt&gt;104 bad or missing public key&lt;/dt&gt;
&lt;p&gt;The public key is missing, has incorrect format or is an unsupported type.&lt;/p&gt;
&lt;dt&gt;105 unsupported digest type&lt;/dt&gt;
&lt;p&gt;The server requires an unsupported digest/signature scheme.&lt;/p&gt;
&lt;dt&gt;106 unsupported identity type&lt;/dt&gt;
&lt;p&gt;The client or server has requested an identity scheme the other does not support.&lt;/p&gt;
&lt;dt&gt;107 bad signature length&lt;/dt&gt;
&lt;p&gt;The signature length does not match the current public key.&lt;/p&gt;
&lt;dt&gt;108 signature not verified&lt;/dt&gt;
&lt;p&gt;The message fails the signature check. It could be bogus or signed by a different private key.&lt;/p&gt;
&lt;dt&gt;109 certificate not verified&lt;/dt&gt;
&lt;p&gt;The certificate is invalid or signed with the wrong key.&lt;/p&gt;
&lt;dt&gt;110 host certificate expired&lt;/dt&gt;
&lt;p&gt;The old server certificate has expired.&lt;/p&gt;
&lt;dt&gt;111 bad or missing cookie&lt;/dt&gt;
&lt;p&gt;The cookie is missing, corrupted or bogus.&lt;/p&gt;
&lt;dt&gt;112 bad or missing leapseconds table&lt;/dt&gt;
&lt;p&gt;The leapseconds table is missing, corrupted or bogus.&lt;/p&gt;
&lt;dt&gt;113 bad or missing certificate&lt;/dt&gt;
&lt;p&gt;The certificate is missing, corrupted or bogus.&lt;/p&gt;
&lt;dt&gt;114 bad or missing group key&lt;/dt&gt;
&lt;p&gt;The identity key is missing, corrupt or bogus.&lt;/p&gt;
&lt;dt&gt;115 protocol error&lt;/dt&gt;
&lt;p&gt;The protocol state machine has wedged due to unexpected restart.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;files&#34;&gt;Files&lt;/h4&gt;
&lt;p&gt;See the &lt;a href=&#34;/archives/4.2.6-series/keygen&#34;&gt;&lt;tt&gt;ntp-keygen&lt;/tt&gt;&lt;/a&gt; page. Note that provisions to load leap second values from the NIST files have been removed. These provisions are now available whether or not the OpenSSL library is available. However, the functions that can download these values from servers remains available.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Authentication Support</title>
      <link>/archives/4.2.8-series/authentic/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.8-series/authentic/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice44.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/%7emills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Our resident cryptographer; now you see him, now you don&amp;rsquo;t.&lt;/p&gt;
&lt;p&gt;Last update: 24-Jul-2018 09:12 UTC&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.8-series/authentic/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.8-series/authentic/#symmetric-key-cryptography&#34;&gt;Symmetric Key Cryptography&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.8-series/authentic/#microsoft-windows-authentication&#34;&gt;Microsoft Windows Authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.8-series/authentic/#public-key-cryptography&#34;&gt;Public Key Cryptography&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;introduction&#34;&gt;Introduction&lt;/h4&gt;
&lt;p&gt;This page describes the various cryptographic authentication provisions in NTPv4. Authentication support allows the NTP client to verify that servers are in fact known and trusted and not intruders intending accidentally or intentionally to masquerade as a legitimate server. A detailed discussion of the NTP multi-layer security model and vulnerability analysis is in the white paper &lt;a href=&#34;http://www.eecis.udel.edu/~mills/security.html&#34;&gt;NTP Security Analysis&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The NTPv3 specification (RFC-1305) defined an authentication scheme properly described as &lt;em&gt;symmetric key cryptography&lt;/em&gt;. It used the Data Encryption Standard (DES) algorithm operating in cipher-block chaining (CBC) mode. Subsequently, this algorithm was replaced by the RSA Message Digest 5 (MD5) algorithm commonly called keyed-MD5. Either algorithm computes a message digest or one-way hash which can be used to verify the client has the same message digest as the server. The MD5 message digest algorithm is included in the distribution, so without further cryptographic support, the distribution can be freely exported.&lt;/p&gt;
&lt;p&gt;If the OpenSSL cryptographic library is installed prior to building the distribution, all message digest algorithms included in the library may be used, including SHA and SHA1. However, if conformance to FIPS 140-2 is required, only a limited subset of these algorithms can be used. This library is available from &lt;a href=&#34;https://www.openssl.org&#34;&gt;here&lt;/a&gt; and can be installed using the procedures outlined in the &lt;a href=&#34;/archives/4.2.8-series/build&#34;&gt;Building and Installing the Distribution&lt;/a&gt; page. Once installed, the configure and build process automatically detects the library and links the library routines required.&lt;/p&gt;
&lt;p&gt;In addition to the symmetric key algorithms, this distribution includes support for the Autokey public key algorithms and protocol specified in RFC-5906 &amp;ldquo;Network Time Protocol Version 4: Autokey Specification&amp;rdquo;. This support is available only if the OpenSSL library has been installed and the &lt;tt&gt;&amp;ndash;enable-autokey&lt;/tt&gt; option is used when the distribution is built.&lt;/p&gt;
&lt;p&gt;Public key cryptography is generally considered more secure than symmetric key cryptography, since the security is based on private and public values which are generated by each participant and where the private value is never revealed. Autokey uses X.509 public certificates, which can be produced by commercial services, the OpenSSL application program, or the &lt;a href=&#34;/archives/4.2.8-series/keygen&#34;&gt;&lt;tt&gt;ntp-keygen&lt;/tt&gt;&lt;/a&gt; utility program in the NTP software distribution.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    According to US law, NTP binaries including OpenSSL library components, including the OpenSSL library itself, cannot be exported outside the US without license from the US Department of Commerce. Builders outside the US are advised to obtain the OpenSSL library directly from OpenSSL, which is outside the US, and build outside the US.

&lt;/div&gt;

&lt;p&gt;Authentication is configured separately for each association using the &lt;tt&gt;key&lt;/tt&gt; or &lt;tt&gt;autokey&lt;/tt&gt; option of the &lt;tt&gt;server&lt;/tt&gt; configuration command, as described in the &lt;a href=&#34;/archives/4.2.8-series/confopt/#server-command-options&#34;&gt;Server Options&lt;/a&gt; page. The &lt;a href=&#34;/archives/4.2.8-series/keygen&#34;&gt;ntp-keygen&lt;/a&gt; page describes the files required for the various authentication schemes. Further details are in the briefings, papers and reports at the NTP project page linked from &lt;a href=&#34;http://www.ntp.org&#34;&gt;www.ntp.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By default, the client sends non-authenticated packets and the server responds with non-authenticated packets. If the client sends authenticated packets, the server responds with authenticated packets if correct, or a crypto-NAK packet if not. In the case of unsolicited packets which might consume significant resources, such as broadcast or symmetric mode packets, authentication is required, unless overridden by a &lt;tt&gt;disable auth&lt;/tt&gt; command. In the current climate of targeted broadcast or &amp;ldquo;letterbomb&amp;rdquo; attacks, defeating this requirement would be decidedly dangerous. In any case, the &lt;tt&gt;notrust&lt;/tt&gt; flag, described on the &lt;a href=&#34;/archives/4.2.8-series/accopt&#34;&gt;Access Control Options&lt;/a&gt; page, can be used to disable access to all but correctly authenticated clients.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;symmetric-key-cryptography&#34;&gt;Symmetric Key Cryptography&lt;/h4&gt;
&lt;p&gt;The original NTPv3 specification (RFC-1305), as well as the current NTPv4 specification (RFC-5905), allows any one of possibly 65,535 message digest keys (excluding zero), each distinguished by a 32-bit key ID, to authenticate an association. The servers and clients involved must agree on the key ID, key type and key to authenticate NTP packets.&lt;/p&gt;
&lt;p&gt;The message digest is a cryptographic hash computed by an algorithm such as MD5, SHA, or AES-128 CMAC. When authentication is specified, a message authentication code (MAC) is appended to the NTP packet header. The MAC consists of a 32-bit key identifier (key ID) followed by a 128- or 160-bit message digest. The algorithm computes the digest as the hash of a 128- or 160- bit message digest key concatenated with the NTP packet header fields with the exception of the MAC. On transmit, the message digest is computed and inserted in the MAC. On receive, the message digest is computed and compared with the MAC. The packet is accepted only if the two MACs are identical. If a discrepancy is found by the client, the client ignores the packet, but raises an alarm. If this happens at the server, the server returns a special message called a &lt;em&gt;crypto-NAK&lt;/em&gt;. Since the crypto-NAK is protected by the loopback test, an intruder cannot disrupt the protocol by sending a bogus crypto-NAK.&lt;/p&gt;
&lt;p&gt;Keys and related information are specified in a keys file, which must be distributed and stored using secure means beyond the scope of the NTP protocol itself. Besides the keys used for ordinary NTP associations, additional keys can be used as passwords for the &lt;tt&gt;&lt;a href=&#34;/archives/4.2.8-series/ntpq&#34;&gt;ntpq&lt;/a&gt;&lt;/tt&gt; and &lt;tt&gt;&lt;a href=&#34;/archives/4.2.8-series/ntpdc&#34;&gt;ntpdc&lt;/a&gt;&lt;/tt&gt; utility programs. Ordinarily, the &lt;tt&gt;ntp.keys&lt;/tt&gt; file is generated by the &lt;tt&gt;&lt;a href=&#34;/archives/4.2.8-series/keygen&#34;&gt;ntp-keygen&lt;/a&gt;&lt;/tt&gt; program, but it can be constructed and edited using an ordinary text editor.&lt;/p&gt;
&lt;p&gt;Each line of the keys file consists of three or four fields: a key ID in the range 1 to 65,535, inclusive, a key type, a message digest key consisting of a printable ASCII string less than 40 characters or a 40-character hex digit string, and an optional comma-separated list of IPs that are allowed to serve time. If the OpenSSL library is installed, the key type can be any message digest algorithm supported by the library. If the OpenSSL library is not installed, the only permitted key type is MD5.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Figure 1: Typical Symmetric Key File&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/archives/pic/md5.png&#34; alt=&#34;gif&#34;&gt;&lt;/p&gt;
&lt;p&gt;Figure 1 shows a typical symmetric keys file used by the reference implementation when the OpenSSL library is installed. Each line of the file contains three or four fields. The first field is an integer between 1 and 65535, inclusive, representing the key identifier. The second field is the digest algorithm, which in the absence of the OpenSSL library must be &lt;tt&gt;MD5&lt;/tt&gt;, which designates the MD5 message digest algorithm. The third field is the key. The optional fourth field is one or more comma-separated IPs. An IP may end with an optional &lt;tt&gt;/subnetbits&lt;/tt&gt; suffix, which limits the acceptance of the key identifier to packets claiming to be from the described IP space. In this example, for the key IDs in the range 1-10 the key is interpreted as a printable ASCII string. For the key IDs in the range 11-20, the key is a 40-character hex digit string. In either case, the key is truncated or zero-filled internally to either 128 or 160 bits, depending on the key type. The line can be edited later or new lines can be added to change any field. The key can be changed to a password, such as &lt;tt&gt;2late4Me&lt;/tt&gt; for key ID 10. Note that two or more keys files can be combined in any order as long as the key IDs are distinct.&lt;/p&gt;
&lt;p&gt;When &lt;tt&gt;ntpd&lt;/tt&gt; is started, it reads the keys file specified by the &lt;tt&gt;keys&lt;/tt&gt; command and installs the keys in the key cache. However, individual keys must be activated with the &lt;tt&gt;trustedkey&lt;/tt&gt; configuration command before use. This allows, for instance, the installation of possibly several batches of keys and then activating a key remotely using &lt;tt&gt;ntpq&lt;/tt&gt; or &lt;tt&gt;ntpdc&lt;/tt&gt;. The &lt;tt&gt;requestkey&lt;/tt&gt; command selects the key ID used as the password for the &lt;tt&gt;ntpdc&lt;/tt&gt; utility, while the &lt;tt&gt;controlkey&lt;/tt&gt; command selects the key ID used as the password for the &lt;tt&gt;ntpq&lt;/tt&gt; utility.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;microsoft-windows-authentication&#34;&gt;Microsoft Windows Authentication&lt;/h4&gt;
&lt;p&gt;In addition to the above means, &lt;tt&gt;ntpd&lt;/tt&gt; now supports Microsoft Windows MS-SNTP authentication using Active Directory services. This support was contributed by the Samba Team and is still in development. It is enabled using the &lt;tt&gt;mssntp&lt;/tt&gt; flag of the &lt;tt&gt;restrict&lt;/tt&gt; command described on the &lt;a href=&#34;/archives/4.2.8-series/accopt/#commands-and-options&#34;&gt;Access Control Options&lt;/a&gt; page.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    Potential users should be aware that these services involve a TCP connection to another process that could potentially block, denying services to other users. Therefore, this flag should be used only for a dedicated server with no clients other than MS-SNTP.

&lt;/div&gt;

&lt;hr&gt;
&lt;h4 id=&#34;public-key-cryptography&#34;&gt;Public Key Cryptography&lt;/h4&gt;
&lt;p&gt;See the &lt;a href=&#34;/archives/4.2.8-series/autokey&#34;&gt;Autokey Public-Key Authentication&lt;/a&gt; page.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Autokey Public-Key Authentication</title>
      <link>/archives/4.2.8-series/autokey/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.8-series/autokey/</guid>
      <description>
        
        
        &lt;p&gt;Last update: 3-Oct-2011 21:51 UTC&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.8-series/autokey/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.8-series/autokey#autokey-subnets&#34;&gt;Autokey Subnets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.8-series/autokey/#subnet-group-names&#34;&gt;Subnet Group Names&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.8-series/autokey/#secure-groups&#34;&gt;Secure Groups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.8-series/autokey/#configuration---authentication-schemes&#34;&gt;Configuration - Authentication Schemes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.8-series/autokey/#configuration---identity-schemes&#34;&gt;Configuration - Identity Schemes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.8-series/autokey/#identity-schemes-and-cryptotypes&#34;&gt;Identity Schemes and Cryptotypes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.8-series/autokey/#files&#34;&gt;Files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;introduction&#34;&gt;Introduction&lt;/h4&gt;
&lt;p&gt;This distribution includes support for the Autokey public key algorithms and protocol specified in RFC-5906 &amp;ldquo;Network Time Protocol Version 4: Autokey Specification&amp;rdquo;. This support is available only if the OpenSSL library has been installed and the &lt;tt&gt;&amp;ndash;enable-autokey&lt;/tt&gt; option is specified when the distribution is built.&lt;/p&gt;
&lt;p&gt;Public key cryptography is generally considered more secure than symmetric key cryptography. Symmetric key cryptography is based on a shared secret key which must be distributed by secure means to all participants. Public key cryptography is based on a private secret key known only to the originator and a public key known to all participants. A recipient can verify the originator has the correct private key using the public key and any of several digital signature algorithms.&lt;/p&gt;
&lt;p&gt;The Autokey Version 2 protocol described on the &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/proto.html&#34;&gt;Autokey Protocol&lt;/a&gt; page verifies packet integrity using message digest algorithms, such as MD5 or SHA, and verifies the source using digital signature schemes, such as RSA or DSA. As used in Autokey, message digests are exceptionally difficult to cryptanalyze, as the keys are used only once.&lt;/p&gt;
&lt;p&gt;Optional identity schemes described on the &lt;a href=&#34;http://www.eecis.udel.edu/~mills/ident.html&#34;&gt;Autokey Identity Schemes&lt;/a&gt; page are based on cryptographic challenge/response exchanges. Optional identity schemes provide strong security against masquerade and most forms of clogging attacks. These schemes are exceptionally difficult to cryptanalyze, as the challenge/response exchange data are used only once. They are described along with an executive summary, current status, briefing slides and reading list on the &lt;a href=&#34;http://www.eecis.udel.edu/~mills/autokey.html&#34;&gt;Autonomous Authentication&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;Autokey authenticates individual packets using cookies bound to the IP source and destination addresses. The cookies must have the same IP addresses at both the server and client. For this reason operation with network address translation schemes is not possible. This reflects the intended robust security model where government and corporate NTP servers and clients are operated outside firewall perimeters.&lt;/p&gt;
&lt;p&gt;Autokey is designed to authenticate servers to clients, not the other way around as in SSH. An Autokey server can support an authentication scheme such as the Trusted Certificate (TC) scheme described in RFC 5906, while a client is free to choose between the various options. It is important to understand that these provisions are optional and that selection of which option is at the discretion of the client. If the client does not require authentication, it is free to ignore it, even if some other client of the same server elects to participate in either symmetric key or public key cryptography.&lt;/p&gt;
&lt;p&gt;Autokey uses industry standard X.509 public certificates, which can be produced by commercial services, utility programs in the OpenSSL software library, and the &lt;a href=&#34;/archives/4.2.8-series/keygen&#34;&gt;&lt;tt&gt;ntp-keygen&lt;/tt&gt;&lt;/a&gt; utility program in the NTP software distribution. A certificate includes the subject name of the client, the issuer name of the server, the public key of the client and the time period over which the the public and private keys are valid. All Autokey hosts have a self-signed certificate with the Autokey name as both the subject and issuer. During the protocol, additional certificates are produced with the Autokey host name as subject and the host that signs the certificate as issuer.&lt;/p&gt;
&lt;p&gt;There are two timeouts associated with the Autokey scheme. The &lt;em&gt;key list timeout&lt;/em&gt; is set by the &lt;tt&gt;automax&lt;/tt&gt; command, which specifies the interval between generating new key lists by the client or server. The default timeout of about 1.1 hr is appropriate for the majority of configurations and ordinarily should not be changed. The &lt;em&gt;revoke timeout&lt;/em&gt; is set by the &lt;tt&gt;revoke&lt;/tt&gt; command, which specifies the interval between generating new server private values. It is intended to reduce the vulnerability to cryptanalysis; however, new values require the server to encrypt each client cookie separately. The default timeout of about 36 hr is appropriate for most servers, but might be too short for national time servers.&lt;/p&gt;
&lt;h4 id=&#34;autokey-subnets&#34;&gt;Autokey Subnets&lt;/h4&gt;
&lt;p&gt;An Autokey subnet consists of a collection of hosts configured as an acyclic, directed tree with roots one or more trusted hosts (THs) operating at the lowest stratum of the subnet. Note that the requirement that the NTP subnet be acyclic means that, if two hosts are configured with each other in symmetric modes, each must be a TH. The THs are synchronized directly or indirectly to national time services via trusted means, such as radio, satellite or telephone modem, or one or more trusted agents (TAs) of a parent subnet. NTP subnets can be nested, with the THs of a child subnet configured for one or more TAs of a parent subnet. The TAs can serve one or more child subnets, each with its own security policy and set of THs.&lt;/p&gt;
&lt;p&gt;A certificate trail is a sequence of certificates, each signed by a host one step closer to the THs and terminating at the self-signed certificate of a TH. The requirement that the subnet be acyclic means certificate trails can never loop. NTP servers operate as certificate authorities (CAs) to sign certificates provided by their clients. The CAs include the TAs of the parent subnet and those subnet servers with dependent clients.&lt;/p&gt;
&lt;p&gt;In order for the signature to succeed, the client certificate valid period must begin within the valid period of the server certificate. If the server period begins later than the client period, the client certificate has expired; if the client period begins later than the server period, the server certificate has expired.&lt;/p&gt;
&lt;p&gt;The Autokey protocol runs for each association separately, During the protocol, the client recursively obtains the certificates on the trail to a TH, saving each in a cache ordered from most recent to oldest. If an expired certificate is found, it is invalidated and marked for later replacement. As the client certificate itself is not involved in the certificate trail, it can only be declared valid or expired when the server signs it.&lt;/p&gt;
&lt;p&gt;The certificates derived from each association are combined in the cache with duplicates suppressed. If it happens that two different associations contribute certificates to the cache, a certificate on the trail from one association could expire before any on another trail. In this case the remaining trails will survive until the expired certificate is replaced. Once saved in the cache, a certificate remains valid until it expires or is replaced by a new one.&lt;/p&gt;
&lt;p&gt;It is important to note that the certificate trail is validated only at startup when an association is mobilized. Once validated in this way, the server remains valid until it is demobilized, even if certificates on the trail to the THs expire. While the certificate trail authenticates each host on the trail to the THs, it does not validate the time values themselves. Ultimately, this is determined by the NTP on-wire protocol.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/archives/pic/flt8.gif&#34; alt=&#34;gif&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Figure 1: Example Configuration&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Figure 1 shows an example configuration with three NTP subnets, Alice, Helen and Carol. Alice and Helen are parent groups for Carol with TA C belonging to Alice and TA S belonging to Helen. Hosts A and B are THs of Alice, host R is the TH of Helen and host X is the TH of Carol. Assume that all associations are client/server, child subnet TH X has two mobilized associations, one to Alice TA host C and the other to Carol TA host S. While not shown in the figure, Alice hosts A and B could configure symmetric mode associations between them for redundancy and backup.&lt;/p&gt;
&lt;p&gt;Note that host D certificate trail is Dâ†’Câ†’A or Dâ†’Câ†’B, depending on the particular order the trails are built. Host Y certificate trail is only Yâ†’X, since X is a TH. Host X has two certificate trails Xâ†’Câ†’A or Xâ†’Câ†’B, and Xâ†’Sâ†’R.&lt;/p&gt;
&lt;h4 id=&#34;subnet-group-names&#34;&gt;Subnet Group Names&lt;/h4&gt;
&lt;p&gt;In some configurations where more than one subnet shares an Ethernet or when multiple subnets exist in a manycast or pool configuration, it is useful to isolate one subnet from another. In Autokey this can be done using group names. An Autokey host name is specified by the &lt;tt&gt;-s&lt;/tt&gt;&lt;tt&gt; &lt;em&gt;host&lt;/em&gt;@&lt;em&gt;group&lt;/em&gt;&lt;/tt&gt; option of the &lt;tt&gt;ntp-keygen&lt;/tt&gt; program, where &lt;em&gt;&lt;tt&gt;host&lt;/tt&gt;&lt;/em&gt; is the host name and &lt;em&gt;&lt;tt&gt;group&lt;/tt&gt;&lt;/em&gt; is the group name. If &lt;em&gt;&lt;tt&gt;host&lt;/tt&gt;&lt;/em&gt; is omitted, the name defaults to the string returned by the Unix &lt;tt&gt;gethostname()&lt;/tt&gt; routine, ordinarily the DNS name of the host. Thus, for host &lt;tt&gt;beauregard.udel.edu&lt;/tt&gt; the option &lt;tt&gt;-s @red&lt;/tt&gt; specifies the Autokey host name &lt;tt&gt;beauegard.udel.edu@red&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;A subnet host with a given group name will discard ASSOC packets from all subnets with a different group name. This effectively disables the Autokey protocol without additional packet overhead. For instance, one or more manycast or pool servers will not respond to ASSOC packets from subnets with difference group names. Groups sharing an Ethernet will be filtered in the same way.&lt;/p&gt;
&lt;p&gt;However, as shown in Figure 1, there are configurations where a TH of one group needs to listen to a TA of a different group. This is accomplished using the &lt;tt&gt;ident &lt;em&gt;group&lt;/em&gt;&lt;/tt&gt; option of the &lt;tt&gt;crypto&lt;/tt&gt; command and/or the &lt;tt&gt;ident &lt;em&gt;group&lt;/em&gt;&lt;/tt&gt; option of the &lt;tt&gt;server&lt;/tt&gt; command. The former case applies to all hosts sharing a common broadcast, manycast or symmetric passive modes, while the latter case applies to each individual client/server or symmetric active mode association. In either case the host listens to the specified group name in addition to the group name specified in the &lt;tt&gt;-s&lt;/tt&gt; option of the &lt;tt&gt;ntp-keygen&lt;/tt&gt; program.&lt;/p&gt;
&lt;h4 id=&#34;secure-groups&#34;&gt;Secure Groups&lt;/h4&gt;
&lt;p&gt;NTP security groups are an extension of the NTP subnets described in the previous section. They include in addition to certificate trails one or another identity schemes described on the &lt;a href=&#34;http://www.eecis.udel.edu/~mills/ident.html&#34;&gt;Autokey Identity Schemes&lt;/a&gt; page. NTP secure groups are used to define cryptographic compartments and security hierarchies. The identity scheme insures that the server is authentic and not victim of masquerade by an intruder acting as a middleman.&lt;/p&gt;
&lt;p&gt;An NTP secure group is an NTP subnet configured as an acyclic tree rooted on the THs. The THs are at the lowest stratum of the secure group. They run an identity exchange with the TAs of parent subnets All group hosts construct an unbroken certificate trail from each host, possibly via intermediate hosts, and ending at a TH of that group. The TH verifies authenticity with the TA of the parent subnet using an identity exchange.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/archives/pic/flt9.gif&#34; alt=&#34;gif&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Figure 2: Identify Scheme&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The identity exchange is run between a TA acting as a server and a TH acting as a client. As shown in Figure 2, the identity exchange involves a challenge-response protocol where a client generates a nonce and sends it to the server. The server performs a mathematical operation involving a second nonce and the secret group key, and sends the result along with a hash to the client. The client performs a another mathematical operation and verifies the result with the hash.&lt;/p&gt;
&lt;p&gt;Since each exchange involves two nonces, even after repeated observations of many exchanges, an intruder cannot learn the secret group key. It is this quality that allows the secret group key to persist long after the longest period of certificate validity. In the Schnorr (Identify Friend or Foe - IFF) scheme, the secret group key is not divulged to the clients, so they cannot conspire to prove identity to other hosts.&lt;/p&gt;
&lt;p&gt;As described on the &lt;a href=&#34;http://www.eecis.udel.edu/~mills/ident.html&#34;&gt;Autokey Identity Schemes&lt;/a&gt; page, there are five identity schemes, three of which - IFF, GQ and MV - require identity files specific to each scheme. There are two types of files for each scheme, an encrypted server keys file and a nonencrypted client keys file, also called the parameters file, which usually contains a subset of the keys file.&lt;/p&gt;
&lt;p&gt;Figure 2 shows how keys and parameters are distributed to servers and clients. A TA constructs the encrypted keys file and the nonencrypted parameters file. Hosts with no dependent clients can retrieve client parameter files from an archive or web page. The &lt;tt&gt;ntp-keygen&lt;/tt&gt; program can export parameter files using the &lt;tt&gt;-e&lt;/tt&gt; option. By convention, the file name is the name of the secure group and must match the &lt;tt&gt;ident&lt;/tt&gt; option of the &lt;tt&gt;crypto&lt;/tt&gt; command or the &lt;tt&gt;ident&lt;/tt&gt; option of the &lt;tt&gt;server&lt;/tt&gt; command.&lt;/p&gt;
&lt;p&gt;When more than one TH Is involved in the secure group, it is convenient for the TAs and THs to use the same encrypted key files. To do this, one of the parent TAs includes the &lt;tt&gt;-i &lt;em&gt;group&lt;/em&gt;&lt;/tt&gt; option on the &lt;tt&gt;ntp-keygen&lt;/tt&gt; command line, where &lt;em&gt;&lt;tt&gt;group&lt;/tt&gt;&lt;/em&gt; is the name of the child secure group. The &lt;tt&gt;ntp-keygen&lt;/tt&gt; program can export server keys files using the &lt;tt&gt;-q&lt;/tt&gt; option and a chosen remote password. The files are installed on the TAs and then renamed using the name given as the first line in the file, but without the filestamp. The secure group name must match the &lt;tt&gt;ident&lt;/tt&gt; option for all TAs.&lt;/p&gt;
&lt;dl&gt;
&lt;dd&gt;&lt;span class=&#34;style1&#34;&gt;In the latest Autokey version, the host name and group name are independent of each other and the &lt;tt&gt;host&lt;/tt&gt; option of the &lt;tt&gt;crypto&lt;/tt&gt; command is deprecated. When compatibility with older versions is required, specify the same name for both the &lt;tt&gt;-s&lt;/tt&gt; and &lt;tt&gt;-i&lt;/tt&gt; options.&lt;/span&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;In special circumstances the Autokey message digest algorithm can be changed using the &lt;tt&gt;digest&lt;/tt&gt; option of the &lt;tt&gt;crypto&lt;/tt&gt; command. The digest algorithm is separate and distinct from the symmetric key message digest algorithm. If compliance with FIPS 140-2 is required, the algorithm must be ether &lt;tt&gt;SHA&lt;/tt&gt; or &lt;tt&gt;SHA1&lt;/tt&gt;. The Autokey message digest algorithm must be the same for all participants in the NTP subnet.&lt;/p&gt;
&lt;p&gt;Returning to the example of Figure 1, Alice, Helen and Carol run run the Trusted Certificate (TC) scheme, internally, as the environment is secure and without threat from external attack, in particular a middleman masquerade. However, TH X of Carol is vulnerable to masquerade on the links between X and C and between X and S. Therefore, both parent subnet TAs C and S run an identity exchange with child subnet TH X. Both have the same encrypted keys file and X the common parameters file.&lt;/p&gt;
&lt;h4 id=&#34;configuration---authentication-schemes&#34;&gt;Configuration - Authentication Schemes&lt;/h4&gt;
&lt;p&gt;Autokey has an intimidating number of options, most of which are not necessary in typical scenarios. However, the Trusted Certificate (TC) scheme is recommended for national NTP time services, such as those operated by NIST and USNO. Configuration for TC is very simple.&lt;/p&gt;
&lt;p&gt;Referring to Figure 1, for each TH, A, B, R and X, as root:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# cd /usr/local/etc&lt;/code&gt;&lt;br&gt;
&lt;code&gt;# ntp-keygen -T&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and for the other hosts the same commands without the &lt;tt&gt;-T&lt;/tt&gt; option. This generates an RSA private/public host key file and a self-signed certificate file for the RSA digital signature algorithm with the MD5 message digest algorithm. For the THs a trusted certificate is generated; for the others a nontreusted certificate is generated. Include in the &lt;tt&gt;ntp.conf&lt;/tt&gt; configuration file for all hosts other than the primary servers, A, B and R, something like&lt;/p&gt;
&lt;p&gt;&lt;code&gt;# server _host_ autokey&lt;/code&gt;&lt;br&gt;
&lt;code&gt;# crypto&lt;/code&gt;&lt;br&gt;
&lt;code&gt;# driftfile /etc/ntp.drift&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;where &lt;em&gt;&lt;tt&gt;host&lt;/tt&gt;&lt;/em&gt; is the selected server name as shown in the figure. Servers A, B and R are configured for local reference clocks or trusted remoter servers as required.&lt;/p&gt;
&lt;p&gt;In the above configuration examples, the default host name is the string returned by the Unix &lt;tt&gt;gethostname()&lt;/tt&gt; routine, ordinarily the DNS name of the host. This name is used as the subject and issuer names on the certificate, as well as the default password for the encrypted keys file. The host name can be changed using the &lt;tt&gt;-s&lt;/tt&gt; option of the &lt;tt&gt;ntp-keygen&lt;/tt&gt; program. The default password can be changed using the &lt;tt&gt;-p&lt;/tt&gt; option of the &lt;tt&gt;ntp-keygen&lt;/tt&gt; program and the &lt;tt&gt;pw&lt;/tt&gt; option of the &lt;tt&gt;crypto&lt;/tt&gt; configuration command.&lt;/p&gt;
&lt;p&gt;Group names can be added to this configuration by including the &lt;tt&gt;-s &lt;em&gt;host&lt;/em&gt;@&lt;em&gt;group&lt;/em&gt;&lt;/tt&gt; option with the &lt;tt&gt;ntp-keygen&lt;/tt&gt; program. For the purpose of illustration, the &lt;tt&gt;&lt;em&gt;host&lt;/em&gt;&lt;/tt&gt; string is empty, signifying the default host name. For example, @&lt;tt&gt;yellow&lt;/tt&gt; can be used for the Alice group, @&lt;tt&gt;orange&lt;/tt&gt; for the Helen group and @&lt;tt&gt;blue&lt;/tt&gt; for the Carol group. In addition, for TH X the &lt;tt&gt;ident yellow&lt;/tt&gt; option should be added to the &lt;tt&gt;server&lt;/tt&gt; command for the Alice group and the &lt;tt&gt;ident orange&lt;/tt&gt; option should be added to the &lt;tt&gt;server&lt;/tt&gt; command for the Helen group.&lt;/p&gt;
&lt;h4 id=&#34;configuration---identity-schemes&#34;&gt;Configuration - Identity Schemes&lt;/h4&gt;
&lt;p&gt;The example in this section uses the IFF identity scheme, but others, including GQ and MV, can be used as well. It&amp;rsquo;s best to start with a functioning TC configuration and add commands as necessary. We start with the subnets of Figure 1 configured as in the previous section. Recall that the parent subnet TA for Alice is C and for Helen is S. Each of the TAs generates an encrypted server keys file and nonencrypted client parameters file for the IFF identity scheme using the &lt;tt&gt;-I&lt;/tt&gt; option of the &lt;tt&gt;ntp-keygen&lt;/tt&gt; program. Note the TAs are not necessarily trusted hosts, so may not need the &lt;tt&gt;-T&lt;/tt&gt; option.&lt;/p&gt;
&lt;p&gt;The nonencrypted client parameters can be exported using the command&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ntp-keygen -e &amp;gt; file&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;where the &lt;tt&gt;-e&lt;/tt&gt; option redirects the client parameters to &lt;em&gt;&lt;tt&gt;file&lt;/tt&gt;&lt;/em&gt; via the standard output stream for a mail application or stored locally for later distribution to one or more THs. In a similar fashion the encrypted keys file can be exported using the command&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ntp-keygen -q passw2 &amp;gt; file&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;where &lt;em&gt;&lt;tt&gt;passwd2&lt;/tt&gt;&lt;/em&gt; is the read password for another TA. We won&amp;rsquo;t need this file here.&lt;/p&gt;
&lt;p&gt;While the file names used for the exported files are arbitrary, it is common practice to use the name given as the first line in the file with the filestamp suppressed. Thus, the nonencryted parameters file from each TA is copied to X with this name.&lt;/p&gt;
&lt;p&gt;To complete the configuration, the TH includes the client parameters file name in the &lt;tt&gt;ident&lt;/tt&gt; option of the the &lt;tt&gt;server&lt;/tt&gt; command for the TA association&lt;/p&gt;
&lt;p&gt;&lt;code&gt;server 1.2.3.4 ident group&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;where &lt;em&gt;&lt;tt&gt;group&lt;/tt&gt;&lt;/em&gt; is the file name given above.&lt;/p&gt;
&lt;h4 id=&#34;identity-schemes-and-cryptotypes&#34;&gt;Identity Schemes and Cryptotypes&lt;/h4&gt;
&lt;p&gt;A specific combination of authentication and identity schemes is called a &lt;em&gt;cryptotype&lt;/em&gt;, which applies to clients and servers separately. A group can be configured using more than one cryptotype combination, although not all combinations are interoperable. Note however that some cryptotype combinations may successfully intemperate with each other, but may not represent good security practice. The server and client cryptotypes are defined by the the following codes.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;NONE&lt;/dt&gt;
&lt;dd&gt;A client or server is type NONE if authentication is not available or not configured. Packets exchanged between client and server have no MAC.&lt;/dd&gt;
&lt;dt&gt;AUTH&lt;/dt&gt;
&lt;dd&gt;A client or server is type AUTH if the &lt;tt&gt;key&lt;/tt&gt; option is specified with the &lt;tt&gt;server&lt;/tt&gt; configuration command and the client and server keys are compatible. Packets exchanged between clients and servers have a MAC.&lt;/dd&gt;
&lt;dt&gt;PC&lt;/dt&gt;
&lt;dd&gt;A client or server is type PC if the &lt;tt&gt;autokey&lt;/tt&gt; option is specified with the &lt;tt&gt;server&lt;/tt&gt; configuration command and compatible host key and private certificate files are present. Packets exchanged between clients and servers have a MAC.&lt;/dd&gt;
&lt;dt&gt;TC&lt;/dt&gt;
&lt;dd&gt;A client or server is type TC if the &lt;tt&gt;autokey&lt;/tt&gt; option is specified with the &lt;tt&gt;server&lt;/tt&gt; configuration command and compatible host key and public certificate files are present. Packets exchanged between clients and servers have a MAC.&lt;/dd&gt;
&lt;dt&gt;IDENT&lt;/dt&gt;
&lt;dd&gt;A client or server is type IDENT if the &lt;tt&gt;autokey&lt;/tt&gt; option is specified with the &lt;tt&gt;server&lt;/tt&gt; configuration command and compatible host key, public certificate and identity scheme files are present. Packets exchanged between clients and servers have a MAC.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;The compatible cryptotypes for clients and servers are listed in the following table.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Client&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Server&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;NONE&lt;/td&gt;
&lt;td&gt;AUTH&lt;/td&gt;
&lt;td&gt;PC&lt;/td&gt;
&lt;td&gt;TC&lt;/td&gt;
&lt;td&gt;IDENT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NONE&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes*&lt;/td&gt;
&lt;td&gt;yes*&lt;/td&gt;
&lt;td&gt;yes*&lt;/td&gt;
&lt;td&gt;yes*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AUTH&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PC&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TC&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IDENT&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;* These combinations are not valid if the restriction list includes the &lt;tt&gt;notrust&lt;/tt&gt; option.&lt;/p&gt;
&lt;h4 id=&#34;error-codes&#34;&gt;Error Codes&lt;/h4&gt;
&lt;p&gt;Errors can occur due to mismatched configurations, unexpected protocol restarts, expired certificates and unfriendly people. In most cases the protocol state machine recovers automatically by retransmission, timeout and restart, where necessary. Some errors are due to mismatched keys, digest schemes or identity schemes and must be corrected by installing the correct media and/or correcting the configuration file. One of the most common errors is expired certificates, which must be regenerated and signed at least once per year using the &lt;a href=&#34;/archives/4.2.8-series/keygen&#34;&gt;&lt;tt&gt;ntp-keygen&lt;/tt&gt;&lt;/a&gt; program.&lt;/p&gt;
&lt;p&gt;The following error codes are reported via the NTP control and monitoring protocol trap mechanism and to the &lt;tt&gt;cryptostats&lt;/tt&gt; monitoring file if configured.&lt;/p&gt;
&lt;dt&gt;101 bad field format or length&lt;/dt&gt;
&lt;p&gt;The packet has invalid version, length or format.&lt;/p&gt;
&lt;dt&gt;102 bad timestamp&lt;/dt&gt;
&lt;p&gt;The packet timestamp is the same or older than the most recent received. This could be due to a replay or a server clock time step.&lt;/p&gt;
&lt;dt&gt;103 bad filestamp&lt;/dt&gt;
&lt;p&gt;The packet filestamp is the same or older than the most recent received. This could be due to a replay or a key file generation error.&lt;/p&gt;
&lt;dt&gt;104 bad or missing public key&lt;/dt&gt;
&lt;p&gt;The public key is missing, has incorrect format or is an unsupported type.&lt;/p&gt;
&lt;dt&gt;105 unsupported digest type&lt;/dt&gt;
&lt;p&gt;The server requires an unsupported digest/signature scheme.&lt;/p&gt;
&lt;dt&gt;106 unsupported identity type&lt;/dt&gt;
&lt;p&gt;The client or server has requested an identity scheme the other does not support.&lt;/p&gt;
&lt;dt&gt;107 bad signature length&lt;/dt&gt;
&lt;p&gt;The signature length does not match the current public key.&lt;/p&gt;
&lt;dt&gt;108 signature not verified&lt;/dt&gt;
&lt;p&gt;The message fails the signature check. It could be bogus or signed by a different private key.&lt;/p&gt;
&lt;dt&gt;109 certificate not verified&lt;/dt&gt;
&lt;p&gt;The certificate is invalid or signed with the wrong key.&lt;/p&gt;
&lt;dt&gt;110 host certificate expired&lt;/dt&gt;
&lt;p&gt;The old server certificate has expired.&lt;/p&gt;
&lt;dt&gt;111 bad or missing cookie&lt;/dt&gt;
&lt;p&gt;The cookie is missing, corrupted or bogus.&lt;/p&gt;
&lt;dt&gt;112 bad or missing leapseconds table&lt;/dt&gt;
&lt;p&gt;The leapseconds table is missing, corrupted or bogus.&lt;/p&gt;
&lt;dt&gt;113 bad or missing certificate&lt;/dt&gt;
&lt;p&gt;The certificate is missing, corrupted or bogus.&lt;/p&gt;
&lt;dt&gt;114 bad or missing group key&lt;/dt&gt;
&lt;p&gt;The identity key is missing, corrupt or bogus.&lt;/p&gt;
&lt;dt&gt;115 protocol error&lt;/dt&gt;
&lt;p&gt;The protocol state machine has wedged due to unexpected restart.&lt;/p&gt;
&lt;h4 id=&#34;files&#34;&gt;Files&lt;/h4&gt;
&lt;p&gt;See the &lt;a href=&#34;/archives/4.2.8-series/keygen&#34;&gt;&lt;tt&gt;ntp-keygen&lt;/tt&gt;&lt;/a&gt; page. Note that provisions to load leap second values from the NIST files have been removed. These provisions are now available whether or not the OpenSSL library is available. However, the functions that can download these values from servers remains available.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Automatic NTP Configuration Options</title>
      <link>/archives/4.2.0/manyopt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.0/manyopt/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice51.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/%7emills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Make sure who your friends are.&lt;/p&gt;
&lt;p&gt;Last update: 03:13 AM UTC Monday, October 13, 2003&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/manyopt/#manycasting&#34;&gt;Manycasting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/manyopt/#manycast-interactions-with-autokey&#34;&gt;Manycast Interactions with Autokey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.0/manyopt/#manycast-options&#34;&gt;Manycast Options&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;manycasting&#34;&gt;Manycasting&lt;/h4&gt;
&lt;p&gt;Manycasting is a automatic discovery and configuration paradigm new to NTPv4. It is intended as a means for a multicast client to troll the nearby network neighborhood to find cooperating manycast servers, validate them using cryptographic means and evaluate their time values with respect to other servers that might be lurking in the vicinity. The intended result is that each manycast client mobilizes client associations with some number of the &amp;ldquo;best&amp;rdquo; of the nearby manycast servers, yet automatically reconfigures to sustain this number of servers should one or another fail.&lt;/p&gt;
&lt;p&gt;Note that the manycasting paradigm does not coincide with the anycast paradigm described in RFC-1546, which is designed to find a single server from a clique of servers providing the same service. The manycast paradigm is designed to find a plurality of redundant servers satisfying defined optimality criteria.&lt;/p&gt;
&lt;p&gt;Manycasting can be used with either symmetric key or public key cryptography. The public key infrastructure (PKI) offers the best protection against compromised keys and is generally considered stronger, at least with relatively large key sizes. It is implemented using the Autokey protocol and the OpenSSL cryptographic library available from &lt;a href=&#34;https://www.openssl.org&#34;&gt;https://www.openssl.org&lt;/a&gt;. The library can also be used with other NTPv4 modes as well and is highly recommended, especially for broadcast modes.&lt;/p&gt;
&lt;p&gt;A persistent manycast client association is configured using the &lt;tt&gt;manycastclient&lt;/tt&gt; command, which is similar to the &lt;tt&gt;server&lt;/tt&gt; command but with a multicast (IPv4 class D or IPv6 prefix &lt;tt&gt;FF&lt;/tt&gt;) group address. The IANA has designated IPv4 address 224.1.1.1 and IPv6 address FF05::101 (site local) for NTP. When more servers are needed, it broadcasts manycast client messages to this address at the minimum feasible rate and minimum feasible time-to-live (TTL) hops, depending on how many servers have already been found. There can be as many manycast client associations as different group address, each one serving as a template for a future ephemeral unicast client/server association.&lt;/p&gt;
&lt;p&gt;Manycast servers configured with the &lt;tt&gt;manycastserver&lt;/tt&gt; command listen on the specified group address for manycast client messages. Note the distinction between manycast client, which actively broadcasts messages, and manycast server, which passively responds to them. If a manycast server is in scope of the current TTL and is itself synchronized to a valid source and operating at a stratum level equal to or lower than the manycast client, it replies to the manycast client message with an ordinary unicast server message.&lt;/p&gt;
&lt;p&gt;The manycast client receiving this message mobilizes an ephemeral client/server association according to the matching manycast client template, but only if cryptographically authenticated and the server stratum is less than or equal to the client stratum. Authentication is explicitly required and either symmetric key or public key (Autokey) can be used. Then, the client polls the server at its unicast address in burst mode in order to reliably set the host clock and validate the source. This normally results in a volley of eight client/server at 2-s intervals during which both the synchronization and cryptographic protocols run concurrently. Following the volley, the client runs the NTP intersection and clustering algorithms, which act to discard all but the &amp;ldquo;best&amp;rdquo; associations according to stratum and synchronization distance. The surviving associations then continue in ordinary client/server mode.&lt;/p&gt;
&lt;p&gt;The manycast client polling strategy is designed to reduce as much as possible the volume of manycast client messages and the effects of implosion due to near-simultaneous arrival of manycast server messages. The strategy is determined by the &lt;tt&gt;manycastclient&lt;/tt&gt;, &lt;tt&gt;tos&lt;/tt&gt; and &lt;tt&gt;ttl&lt;/tt&gt; configuration commands. The manycast poll interval is normally eight times the system poll interval, which starts out at the &lt;tt&gt;minpoll&lt;/tt&gt; value specified in the &lt;tt&gt;manycastclient&lt;/tt&gt;, command and, under normal circumstances, increments to the &lt;tt&gt;maxpolll&lt;/tt&gt; value specified in this command. Initially, the TTL is set at the minimum hops specified by the &lt;tt&gt;ttl&lt;/tt&gt; command. At each retransmission the TTL is increased until reaching the maximum hops specified by this command or a sufficient number client associations have been found. Further retransmissions use the same TTL.&lt;/p&gt;
&lt;p&gt;The quality and reliability of the suite of associations discovered by the manycast client is determined by the NTP mitigation algorithms and the &lt;tt&gt;minclock&lt;/tt&gt; and &lt;tt&gt;minsane&lt;/tt&gt; values specified in the &lt;tt&gt;tos&lt;/tt&gt; configuration command. At least &lt;tt&gt;minsane&lt;/tt&gt; candidate servers must be available and the mitigation algorithms produce at least &lt;tt&gt;minclock&lt;/tt&gt; survivors in order to synchronize the clock. Byzantine agreement principles require at least four candidates in order to correctly discard a single falseticker. For legacy purposes, &lt;tt&gt;minsane&lt;/tt&gt; defaults to 1 and &lt;tt&gt;minclock&lt;/tt&gt; defaults to 3. For manycast service &lt;tt&gt;minsane&lt;/tt&gt; should be explicitly set to 4. assuming at least that number of servers are available.&lt;/p&gt;
&lt;p&gt;If at least &lt;tt&gt;minclock&lt;/tt&gt; servers are found, the manycast poll interval is immediately set to eight times &lt;tt&gt;maxpoll&lt;/tt&gt;. If less than &lt;tt&gt;minclock&lt;/tt&gt; servers are found when the TTL has reached the maximum hops, the manycast poll interval is doubled. For each transmission after that, the poll interval is doubled again until reaching the maximum of eight times &lt;tt&gt;maxpoll&lt;/tt&gt;. Further transmissions use the same poll interval and TTL values. Note that while all this is going on, each client/server association found is operating normally it the system poll interval.&lt;/p&gt;
&lt;p&gt;Administratively scoped multicast boundaries are normally specified by the network router configuration and, in the case of IPv6, the link/site scope prefix. By default, the increment for TTL hops is 32 starting from 31; however, the &lt;tt&gt;ttl&lt;/tt&gt; configuration command can be used to modify the values to match the scope rules.&lt;/p&gt;
&lt;p&gt;It is often useful to narrow the range of acceptable servers which can be found by manycast client associations. Because manycast servers respond only when the client stratum is equal to or greater than the server stratum, primary (stratum 1) servers fill find only primary servers in TTL range, which is probably the most common objective. However, unless configured otherwise, all manycast clients in TTL range will eventually find all primary servers in TTL range, which is probably not the most common objective in large networks. The &lt;tt&gt;tos&lt;/tt&gt; command can be used to modify this behavior. Servers with stratum below &lt;tt&gt;floor&lt;/tt&gt; or above &lt;tt&gt;ceiling&lt;/tt&gt; specified in the &lt;tt&gt;tos&lt;/tt&gt; command are strongly discouraged during the selection process; however, these servers may be temporally accepted if the number of servers within TTL range is less than &lt;tt&gt;minclock&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The above actions occur for each manycast client message, which repeats at the designated poll interval. However, once the ephemeral client association is mobilized, subsequent manycast server replies are discarded, since that would result in a duplicate association. If during a poll interval the number of client associations falls below &lt;tt&gt;minclock&lt;/tt&gt;, all manycast client prototype associations are reset to the initial poll interval and TTL hops and operation resumes from the beginning. It is important to avoid frequent manycast client messages, since each one requires all manycast servers in TTL range to respond. The result could well be an implosion, either minor or major, depending on the number of servers in range. The recommended value for &lt;tt&gt;maxpoll&lt;/tt&gt; is 12 (4,096 s).&lt;/p&gt;
&lt;p&gt;It is possible and frequently useful to configure a host as both manycast client and manycast server. A number of hosts configured this way and sharing a common group address will automatically organize themselves in an optimum configuration based on stratum and synchronization distance. For example, consider an NTP subnet of two primary servers and a hundred or more dependent clients. With two exceptions, all servers and clients have identical configuration files including both &lt;tt&gt;multicastclient&lt;/tt&gt; and &lt;tt&gt;multicastserver&lt;/tt&gt; commands using, for instance, multicast group address 239.1.1.1. The only exception is that each primary server configuration file must include commands for the primary reference source such as a GPS receiver.&lt;/p&gt;
&lt;p&gt;The remaining configuration files for all secondary servers and clients have the same contents, except for the &lt;tt&gt;tos&lt;/tt&gt; command, which is specific for each stratum level. For stratum 1 and stratum 2 servers, that command is not necessary. For stratum 3 and above servers the &lt;tt&gt;floor&lt;/tt&gt; value is set to the intended stratum number. Thus, all stratum 3 configuration files are identical, all stratum 4 files are identical and so forth.&lt;/p&gt;
&lt;p&gt;Once operations have stabilized in this scenario, the primary servers will find the primary reference source and each other, since they both operate at the same stratum (1), but not with any secondary server or client, since these operate at a higher stratum. The secondary servers will find the servers at the same stratum level. If one of the primary servers loses its GPS receiver, it will continue to operate as a client and other clients will time out the corresponding association and re-associate accordingly.&lt;/p&gt;
&lt;p&gt;Some administrators prefer to avoid running &lt;tt&gt;ntpd&lt;/tt&gt; continuously and run either &lt;tt&gt;ntpdate&lt;/tt&gt; or &lt;tt&gt;ntpd -q&lt;/tt&gt; as a cron job. In either case the servers must be configured in advance and the program fails if none are available when the cron job runs. A really slick application of manycast is with &lt;tt&gt;ntpd -q&lt;/tt&gt;. The program wakes up, scans the local landscape looking for the usual suspects, selects the best from among the rascals, sets the clock and then departs. Servers do not have to be configured in advance and all clients throughout the network can have the same configuration file.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;manycast-interactions-with-autokey&#34;&gt;Manycast Interactions with Autokey&lt;/h4&gt;
&lt;p&gt;Each time a manycast client sends a client mode packet to a multicast group address, all manycast servers in scope generate a reply including the host name and status word. The manycast clients then run the Autokey protocol, which collects and verifies all certificates involved. Following the burst interval all but three survivors are cast off, but the certificates remain in the local cache. It often happens that several complete signing trails from the client to the primary servers are collected in this way.&lt;/p&gt;
&lt;p&gt;About once an hour or less often if the poll interval exceeds this, the client regenerates the Autokey key list. This is in general transparent in client/server mode. However, about once per day the server private value used to generate cookies is refreshed along with all manycast client associations. In this case all cryptographic values including certificates is refreshed. If a new certificate has been generated since the last refresh epoch, it will automatically revoke all prior certificates that happen to be in the certificate cache. At the same time, the manycast scheme starts all over from the beginning and the expanding ring shrinks to the minimum and increments from there while collecting all servers in scope.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;manycast-options&#34;&gt;Manycast Options&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;tos [ ceiling _ceiling_ | cohort {0 | 1} | floor _floor_ | minclock _minclock_ | minsane _minsane_ ]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command affects the clock selection and clustering algorithms. It can be used to select the quality and quantity of peers used to synchronize the system clock and is most useful in manycast mode. The variables operate as follows:&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;ceiling &lt;em&gt;ceiling&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Peers with strata above &lt;em&gt;ceiling&lt;/em&gt; will be discarded if there are at least &lt;em&gt;&lt;tt&gt;minclock&lt;/tt&gt;&lt;/em&gt; peers remaining. This value defaults to 15, but can be changed to any number from 1 to 15.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;cohort { 0 | 1 }&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â This is a binary flag which enables (0) or disables (1) manycast server replies to manycast clients with the same stratum level. This is useful to reduce implosions where large numbers of clients with the same stratum level are present. The default is to enable these replies.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;floor &lt;em&gt;floor&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Peers with strata below &lt;em&gt;floor&lt;/em&gt; will be discarded if there are at least &lt;em&gt;minclock&lt;/em&gt; peers remaining. This value defaults to 1, but can be changed to any number from 1 to 15.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;maxdist &lt;em&gt;maxdistance&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;minclock &lt;em&gt;minclock&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â The clustering algorithm repeatedly casts out outlyer associations until no more than &lt;em&gt;minclock&lt;/em&gt; associations remain. This value defaults to 3, but can be changed to any number from 1 to the number of configured sources.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;minsane &lt;em&gt;minsane&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â This is the minimum number of candidates available to the clock selection algorithm in order to produce one or more truechimers for the clustering algorithm. If fewer than this number are available, the clock is undisciplined and allowed to run free. The default is 1 for legacy purposes. However, according to principles of Byzantine agreement, &lt;em&gt;minsane&lt;/em&gt; should be at least 4 in order to detect and discard a single falseticker.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;ttl _hop_ ...&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command specifies a list of TTL values in increasing order. Up to 8 values can be specified. In manycast mode these values are used in turn in an expanding-ring search. The default is eight multiples of 32 starting at 31.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Automatic NTP Configuration Options</title>
      <link>/archives/4.2.2-series/manyopt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.2-series/manyopt/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice51.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/%7emills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Make sure who your friends are.&lt;/p&gt;
&lt;p&gt;Last update: 20:55 UTC Tuesday, October 11, 2005&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.2-series/manyopt/#broadcasting&#34;&gt;Broadcasting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.2-series/manyopt/#manycasting&#34;&gt;Manycasting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.2-series/manyopt/#orphan-mode&#34;&gt;Orphan Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.2-series/manyopt/#server-discovery-options&#34;&gt;Server Discovery Options&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;broadcasting&#34;&gt;Broadcasting&lt;/h4&gt;
&lt;p&gt;Broadcasting is the simplest way to provide automatic server discovery. It uses the multi-destination paradigm, where the subnet spanning tree is constructed automatically, either by the switches in an Ethernet LAN or the DVMRP or PIM protocols when spanning multiple networks.&lt;/p&gt;
&lt;p&gt;A broadcast or multicast server is mobilized by the broadcast configuration command. The addresses can be either from the IPv4 broadcast/mulitcast address family or the IPv6 address family. Multiple broadcast server associations can be specified for a single host.&lt;/p&gt;
&lt;p&gt;A host is enabled for broadcast reception using the &lt;tt&gt;broadcastclient&lt;/tt&gt; configuration command, with or without the &lt;tt&gt;novolley&lt;/tt&gt; option. Upon receiving the first message from a broadcast server, the client mobilizes an ephemeral client association and exchanges a volley of client/server messages in order to quickly authenticate the source, set the clock and measure the propagation delay, then reverts to listen-only mode. A multicast client is mobilized in the same way using the &lt;tt&gt;multicastclient&lt;/tt&gt; configuration command and specified multicast group address.&lt;/p&gt;
&lt;p&gt;Broadcasting can be used with either symmetric key or public key cryptography. Public key cryptography offers the best protection against compromised keys and is generally considered stronger. By default, either of these two means is required, but this can be overridden by the &lt;tt&gt;disable auth&lt;/tt&gt; command.&lt;/p&gt;
&lt;p&gt;In both broadcast and multicast client operations the client association is demobilized in case of error or timeout due to loss of server or connectivity.&lt;/p&gt;
&lt;h4 id=&#34;manycasting&#34;&gt;Manycasting&lt;/h4&gt;
&lt;p&gt;Manycasting is a automatic discovery and configuration paradigm new to NTPv4. It is intended as a means for a client to troll the nearby network neighborhood to find cooperating servers, validate them using cryptographic means and evaluate their time values with respect to other servers that might be lurking in the vicinity. The intended result is that each client mobilizes associations with a given number of the &amp;ldquo;best&amp;rdquo; nearby servers, yet automatically reconfigures to sustain this number of servers should one or another fail.&lt;/p&gt;
&lt;p&gt;Note that the manycast paradigm does not coincide with the anycast paradigm described in RFC-1546, which is designed to find a single server from a clique of servers providing the same service. The manycast paradigm is designed to find a plurality of redundant servers satisfying defined optimality criteria.&lt;/p&gt;
&lt;p&gt;Manycasting can be used with either symmetric key or public key cryptography. Public key cryptography offers the best protection against compromised keys and is generally considered stronger. By default, either of these two means is required, but this can be overridden by the &lt;tt&gt;disable auth&lt;/tt&gt; command.&lt;/p&gt;
&lt;p&gt;A manycast client association is configured using the &lt;tt&gt;manycastclient&lt;/tt&gt; configuration command, which is similar to the &lt;tt&gt;server&lt;/tt&gt; configuration command, but with a broadcast or multicast address. Depending on address family. The manycast client sends ordinary client mode messages, but with a broadcast address rather than a unicast address. It sends only if less than a given threshold of servers have been found and then only at the minimum feasible rate and minimum feasible time-to-live (TTL) hops. There can be as many manycast client associations as different broadcast addresses, each one serving as a template for a future unicast client/server association.&lt;/p&gt;
&lt;p&gt;Manycast servers configured with the &lt;tt&gt;manycastserver&lt;/tt&gt; command listen on the specified broadcast address for manycast client messages. If a manycast server is in scope of the current TTL and is itself synchronized to a valid source and operating at a stratum level equal to or lower than the manycast client, it replies to the manycast client message with an ordinary unicast server message.&lt;/p&gt;
&lt;p&gt;The manycast client receiving this message mobilizes a preemptable client association according to the matching manycast client template, but only if cryptographically authenticated and the server stratum is less than or equal to the client stratum. The client runs the NTP mitigation algorithms, which act to demobilize all but a threshold number of associations according to stratum and synchronization distance. The surviving associations then continue in ordinary client/server mode.&lt;/p&gt;
&lt;p&gt;If for some reason the number of available servers falls below the threshold, the manycast client resumes sending broadcast messages. The polling strategy is designed to reduce as much as possible the volume of broadcast messages and the effects of implosion due to near-simultaneous arrival of manycast server messages. The strategy is determined by the &lt;tt&gt;tos&lt;/tt&gt; and &lt;tt&gt;ttl&lt;/tt&gt; configuration commands described below.&lt;/p&gt;
&lt;p&gt;It is possible and frequently useful to configure a host as both manycast client and manycast server. A number of hosts configured this way and sharing a common group address will automatically organize themselves in an optimum configuration based on stratum and synchronization distance.&lt;/p&gt;
&lt;p&gt;For example, consider an NTP subnet of two primary servers and several secondary servers and a number of dependent clients. With twoAll servers and clients have identical configuration files including both &lt;tt&gt;multicastclient&lt;/tt&gt; and &lt;tt&gt;multicastserver&lt;/tt&gt; commands using, for instance, multicast group address 239.1.1.1. Each primary server configuration file must include commands for the primary reference source such as a GPS receiver.&lt;/p&gt;
&lt;p&gt;The remaining configuration files for all secondary servers and clients have the same contents, except for the &lt;tt&gt;tos&lt;/tt&gt; command, which is specific for each stratum level. For stratum 1 and stratum 2 servers, that command is not necessary. For stratum 3 and above servers the &lt;tt&gt;tos floor&lt;/tt&gt; value is set to the intended stratum number. Thus, all stratum 3 configuration files use &lt;tt&gt;tos floor 3&lt;/tt&gt;, all stratum 4 files use &lt;tt&gt;tos floor 4&lt;/tt&gt; and so forth.&lt;/p&gt;
&lt;p&gt;Once operations have stabilized, the primary servers will find the primary reference source and each other, since they both operate at the same stratum (1), but not with any secondary server or client, since these operate at a higher stratum. The secondary servers will find the servers at the same stratum level. If one of the primary servers loses its GPS receiver, it will continue to operate as a client and other clients will time out the corresponding association and re-associate accordingly.&lt;/p&gt;
&lt;h4 id=&#34;orphan-mode&#34;&gt;Orphan Mode&lt;/h4&gt;
&lt;p&gt;Sometimes it is necessary to operate an NTP subnet in isolation, because a local reference clock is unavailable or connectivity to the Internet is not provided. In such cases it may be necessary that the subnet servers and clients remain synchronized to a common timescale, not necessarily the UTC timescale. Previously, this function was provided by the local clock driver, which could be configured for a server that could be reached, directly or indirectly from all other servers and clients in the subnet.&lt;/p&gt;
&lt;p&gt;There are many disadvantages using the local clock driver: multiple source redundancy is not possible and the subnet is vulnerable to single-point failures. Orphan mode is intended to replace the need for the local clock driver. It operates in subnet configurations in all modes, including broadcast, and multiple servers and clients and handles seamless switching as primary sources fail and recover.&lt;/p&gt;
&lt;p&gt;A server or client is enabled for orphan mode using the &lt;tt&gt;tos orphan &lt;em&gt;stratum&lt;/em&gt;&lt;/tt&gt; command, where &lt;tt&gt;&lt;em&gt;stratum&lt;/em&gt;&lt;/tt&gt; is some stratum less than 16 and greater than any anticipated stratum that might occur with ordinary Internet servers. This is the same consideration that guides the local clock driver stratum.&lt;/p&gt;
&lt;p&gt;As long as the stratum of any orphan is less than the orphan stratum, the servers and clients operate in the normal way. However, if the stratum equals or exceeds this stratum, the server or client is considered an orphan. If under these conditions a host has no sources of the same or lower stratum, it is designated an orphan parent; otherwise, it is considered an orphan child. Orphan parents show offset zero, root delay zero and reference ID 127.0.0.1, which of course is the Unix loopback address. Orphan children show the mitigated offset of their servers, root delay randomized over a moderate range and reference ID of their system peer. An important distinction is that the entire subnet operates at the same orphan stratum and that the order of preference is the root delay, not the stratum and root distance as usual.&lt;/p&gt;
&lt;p&gt;For the most flexible and reliable operation, all servers and clients in the subnet should include the &lt;tt&gt;orphan&lt;/tt&gt; command in the configuration file and with the same orphan stratum. This provides mutual redundancy and diversity for all NTP modes of operation, including broadcast.&lt;/p&gt;
&lt;p&gt;For example, consider the case where several campus secondary (stratum 2) servers are configured for public Internet primary servers and with each other using symmetric modes. These servers provide synchronization with a number of department servers using broadcast mode, where each of these servers is configured as both a broadcast server and broadcast client. Individual workstations on the department LAN are configured as broadcast clients only. All servers (not necessarily the clients) have the &lt;tt&gt;orphan 5&lt;/tt&gt; command, for example.&lt;/p&gt;
&lt;p&gt;In normal operation all servers and clients operate below stratum 5, so operate with the subnet configuration determined by stratum and root distance. If all sources are lost at any stratum level, the server or client continues operation as orphan parent. However, if sources at the orphan stratum are found, the host synchronizes to the source with lowest root delay. Since orphan root delay is determined randomly at startup, loops are avoided, even in broadcast modes where multiple servers are available.&lt;/p&gt;
&lt;h4 id=&#34;server-discovery-options&#34;&gt;Server Discovery Options&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;tos [ ceiling _ceiling_ | cohort {0 | 1} | floor _floor_ | orphan _orphan_ | maxdistance _maxdistance_ | minclock _minclock_ | minsane _minsane_ ]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command affects the clock selection and clustering algorithms. It can be used to select the quality and quantity of peers used to synchronize the system clock and is most useful in manycast mode. The variables operate as follows:&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;beacon &lt;em&gt;beacon&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â The manycast server sends packets at intervals of 64 s if less than &lt;em&gt;&lt;tt&gt;maxclock&lt;/tt&gt;&lt;/em&gt; servers are available. Otherwise, it sends packets at the &lt;em&gt;&lt;tt&gt;beacon&lt;/tt&gt;&lt;/em&gt; interval in seconds. The default is 3600 s.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;ceiling &lt;em&gt;ceiling&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Servers with stratum at or above &lt;em&gt;ceiling&lt;/em&gt; will be discarded if there are at least &lt;em&gt;&lt;tt&gt;minclock&lt;/tt&gt;&lt;/em&gt; peers remaining. This value defaults to 15, but can be changed to any number from 1 to 15.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;cohort { 0 | 1 }&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â This is a binary flag which enables (0) or disables (1) manycast server replies to manycast clients with the same stratum level. This is useful to reduce implosions where large numbers of clients with the same stratum level are present. The default is to enable these replies.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;floor &lt;em&gt;floor&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Peers with strata below &lt;em&gt;floor&lt;/em&gt; will be discarded if there are at least &lt;em&gt;minclock&lt;/em&gt; peers remaining. This value defaults to 1, but can be changed to any number from 1 to 15.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;orphan &lt;em&gt;stratum&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â If &lt;tt&gt;&lt;em&gt;stratum&lt;/em&gt;&lt;/tt&gt; is set at some value less than 16 a special orphan mode is enterred when no outside source of synchronization is available. To use orphan mode a number of participants are identically configured both as broadcast client and as broadcast server. One or more participants are configured to use an outside source, either a reference clock or another Internet server. When the source or sources fail, the system stratum is set at &lt;tt&gt;&lt;em&gt;stratum&lt;/em&gt;&lt;/tt&gt; and a leader is elected to serve as the reference source. When an outside source of synchronization is again available, the orphan mode is disabled.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;mindist &lt;em&gt;mindistance&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;The slection algorithm normally pads each intersection a minimum of one millisecond to avoid needless classification. In some cases, such as reference clocks with high jitter and a PPS signal, it is useful to increase the padding. This command can be used for that purpose. As a general rule, set the mindistance to the maximum expected offset plus the maxiumum expected jitter, in seconds.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;maxdist &lt;em&gt;maxdistance&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â The selection algorithm accumulates a number of packets before setting the clock in order to use the best data available. The number is determined by the synchronization distance for each association and a limit called the distance threshold. The synchronization distance starts at 16, then drops by a factor of about two as each packet is received. The default distance threshold is 1.0, which usually results in four packets. Setting maxdistance to some value between 1 and 16 can be used to change the number of packets required. For instance, setting it to 16 will set the clock on the first packet received; howver, setting it to this value essentially disables the mitigation and grooming algorithms.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;minclock &lt;em&gt;minclock&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â The clustering algorithm repeatedly casts out outlyer associations until no more than &lt;em&gt;minclock&lt;/em&gt; associations remain. This value defaults to 3, but can be changed to any number from 1 to the number of configured sources.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;minsane &lt;em&gt;minsane&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â This is the minimum number of candidates available to the clock selection algorithm in order to produce one or more truechimers for the clustering algorithm. If fewer than this number are available, the clock is undisciplined and allowed to run free. The default is 1 for legacy purposes. However, according to principles of Byzantine agreement, &lt;em&gt;minsane&lt;/em&gt; should be at least 4 in order to detect and discard a single falseticker.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;ttl _hop_ ...&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command specifies a list of TTL values in increasing order. up to 8 values can be specified. In manycast mode these values are used in turn in an expanding-ring search. The default is eight multiples of 32 starting at 31.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Automatic NTP Configuration Options</title>
      <link>/archives/4.2.4-series/manyopt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.4-series/manyopt/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice51.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/%7emills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Make sure who your friends are.&lt;/p&gt;
&lt;p&gt;Last update: 20:55 UTC Tuesday, October 11, 2005&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.4-series/manyopt/#broadcasting&#34;&gt;Broadcasting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.4-series/manyopt/#manycasting&#34;&gt;Manycasting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.4-series/manyopt/#orphan-mode&#34;&gt;Orphan Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.4-series/manyopt/#server-discovery-options&#34;&gt;Server Discovery Options&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;broadcasting&#34;&gt;Broadcasting&lt;/h4&gt;
&lt;p&gt;Broadcasting is the simplest way to provide automatic server discovery. It uses the multi-destination paradigm, where the subnet spanning tree is constructed automatically, either by the switches in an Ethernet LAN or the DVMRP or PIM protocols when spanning multiple networks.&lt;/p&gt;
&lt;p&gt;A broadcast or multicast server is mobilized by the broadcast configuration command. The addresses can be either from the IPv4 broadcast/mulitcast address family or the IPv6 address family. Multiple broadcast server associations can be specified for a single host.&lt;/p&gt;
&lt;p&gt;A host is enabled for broadcast reception using the &lt;tt&gt;broadcastclient&lt;/tt&gt; configuration command, with or without the &lt;tt&gt;novolley&lt;/tt&gt; option. Upon receiving the first message from a broadcast server, the client mobilizes an ephemeral client association and exchanges a volley of client/server messages in order to quickly authenticate the source, set the clock and measure the propagation delay, then reverts to listen-only mode. A multicast client is mobilized in the same way using the &lt;tt&gt;multicastclient&lt;/tt&gt; configuration command and specified multicast group address.&lt;/p&gt;
&lt;p&gt;Broadcasting can be used with either symmetric key or public key cryptography. Public key cryptography offers the best protection against compromised keys and is generally considered stronger. By default, either of these two means is required, but this can be overridden by the &lt;tt&gt;disable auth&lt;/tt&gt; command.&lt;/p&gt;
&lt;p&gt;In both broadcast and multicast client operations the client association is demobilized in case of error or timeout due to loss of server or connectivity.&lt;/p&gt;
&lt;h4 id=&#34;manycasting&#34;&gt;Manycasting&lt;/h4&gt;
&lt;p&gt;Manycasting is a automatic discovery and configuration paradigm new to NTPv4. It is intended as a means for a client to troll the nearby network neighborhood to find cooperating servers, validate them using cryptographic means and evaluate their time values with respect to other servers that might be lurking in the vicinity. The intended result is that each client mobilizes associations with a given number of the &amp;ldquo;best&amp;rdquo; nearby servers, yet automatically reconfigures to sustain this number of servers should one or another fail.&lt;/p&gt;
&lt;p&gt;Note that the manycast paradigm does not coincide with the anycast paradigm described in RFC-1546, which is designed to find a single server from a clique of servers providing the same service. The manycast paradigm is designed to find a plurality of redundant servers satisfying defined optimality criteria.&lt;/p&gt;
&lt;p&gt;Manycasting can be used with either symmetric key or public key cryptography. Public key cryptography offers the best protection against compromised keys and is generally considered stronger. By default, either of these two means is required, but this can be overridden by the &lt;tt&gt;disable auth&lt;/tt&gt; command.&lt;/p&gt;
&lt;p&gt;A manycast client association is configured using the &lt;tt&gt;manycastclient&lt;/tt&gt; configuration command, which is similar to the &lt;tt&gt;server&lt;/tt&gt; configuration command, but with a broadcast or multicast address. Depending on address family. The manycast client sends ordinary client mode messages, but with a broadcast address rather than a unicast address. It sends only if less than a given threshold of servers have been found and then only at the minimum feasible rate and minimum feasible time-to-live (TTL) hops. There can be as many manycast client associations as different broadcast addresses, each one serving as a template for a future unicast client/server association.&lt;/p&gt;
&lt;p&gt;Manycast servers configured with the &lt;tt&gt;manycastserver&lt;/tt&gt; command listen on the specified broadcast address for manycast client messages. If a manycast server is in scope of the current TTL and is itself synchronized to a valid source and operating at a stratum level equal to or lower than the manycast client, it replies to the manycast client message with an ordinary unicast server message.&lt;/p&gt;
&lt;p&gt;The manycast client receiving this message mobilizes a preemptable client association according to the matching manycast client template, but only if cryptographically authenticated and the server stratum is less than or equal to the client stratum. The client runs the NTP mitigation algorithms, which act to demobilize all but a threshold number of associations according to stratum and synchronization distance. The surviving associations then continue in ordinary client/server mode.&lt;/p&gt;
&lt;p&gt;If for some reason the number of available servers falls below the threshold, the manycast client resumes sending broadcast messages. The polling strategy is designed to reduce as much as possible the volume of broadcast messages and the effects of implosion due to near-simultaneous arrival of manycast server messages. The strategy is determined by the &lt;tt&gt;tos&lt;/tt&gt; and &lt;tt&gt;ttl&lt;/tt&gt; configuration commands described below.&lt;/p&gt;
&lt;p&gt;It is possible and frequently useful to configure a host as both manycast client and manycast server. A number of hosts configured this way and sharing a common group address will automatically organize themselves in an optimum configuration based on stratum and synchronization distance.&lt;/p&gt;
&lt;p&gt;For example, consider an NTP subnet of two primary servers and several secondary servers and a number of dependent clients. With twoAll servers and clients have identical configuration files including both &lt;tt&gt;multicastclient&lt;/tt&gt; and &lt;tt&gt;multicastserver&lt;/tt&gt; commands using, for instance, multicast group address 239.1.1.1. Each primary server configuration file must include commands for the primary reference source such as a GPS receiver.&lt;/p&gt;
&lt;p&gt;The remaining configuration files for all secondary servers and clients have the same contents, except for the &lt;tt&gt;tos&lt;/tt&gt; command, which is specific for each stratum level. For stratum 1 and stratum 2 servers, that command is not necessary. For stratum 3 and above servers the &lt;tt&gt;tos floor&lt;/tt&gt; value is set to the intended stratum number. Thus, all stratum 3 configuration files use &lt;tt&gt;tos floor 3&lt;/tt&gt;, all stratum 4 files use &lt;tt&gt;tos floor 4&lt;/tt&gt; and so forth.&lt;/p&gt;
&lt;p&gt;Once operations have stabilized, the primary servers will find the primary reference source and each other, since they both operate at the same stratum (1), but not with any secondary server or client, since these operate at a higher stratum. The secondary servers will find the servers at the same stratum level. If one of the primary servers loses its GPS receiver, it will continue to operate as a client and other clients will time out the corresponding association and re-associate accordingly.&lt;/p&gt;
&lt;h4 id=&#34;orphan-mode&#34;&gt;Orphan Mode&lt;/h4&gt;
&lt;p&gt;Sometimes it is necessary to operate an NTP subnet in isolation, because a local reference clock is unavailable or connectivity to the Internet is not provided. In such cases it may be necessary that the subnet servers and clients remain synchronized to a common timescale, not necessarily the UTC timescale. Previously, this function was provided by the local clock driver, which could be configured for a server that could be reached, directly or indirectly from all other servers and clients in the subnet.&lt;/p&gt;
&lt;p&gt;There are many disadvantages using the local clock driver: multiple source redundancy is not possible and the subnet is vulnerable to single-point failures. Orphan mode is intended to replace the need for the local clock driver. It operates in subnet configurations in all modes, including broadcast, and multiple servers and clients and handles seamless switching as primary sources fail and recover.&lt;/p&gt;
&lt;p&gt;A server or client is enabled for orphan mode using the &lt;tt&gt;tos orphan &lt;em&gt;stratum&lt;/em&gt;&lt;/tt&gt; command, where &lt;tt&gt;&lt;em&gt;stratum&lt;/em&gt;&lt;/tt&gt; is some stratum less than 16 and greater than any anticipated stratum that might occur with ordinary Internet servers. This is the same consideration that guides the local clock driver stratum.&lt;/p&gt;
&lt;p&gt;As long as the stratum of any orphan is less than the orphan stratum, the servers and clients operate in the normal way. However, if the stratum equals or exceeds this stratum, the server or client is considered an orphan. If under these conditions a host has no sources of the same or lower stratum, it is designated an orphan parent; otherwise, it is considered an orphan child. Orphan parents show offset zero, root delay zero and reference ID 127.0.0.1, which of course is the Unix loopback address. Orphan children show the mitigated offset of their servers, root delay randomized over a moderate range and reference ID of their system peer. An important distinction is that the entire subnet operates at the same orphan stratum and that the order of preference is the root delay, not the stratum and root distance as usual.&lt;/p&gt;
&lt;p&gt;For the most flexible and reliable operation, all servers and clients in the subnet should include the &lt;tt&gt;orphan&lt;/tt&gt; command in the configuration file and with the same orphan stratum. This provides mutual redundancy and diversity for all NTP modes of operation, including broadcast.&lt;/p&gt;
&lt;p&gt;For example, consider the case where several campus secondary (stratum 2) servers are configured for public Internet primary servers and with each other using symmetric modes. These servers provide synchronization with a number of department servers using broadcast mode, where each of these servers is configured as both a broadcast server and broadcast client. Individual workstations on the department LAN are configured as broadcast clients only. All servers (not necessarily the clients) have the &lt;tt&gt;orphan 5&lt;/tt&gt; command, for example.&lt;/p&gt;
&lt;p&gt;In normal operation all servers and clients operate below stratum 5, so operate with the subnet configuration determined by stratum and root distance. If all sources are lost at any stratum level, the server or client continues operation as orphan parent. However, if sources at the orphan stratum are found, the host synchronizes to the source with lowest root delay. Since orphan root delay is determined randomly at startup, loops are avoided, even in broadcast modes where multiple servers are available.&lt;/p&gt;
&lt;h4 id=&#34;server-discovery-options&#34;&gt;Server Discovery Options&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;tos [ ceiling _ceiling_ | cohort {0 | 1} | floor _floor_ | orphan _orphan_ | maxdistance _maxdistance_ | minclock _minclock_ | minsane _minsane_ ]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command affects the clock selection and clustering algorithms. It can be used to select the quality and quantity of peers used to synchronize the system clock and is most useful in manycast mode. The variables operate as follows:&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;beacon &lt;em&gt;beacon&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â The manycast server sends packets at intervals of 64 s if less than &lt;em&gt;&lt;tt&gt;maxclock&lt;/tt&gt;&lt;/em&gt; servers are available. Otherwise, it sends packets at the &lt;em&gt;&lt;tt&gt;beacon&lt;/tt&gt;&lt;/em&gt; interval in seconds. The default is 3600 s.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;ceiling &lt;em&gt;ceiling&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Servers with stratum at or above &lt;em&gt;ceiling&lt;/em&gt; will be discarded if there are at least &lt;em&gt;&lt;tt&gt;minclock&lt;/tt&gt;&lt;/em&gt; peers remaining. This value defaults to 15, but can be changed to any number from 1 to 15.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;cohort { 0 | 1 }&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â This is a binary flag which enables (0) or disables (1) manycast server replies to manycast clients with the same stratum level. This is useful to reduce implosions where large numbers of clients with the same stratum level are present. The default is to enable these replies.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;floor &lt;em&gt;floor&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â Peers with strata below &lt;em&gt;floor&lt;/em&gt; will be discarded if there are at least &lt;em&gt;minclock&lt;/em&gt; peers remaining. This value defaults to 1, but can be changed to any number from 1 to 15.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;orphan &lt;em&gt;stratum&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â If &lt;tt&gt;&lt;em&gt;stratum&lt;/em&gt;&lt;/tt&gt; is set at some value less than 16 a special orphan mode is enterred when no outside source of synchronization is available. To use orphan mode a number of participants are identically configured both as broadcast client and as broadcast server. One or more participants are configured to use an outside source, either a reference clock or another Internet server. When the source or sources fail, the system stratum is set at &lt;tt&gt;&lt;em&gt;stratum&lt;/em&gt;&lt;/tt&gt; and a leader is elected to serve as the reference source. When an outside source of synchronization is again available, the orphan mode is disabled.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;mindist &lt;em&gt;mindistance&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;The slection algorithm normally pads each intersection a minimum of one millisecond to avoid needless classification. In some cases, such as reference clocks with high jitter and a PPS signal, it is useful to increase the padding. This command can be used for that purpose. As a general rule, set the mindistance to the maximum expected offset plus the maxiumum expected jitter, in seconds.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;maxdist &lt;em&gt;maxdistance&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â The selection algorithm accumulates a number of packets before setting the clock in order to use the best data available. The number is determined by the synchronization distance for each association and a limit called the distance threshold. The synchronization distance starts at 16, then drops by a factor of about two as each packet is received. The default distance threshold is 1.0, which usually results in four packets. Setting maxdistance to some value between 1 and 16 can be used to change the number of packets required. For instance, setting it to 16 will set the clock on the first packet received; howver, setting it to this value essentially disables the mitigation and grooming algorithms.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;minclock &lt;em&gt;minclock&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â The clustering algorithm repeatedly casts out outlyer associations until no more than &lt;em&gt;minclock&lt;/em&gt; associations remain. This value defaults to 3, but can be changed to any number from 1 to the number of configured sources.&lt;/p&gt;
&lt;p&gt;Â Â Â Â &lt;tt&gt;minsane &lt;em&gt;minsane&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Â Â Â Â This is the minimum number of candidates available to the clock selection algorithm in order to produce one or more truechimers for the clustering algorithm. If fewer than this number are available, the clock is undisciplined and allowed to run free. The default is 1 for legacy purposes. However, according to principles of Byzantine agreement, &lt;em&gt;minsane&lt;/em&gt; should be at least 4 in order to detect and discard a single falseticker.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;ttl _hop_ ...&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command specifies a list of TTL values in increasing order. up to 8 values can be specified. In manycast mode these values are used in turn in an expanding-ring search. The default is eight multiples of 32 starting at 31.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Automatic Server Discovery</title>
      <link>/archives/4.2.6-series/manyopt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.6-series/manyopt/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice51.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/%7emills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Make sure who your friends are.&lt;/p&gt;
&lt;p&gt;Last update: 25-Nov-2009 UTC&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.6-series/manyopt/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.6-series/manyopt/#association-management&#34;&gt;Association Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.6-series/manyopt/#broadcastmulticast-scheme&#34;&gt;Broadcast/Multicast Scheme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.6-series/manyopt/#manycast-scheme&#34;&gt;Manycast Scheme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.6-series/manyopt/#server-pool-scheme&#34;&gt;Server Pool Scheme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;introduction&#34;&gt;Introduction&lt;/h4&gt;
&lt;p&gt;This page describes the automatic server discovery schemes provided in NTPv4. Details about the configuration commands and options are described on the &lt;a href=&#34;/archives/4.2.6-series/confopt&#34;&gt;Configuration Options&lt;/a&gt; page. Details about the cryptographic authentication schemes are described on the &lt;a href=&#34;/archives/4.2.6-series/authopt&#34;&gt;Authentication Options&lt;/a&gt; page. Details about the other modes not directly involved in these schemes are described on the &lt;a href=&#34;/archives/4.2.6-series/assoc&#34;&gt;Association Management&lt;/a&gt; page. Additional information is available in the papers, reports, memoranda and briefings on the &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/ntp.html&#34;&gt;NTP Project&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;There are three automatic server discovery schemes: broadcast/multicast, manycast and server pool described on this page. The broadcast/multicast and manycast schemes utilize the ubiquitous broadcast or one-to-many paradigm native to IPv4 and IPv6. The server pool scheme uses DNS to resolve addresses of multiple volunteer servers scattered throughout the world. All three schemes work in much the same way and might be described as &lt;em&gt;grab-n&#39;-prune&lt;/em&gt;. Through one means or another they grab a number of associations either directly or indirectly from the configuration file, order them from best to worst according to a defined metric, then cast off the associations with the lowest metric until no more than the number specified by the &lt;tt&gt;maxclock&lt;/tt&gt; option of the &lt;tt&gt;tos&lt;/tt&gt; command remain.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;association-management&#34;&gt;Association Management&lt;/h4&gt;
&lt;p&gt;All schemes use a stratum filter to select just those servers with stratum considered useful. This can avoid large numbers of clients ganging up on a small number of low-stratum servers and avoid servers below or above specified stratum levels. By default, servers of all strata are acceptable; however, the &lt;tt&gt;tos&lt;/tt&gt; command can be used to restrict the acceptable range from the &lt;tt&gt;floor&lt;/tt&gt; option, inclusive, to the &lt;tt&gt;ceiling&lt;/tt&gt; option, exclusive. Potential servers operating at the same stratum as the client will be avoided, unless the &lt;tt&gt;cohort&lt;/tt&gt; option is present.&lt;/p&gt;
&lt;p&gt;The pruning process is handled using a set of counters, one for each preemptible association. Once each poll interval the counter is increased by one. If the association survives the selection and clustering algorithms; that is, it is a candidate for synchronization, the counter is reset to zero. If not and the counter reaches a defined threshold and the number of assocations is greater than &lt;tt&gt;maxclock&lt;/tt&gt;, the association becomes a candidate for pruning. The pruning algorithm assigns to each association a metric ranging from the lowest, corresponding to no possibility of synchronization, to the highest, corresponding to a very likely possibility of synchronization. Upon reaching the threshold, an association is demobilized if it has the lowest metric of all associations. Operation continues in this way until the number of remaining associations is not greater than &lt;tt&gt;maxclock&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Following is a summary of each scheme. Note that reference to option applies to the commands described on the &lt;a href=&#34;/archives/4.2.6-series/confopt&#34;&gt;Configuration Options&lt;/a&gt; page. See that page for applicability and defaults.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;broadcastmulticast-scheme&#34;&gt;Broadcast/Multicast Scheme&lt;/h4&gt;
&lt;p&gt;A broadcast server generates messages continuously at intervals by default 64 s and time-to-live by default 127. These defaults can be overriden by the &lt;tt&gt;minpoll&lt;/tt&gt; and &lt;tt&gt;ttl&lt;/tt&gt; options, respectively. Not all kernels support the &lt;tt&gt;ttl&lt;/tt&gt; option. A broadcast client responds to the first message received by waiting a randomized interval to avoid implosion at the server. It then polls the server in client/server mode using the &lt;tt&gt;iburst&lt;/tt&gt; option in order to quickly authenticate the server, calibrate the propagation delay and set the host clock. This normally results in a volley of six client/server exchanges at 2-s intervals during which both the synchronization and cryptographic protocols run concurrently.&lt;/p&gt;
&lt;p&gt;Following the volley, the server continues in listen-only mode and sends no further messages. If for some reason the broadcast server does not respond to these messages, the client will cease transmission and continue in listen-only mode with a default propagation delay. The volley can be avoided by using the &lt;tt&gt;authdelay&lt;/tt&gt; command with nonzero argument.&lt;/p&gt;
&lt;p&gt;A server is configured in broadcast mode using the &lt;tt&gt;broadcast&lt;/tt&gt; command and specifying the broadcast address of a local interface. If two or more local interfaces are installed with different broadcast addresses, a &lt;tt&gt;broadcast&lt;/tt&gt; command is needed for each address. This provides a way to limit exposure in a firewall, for example. A broadcast client is configured using the &lt;tt&gt;broadcastclient&lt;/tt&gt; command.&lt;/p&gt;
&lt;p&gt;NTP multicast mode can be used to extend the scope using IPv4 multicast or IPv6 broadcast with defined span. The IANA has assigned IPv4 multicast address 224.0.1.1 and IPv6 address FF05::101 (site local) to NTP, but these addresses should be used only where the multicast span can be reliably constrained to protect neighbor networks. In general, administratively scoped IPv4 group addresses should be used, as described in RFC-2365, or GLOP group addresses, as described in RFC-2770.&lt;/p&gt;
&lt;p&gt;A multicast server is configured using the &lt;tt&gt;broadcast&lt;/tt&gt; command, but specifying a multicast address instead of a broadcast address. A multicast client is configured using the &lt;tt&gt;multicastclient&lt;/tt&gt; command specifying a list of one or more multicast addresses. Note that there is a subtle distinction between the IPv4 and IPv6 address families. The IPv4 broadcast or mulitcast mode is determined by the IPv4 class. For IPv6 the same distinction can be made using the link-local prefix FF02 for each interface and site-local prefix FF05 for all interfaces.&lt;/p&gt;
&lt;p&gt;It is possible and frequently useful to configure a host as both broadcast client and broadcast server. A number of hosts configured this way and sharing a common broadcast address will automatically organize themselves in an optimum configuration based on stratum and synchronization distance.&lt;/p&gt;
&lt;p&gt;Since an intruder can impersonate a broadcast server and inject false time values, broadcast mode should always be cryptographically authenticated. By default, a broadcast association will not be mobilized unless cryptographically authenticated. If necessary, the &lt;tt&gt;auth&lt;/tt&gt; option of the &lt;tt&gt;disable&lt;/tt&gt; command will disable this feature. The feature can be selectively enabled using the &lt;tt&gt;notrust&lt;/tt&gt; option of the &lt;tt&gt;restrict&lt;/tt&gt; command.&lt;/p&gt;
&lt;p&gt;With symmetric key cryptography each broadcast server can use the same or different keys. In one scenario on a broadcast LAN, a set of broadcast clients and servers share the same key along with another set that share a different key. Only the clients with matching key will respond to a server broadcast.&lt;/p&gt;
&lt;p&gt;Public key cryptography can be used with some restrictions. If multiple servers belonging to different secure groups share the same broadcast LAN, the clients on that LAN must have the client keys for all of them. This scenario is illustrated in the example on the &lt;a href=&#34;/archives/4.2.6-series/authopt&#34;&gt;Authentication Options&lt;/a&gt; page.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;manycast-scheme&#34;&gt;Manycast Scheme&lt;/h4&gt;
&lt;p&gt;Manycast is a automatic server discovery and configuration paradigm new to NTPv4. It is intended as a means for a client to troll the nearby network neighborhood to find cooperating servers, validate them using cryptographic means and evaluate their time values with respect to other servers that might be lurking in the vicinity. It uses the grab-n&#39;-drop paradigm with the additional feature that active means are used to grab additional servers should the number of survivors fall below the &lt;tt&gt;minclock&lt;/tt&gt; option of the &lt;tt&gt;tos&lt;/tt&gt; command.&lt;/p&gt;
&lt;p&gt;The manycast paradigm is not the anycast paradigm described in RFC-1546, which is designed to find a single server from a clique of servers providing the same service. The manycast paradigm is designed to find a plurality of redundant servers satisfying defined optimality criteria.&lt;/p&gt;
&lt;p&gt;A manycast clients is configured using the &lt;tt&gt;manycastclient&lt;/tt&gt; configuration command, which is similar to the &lt;tt&gt;server&lt;/tt&gt; configuration command. It sends ordinary client mode messages, but with a broadcast address rather than a unicast address and sends only if less than &lt;tt&gt;minclock&lt;/tt&gt; associateons remain and then only at the minimum feasible rate and minimum feasible time-to-live (TTL) hops. The polling strategy is designed to reduce as much as possible the volume of broadcast messages and the effects of implosion due to near-simultaneous arrival of manycast server messages. There can be as many manycast client associations as different addresses, each one serving as a template for a future unicast client/server association.&lt;/p&gt;
&lt;p&gt;A manycast server is configured using the &lt;tt&gt;manycastserver&lt;/tt&gt; command, which listens on the specified broadcast address for manycast client messages. If a manycast server is in scope of the current TTL and is itself synchronized to a valid source and operating at a stratum level equal to or lower than the manycast client, it replies with an ordinary unicast server message.&lt;/p&gt;
&lt;p&gt;The manycast client receiving this message mobilizes a preemptable client association according to the matching manycast client template, but only if cryptographically authenticated and the server stratum is less than or equal to the client stratum.&lt;/p&gt;
&lt;p&gt;It is possible and frequently useful to configure a host as both manycast client and manycast server. A number of hosts configured this way and sharing a common multicast group address will automatically organize themselves in an optimum configuration based on stratum and synchronization distance.&lt;/p&gt;
&lt;p&gt;The use of cryptograpic authentication is always a good idea in any server descovery scheme. Both symmetric key and public key cryptography can be used in the same scenarios as described above for the broadast/multicast scheme.&lt;/p&gt;
&lt;h4 id=&#34;server-pool-scheme&#34;&gt;Server Pool Scheme&lt;/h4&gt;
&lt;p&gt;The idea of targeting servers on a random basis to distribute and balance the load is not a new one; however, the NTP pool scheme puts this on steroids. At present, several hundred operators around the globe have volunteered their servers for public access. In general, NTP is a lightweight service and servers used for other purposes don&amp;rsquo;t mind an additional small load. The trick is to randomize over the population and minimize the load on any one server while retaining the advantages of multiple servers using the NTP mitigation algorithms.&lt;/p&gt;
&lt;p&gt;To support this service the DNS for some volunteer servers as been modified to collect a number of other volunteer servers and return a randomized list in response to a DNS query. The client receiving this list mobilizes some or all of them just as in the other discovery schemes and casts off the excess.&lt;/p&gt;
&lt;p&gt;The pool scheme is configured using one or &lt;tt&gt;pool&lt;/tt&gt; commands with the DNS name &lt;tt&gt;&lt;em&gt;region&lt;/em&gt;.pool.ntp.org&lt;/tt&gt;, where &lt;tt&gt;&lt;em&gt;region&lt;/em&gt;&lt;/tt&gt; is a region of the world, country of the region or state of the country or even the whole world if absent. The &lt;tt&gt;pool&lt;/tt&gt; command can be used more than once; duplicate servers are detected and discarded. In principle, it is possible to use a configuration file containing a single line &lt;tt&gt;pool pool.ntp.org&lt;/tt&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Automatic Server Discovery Schemes</title>
      <link>/archives/4.2.8-series/discover/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.8-series/discover/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/alice51.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/%7emills/pictures.html&#34;&gt;from &lt;em&gt;Alice&amp;rsquo;s Adventures in Wonderland&lt;/em&gt;, Lewis Carroll&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Make sure who your friends are.&lt;/p&gt;
&lt;p&gt;Last update: 10-Mar-2014 05:04 UTC&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.8-series/discover/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.8-series/discover/#association-management&#34;&gt;Association Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.8-series/discover/#broadcastmulticast-scheme&#34;&gt;Broadcast/Multicast Scheme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.8-series/discover/#manycast-scheme&#34;&gt;Manycast Scheme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/4.2.8-series/discover/#server-pool-scheme&#34;&gt;Server Pool Scheme&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;introduction&#34;&gt;Introduction&lt;/h4&gt;
&lt;p&gt;This page describes the automatic server discovery schemes provided in NTPv4. There are three automatic server discovery schemes: broadcast/multicast, many cast, and server pool, which are described on this page. The broadcast/multicast and many cast schemes utilize the ubiquitous broadcast or one-to-many paradigm native to IPv4 and IPv6. The server pool scheme uses DNS to resolve addresses of multiple volunteer servers scattered throughout the world.&lt;/p&gt;
&lt;p&gt;All three schemes work in much the same way and might be described as &lt;em&gt;grab-n&#39;-prune.&lt;/em&gt; Through one means or another they grab a number of associations either directly or indirectly from the configuration file, order them from best to worst according to the NTP mitigation algorithms, and prune the surplus associations.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;association-management&#34;&gt;Association Management&lt;/h4&gt;
&lt;p&gt;All schemes use an iterated process to discover new preemptable client associations as long as the total number of client associations is less than the &lt;tt&gt;maxclock&lt;/tt&gt; option of the &lt;tt&gt;tos&lt;/tt&gt; command. The &lt;tt&gt;maxclock&lt;/tt&gt; default is 10, but it should be changed in typical configuration to some lower number, usually two greater than the &lt;tt&gt;minclock&lt;/tt&gt; option of the same command.&lt;/p&gt;
&lt;p&gt;All schemes use a stratum filter to select just those servers with stratum considered useful. This can avoid large numbers of clients ganging up on a small number of low-stratum servers and avoid servers below or above specified stratum levels. By default, servers of all strata are acceptable; however, the &lt;tt&gt;tos&lt;/tt&gt; command can be used to restrict the acceptable range from the &lt;tt&gt;floor&lt;/tt&gt; option, inclusive, to the &lt;tt&gt;ceiling&lt;/tt&gt; option, exclusive. Potential servers operating at the same stratum as the client will be avoided, unless the &lt;tt&gt;cohort&lt;/tt&gt; option is present. Additional filters can be supplied using the methods described on the &lt;a href=&#34;/archives/4.2.8-series/authentic&#34;&gt;Authentication Support&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;The pruning process uses a set of unreach counters, one for each association created by the configuration or discovery processes. At each poll interval, the counter is increased by one. If an acceptable packet arrives for a persistent (configured) or ephemeral (broadcast/multicast) association, the counter is set to zero. If an acceptable packet arrives for a preemptable (manycast, pool) association and survives the selection and clustering algorithms, the counter is set to zero. If the the counter reaches an arbitrary threshold of 10, the association becomes a candidate for pruning.&lt;/p&gt;
&lt;p&gt;The pruning algorithm is very simple. If an ephemeral or preemptable association becomes a candidate for pruning, it is immediately demobilized. If a persistent association becomes a candidate for pruning, it is not demobilized, but its poll interval is set at the maximum. The pruning algorithm design avoids needless discovery/prune cycles for associations that wander in and out of the survivor list, but otherwise have similar characteristics.&lt;/p&gt;
&lt;p&gt;Following is a summary of each scheme. Note that reference to option applies to the commands described on the &lt;a href=&#34;/archives/4.2.8-series/confopt&#34;&gt;Configuration Options&lt;/a&gt; page. See that page for applicability and defaults.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;broadcastmulticast-scheme&#34;&gt;Broadcast/Multicast Scheme&lt;/h4&gt;
&lt;p&gt;A broadcast server generates messages continuously at intervals by default 64 s and time-to-live by default 127. These defaults can be overridden by the &lt;tt&gt;minpoll&lt;/tt&gt; and &lt;tt&gt;ttl&lt;/tt&gt; options, respectively. Not all kernels support the &lt;tt&gt;ttl&lt;/tt&gt; option. A broadcast client responds to the first message received by waiting a randomized interval to avoid implosion at the server. It then polls the server in client/server mode using the &lt;tt&gt;iburst&lt;/tt&gt; option in order to quickly authenticate the server, calibrate the propagation delay and set the client clock. This normally results in a volley of six client/server exchanges at 2-s intervals during which both the synchronization and cryptographic protocols run concurrently.&lt;/p&gt;
&lt;p&gt;Following the volley, the server continues in listen-only mode and sends no further messages. If for some reason the broadcast server does not respond to these messages, the client will cease transmission and continue in listen-only mode with a default propagation delay. The volley can be avoided by using the &lt;tt&gt;broadcastdelay&lt;/tt&gt; command with nonzero argument.&lt;/p&gt;
&lt;p&gt;A server is configured in broadcast mode using the &lt;tt&gt;broadcast&lt;/tt&gt; command and specifying the broadcast address of a local interface. If two or more local interfaces are installed with different broadcast addresses, a &lt;tt&gt;broadcast&lt;/tt&gt; command is needed for each address. This provides a way to limit exposure in a firewall, for example. A broadcast client is configured using the &lt;tt&gt;broadcastclient&lt;/tt&gt; command.&lt;/p&gt;
&lt;p&gt;NTP multicast mode can be used to extend the scope using IPv4 multicast or IPv6 broadcast with defined span. The IANA has assigned IPv4 multicast address 224.0.1.1 and IPv6 address FF05::101 (site local) to NTP, but these addresses should be used only where the multicast span can be reliably constrained to protect neighbor networks. In general, administratively scoped IPv4 group addresses should be used, as described in RFC-2365, or GLOP group addresses, as described in RFC-2770.&lt;/p&gt;
&lt;p&gt;A multicast server is configured using the &lt;tt&gt;broadcast&lt;/tt&gt; command, but specifying a multicast address instead of a broadcast address. A multicast client is configured using the &lt;tt&gt;multicastclient&lt;/tt&gt; command specifying a list of one or more multicast addresses. Note that there is a subtle distinction between the IPv4 and IPv6 address families. The IPv4 broadcast or mulitcast mode is determined by the IPv4 class. For IPv6 the same distinction can be made using the link-local prefix FF02 for each interface and site-local prefix FF05 for all interfaces.&lt;/p&gt;
&lt;p&gt;It is possible and frequently useful to configure a host as both broadcast client and broadcast server. A number of hosts configured this way and sharing a common broadcast address will automatically organize themselves in an optimum configuration based on stratum and synchronization distance.&lt;/p&gt;
&lt;p&gt;Since an intruder can impersonate a broadcast server and inject false time values, broadcast mode should always be cryptographically authenticated. By default, a broadcast association will not be mobilized unless cryptographically authenticated. If necessary, the &lt;tt&gt;auth&lt;/tt&gt; option of the &lt;tt&gt;disable&lt;/tt&gt; command will disable this feature. The feature can be selectively enabled using the &lt;tt&gt;notrust&lt;/tt&gt; option of the &lt;tt&gt;restrict&lt;/tt&gt; command.&lt;/p&gt;
&lt;p&gt;With symmetric key cryptography each broadcast server can use the same or different keys. In one scenario on a broadcast LAN, a set of broadcast clients and servers share the same key along with another set that share a different key. Only the clients with matching key will respond to a server broadcast. Further information is on the &lt;a href=&#34;/archives/4.2.8-series/authentic&#34;&gt;Authentication Support&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;Public key cryptography can be used with some restrictions. If multiple servers belonging to different secure groups share the same broadcast LAN, the clients on that LAN must have the client keys for all of them. This scenario is illustrated in the example on the &lt;a href=&#34;/archives/4.2.8-series/autokey&#34;&gt;Autokey Public Key Authentication&lt;/a&gt; page.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;manycast-scheme&#34;&gt;Manycast Scheme&lt;/h4&gt;
&lt;p&gt;Manycast is an automatic server discovery and configuration paradigm new to NTPv4. It is intended as a means for a client to troll the nearby network neighborhood to find cooperating servers, validate them using cryptographic means and evaluate their time values with respect to other servers that might be lurking in the vicinity. It uses the grab-n&#39;-drop paradigm with the additional feature that active means are used to grab additional servers should the number of associations fall below the &lt;tt&gt;maxclock&lt;/tt&gt; option of the &lt;tt&gt;tos&lt;/tt&gt; command.&lt;/p&gt;
&lt;p&gt;The manycast paradigm is not the anycast paradigm described in RFC-1546, which is designed to find a single server from a clique of servers providing the same service. The manycast paradigm is designed to find a plurality of redundant servers satisfying defined optimality criteria.&lt;/p&gt;
&lt;p&gt;A manycast client is configured using the &lt;tt&gt;manycastclient&lt;/tt&gt; configuration command, which is similar to the &lt;tt&gt;server&lt;/tt&gt; configuration command. It sends ordinary client mode messages, but with a broadcast address rather than a unicast address and sends only if less than &lt;tt&gt;maxclock&lt;/tt&gt; associations remain and then only at the minimum feasible rate and minimum feasible time-to-live (TTL) hops. The polling strategy is designed to reduce as much as possible the volume of broadcast messages and the effects of implosion due to near-simultaneous arrival of manycast server messages. There can be as many manycast client associations as different addresses, each one serving as a template for future unicast client/server associations.&lt;/p&gt;
&lt;p&gt;A manycast server is configured using the &lt;tt&gt;manycastserver&lt;/tt&gt; command, which listens on the specified broadcast address for manycast client messages. If a manycast server is in scope of the current TTL and is itself synchronized to a valid source and operating at a stratum level equal to or lower than the manycast client, it replies with an ordinary unicast server message.&lt;/p&gt;
&lt;p&gt;The manycast client receiving this message mobilizes a preemptable client association according to the matching manycast client template. This requires the server to be cryptographically authenticated and the server stratum to be less than or equal to the client stratum.&lt;/p&gt;
&lt;p&gt;It is possible and frequently useful to configure a host as both manycast client and manycast server. A number of hosts configured this way and sharing a common multicast group address will automatically organize themselves in an optimum configuration based on stratum and synchronization distance.&lt;/p&gt;
&lt;p&gt;The use of cryptograpic authentication is always a good idea in any server discovery scheme. Both symmetric key and public key cryptography can be used in the same scenarios as described above for the broadast/multicast scheme.&lt;/p&gt;
&lt;h4 id=&#34;server-pool-scheme&#34;&gt;Server Pool Scheme&lt;/h4&gt;
&lt;p&gt;The idea of targeting servers on a random basis to distribute and balance the load is not a new one; however, the NTP pool scheme puts this on steroids. At present, several thousand operators around the globe have volunteered their servers for public access. In general, NTP is a lightweight service and servers used for other purposes don&amp;rsquo;t mind an additional small load. The trick is to randomize over the population and minimize the load on any one server while retaining the advantages of multiple servers using the NTP mitigation algorithms.&lt;/p&gt;
&lt;p&gt;To support this service, custom DNS software is used by pool.ntp.org and its subdomains to discover a random selection of participating servers in response to a DNS query. The client receiving this list mobilizes some or all of them, similar to the manycast discovery scheme, and prunes the excess. Unlike &lt;tt&gt;manycastclient&lt;/tt&gt;, cryptographic authentication is not required. The pool scheme solicits a single server at a time, compared to &lt;tt&gt;manycastclient&lt;/tt&gt; which solicits all servers within a multicast TTL range simultaneously. Otherwise, the pool server discovery scheme operates as manycast does.&lt;/p&gt;
&lt;p&gt;The pool scheme is configured using one or more &lt;tt&gt;pool&lt;/tt&gt; commands with DNS names indicating the pool from which to draw. The &lt;tt&gt;pool&lt;/tt&gt; command can be used more than once; duplicate servers are detected and discarded. In principle, it is possible to use a configuration file containing a single line &lt;tt&gt;pool pool.ntp.org&lt;/tt&gt;. The &lt;a href=&#34;http://www.pool.ntp.org/en/use.html&#34;&gt;NTP Pool Project&lt;/a&gt; offers instructions on using the pool with the &lt;tt&gt;server&lt;/tt&gt; command, which is suboptimal but works with older versions of &lt;tt&gt;ntpd&lt;/tt&gt; predating the &lt;tt&gt;pool&lt;/tt&gt; command. With recent ntpd, consider replacing the multiple &lt;tt&gt;server&lt;/tt&gt; commands in their example with a single &lt;tt&gt;pool&lt;/tt&gt; command.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Available Hints</title>
      <link>/archives/hints/toc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/hints/toc/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/hints/a-ux&#34;&gt;A-UX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/hints/aix&#34;&gt;AIX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/hints/bsdi&#34;&gt;BSDi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/hints/changes&#34;&gt;Changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/hints/decosf1&#34;&gt;DEC OSF/1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/hints/decosf2&#34;&gt;DEC OSF/1 V2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/hints/svr4-dell&#34;&gt;DELL SVR4 Hints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/hints/freebsd&#34;&gt;FreeBSD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/hints/hpux&#34;&gt;HPUX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/hints/linux&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/hints/mpeix&#34;&gt;MPE/iX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/hints/notes-xntp-v3&#34;&gt;Notes for NTPv3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/hints/refclocks&#34;&gt;NTPv3 refclocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/hints/parse&#34;&gt;parse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/hints/rs6000&#34;&gt;RS/6000&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/hints/sco&#34;&gt;SCO Unix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/hints/sgi&#34;&gt;SGI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/hints/solaris&#34;&gt;Solaris&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/hints/solaris.xtra.4023118&#34;&gt;Solaris Bug #4023118&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/hints/solaris.xtra.4095849&#34;&gt;Solaris Bug #4095849&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/hints/solaris.xtra.patchfreq&#34;&gt;Solaris frequency patch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/hints/svr4_package&#34;&gt;Solaris NTPv3 package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/hints/solaris-dosynctodr&#34;&gt;Solaris Symptoms and Resolutions Article 19195&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/hints/solaris.xtra.S99ntpd&#34;&gt;Solaris S99 script for NTPv3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/hints/sun4&#34;&gt;SunOS 4.1.1 and 4.1.3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/hints/todo&#34;&gt;Todo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/hints/vxworks&#34;&gt;vxWorks port&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/hints/winnt&#34;&gt;Windows NT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Bancomm bc635VME Time and Frequency Processor</title>
      <link>/archives/drivers/driver16/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/drivers/driver16/</guid>
      <description>
        
        
        &lt;p&gt;Last update: 21-Oct-2010 23:44 UTC&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver16/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver16/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver16/#additional-information&#34;&gt;Additional Information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;Address: 127.127.16.&lt;em&gt;u&lt;/em&gt;&lt;br&gt;
Reference ID: BTFP&lt;br&gt;
Driver ID: GPS_BANCOMM&lt;br&gt;
Bancomm Device &lt;tt&gt;/dev/btfp0&lt;/tt&gt;&lt;br&gt;
Requires: Bancomm bc635 TFP device module driver for SunOS 4.x/SunOS 5.x&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;This is the clock driver for the Bancomm bc635VME Time and Frequency Processor. It requires the BANCOMM bc635VME bc350VXI Time and Frequency Processor Module Driver for SunOS 4.x/SunOS 5.x UNIX Systems.&lt;/p&gt;
&lt;p&gt;Most of this code is originally from refclock_bancomm.c with thanks. It has been modified and tested on an UltraSparc IIi-cEngine running Solaris 2.6. A port for HPUX is not available henceforth.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;additional-information&#34;&gt;Additional Information&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;/archives/4.2.8-series/refclock&#34;&gt;Reference Clock Drivers&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: BSDi Hints</title>
      <link>/archives/hints/bsdi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/hints/bsdi/</guid>
      <description>
        
        
        &lt;div id=&#34;body&#34;&gt;
&lt;pre&gt;

Author:		Bdale Garbee, bdale@gag.com
Last revision:	27Oct94 (Paul Vixie)

Included in this distribution of XNTP is a configuration file suitable
for use with BSDI&#39;s BSD/OS 1.1 (formerly BSD/386 1.1).  On this system,
the &#34;cc&#34; command is GCC 1.4x rather than PCC or GCC 2.x.  It is imperative
that &#34;cc&#34; be used since it predefines the symbol __bsdi__; if you want to
use another compiler you will need to add -D__bsdi__ to catch the various
#ifdef&#39;s required for this system.

The Kinemetrics/Truetime GPS-TM/TMD driver is known to work on this system.
The GPS-805 and GOES should also work fine.  Hell, they should all work fine
but it&#39;s hard to test very many locally.

Due to BNR2&#39;s strict interpretation of POSIX and XNTP&#39;s use of SIGIO, BSD/OS
can only handle one refclock per daemon.  We&#39;re working this out with the
system architects.

The config file is machine/bsdi, and the following steps should be all that
are required to install and use the bits.

Note that you will need GNU sed; the version supplied with BSD/OS 1.1 loops
endlessly during &#34;make refconf&#34;.  Likewise you should get GNU make, which
the instructions below assume that you have put in /usr/local/bin/gnumake.

To build the software:

	rm -f Config.local
	gnumake refconf
	gnumake MAKE=gnumake

To install the software:

	gnumake install

	This will place all of the executables in /usr/local/etc.  The config
	file is expected to be /usr/local/etc/xntp.conf and the key file for
	the optional authentication is /etc/ntp.keys.

	Craft a config file and a key file, and put them in the right places.
	There is information on how to do this elsewhere in the documentation,
	the only thing I&#39;ll mention is that I put the drift file in 
	/var/log/ntp.drift, and the authdelay on my 486DX/50 system is 
	0.000064\.  Your mileage will vary, learn to use the authspeed tools
	if you&#39;re going to authenticate.

	In the file /etc/rc.local, make sure that the invocation of ntpd is
	commented out, and add an invocation of xntpd.  Here&#39;s what I&#39;m using:

		echo -n &#39;starting local daemons:&#39;

		if [ -f /etc/ntp.keys -a -f /usr/local/etc/xntp.conf ]; then
		    echo -n &#39; xntpd&#39;;           /usr/local/etc/xntpd
		fi

		#XXX# echo -n &#39; ntpd&#39;;          /usr/libexec/ntpd -t

At this point, you should be good to go.  Try running /usr/local/etc/xntpd and
using ntpq or xntpdc to see if things are working, then pay attention the next
time you reboot to make sure that xntpd is being invoked, and use ntpq or
xntpdc again to make sure all is well.  

Enjoy!

&lt;/pre&gt;
&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Archives: Build Options</title>
      <link>/archives/4.2.6-series/config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.6-series/config/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/pogo3a.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;from &lt;em&gt;Pogo&lt;/em&gt;, Walt Kelly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Gnu autoconfigure tools are in the backpack.&lt;/p&gt;
&lt;p&gt;Last update: Monday, December 15, 2008 20:54 UTC&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Most modern software distributions include an autoconfigure utility which customizes the build and install configuration according to the specific hardware, operating system and file system conventions. For NTP this utility is called &lt;tt&gt;configure&lt;/tt&gt;, which is run before building and installing the program components. For most installations no additional actions are required other than running &lt;tt&gt;configure&lt;/tt&gt; with no options. However, it is possible to customize the build and install configuration through the use of &lt;tt&gt;configure&lt;/tt&gt; options.&lt;/p&gt;
&lt;p&gt;The available options, together with a concise description, can be displayed by running &lt;tt&gt;configure&lt;/tt&gt; with the &lt;tt&gt;&amp;ndash;help&lt;/tt&gt; option. Various options can be used to reduce the memory footprint, adjust the scheduling priority, enable or disable debugging support or reference clock driver support. The options can be used to specify where to install the program components or where to find various libraries if they are not in the default place.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Build Options</title>
      <link>/archives/4.2.8-series/config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/4.2.8-series/config/</guid>
      <description>
        
        
        &lt;p&gt;&lt;img src=&#34;/archives/pic/pogo3a.gif&#34; alt=&#34;gif&#34;&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills/pictures.html&#34;&gt;from &lt;em&gt;Pogo&lt;/em&gt;, Walt Kelly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Gnu autoconfigure tools are in the backpack.&lt;/p&gt;
&lt;p&gt;Last update: 10-Mar-2014 04:59 UTC&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Most modern software distributions include an autoconfigure utility which customizes the build and install configuration according to the specific hardware, operating system and file system conventions. For NTP this utility is called &lt;tt&gt;configure&lt;/tt&gt;, which is run before building and installing the program components. For most installations no additional actions are required other than running &lt;tt&gt;configure&lt;/tt&gt; with no options. However, it is possible to customize the build and install configuration through the use of &lt;tt&gt;configure&lt;/tt&gt; options.&lt;/p&gt;
&lt;p&gt;The available options, together with a concise description, can be displayed by running &lt;tt&gt;configure&lt;/tt&gt; with the &lt;tt&gt;&amp;ndash;help&lt;/tt&gt; option. Various options can be used to reduce the memory footprint, adjust the scheduling priority, enable or disable debugging support or reference clock driver support. The options can be used to specify where to install the program components or where to find various libraries if they are not in the default place.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
