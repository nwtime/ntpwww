<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NTP: Network Time Protocol – 3-5.93e</title>
    <link>/archives/3-5.93e/</link>
    <description>Recent content in 3-5.93e on NTP: Network Time Protocol</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="/archives/3-5.93e/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Archives: </title>
      <link>/archives/3-5.93e/toc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/toc/</guid>
      <description>
        
        
        

&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;
&lt;p&gt;4.2.8p15 is the latest stable and recommended version of NTP. Click &lt;a href=&#34;/archives/4.2.8-series&#34;&gt;here&lt;/a&gt; to read the latest version of the docs.&lt;/p&gt;
&lt;p&gt;3-5.93e is the last released version for the deprecated NTPv3. It was released in November, 1998. Click &lt;a href=&#34;/archives/3-5.93e&#34;&gt;here&lt;/a&gt; to read the 3-5.93e version of the docs.&lt;/p&gt;

&lt;/div&gt;


      </description>
    </item>
    
    <item>
      <title>Archives: A Kernel Model for Precision Timekeeping</title>
      <link>/archives/3-5.93e/kern/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/kern/</guid>
      <description>
        
        
        &lt;p&gt;The technical memorandum: &lt;cite&gt;A Kernel Model for Precision Timekeeping&lt;/cite&gt; &lt;a href=&#34;https://www.eecis.udel.edu/~mills/database/memos/memo96b.ps&#34;&gt;(PostScript)&lt;/a&gt; describes an engineering model which implements a precision time-of-day function for a generic operating system. The model is based on the principles of disciplined oscillators using phase-lock loops (PLL) and frequency-lock loops (FLL) often found in the engineering literature. The model implements a hybrid PLL/FLL discipline algorithm implemented in the kernel. The hybrid loop provides automatic time and frequency steering with update intervals from a few seconds to several hours.&lt;/p&gt;
&lt;p&gt;The hybrid PLL/FLL has been implemented in the Unix kernels for several workstations, including those made by Sun Microsystems, Digital and Hewlett Packard. The model changes the way the system clock is adjusted in time and frequency, as well as provides mechanisms to discipline its time and frequency to an external precision timing source, such as a pulse-per-second (PPS) signal. The model incorporates a generic system-call interface for use with the Network Time Protocol (NTP) or similar time synchronization protocol. The NTP Version 3 daemon &lt;tt&gt;xntpd&lt;/tt&gt; operates with this model to provide synchronization limited in principle only by the accuracy and stability of the external timing source.&lt;/p&gt;
&lt;p&gt;This memorandum does not propose a standard protocol, specification or algorithm. It is intended to provoke comment, refinement and implementations for kernels not considered herein. While a working knowledge of NTP is not required for an understanding of the design principles or implementation of the model, it may be helpful in understanding how the model behaves in a fully functional timekeeping system.&lt;/p&gt;
&lt;p&gt;The model has been implemented in the Unix kernels for Sun Microsystems, Digital and Hewlett Packard workstations. In addition, for the Digital machines the model provides improved precision to one microsecond. Since these specific implementations involve modifications to licensed code, they cannot be provided directly. Inquiries should be directed to the manufacturer&amp;rsquo;s representatives. However, the engineering model for these implementations, including a simulator with code segments almost identical to the implementations, but not involving licensed code, is available at &lt;a href=&#34;https://www.eecis.udel.edu/~ntp/ntp_spool/software/kernel.tar.Z&#34;&gt;kernel.tar.Z&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are two new system calls defined in the model, &lt;tt&gt;ntp_gettime()&lt;/tt&gt;, which returns a structure including the
current time, estimated error and maximum error, and &lt;tt&gt;ntp_adjtime()&lt;/tt&gt;, which provides a means to adjust kernel
variables, including the current time and frequency offsets. Further information on the calling sequences and variable definitions are in the &lt;tt&gt;./include/sys/timex.h&lt;/tt&gt; file.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: A Kernel Programming Interface for Precision Time Signals</title>
      <link>/archives/3-5.93e/kernpps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/kernpps/</guid>
      <description>
        
        
        &lt;p&gt;The technical memorandum: &lt;cite&gt;A Kernel Programming Interface for Precision Time Signals&lt;/cite&gt; &lt;a href=&#34;https://www.eecis.udel.edu/~mills/database/memos/memo96c.ps&#34;&gt;(PostScript)&lt;/a&gt; describes a proposed programming interface for external precision time signals, such as the pulse-per-second (PPS) signal generated by some radio clocks and cesium oscillators.&lt;/p&gt;
&lt;p&gt;The memorandum argues for a generic capability in the ubiquitous Unix kernel, which could be used for a wide variety of measurement applications, including network time synchronization and experiments involving performance measurement and evaluation of computer networks and transmission systems. The hardware to do this requires only a serial port and a modem control lead, such as the data carrier detect (DCD) lead, which can be driven by an external source via a level converter/pulse generator.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Access Control Options</title>
      <link>/archives/3-5.93e/accopt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/accopt/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/accopt/#access-control-support&#34;&gt;Access Control Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/accopt/#access-control-commands&#34;&gt;Access Control Commands&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;access-control-support&#34;&gt;Access Control Support&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;xntpd&lt;/tt&gt; implements a general purpose address-and-mask based restriction list. The list is sorted by address and by mask, and the list is searched in this order for matches, with the last match found defining the restriction flags associated with the incoming packets. The source address of incoming packets is used for the match, with the 32-bit address being and&amp;rsquo;ed with the mask associated with the restriction entry and then compared with the entry&amp;rsquo;s address (which has also been and&amp;rsquo;ed with the mask) to look for a match. Additional information and examples can be found in the &lt;a href=&#34;/archives/3-5.93e/notes&#34;&gt;Notes on Configuring NTP and Setting up a NTP Subnet&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;The restriction facility was implemented in conformance with the access policies for the original NSFnet backbone time servers. While this facility may be otherwise useful for keeping unwanted or broken remote time servers from affecting your own, it should not be considered an alternative to the standard NTP authentication facility. Source address based restrictions are easily circumvented by a determined cracker.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;access-control-commands&#34;&gt;Access Control Commands&lt;/h4&gt;
&lt;dt id=&#34;restrict&#34;&gt;&lt;tt&gt;_numeric_address_ [mask _numeric_mask_] [_flag_][...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The &lt;tt&gt;&lt;em&gt;numeric_address&lt;/em&gt;&lt;/tt&gt; argument, expressed in dotted-quad form, is the address of an host or network. The &lt;tt&gt;mask&lt;/tt&gt; argument, also expressed in dotted-quad form, defaults to &lt;tt&gt;255.255.255.255&lt;/tt&gt;, meaning that the &lt;tt&gt;numeric_address&lt;/tt&gt; is treated as the address of an individual host. A default entry (address &lt;tt&gt;0.0.0.0&lt;/tt&gt;, mask &lt;tt&gt;0.0.0.0&lt;/tt&gt;) is always included and, given the sort algorithm, is always the first entry in the list. Note that, while &lt;tt&gt;numeric_address&lt;/tt&gt; is normally given in dotted-quad format, the text string &lt;tt&gt;default&lt;/tt&gt;, with no mask option, may be used to indicate the default entry.&lt;/p&gt;
&lt;p&gt;In the current implementation, &lt;tt&gt;flag&lt;/tt&gt; always restricts access, i.e., an entry with no flags indicates that free access to the server is to be given. The flags are not orthogonal, in that more restrictive flags will often make less restrictive ones redundant. The flags can generally be classed into two catagories, those which restrict time service and those which restrict informational queries and attempts to do run-time reconfiguration of the server. One or more of the following flags may be specified:&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;ignore&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Ignore all packets from hosts which match this entry. If this flag is specified neither queries nor time server polls will be responded to.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;noquery&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Ignore all NTP mode 6 and 7 packets (i.e. information queries and configuration requests) from the source. Time service is not affected.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;nomodify&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Ignore all NTP mode 6 and 7 packets which attempt to modify the state of the server (i.e. run time reconfiguration). Queries which return information are permitted.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;notrap&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Decline to provide mode 6 control message trap service to matching hosts. The trap service is a subsystem of the mode 6 control message protocol which is intended for use by remote event logging programs.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;lowpriotrap&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Declare traps set by matching hosts to be low priority. The number of traps a server can maintain is limited (the current limit is 3). Traps are usually assigned on a first come, first served basis, with later trap requestors being denied service. This flag modifies the assignment algorithm by allowing low priority traps to be overridden by later requests for normal priority traps.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;noserve&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Ignore NTP packets whose mode is other than 6 or 7. In effect, time service is denied, though queries may still be permitted.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;nopeer&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Provide stateless time service to polling hosts, but do not allocate peer memory resources to these hosts even if they otherwise might be considered useful as future synchronization partners.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;notrust&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Treat these hosts normally in other respects, but never use them as synchronization sources.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;limited&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    These hosts are subject to limitation of number of clients from the same net. Net in this context refers to the IP notion of net (class A, class B, class C, etc.). Only the first &lt;tt&gt;client_limit&lt;/tt&gt; hosts that have shown up at the server and that have been active during the last &lt;tt&gt;client_limit_period&lt;/tt&gt; seconds are accepted. Requests from other clients from the same net are rejected. Only time request packets are taken into account. Query packets sent by the &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;xntpdc&lt;/tt&gt; programs are not subject to these limits. A history of clients is kept using the monitoring capability of &lt;tt&gt;xntpd&lt;/tt&gt;. Thus, monitoring is always active as long as there is a restriction entry with the &lt;tt&gt;limited&lt;/tt&gt; flag.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;ntpport&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    This is actually a match algorithm modifier, rather than a restriction flag. Its presence causes the restriction entry to be matched only if the source port in the packet is the standard NTP UDP port (123). Both &lt;tt&gt;ntpport&lt;/tt&gt; and &lt;tt&gt;non-ntpport&lt;/tt&gt; may be specified. The &lt;tt&gt;ntpport&lt;/tt&gt; is considered more specific and is sorted later in the list.&lt;/p&gt;
&lt;p&gt;Default restriction list entries with the flags &lt;tt&gt;ignore, ntpport&lt;/tt&gt;, for each of the local host&amp;rsquo;s interface addresses are inserted into the table at startup to prevent the server from attempting to synchronize to its own time. A default entry is also always present, though if it is otherwise unconfigured; no flags are associated with the default entry (i.e., everything besides your own NTP server is unrestricted).&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;clientlimit _limit_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Set the &lt;tt&gt;client_limit&lt;/tt&gt; variable, which limits the number of simultaneous access-controlled clients. The default value for this variable is 3.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;clientperiod _period_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Set the &lt;tt&gt;client_limit_period&lt;/tt&gt; variable, which specifies the number of seconds after which a client is considered inactive and thus no longer is counted for client limit restriction. The default value for this variable is 3600 seconds.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Arbiter 1088A/B GPS Receiver</title>
      <link>/archives/3-5.93e/driver11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/driver11/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver11/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver11/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver11/#monitor-data&#34;&gt;Monitor Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver11/#fudge-factors&#34;&gt;Fudge Factors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver11/#additional-information&#34;&gt;Additional Information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;Address: 127.127.11.&lt;em&gt;u&lt;/em&gt;&lt;br&gt;
Reference ID: &lt;tt&gt;GPS&lt;/tt&gt;&lt;br&gt;
Driver ID: &lt;tt&gt;GPS_ARBITER&lt;/tt&gt;&lt;br&gt;
Serial Port: &lt;tt&gt;/dev/gps_u_&lt;/tt&gt;; 9600 baud, 8-bits, no parity&lt;br&gt;
Features: &lt;tt&gt;tty_clk&lt;/tt&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;This driver supports the Arbiter 1088A/B Satellite Controlled Clock. The claimed accuracy of this clock is 100 ns relative to the PPS output when receiving four or more satellites.&lt;/p&gt;
&lt;p&gt;The receiver should be configured before starting the NTP daemon, in order to establish reliable position and operating conditions. It does not initiate surveying or hold mode. For use with NTP, the daylight savings time feature should be disables (&lt;tt&gt;D0&lt;/tt&gt; command) and the broadcast mode set to operate in UTC (&lt;tt&gt;BU&lt;/tt&gt; command).&lt;/p&gt;
&lt;p&gt;The timecode format supported by this driver is selected by the poll sequence &lt;tt&gt;B5&lt;/tt&gt;, which initiates a line in the following format to be repeated once per second until turned off by the &lt;tt&gt;B0&lt;/tt&gt; command.&lt;/p&gt;
&lt;p&gt;Format &lt;tt&gt;B5&lt;/tt&gt; (24 ASCII printing characters):&lt;/p&gt;
&lt;pre&gt;
&amp;lsaquo;cr&amp;rsaquo;&amp;lsaquo;lf&amp;rsaquo;i yy ddd hh:mm:ss.000bbb
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;on-time&lt;/code&gt; = ‹cr›&lt;/p&gt;
&lt;p&gt;&lt;code&gt;i&lt;/code&gt; = synchronization flag (&lt;code&gt;&#39; &#39;&lt;/code&gt; = locked, &lt;code&gt;?&lt;/code&gt; = unlocked)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;yy&lt;/code&gt; = year of century&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ddd&lt;/code&gt; = day of year&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hh:mm:ss&lt;/code&gt; = hours, minutes, seconds&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.000&lt;/code&gt; = fraction of second (not used)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bbb&lt;/code&gt; = tailing spaces for fill&lt;/p&gt;
&lt;p&gt;The alarm condition is indicated by a &lt;code&gt;?&lt;/code&gt; at &lt;code&gt;i&lt;/code&gt;, which indicates the receiver is not synchronized. In normal operation, a line consisting of the timecode followed by the time quality character &lt;code&gt;TQ&lt;/code&gt; followed by the receiver status string &lt;code&gt;SR&lt;/code&gt; is written to the clockstats file.&lt;/p&gt;
&lt;p&gt;The time quality character is encoded in IEEE P1344 standard:&lt;/p&gt;
&lt;p&gt;Format &lt;tt&gt;TQ&lt;/tt&gt; (IEEE P1344 estimated worst-case time quality)&lt;/p&gt;
&lt;pre&gt;0       clock locked, maximum accuracy
F       clock failure, time not reliable
4       clock unlocked, accuracy &lt; 1 us
5       clock unlocked, accuracy &lt; 10 us
6       clock unlocked, accuracy &lt; 100 us
7       clock unlocked, accuracy &lt; 1 ms
8       clock unlocked, accuracy &lt; 10 ms
9       clock unlocked, accuracy &lt; 100 ms
A       clock unlocked, accuracy &lt; 1 s
B       clock unlocked, accuracy &lt; 10 s&lt;/pre&gt;
&lt;p&gt;The status string is encoded as follows:&lt;/p&gt;
&lt;p&gt;Format &lt;tt&gt;SR&lt;/tt&gt; (25 ASCII printing characters)&lt;/p&gt;
&lt;pre&gt;V=vv S=ss T=t P=pdop E=ee&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;vv&lt;/code&gt; = satellites visible&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ss&lt;/code&gt; = relative signal strength&lt;/p&gt;
&lt;p&gt;&lt;code&gt;t&lt;/code&gt; = satellites tracked&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pdop&lt;/code&gt; = position dilution of precision (meters)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ee&lt;/code&gt; = hardware errors&lt;/p&gt;
&lt;p&gt;A three-stage median filter is used to reduce jitter and provide a dispersion measure. The driver makes no attempt to correct for the intrinsic jitter of the radio itself.&lt;/p&gt;
&lt;h4 id=&#34;monitor-data&#34;&gt;Monitor Data&lt;/h4&gt;
&lt;p&gt;The driver writes each timecode as received to the &lt;tt&gt;clockstats&lt;/tt&gt; file. When enabled by the &lt;tt&gt;flag4&lt;/tt&gt; fudge flag, an additional line containing the latitude, longitude, elevation and optional deviation data is written to the &lt;tt&gt;clockstats&lt;/tt&gt; file. The deviation data operates with an external pulse-per-second (PPS) input, such as a cesium oscillator or another radio clock. The PPS input should be connected to the B event channel and the radio initialized for deviation data on that channel. The deviation data consists of the mean offset and standard deviation of the external PPS signal relative the GPS signal, both in microseconds over the last 16 seconds.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;fudge-factors&#34;&gt;Fudge Factors&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;time1 _time_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the time offset calibration factor, in seconds and fraction, with default 0.0. For a calibrated Sun IPC, the correct value is about .0065.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;time2 _time_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;stratum _number_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the driver stratum, in decimal from 0 to 15, with default 0.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;refid _string_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the driver reference identifier, an ASCII string from one to four characters, with default &lt;tt&gt;GPS&lt;/tt&gt;.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag1 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag2 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag3 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enable &lt;tt&gt;ppsclock&lt;/tt&gt; line discipline/streams module if set.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag4 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enable extended &lt;tt&gt;clockstats&lt;/tt&gt; recording if set.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;additional-information&#34;&gt;Additional Information&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;/archives/3-5.93e/refclock&#34;&gt;Reference Clock Drivers&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Arcron MSF Receiver</title>
      <link>/archives/3-5.93e/driver27/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/driver27/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver27/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver27/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver27/#monitor-data&#34;&gt;Monitor Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver27/#fudge-factors&#34;&gt;Fudge Factors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver27/#additional-information&#34;&gt;Additional Information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;Address: 127.127.27.&lt;em&gt;u&lt;/em&gt;&lt;br&gt;
Reference ID: &lt;tt&gt;MSF&lt;/tt&gt;&lt;br&gt;
Driver ID: &lt;tt&gt;ARCRON_MSF&lt;/tt&gt;&lt;br&gt;
Serial Port: &lt;tt&gt;/dev/arc_u_&lt;/tt&gt;; 300 baud, 8-bits, 2-stop, no parity&lt;br&gt;
Features: &lt;tt&gt;tty_clk&lt;/tt&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;This driver supports the Arcron MSF receiver, and would probably also support the DCF77 variant of the same clock. The clock reports its ID as &amp;ldquo;&lt;tt&gt;MSFa&lt;/tt&gt;&#39;&#39; to indicate MSF as a source and the use of the ARCRON driver.&lt;/p&gt;
&lt;p&gt;This documentation describes version V1.1 (1997/06/23) of the source and has been tested (amongst others) against xntpd3-5.90 on Solaris-1 (SunOS 4.1.3_U1 on an SS1 serving as a router and firewall) and against xntpd3-5.90 on Solaris-2.5 (on a SS1+ and TurboSPARC 170MHz). This code will probably work, and show increased stability, reduced jitter and more efficiency (fewer context switches) with the &lt;tt&gt;tty_clk&lt;/tt&gt; discipline/STREAMS module installed, but this has not been tested. For a to-do list see the comments at the start of the code.&lt;/p&gt;
&lt;p&gt;This code has been significantly slimmed down since the V1.0 version, roughly halving the memory footprint of its code and data.&lt;/p&gt;
&lt;p&gt;This driver is designed to allow the unit to run from batteries as designed, for something approaching the 2.5 years expected in the usual stand-alone mode, but no battery-life measurements have been taken.&lt;/p&gt;
&lt;p&gt;Much of this code is originally from the other refclock driver files with thanks. The code was originally made to work with the clock by &lt;a href=&#34;mailto:derek@toybox.demon.co.uk&#34;&gt;Derek Mulcahy&lt;/a&gt;, with modifications by &lt;a href=&#34;mailto:d@hd.org&#34;&gt;Damon Hart-Davis&lt;/a&gt;. Thanks also to &lt;a href=&#34;mailto:lyndond@sentinet.co.uk&#34;&gt;Lyndon David&lt;/a&gt; for some of the specifications of the clock.&lt;/p&gt;
&lt;p&gt;There is support for a Tcl/Tk monitor written by Derek Mulcahy that examines the output stats; see the &lt;a href=&#34;http://www2.exnet.com/NTP/ARC/ARC.html&#34;&gt;ARC Rugby MSF Receiver&lt;/a&gt; page for more details and the code.&lt;/p&gt;
&lt;p&gt;Look at the notes at the start of the code for further information; some of the more important details follow.&lt;/p&gt;
&lt;p&gt;The driver interrogates the clock at each poll (ie every 64s by default) for a timestamp. The clock responds at the start of the next second (with the start bit of the first byte being on-time). The time is in &amp;lsquo;local&amp;rsquo; format, including the daylight savings adjustment when it is in effect. The driver code converts the time back to UTC.&lt;/p&gt;
&lt;p&gt;The clock claims to be accurate to within about 20ms of the MSF-broadcast time, and given the low data transmission speed from clock to host, and the fact that the clock is not in continuous sync with MSF, it seems sensible to set the `precision&#39; of this clock to -5 or -4, -4 being used in this code, which builds in a reported dispersion of over 63ms (ie says &amp;ldquo;This clock is not very good.&amp;quot;). You can improve the reported precision to -4 (and thus reduce the base dispersion to about 31ms) by setting the fudge &lt;tt&gt;flag3&lt;/tt&gt; to &lt;tt&gt;1&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Even a busy and slow IP link can yield lower dispersions than this from polls of primary time servers on the Internet, which reinforces the idea that this clock should be used as a backup in case of problems with such an IP link, or in the unfortunate event of failure of more accurate sources such as GPS.&lt;/p&gt;
&lt;p&gt;By default this clock reports itself to be at stratum 2 rather than the usual stratum 0 for a refclock, because it is not really suited to be used as other than a backup source. The stratum reported can be changed with the &lt;tt&gt;stratum&lt;/tt&gt; directive to be whatever you like. After careful monitoring of your clock, and appropriate choice of the &lt;tt&gt;time1&lt;/tt&gt; fudge factor to remove systematic errors in the clock&amp;rsquo;s reported time, you might fudge the clock to stratum 1 to allow a stratum-2 secondary server to sync to it.&lt;/p&gt;
&lt;p&gt;The driver code arranges to resync the clock to MSF at intervals of a little less than an hour (deliberately avoiding the same time each hour to avoid any systematic problems with the signal or host). Whilst resyncing, the driver supplements the normal polls for time from the clock with polls for the reception signal quality reported by the clock. If the signal quality is too low (0&amp;ndash;2 out of a range of 0&amp;ndash;5), we chose not to trust the clock until the next resync (which we bring forward by about half an hour). If we don&amp;rsquo;t catch the resync, and so don&amp;rsquo;t know the signal quality, we do trust the clock (because this would generally be when the signal is very good and a resync happens quickly), but we still bring the next resync forward and reduce the reported precision (and thus increase reported dispersion).&lt;/p&gt;
&lt;p&gt;If we force resyncs to MSF too often we will needlessly exhaust the batteries the unit runs from. During clock resync this driver tries to take enough time samples to avoid &lt;tt&gt;xntpd&lt;/tt&gt; losing sync in case this clock is the current peer. By default the clock would only resync to MSF about once per day, which would almost certainly not be acceptable for NTP purposes.&lt;/p&gt;
&lt;p&gt;The driver does not force an immediate resync of the clock to MSF when it starts up to avoid excessive battery drain in case &lt;tt&gt;xntpd&lt;/tt&gt; is going to be repeatedly restarted for any reason, and also to allow enough samples of the clock to be taken for &lt;tt&gt;xntpd&lt;/tt&gt; to sync immediately to this clock (and not remain unsynchronised or to sync briefly to another configured peer, only to hop back in a few poll times, causing unnecessary disturbance). This behaviour should not cause problems because the driver will not accept the timestamps from the clock if the status flag delivered with the time code indicates that the last resync attempt was unsuccessful, so the initial timestamps will be close to reality, even if with up to a day&amp;rsquo;s clock drift in the worst case (the clock by default resyncs to MSF once per day).&lt;/p&gt;
&lt;p&gt;The clock has a peculiar RS232 arrangement where the transmit lines are powered from the receive lines, presumably to minimise battery drain. This arrangement has two consequences:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Your RS232 interface must drive both +ve and -ve&lt;/li&gt;
&lt;li&gt;You must (in theory) wait for an echo and a further 10ms between characters&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This driver, running on standard Sun ahardware, seems to work fine; note the use of the &lt;tt&gt;send_slow()&lt;/tt&gt; routine to queue up command characters to be sent once every two seconds.&lt;/p&gt;
&lt;p&gt;Three commands are sent to the clock by this driver. Each command consists of a single letter (of which only the bottom four bits are significant), followed by a CR (ASCII 13). Each character sent to the clock should be followed by a delay to allow the unit to echo the character, and then by a further 10ms. Following the echo of the command string, there may be a response (ie in the case of the &lt;tt&gt;g&lt;/tt&gt; and &lt;tt&gt;o&lt;/tt&gt; commands below), which in the case of the &lt;tt&gt;o&lt;/tt&gt; command may be delayed by up to 1 second so as the start bit of the first byte of the response can arrive on time. The commands and their responses are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;tt&gt;g&lt;/tt&gt; CR&lt;/strong&gt;
Request for signal quality. Answer only valid during (late part of) resync to MSF signal. The response consists of two characters as follows:&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;First Bit Number&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Second Bit Number&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;parity&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;parity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;always 0&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;always 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;always 1&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;always 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;always 1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;always 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;always 0&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;always 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;always 0&lt;/td&gt;
&lt;td&gt;2&amp;ndash;0&lt;/td&gt;
&lt;td&gt;reception signal quality in the range 0&amp;ndash;5 (very poor to very good); if in the range 0&amp;ndash;2 no successful reception is to be expected. The reported value drops to zero when not resyncing, ie when first returned byte is not &lt;code&gt;3&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;always 1&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0 if no reception attempt at the moment; 1 if reception attempt (ie resync) in progress&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;tt&gt;h&lt;/tt&gt; CR&lt;/strong&gt;
Request to resync to MSF. Can take up from about 30s to 360s. Drains batteries so should not be used excessively. After this the clock time and date should be correct and the phase within 20ms of time as transmitted from Rugby MSF (remember to allow for propagation time). By default the clock resyncs once per day shortly after 2am (presumably to catch transitions to/from daylight saving time quickly). With this driver code we resync at least once per hour to minimise clock wander.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;tt&gt;o&lt;/tt&gt; CR&lt;/strong&gt;
Request timestamp. Start bit of first byte of response is on-time, so may be delayed up to 1 second.  Note that when the BST mode is in effect the time is GMT/UTC +0100, ie an hour ahead of UTC to reflect local time in the UK. The response data is as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;hours tens (hours range from 00 to 23)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hours units&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;minutes tens (minutes range from 00 to 59)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;minutes units&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;seconds tens (seconds presumed to range from 00 to 60 to allow for leap second)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;seconds units&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;day of week 1 (Monday) to 7 (Sunday)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;day of month tens (day ranges from 01 to 31)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;day of month units&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;month tens (months range from 01 to 12)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;month units&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;year tens (years range from 00 to 99)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;year units&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BST/UTC status&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Bit Number&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;parity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;always 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;always 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;always 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;always 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1 if UTC is in effect (reverse of bit 1)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1 if BST is in effect (reverse of bit 2)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1 if BST/UTC change pending&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol start=&#34;15&#34;&gt;
&lt;li&gt;clock status&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Bit Number&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;parity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;always 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;always 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;always 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt; if low battery is detected&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt; if last resync failed (though officially undefined for the MSF clock)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt; if at least one reception attempt since 0230 for the MSF clock was successful (0300 for the DCF77 clock)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt; if the clock has valid time&amp;mdash;reset to zero when clock is reset (eg at power-up), and set to 1 after first successful resync attempt.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The driver only accepts time from the clock if the bottom three bits of the status byte are &lt;tt&gt;011&lt;/tt&gt;. The leap-year logic for computing day-in-year is only valid until 2099, and the clock will ignore stamps from the clock that claim BST is in effect in the first hour of each year. If the UK parliament decides to move us to +0100/+0200 time as opposed to the current +0000/+0100 time, it is not clear what effect that will have on the time broadcast by MSF, and therefore on this driver&amp;rsquo;s usefulness.&lt;/p&gt;
&lt;p&gt;A typical &lt;tt&gt;ntp.conf&lt;/tt&gt; configuration file for this driver might be:&lt;/p&gt;
&lt;pre&gt;# hostname(n) means we expect (n) to be the stratum at which hostname runs.

#------------------------------------------------------------------------------
# SYNCHRONISATION PARTNERS
# ========================

# Our betters...
server 127.127.27.0 # ARCRON MSF radio clock
# Fudge stratum and other features as required.
# ADJUST time1 VALUE FOR YOUR HOST, CLOCK AND LOCATION!
fudge 127.127.27.0 stratum 1 time1 0.016 flag3 1 flags 4 1

peer 11.22.33.9 # tick(1--2).
peer 11.22.33.4 # tock(3), boot/NFS server.

# This shouldn&#39;t get swept away unless left untouched for a long time.
driftfile /var/tmp/ntp.drift

#------------------------------------------------------------------------------
# RESTRICTIONS
# ============

# By default, don&#39;t trust and don&#39;t allow modifications.  Ignore in fact.
restrict default ignore notrust nomodify

# Allow others in our subnet to check us out...
restrict 11.22.33.0 mask 255.255.255.0 nomodify notrust

# Trust our peers for time.  Don&#39;t trust others in case they are insane.
restrict 127.127.27.0 nomodify
restrict 11.22.33.4 nomodify
restrict 11.22.33.9 nomodify

# Allow anything from the local host.
restrict 127.0.0.1&lt;/pre&gt;
&lt;p&gt;There are a few &lt;tt&gt;#define&lt;/tt&gt;s in the code that you might wish to play with:&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;ARCRON_KEEN&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;With this defined, the code is relatively trusting of the clock, and assumes that you will have the clock as one of a few time sources, so will bend over backwards to use the time from the clock when available and avoid &lt;tt&gt;xntpd&lt;/tt&gt; dropping sync from the clock where possible. You may wish to undefine this, especially if you have better sources of time or your reception is ropey. However, there are many checks built in even with this flag defined.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;ARCRON_OWN_FILTER&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;When defined, the code uses its own median-filter code rather than that available in &lt;tt&gt;ntp_refclock.c&lt;/tt&gt; since the latter seems to have a minor bug, at least in version 3-5.90. If this bug goes away this flag should be turned off to avoid duplication of code. (The bug, if that&amp;rsquo;s what it is, causes the last raw offset to be used rather than the median offset.)&lt;/p&gt;
&lt;p&gt;Without this defined (and without &lt;tt&gt;ARCRON_MULTIPLE_SAMPLES&lt;/tt&gt; below) a typical set of offsets reported and used to drive the clock-filter algorithm is (oldest last):&lt;/p&gt;
&lt;p&gt;&lt;code&gt;filtoffset=  -4.32  -34.82   -0.78    0.89    2.76    4.58   -3.92   -2.17&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Look at that spike!&lt;/p&gt;
&lt;p&gt;With this defined a typical set of offsets is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;filtoffset=  -7.06   -7.06   -2.91   -2.91   -2.91   -1.27   -9.54   -6.70&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;with the repeated values being some evidence of outlyers being discarded.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;ARCRON_MULTIPLE_SAMPLES&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;When is defined, we regard each character in the returned timecode as at a known delay from the start of the second, and use the smallest (most negative) offset implied by any such character, ie with the smallest kernel-induced display, and use that. This helps to reduce jitter and spikes.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;ARCRON_LEAPSECOND_KEEN&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;When is defined, we try to do a resync to MSF as soon as possible in the first hour of the morning of the first day of the first and seventh months, ie just after a leap-second insertion or deletion would happen if it is going to. This should help compensate for the fact that this clock does not continuously sample MSF, which compounds the fact that MSF itself gives no warning of an impending leap-second event. This code did not seem functional at the leap-second insertion of 30th June 1997 so is by default disabled.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;PRECISION&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Currently set to &lt;tt&gt;-4&lt;/tt&gt;, but you may wish to set it to &lt;tt&gt;-5&lt;/tt&gt; if you are more conservative, or to &lt;tt&gt;-6&lt;/tt&gt; if you have particularly good experience with the clock and you live on the edge. Note that the &lt;tt&gt;flag3&lt;/tt&gt; fudge value will improve the reported dispersion one notch if clock signal quality is known good. So maybe just leave this alone.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;NSAMPLES&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Should be at least 3 to help smooth out sampling jitters. Can be more, but if made too long can make &lt;tt&gt;xntpd&lt;/tt&gt; overshoot on clock corrections and can hold onto bad samples longer than you would like. With this set to 4 and &lt;tt&gt;NKEEP&lt;/tt&gt; set to 3 this allows the occasional bad sample (in my experience less than 1 value in 10) to be dropped. (Note that there seems to be some sort of &amp;lsquo;beat&amp;rsquo; effect in the offset with a periodicity of about 7 samples as of this writing (1997/05/11) still under investigation; a filter of approximately this length should be able to almost completely suppress this effect.) Note that if the fudge-factor &lt;tt&gt;flag3&lt;/tt&gt; is set to 1, a larger &lt;tt&gt;NSAMPLES&lt;/tt&gt; is used.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;monitor-data&#34;&gt;Monitor Data&lt;/h4&gt;
&lt;p&gt;Each timecode is written to the &lt;tt&gt;clockstats&lt;/tt&gt; file with a signal quality value appended (&lt;code&gt;0&lt;/code&gt;-&lt;code&gt;5&lt;/code&gt; as reported by the clock, or &lt;code&gt;6&lt;/code&gt; for unknown).&lt;/p&gt;
&lt;p&gt;Each resync and result (plus gaining or losing MSF sync) is logged to the system log at level &lt;tt&gt;LOG_NOTICE&lt;/tt&gt;; note that each resync drains the unit&amp;rsquo;s batteries, so the syslog entry seems justified.&lt;/p&gt;
&lt;p&gt;Syslog entries are of the form:&lt;/p&gt;
&lt;pre&gt;May 10 10:15:24 oolong xntpd[615]: ARCRON: unit 0: sending resync command
May 10 10:17:32 oolong xntpd[615]: ARCRON: sync finished, signal quality 5: OK, will use clock
May 10 11:13:01 oolong xntpd[615]: ARCRON: unit 0: sending resync command
May 10 11:14:06 oolong xntpd[615]: ARCRON: sync finished, signal quality -1: UNKNOWN, will use clock anyway
May 10 11:41:49 oolong xntpd[615]: ARCRON: unit 0: sending resync command
May 10 11:43:57 oolong xntpd[615]: ARCRON: sync finished, signal quality 5: OK, will use clock
May 10 12:39:26 oolong xntpd[615]: ARCRON: unit 0: sending resync command
May 10 12:41:34 oolong xntpd[615]: ARCRON: sync finished, signal quality 3: OK, will use clock&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;fudge-factors&#34;&gt;Fudge Factors&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;time1 _time_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the time offset calibration factor, in seconds and fraction, with default 0.0. On a Sun SparcStation 1 running SunOS 4.1.3_U1, with the receiver in London, a value of 0.020 (20ms) seems to be appropriate.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;time2 _time_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not currently used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;stratum _number_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the driver stratum, in decimal from 0 to 15, with default 0. It is suggested that the clock be fudged to stratum 1 so that it is used as a backup time source rather than a primary when more accurate sources are available.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;refid _string_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the driver reference identifier, an ASCII string from one to four characters, with default &lt;tt&gt;MSFa&lt;/tt&gt;.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag1 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;(Modes 1-3) Not currently used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag2 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not currently used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag3 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;If set to 1, better precision is reported (and thus lower dispersion) while clock&amp;rsquo;s received signal quality is known to be good.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag4 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;If set to 1, a longer-than-normal (8-stage rather than 4-stage) median filter is used, to provide some extra smoothing of clock output and reduction in jitter, at the cost of extra clock overshoot. Probably not advisable unless the server using this clock has other sources it can use to help mitigate the overshoot.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;additional-information&#34;&gt;Additional Information&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;/archives/3-5.93e/refclock&#34;&gt;Reference Clock Drivers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www2.exnet.com/NTP/ARC/ARC.html&#34;&gt;ARC Rugby MSF Receiver&lt;/a&gt; page&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Austron 2200A/2201A GPS Receivers</title>
      <link>/archives/3-5.93e/driver10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/driver10/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver10/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver10/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver10/#monitor-data&#34;&gt;Monitor Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver10/#fudge-factors&#34;&gt;Fudge Factors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver10/#additional-information&#34;&gt;Additional Information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;Address: 127.127.10.&lt;em&gt;u&lt;/em&gt;&lt;br&gt;
Reference ID: &lt;tt&gt;GPS&lt;/tt&gt;&lt;br&gt;
Driver ID: &lt;tt&gt;GPS_AS2201&lt;/tt&gt;&lt;br&gt;
Serial Port: &lt;tt&gt;/dev/gps_u_&lt;/tt&gt;; 9600 baud, 8-bits, no parity&lt;br&gt;
Features: &lt;tt&gt;tty_clk&lt;/tt&gt;, &lt;tt&gt;ppsclock&lt;/tt&gt; (required)&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;This driver supports the Austron 2200A/2201A GPS/LORAN Synchronized Clock and Timing Receiver connected via a serial port. It supports several special features of the clock, including the Input Buffer Module, Output Buffer Module, IRIG-B Interface Module and LORAN Assist Module. It requires the RS232 Serial Interface module for communication with the driver. It requires the &lt;code&gt;ppsclock&lt;/code&gt; streams module described in the &lt;a href=&#34;/archives/3-5.93e/ldisc&#34;&gt;Line Disciplines and Streams Drivers&lt;/a&gt; page. It also requires a gadget box and 1-PPS level converter, such as described in the &lt;a href=&#34;/archives/3-5.93e/pps&#34;&gt;Pulse-per-second (PPS) Signal Interfacing&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;This receiver is capable of a comprehensive and large volume of statistics and operational data. The specific data collection commands and attributes are embedded in the driver source code; however, the collection process can be enabled or disabled using the flag4 flag. If set, collection is enabled; if not, which is the default, it is disabled. A comprehensive suite of data reduction and summary scripts is in the ./scripts/stats directory of the xntp3 distribution.&lt;/p&gt;
&lt;p&gt;To achieve the high accuracy this device provides, it is necessary to use the &lt;tt&gt;ppsclock&lt;/tt&gt; feature of the xntp3 program distribution or, alternatively, to install the kernel modifications described in the README.kern. The clock can be wired to provide time to a single CPU or bussed in parallel to several CPUs, with one CPU controlling the receiver and the others just listening. Fair accuracy can be achieved in the single-CPU configuration without use of the 1-pps signal, but in multiple CPU configurations accuracy is severely degraded without it.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;monitor-data&#34;&gt;Monitor Data&lt;/h4&gt;
&lt;p&gt;When enabled by the &lt;tt&gt;flag4&lt;/tt&gt; fudge flag, every received timecode is written as-is to the &lt;tt&gt;clockstats&lt;/tt&gt; file.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;fudge-factors&#34;&gt;Fudge Factors&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;time1 _time_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the time offset calibration factor, in seconds and fraction, with default 0.0.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;time2 _time_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;stratum _number_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the driver stratum, in decimal from 0 to 15, with default 0.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;refid _string_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the driver reference identifier, an ASCII string from one to four characters, with default &lt;tt&gt;GPS&lt;/tt&gt;.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag1 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag2 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag3 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enable &lt;tt&gt;ppsclock&lt;/tt&gt; line discipline/streams module if set.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag4 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enable &lt;tt&gt;clockstats&lt;/tt&gt; recording if set.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;additional-information&#34;&gt;Additional Information&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;/archives/3-5.93e/refclock&#34;&gt;Reference Clock Drivers&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: authcert - DES validation program</title>
      <link>/archives/3-5.93e/authcert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/authcert/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/authcert/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/authcert/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/authcert/#files&#34;&gt;Files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;authcert&lt;/tt&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;This program verifies whether the DES encryption algorithm is operating correctly in the particular architecture. The program reads a line from the standard input containing a key, plaintext block and the corresponding encrypted ciphertext block, respectively, as in the following&lt;/p&gt;
&lt;pre&gt;0000000000000000 0000000000000000 8CA64DE9C1B123A7
FFFFFFFFFFFFFFFF FFFFFFFFFFFFFFFF 7359B2163E4EDC58
3000000000000000 1000000000000001 958E6E627A05557B
1111111111111111 1111111111111111 F40379AB9E0EC533
0123456789ABCDEF 1111111111111111 17668DFC7292532D
1111111111111111 0123456789ABCDEF 8A5AE1F81AB8F2DD
0000000000000000 0000000000000000 8CA64DE9C1B123A7
FEDCBA9876543210 0123456789ABCDEF ED39D950FA74BCC4
7CA110454A1A6E57 01A1D6D039776742 690F5B0D9A26939B
&lt;/pre&gt;
&lt;p&gt;and generates output as in the following&lt;/p&gt;
&lt;pre&gt; K: 0000000000000000 P: 0000000000000000 C: 8ca64de9c1b123a7 OK
 K: ffffffffffffffff P: ffffffffffffffff C: 7359b2163e4edc58 OK
 K: 3000000000000000 P: 1000000000000001 C: 958e6e627a05557b OK
 K: 1111111111111111 P: 1111111111111111 C: f40379ab9e0ec533 OK
 K: 0123456789abcdef P: 1111111111111111 C: 17668dfc7292532d OK
 K: 1111111111111111 P: 0123456789abcdef C: 8a5ae1f81ab8f2dd OK
 K: 0000000000000000 P: 0000000000000000 C: 8ca64de9c1b123a7 OK
 K: fedcba9876543210 P: 0123456789abcdef C: ed39d950fa74bcc4 OK
 K: 7ca110454a1a6e57 P: 01a1d6d039776742 C: 690f5b0d9a26939b OK
&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;files&#34;&gt;Files&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;./authstuff/certdata&lt;/tt&gt; - a representative test file&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Authentication Options</title>
      <link>/archives/3-5.93e/authopt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/authopt/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/authopt/#authentication-support&#34;&gt;Authentication Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/authopt/#authentication-commands&#34;&gt;Authentication Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/authopt/#authentication-key-file-format&#34;&gt;Authentication Key File Format&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;authentication-support&#34;&gt;Authentication Support&lt;/h4&gt;
&lt;p&gt;The NTP standard specifies an extension which provides cryptographic authentication of received NTP packets. This is implemented in &lt;tt&gt;xntpd&lt;/tt&gt; using the DES or MD5 algorithms to compute a digital signature, or message digest. The specification allows any one of possibly 4 billion keys, numbered with 32-bit key identifiers, to be used to authenticate an association. The servers involved in an association must agree on the key and key identifier used to authenticate their messages.&lt;/p&gt;
&lt;p&gt;Keys and related information are specified in a key file, which should be exchanged and stored using secure procedures beyond the scope of the protocol. There are three classes of keys involved in the current implementation. One class is used for ordinary NTP associations, another for the &lt;a href=&#34;/archives/3-5.93e/ntpq&#34;&gt;ntpq&lt;/a&gt; utility program and the third for the &lt;a href=&#34;/archives/3-5.93e/xntpdc&#34;&gt;xntpdc&lt;/a&gt; utility program.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;authentication-commands&#34;&gt;Authentication Commands&lt;/h4&gt;
&lt;dt id=&#34;keys&#34;&gt;&lt;tt&gt;keys _keyfile_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the file name containing the encryption keys and key identifiers used by &lt;tt&gt;xntpd&lt;/tt&gt;, &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;xntpdc&lt;/tt&gt; when operating in authenticated mode. The format of this file is described later in this document.&lt;/p&gt;
&lt;dt id=&#34;trustedkey&#34;&gt;&lt;tt&gt;trustedkey [_key_] [...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the encryption key identifiers which are trusted for the purposes of authenticating peers suitable for synchronization. The authentication procedures require that both the local and remote servers share the same key and key identifier for this purpose, although different keys can be used with different servers. The &lt;tt&gt;key&lt;/tt&gt; arguments are 32-bit unsigned integers. Note that NTP key 0 is fixed and globally known. If meaningful authentication is to be performed the 0 key should not be trusted.&lt;/p&gt;
&lt;dt id=&#34;requestkey&#34;&gt;&lt;tt&gt;requestkey _key_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the key identifier to use with the &lt;a href=&#34;/archives/3-5.93e/xntpdc&#34;&gt;&lt;tt&gt;xntpdc&lt;/tt&gt;&lt;/a&gt; program, which uses a proprietary protocol specific to this implementation of &lt;tt&gt;xntpd&lt;/tt&gt;. This program is useful to diagnose and repair problems that affect &lt;tt&gt;xntpd&lt;/tt&gt; operation. The key argument to this command is a 32-bit unsigned integer. If no &lt;tt&gt;requestkey&lt;/tt&gt; command is included in the configuration file, or if the keys don&amp;rsquo;t match, such requests will be ignored.&lt;/p&gt;
&lt;dt id=&#34;controlkey&#34;&gt;&lt;tt&gt;controlkey _key_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the key identifier to use with the &lt;a href=&#34;/archives/3-5.93e/ntpq&#34;&gt;&lt;tt&gt;ntpq&lt;/tt&gt;&lt;/a&gt; utility, which uses the standard protocol defined in RFC-1305. This program is useful to diagnose and repair problems that affect &lt;tt&gt;xntpd&lt;/tt&gt; operation. The &lt;tt&gt;&lt;em&gt;key&lt;/em&gt;&lt;/tt&gt; argument to this command is a 32-bit unsigned integer. If no &lt;tt&gt;requestkey&lt;/tt&gt; command is included in the configuration file, or if the keys don&amp;rsquo;t match, such requests will be ignored.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;authentication-key-file-format&#34;&gt;Authentication Key File Format&lt;/h4&gt;
&lt;p&gt;In the case of DES, the keys are 56 bits long with, depending on type, a parity check on each byte. In the case of MD5, the keys are 64 bits (8 bytes). &lt;tt&gt;xntpd&lt;/tt&gt; reads its keys from a file specified using the &lt;tt&gt;-k&lt;/tt&gt; command line option or the &lt;tt&gt;keys&lt;/tt&gt; statement in the configuration file. While key number 0 is fixed by the NTP standard (as 56 zero bits) and may not be changed, one or more of the keys numbered 1 through 15 may be arbitrarily set in the keys file.&lt;/p&gt;
&lt;p&gt;The key file uses the same comment conventions as the configuration file. Key entries use a fixed format of the form&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;&lt;em&gt;keyno type key&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;where &lt;tt&gt;&lt;em&gt;keyno&lt;/em&gt;&lt;/tt&gt; is a positive integer, &lt;tt&gt;&lt;em&gt;type&lt;/em&gt;&lt;/tt&gt; is a single character which defines the key format, and &lt;tt&gt;&lt;em&gt;key&lt;/em&gt;&lt;/tt&gt; is the key itself.&lt;/p&gt;
&lt;p&gt;The key may be given in one of three different formats, controlled by the &lt;tt&gt;&lt;em&gt;type&lt;/em&gt;&lt;/tt&gt; character. The three key types, and corresponding formats, are listed following.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;S&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The key is a 64-bit hexadecimal number in the format specified in the DES specification; that is, the high order seven bits of each octet are used to form the 56-bit key while the low order bit of each octet is given a value such that odd parity is maintained for the octet. Leading zeroes must be specified (i.e., the key must be exactly 16 hex digits long) and odd parity must be maintained. Hence a zero key, in standard format, would be given as &lt;tt&gt;0101010101010101&lt;/tt&gt;.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;N&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The key is a 64-bit hexadecimal number in the format specified in the NTP standard. This is the same as the DES format, except the bits in each octet have been rotated one bit right so that the parity bit is now the high order bit of the octet. Leading zeroes must be specified and odd parity must be maintained. A zero key in NTP format would be specified as &lt;tt&gt;8080808080808080&lt;/tt&gt;.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;A&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The key is a 1-to-8 character ASCII string. A key is formed from this by using the low order 7 bits of each ASCII character in the string, with zeroes added on the right when necessary to form a full width 56-bit key, in the same way that encryption keys are formed from Unix passwords.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;M&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The key is a 1-to-8 character ASCII string, using the MD5 authentication scheme. Note that both the keys and the authentication schemes (DES or MD5) must be identical between a set of peers sharing the same key number.&lt;/p&gt;
&lt;p&gt;Note that the keys used by the &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;xntpdc&lt;/tt&gt; programs are checked against passwords requested by the programs and entered by hand, so it is generally appropriate to specify these keys in ASCII format.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: authspeed - determine authentication delays</title>
      <link>/archives/3-5.93e/authspeed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/authspeed/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/authspeed/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/authspeed/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/authspeed/#options&#34;&gt;Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/authspeed/#files&#34;&gt;Files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;authspeed [ -cdm ] [ -n &lt;em&gt;loops&lt;/em&gt; ] auth.samplekeys&lt;/tt&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;This program encrypts a test file and determines the authentication delay to use in the NTP configuration file. There are two choices of encryption algorithm, DES Cipher-Block-Chaining (DES-CBC) and Message Digest 5 (MD5).&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;options&#34;&gt;Options&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;-c&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Select total cost of encryption. Default is value to use in the authdelay configuration command.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-d&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enable debug output. Default is no debug output.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-m&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enable MD5 algorithm. Default is DES-CBC algorithm.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-n _loops_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify the number of program loops. Default is 20,000.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;files&#34;&gt;Files&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;./authstuff/auth.samplekeys&lt;/tt&gt; - a representative list of keys&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;./authstuff/auth.speed&lt;/tt&gt; - a listing of results for a representative set of architectures and compilers&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Building and Installing the Distribution</title>
      <link>/archives/3-5.93e/build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/build/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/build/#building-and-installing-under-unix&#34;&gt;Building and Installing under Unix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/build/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/build/#compilation&#34;&gt;Compilation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/build/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/build/#additional-ttmakett-commands&#34;&gt;Additional &lt;tt&gt;make&lt;/tt&gt; Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/build/#building-and-installing-under-windows-nt&#34;&gt;Building and Installing Under Windows NT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Following are instructions to build and install the programs in this distribution.&lt;/p&gt;
&lt;p&gt;Note that the automatic build process inspects the machine environment and tests for the presence of system header files and the contents of these files to determine if certain features are available. When one or more of these features are present, the code is compiled to use them; if not, no special code is compiled. However, even if the code is compiled to use these features, the code does a special test at run time to see if one or more are actually present and avoids using them if not present. In such cases a warning message is sent to the system log, but the daemon should still work properly.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;building-and-installing-under-unix&#34;&gt;Building and Installing Under Unix&lt;/h4&gt;
&lt;p&gt;Make sure that you have all necessary tools for building executables. These tools include &lt;tt&gt;cc/gcc&lt;/tt&gt;, &lt;tt&gt;make&lt;/tt&gt;, &lt;tt&gt;awk&lt;/tt&gt;, &lt;tt&gt;sed&lt;/tt&gt;, &lt;tt&gt;tr&lt;/tt&gt;, &lt;tt&gt;sh&lt;/tt&gt;, &lt;tt&gt;grep&lt;/tt&gt;, &lt;tt&gt;egrep&lt;/tt&gt; and a few others. Not all of these tools exist in the standard distribution of modern Unix versions (compilers are likely to be an add-on product - consider using the GNU tools and &lt;tt&gt;gcc&lt;/tt&gt; compiler in this case). For a successful build, all of these tools should be accessible via the current path.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;configuration&#34;&gt;Configuration&lt;/h4&gt;
&lt;p&gt;Use the &lt;tt&gt;configure&lt;/tt&gt; command to perform an automatic configuration procedure. This procedure normally includes the debugging code, which can be useful in diagnosing problems found in initial test, and all reference clock drivers known to work with each machine and operating system. Unless memory space is at a premium, this is a sensible strategy and saves lots of messy fiddling. If you need to delete either the debugging code or one or more or all reference clock drivers to save space, see the &lt;a href=&#34;/archives/3-5.93e/config&#34;&gt;Configuration Options&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;If your site supports multiple architectures and uses NFS to share files, you can use a single source tree to compile executables for all architectures. While running on a target architecture machine and with the distribution base directory active, create a subdirectory using a command like &lt;tt&gt;mkdir `config.guess`&lt;/tt&gt;, which will create an architecture-specific directory with name peculiar to the architecture and operating system. Then change to this directory and configure with the &lt;tt&gt;../configure command&lt;/tt&gt;. The remaining steps are the same whether building in the base directory or in the subdirectory.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;compilation&#34;&gt;Compilation&lt;/h4&gt;
&lt;p&gt;Peruse the operating-system-specific information for your architecture under &lt;a href=&#34;/archives/3-5.93e/hints&#34;&gt;Hints and Kinks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Use the &lt;tt&gt;make&lt;/tt&gt; command to compile all source modules, construct the libraries and link the distribution. Expect few or no warnings using &lt;tt&gt;cc&lt;/tt&gt; and a moderate level of warnings using &lt;tt&gt;gcc&lt;/tt&gt;. &lt;strong&gt;Note:&lt;/strong&gt; On some Unix platforms the use of &lt;tt&gt;gcc&lt;/tt&gt; can result in quite a few complaints about system header files and type inconsistencies, especially about pointer variables. This is usually the case when the system header files are not up to ANSI standards or &lt;tt&gt;gcc&lt;/tt&gt;-isms. While the autoconfigure process is quite thorough, the Unix programming cultures of the various workstation makers still remain idiosyncratic.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;installation&#34;&gt;Installation&lt;/h4&gt;
&lt;p&gt;As root, use the &lt;tt&gt;make install&lt;/tt&gt; command to install the binaries in the destination directory. You must of course have write permission on the install in the destination directory. This includes the programs &lt;a href=&#34;/archives/3-5.93e/xntpd&#34;&gt;xntpd&lt;/a&gt; (the daemon), &lt;a href=&#34;/archives/3-5.93e/xntpdc&#34;&gt;xntpdc&lt;/a&gt; (an &lt;tt&gt;xntpd&lt;/tt&gt;-dependent query program), &lt;a href=&#34;/archives/3-5.93e/ntpq&#34;&gt;ntpq&lt;/a&gt; (a standard query program), &lt;a href=&#34;/archives/3-5.93e/ntpdate&#34;&gt;ntpdate&lt;/a&gt; (an &lt;tt&gt;rdate&lt;/tt&gt; replacement for boot time date setting and sloppy time keeping) and &lt;a href=&#34;/archives/3-5.93e/ntptrace&#34;&gt;ntptrace&lt;/a&gt; (a utility useful to find the primary (stratum-1) servers). In some systems, the &lt;a href=&#34;/archives/3-5.93e/tickadj&#34;&gt;tickadj&lt;/a&gt; (a utility useful to adjust kernel variables) is installed. If the precision time kernel modifications are present, the &lt;a href=&#34;/archives/3-5.93e/ntptime&#34;&gt;ntptime&lt;/a&gt; (a utility useful to debug kernel time functions) is installed.&lt;/p&gt;
&lt;p&gt;You are now ready to configure the daemon and start it. You will need to create a NTP configuration file &lt;tt&gt;ntp.conf&lt;/tt&gt; and possibly a cryptographic key file &lt;tt&gt;ntp.keys&lt;/tt&gt;. Directions for doing that are in the &lt;a href=&#34;/archives/3-5.93e/notes&#34;&gt;Notes on Configuring NTP and Setting up a NTP Subnet&lt;/a&gt;. A tutorial on debugging technique is in &lt;a href=&#34;/archives/3-5.93e/debug&#34;&gt;NTP Debugging Technique&lt;/a&gt; page. If problems peculiar to the particular hardware and software environment are suspected, browse the &lt;a href=&#34;/archives/3-5.93e/hints&#34;&gt;Hints and Kinks&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;Bug reports of a general nature can be sent to David Mills (&lt;a href=&#34;mailto:mills@udel.edu&#34;&gt;mills@udel.edu&lt;/a&gt;). Bug reports of a specific nature on features implemented by the programmer corps mentioned in the &lt;a href=&#34;/archives/3-5.93e/copyright&#34;&gt;Copyright&lt;/a&gt; page should be sent directly to the implementor listed in that page, with copy to &lt;a href=&#34;mailto:mills@udel.edu&#34;&gt;mills@udel.edu&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please include the version of the source distribution (e.g., xntp3-5.87) in your bug report.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please include the output of &lt;tt&gt;config.guess&lt;/tt&gt; in your bug report.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It will look something like: &lt;tt&gt;pdp11-dec-fuzzos3.4&lt;/tt&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;additional-ttmakett-commands&#34;&gt;Additional &lt;tt&gt;make&lt;/tt&gt; commands&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;make clean&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Cleans out object files, programs and temporary files.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;make distclean&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Does the work of &lt;tt&gt;clean&lt;/tt&gt;, but cleans out all directories in preparation for a new distribution release.&lt;/dd&gt;
&lt;dt&gt;&lt;tt&gt;make dist&lt;/tt&gt;&lt;/dt&gt;
&lt;dd&gt;Does the work of &lt;tt&gt;make distclean&lt;/tt&gt;, but constructs compressed tar files for distribution. You must have GNU automake to perform this function.&lt;/dd&gt;
&lt;hr&gt;
&lt;h4 id=&#34;building-and-installing-under-windows-nt&#34;&gt;Building and Installing under Windows NT&lt;/h4&gt;
&lt;p&gt;Under Windows NT, you will need Visual C++ 4.0 or above, InstallShield SDK (comes with VC++), Perl5 and some version of the archiving program ZIP.&lt;/p&gt;
&lt;p&gt;See the &lt;tt&gt;./scripts/wininstall/readme.nt&lt;/tt&gt; file for directions to compile the sources, build the libraries and link the executables. Initiate the build by running either &lt;tt&gt;bldrel.bat&lt;/tt&gt; or &lt;tt&gt;blddbg.bat&lt;/tt&gt; to compile all of the source and create an &lt;tt&gt;InstallShield&lt;/tt&gt; based graphical installation package.&lt;/p&gt;
&lt;p&gt;To install the executables, make sure that you are logged in as a system account, or one with administrator privileges such as the &amp;ldquo;administrator&amp;rdquo; account. As part of the build an &lt;tt&gt;InstallShield&lt;/tt&gt; based graphical installer was created. Run &lt;code&gt;\xntp\scripts\wininstall\intel\disk1\setup.exe&lt;/code&gt; to begin the installation. This installer will prompt for basic defaults, copy the binaries, install the service, and start it up. The other option is to run &lt;code&gt;\xntp\scripts\wininstall\distrib\install.bat&lt;/code&gt; which will do the basic installation from the command line.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Configuration Options</title>
      <link>/archives/3-5.93e/config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/config/</guid>
      <description>
        
        
        &lt;h4 id=&#34;basic-configuration-options---the-ttconfigurett-utility&#34;&gt;Basic Configuration Options - the &lt;tt&gt;configure&lt;/tt&gt; utility&lt;/h4&gt;
&lt;p&gt;The following options are for compiling and installing a working version of the xntp3 distribution. In most cases, the build process is completely automatic. In some cases where memory space is at a premium, or the binaries are to be installed in a different place, it is possible to tailor the configuration to remove such features as reference clock driver support, debugging support, and so forth.&lt;/p&gt;
&lt;p&gt;Configuration options are specified as arguments to the &lt;tt&gt;configure&lt;/tt&gt; script. Following is a summary of the current options:&lt;/p&gt;
&lt;p&gt;Usage: &lt;tt&gt;configure [options] [host]&lt;/tt&gt;&lt;br&gt;
Options: [defaults in brackets after descriptions]&lt;/p&gt;
&lt;pre&gt;Configuration

  --cache-file=FILE      cache test results in FILE
  --help                 print this message
  --no-create            do not create output files
  --quiet, --silent      do not print `checking...&#39; messages
  --version              print the version of autoconf that created
                         configure
Directory and file names

  --prefix=PREFIX        install architecture-independent files in
                         PREFIX [/usr/local]
  --exec-prefix=EPREFIX  install architecture-dependent files in EPREFIX
                         [same as prefix]
  --bindir=DIR           user executables in DIR [EPREFIX/bin]
  --sbindir=DIR          system admin executables in DIR [EPREFIX/sbin]
  --libexecdir=DIR       program executables in DIR [EPREFIX/libexec]
  --datadir=DIR          read-only architecture-independent data in DIR
                         [PREFIX/share]
  --sysconfdir=DIR       read-only single-machine data in DIR
                         [PREFIX/etc]
  --sharedstatedir=DIR   modifiable architecture-independent data in DIR
                         [PREFIX/com]
  --localstatedir=DIR    modifiable single-machine data in DIR
                         [PREFIX/var]
  --libdir=DIR           object code libraries in DIR [EPREFIX/lib]
  --includedir=DIR       C header files in DIR [PREFIX/include]
  --oldincludedir=DIR    C header files for non-gcc in DIR
                         [/usr/include]
  --infodir=DIR          info documentation in DIR [PREFIX/info]
  --mandir=DIR           man documentation in DIR [PREFIX/man]
  --srcdir=DIR           find the sources in DIR [configure dir or ..]
  --program-prefix=PREFIX prepend PREFIX to installed program names
  --program-suffix=SUFFIX append SUFFIX to installed program names
  --program-transform-name=PROGRAM run sed PROGRAM on installed program
                         names
Host type

  --build=BUILD          configure for building on BUILD [BUILD=HOST]
  --host=HOST            configure for HOST [guessed]
  --target=TARGET        configure for TARGET [TARGET=HOST]
Features and packages

  --disable-FEATURE      do not include FEATURE (same as --enable-
                         FEATURE=no)
  --enable-FEATURE[=ARG] include FEATURE [ARG=yes]
  --with-PACKAGE[=ARG]   use PACKAGE [ARG=yes]
  --without-PACKAGE      do not use PACKAGE (same as --with-PACKAGE=no)
  --x-includes=DIR       X include files are in DIR
  --x-libraries=DIR      X library files are in DIR

--enable- and --disable- with options recognized

     debugging           Include debugging code [enable]
     gdt-surveying       Include GDT survey code [disable]
     md5                 Include support for MD5 keys [enable]
     des                 Include support for DES keys [enable]
     all-clocks          Include drivers for all reference clocks
                         [enable]

  Radio Clocks (these are ordinarily enabled, if supported by the
                         machine and operating system)

     ACTS                NIST dialup clock
     ARBITER             Arbiter 1088A/B GPS receiver
     AS2201              Austron 2200A or 2201A GPS receiver
     ATOM                ATOM clock
     BANCOMM             BANCOMM clock
     CHU                 CHU clock
     DATUM               Datum Programmable Time System
     DCF7000             ELV/DCF7000
     GPSVME              GPS-VME Clock
     HEATH               HeathKit GC-1000 Most Accurate Clock
     HOPF6021            HOPF6021 Radio Clock support
     HPGPS               HP 58503A GPS Time &amp; Frequency receiver
     IRIG                IRIG (Audio) Clock
     LEITCH              Leitch CSD 5300 Master Clock System Driver
     LOCAL-CLOCK         Local Clock driver
     MEINBERG            Meinberg clocks
     MSFEES              MSFEES clock
     MOTO                Motorola GPS clock
     MX4200              MX4200 clock
     NMEA                NMEA GPS clock
     PARSE               PARSE clock code
     PST                 PST/Traconex 1020 WWV/H receiver
     PTBACTS             PTB dialup clock support
     RAWDCF              use raw DCF77 time code
     RCC8000             RCC8000 Radio Clock support
     SCHMID              SCHMID DCF77 clock support
     TRAK                TRAK 8810 GPS station clock
     TPRO                KSI/Odetics TPRO/S IRIG Interface
     TRIMTAIP            Trimble GPS/TAIP Protocol
     TRIMTSIP            Trimble GPS/TSIP Protocol
     TRUETIME            Kinemetrics/TrueTime (generic) receiver
     WWVB                Spectracom 8170 or Netclock/2 WWVB receiver
     USNO                US Naval Observatory dialup clock

  Miscellany

     accurate-adjtime    The adjtime() call is accurate
     kmem                Read kmem
     tick=VALUE          Force a value for &#39;tick&#39;
     tickadj=VALUE       Force a value for &#39;tickadj&#39;
     udp-wildcard        Use UDP wildcard delivery
     slew-always         Always slew the time
     step-slew           Step and slew the time
     ntpdate-step        If ntpdate should step the time
     hourly-todr-sync    If we should sync TODR hourly
&lt;/pre&gt;&lt;blockquote&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Configuration Options</title>
      <link>/archives/3-5.93e/confopt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/confopt/</guid>
      <description>
        
        
        &lt;h4 id=&#34;configuration-commands&#34;&gt;Configuration Commands&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;peer _address_ [key _key_ ] [version _version_] [prefer] [minpoll _minpoll_] [maxpoll _maxpoll_]&lt;/tt&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;tt&gt;server _address_ [key _key_ ] [version _version_] [prefer] [mode _mode_]&lt;/tt&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;tt&gt;broadcast _address_ [key _key_ ] [version _version_] [ttl _ttl_]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;These three commands specify the time server name or address &lt;em&gt;address&lt;/em&gt; to be used and the mode in which to operate. The &lt;em&gt;address&lt;/em&gt; can be either a DNS name or a IP address in dotted-quad notation. The &lt;tt&gt;peer&lt;/tt&gt; command specifies that the local server is to operate in symmetric active mode with the remote server. In this mode, the local server can be synchronized to the remote server and, in addition, the remote server can be synchronized by the local server. This is useful in a network of servers where, depending on various failure scenarios, either the local or remote server may be the better source of time.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;server&lt;/tt&gt; command specifies that the local server is to operate in client mode with the specified remote server. In this mode, the local server can be synchronized to the remote server, but the remote server can never be synchronized to the local server.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;broadcast&lt;/tt&gt; command specifies that the local server is to operate in broadcast mode, where the local server sends periodic broadcast messages to a client population at the broadcast/multicast &lt;em&gt;address&lt;/em&gt; specified. Ordinarily, this specification applies only to the local server operating as a sender; for operation as a broadcast client, see the &lt;tt&gt;broadcastclient&lt;/tt&gt; or &lt;tt&gt;multicastclient&lt;/tt&gt; commands below. In this mode, &lt;em&gt;address&lt;/em&gt; is usually the broadcast address on (one of) the local network(s) or a multicast address assigned to NTP. The Numbers Czar has assigned the address 224.0.1.1 to NTP; this is presently the only address that should be used. Note that the use of multicast features requires a multicast kernel, which is not yet ubiquitous in vendor products.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;key&lt;/tt&gt; &lt;em&gt;&lt;tt&gt;key&lt;/tt&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;    All packets sent to the address are to include authentication fields encrypted using the specified key identifier, which is an unsigned 32 bit integer. The default is to not include an encryption field.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;version &lt;em&gt;version&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Specifies the version number to be used for outgoing NTP packets. Versions 1, 2, and 3 are the choices, with version 3 the default.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;prefer&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Marks the server as preferred. All other things being equal, this host will be chosen for synchronization among a set of correctly operating hosts. See the &lt;a href=&#34;/archives/3-5.93e/prefer&#34;&gt;Mitigation Rules and the &lt;tt&gt;prefer&lt;/tt&gt; Keyword&lt;/a&gt; page for further information.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;ttl &lt;em&gt;ttl&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    This option is used only with broadcast mode. It specifies the time- to-live ttl to use on multicast packets. Selection of the proper value, which defaults to 127, is something of a black art and must be coordinated with the network administrator(s).&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;minpoll &lt;em&gt;minpoll&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    This option specifies the minimum polling interval for NTP messages, in seconds to the power of two. The allowable range is 4 (16 s to 14 (16384 s) inclusive. The default is 6 (64 s) for all except reference clocks.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;maxpoll &lt;em&gt;maxpoll&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    This option specifies the maximum polling interval for NTP messages, in seconds to the power of two. The allowable range is 4 (16 s to 14 (16384 s) inclusive. The default is 10 (1024 s) for all except reference clocks.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;broadcastclient [ _address_ ]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command directs the local server to listen for broadcast messages at the broadcast address &lt;em&gt;address&lt;/em&gt; of the local network. The default address is the subnet address with the host field bits set to ones. Upon hearing a broadcast message for the first time, the local server measures the nominal network delay using a brief client/server exchange with the remote server, then enters the broadcastclient mode, in which it listens for and synchronizes to succeeding broadcast messages. Note that, in order to avoid accidental or malicious disruption in this mode, both the local and remote servers should operate using authentication and the same trusted key and key identifier.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;multicastclient [ _address_ ] [ ... ]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command directs the local server to listen for multicast messages at the group &lt;em&gt;address&lt;/em&gt;(es) of the global network. The default address is that assigned by the Numbers Czar to NTP (224.0.1.1). This command operates in the same way as the &lt;tt&gt;broadcastclient&lt;/tt&gt; command, but uses IP multicasting. Support for this command requires a multicast kernel.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;driftfile _driftfile_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command specifies the name of the file used to record the frequency offset of the local clock oscillator. If the file exists, it is read at startup in order to set the initial frequency offset and then updated once per hour with the current frequency offset computed by the daemon. If the file does not exist or this command is not given, the initial frequency offset is assumed zero. In this case, it may take some hours for the frequency to stabilize and the residual timing errors to subside.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;ntp.drift&lt;/tt&gt; file format consists of a single line containing a single floating point number, which records the frequency offset measured in parts-per-million (PPM). That the file is updated once per hour by first writing the current drift value into a temporary file and then renaming this file to replace the old version. This implies that &lt;tt&gt;xntpd&lt;/tt&gt; must have write permission for the directory the drift file is located in, and that file system links, symbolic or otherwise, should probably be avoided.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;enable auth | bclient | monitor | pll | pps | stats&lt;/tt&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;tt&gt;disable auth | bclient | monitor | pll | pps | stats&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Provides a way to enable or disable various server options. Flags not mentioned are unaffected. Note that all of these flags can be controlled remotely using the &lt;a href=&#34;/archives/3-5.93e/xntpdc&#34;&gt;&lt;tt&gt;xntpdc&lt;/tt&gt;&lt;/a&gt; utility program.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;auth&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Enables the server to synchronize with unconfigured peers only if the peer has been correctly authenticated using a trusted key and key identifier. The default for this flag is enable.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;bclient&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Enables the server to listen for a message from a broadcast or multicast server, as in the &lt;tt&gt;multicastclient&lt;/tt&gt; command with default address. The default for this flag is disable.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;monitor&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Enables the monitoring facility. See the &lt;tt&gt;xntpdc&lt;/tt&gt; program and the &lt;tt&gt;monlist&lt;/tt&gt; command or further information. The default for this flag is enable.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;pll&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Enables the server to adjust its local clock by means of NTP. If disabled, the local clock free-runs at its intrinsic time and frequency offset. This flag is useful in case the local clock is controlled by some other device or protocol and NTP is used only to provide synchronization to other clients. In this case, the local clock driver is used. See the &lt;a href=&#34;/archives/3-5.93e/refclock&#34;&gt;Reference Clock Drivers&lt;/a&gt; page for further information. The default for this flag is enable.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;pps&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Enables the pulse-per-second (PPS) signal when frequency and time is disciplined by the precision time kernel modifications. See the &lt;a href=&#34;/archives/3-5.93e/kern&#34;&gt;A Kernel Model for Precision Timekeeping&lt;/a&gt; page for further information. The default for this flag is disable.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;stats&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Enables the statistics facility. See the &lt;a href=&#34;/archives/3-5.93e/monopt&#34;&gt;Monitoring Options&lt;/a&gt; page for further information. The default for this flag is enable.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;tick value&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;If no value for &lt;tt&gt;tick&lt;/tt&gt; can be found from the kernel, use this value. This is the &amp;ldquo;normalized&amp;rdquo; value; if your system keeps &lt;tt&gt;tick&lt;/tt&gt; in nanoseconds you must divide your value by 1000. The expected range of the value is between 900 and 11,000 (don&amp;rsquo;t use the comma in the config file).&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;tickadj value&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;If no value for &lt;tt&gt;tickadj&lt;/tt&gt; can be found in the kernel, use this value. The value must be &amp;ldquo;normalized&amp;rdquo;; if your system keeps &lt;tt&gt;tickadj&lt;/tt&gt; in nanoseconds you must divide your value by 1000. The expected range of the value is between 1 and 50.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Copyright Notice</title>
      <link>/archives/3-5.93e/copyright/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/copyright/</guid>
      <description>
        
        
        &lt;p&gt;The following copyright notice applies to all files collectively called the Network Time Protocol Version 3 Distribution. Unless specifically declared otherwise in an individual file, this notice applies as if the text was explicitly included in the file.&lt;/p&gt;
&lt;pre&gt;
/***********************************************************************
 *                                                                     *
 * Copyright (c) David L. Mills 1992, 1993, 1994, 1995, 1996, 1997     *
 *                                                                     *
 * Permission to use, copy, modify, and distribute this software and   *
 * its documentation for any purpose and without fee is hereby         *
 * granted, provided that the above copyright notice appears in all    *
 * copies and that both the copyright notice and this permission       *
 * notice appear in supporting documentation, and that the name        *
 * University of Delaware not be used in advertising or publicity      *
 * pertaining to distribution of the software without specific,        *
 * written prior permission. The University of Delaware makes no       *
 * representations about the suitability this software for any         *
 * purpose. It is provided &#34;as is&#34; without express or implied          *
 * warranty.                                                           *
 **********************************************************************/

&lt;/pre&gt;
&lt;p&gt;The following individuals contributed in part to the Network Time Protocol Distribution Version 4 and are acknowledged as authors of this work.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Mark Andrews &lt;a href=&#34;mailto:marka@syd.dms.csiro.au&#34;&gt;marka@syd.dms.csiro.au&lt;/a&gt; Leitch atomic clock controller&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Viraj Bais &lt;a href=&#34;mailto:vbais@mailman1.intel.com&#34;&gt;vbais@mailman1.intel.com&lt;/a&gt; and Clayton Kirkwood &lt;a href=&#34;mailto:kirkwood@striderfm.intel.com&#34;&gt;kirkwood@striderfm.intel.com&lt;/a&gt; port to WindowsNT 3.5&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Karl Berry &lt;a href=&#34;mailto:karl@owl.HQ.ileaf.com&#34;&gt;karl@owl.HQ.ileaf.com&lt;/a&gt; syslog to file option&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Piete Brooks &lt;a href=&#34;mailto:Piete.Brooks@cl.cam.ac.uk&#34;&gt;Piete.Brooks@cl.cam.ac.uk&lt;/a&gt; MSF clock driver, Trimble PARSE support&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Steve Clift &lt;a href=&#34;mailto:clift@ml.csiro.au&#34;&gt;clift@ml.csiro.au&lt;/a&gt;: OMEGA clock driver&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Casey Crellin &lt;a href=&#34;mailto:casey@csc.co.za&#34;&gt;(casey@csc.co.za)&lt;/a&gt; vxWorks (Tornado) port and help with target configuration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Torsten Duwe &lt;a href=&#34;mailto:duwe@immd4.informatik.uni-erlangen.de&#34;&gt;duwe@immd4.informatik.uni-erlangen.de&lt;/a&gt; Linux Port&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;John A. Dundas III &lt;a href=&#34;mailto:dundas@salt.jpl.nasa.gov&#34;&gt;dundas@salt.jpl.nasa.gov&lt;/a&gt; Apple A/UX port&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dennis Ferguson &lt;a href=&#34;mailto:dennis@mrbill.canet.ca&#34;&gt;dennis@mrbill.canet.ca&lt;/a&gt; foundation code for NTP Version 2 as specified in RFC-1119&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Glenn Hollinger &lt;a href=&#34;mailto:glenn@herald.usask.ca&#34;&gt;glenn@herald.usask.ca&lt;/a&gt; GOES clock driver&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mike Iglesias &lt;a href=&#34;mailto:iglesias@uci.edu&#34;&gt;iglesias@uci.edu&lt;/a&gt;: DEC Alpha port&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jim Jagielski &lt;a href=&#34;mailto:jim@jagubox.gsfc.nasa.gov&#34;&gt;jim@jagubox.gsfc.nasa.gov&lt;/a&gt; A/UX port&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jeff Johnson &lt;a href=&#34;mailto:jbj@chatham.usdesign.com&#34;&gt;jbj@chatham.usdesign.com&lt;/a&gt; massive prototyping overhaul&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;William L. Jones &lt;a href=&#34;mailto:jones@hermes.chpc.utexas.edu&#34;&gt;jones@hermes.chpc.utexas.edu&lt;/a&gt; RS/6000 AIX modifications, HPUX modifications&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dave Katz &lt;a href=&#34;mailto:dkatz@cisco.com&#34;&gt;dkatz@cisco.com&lt;/a&gt; RS/6000 AIX port&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Craig Leres &lt;a href=&#34;mailto:leres@ee.lbl.gov&#34;&gt;leres@ee.lbl.gov&lt;/a&gt; 4.4BSD port, ppsclock, Maganavox GPS clock driver&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;George Lindholm &lt;a href=&#34;mailto:lindholm@ucs.ubc.ca&#34;&gt;lindholm@ucs.ubc.ca&lt;/a&gt; SunOS 5.1 port&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Louis A. Mamakos &lt;a href=&#34;mailto:louie@ni.umd.edu&#34;&gt;louie@ni.umd.edu&lt;/a&gt; MD5-based authentication&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Derek Mulcahy &lt;a href=&#34;mailto:derek@toybox.demon.co.uk&#34;&gt;derek@toybox.demon.co.uk&lt;/a&gt; and Damon Hart-Davis &lt;a href=&#34;mailto:d@hd.org&#34;&gt;d@hd.org&lt;/a&gt;: ARCRON MSF clock driver&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lars H. Mathiesen &lt;a href=&#34;mailto:thorinn@diku.dk&#34;&gt;thorinn@diku.dk&lt;/a&gt; adaptation of foundation code for Version 3 as specified in RFC-1305&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.eecis.udel.edu/~mills&#34;&gt;David L. Mills &lt;a href=&#34;mailto:mills@udel.edu&#34;&gt;mills@udel.edu&lt;/a&gt;&lt;/a&gt; Spectractom WWVB, Austron GPS, Arbiter GPS, Heath, ATOM, ACTS, KSI/Odetics IRIG-B clock drivers; PPS support&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wolfgang Moeller &lt;a href=&#34;mailto:moeller@gwdgv1.dnet.gwdg.de&#34;&gt;moeller@gwdgv1.dnet.gwdg.de&lt;/a&gt; VMS port&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jeffrey Mogul &lt;a href=&#34;mailto:mogul@pa.dec.com&#34;&gt;mogul@pa.dec.com&lt;/a&gt; ntptrace utility&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tom Moore &lt;a href=&#34;mailto:tmoore@fievel.daytonoh.ncr.com&#34;&gt;tmoore@fievel.daytonoh.ncr.com&lt;/a&gt; i386 svr4 port&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rainer Pruy &lt;a href=&#34;mailto:Rainer.Pruy@informatik.uni-erlangen.de&#34;&gt;Rainer.Pruy@informatik.uni-erlangen.de&lt;/a&gt; monitoring/trap scripts, statistics file handling&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dirce Richards &lt;a href=&#34;mailto:dirce@zk3.dec.com&#34;&gt;dirce@zk3.dec.com&lt;/a&gt; Digital UNIX V4.0 port&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nick Sayer &lt;a href=&#34;mailto:mrapple@quack.kfu.com&#34;&gt;mrapple@quack.kfu.com&lt;/a&gt; SunOS streams modules&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www4.informatik.uni-erlangen.de/~kardel&#34;&gt;Frank Kardel&lt;/a&gt; &lt;a href=&#34;mailto:Frank.Kardel@informatik.uni-erlangen.de&#34;&gt;Frank.Kardel@informatik.uni-erlangen.de&lt;/a&gt; PARSE &lt;GENERIC&gt; driver (14 reference clocks), STREAMS modules for PARSE, support scripts, syslog cleanup&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ray Schnitzler &lt;a href=&#34;mailto:schnitz@unipress.com&#34;&gt;schnitz@unipress.com&lt;/a&gt; Unixware1 port&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Michael Shields &lt;a href=&#34;mailto:shields@tembel.org&#34;&gt;shields@tembel.org&lt;/a&gt; USNO clock driver&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jeff Steinman &lt;a href=&#34;mailto:jss@pebbles.jpl.nasa.gov&#34;&gt;jss@pebbles.jpl.nasa.gov&lt;/a&gt; Datum PTS clock driver&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Harlan Stenn &lt;a href=&#34;mailto:harlan@pfcs.com&#34;&gt;harlan@pfcs.com&lt;/a&gt; GNU automake/autoconfigure makeover&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Kenneth Stone &lt;a href=&#34;mailto:ken@sdd.hp.com&#34;&gt;ken@sdd.hp.com&lt;/a&gt; HP-UX port&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ajit Thyagarajan &lt;a href=&#34;mailto:ajit@ee.udel.edu&#34;&gt;ajit@ee.udel.edu&lt;/a&gt; IP multicast support&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tomoaki TSURUOKA &lt;a href=&#34;mailto:tsuruoka@nc.fukuoka-u.ac.jp&#34;&gt;tsuruoka@nc.fukuoka-u.ac.jp&lt;/a&gt; TRAK clock driver&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Paul A Vixie &lt;a href=&#34;mailto:vixie@vix.com&#34;&gt;vixie@vix.com&lt;/a&gt; TrueTime GPS driver, generic TrueTime clock driver&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ulrich Windl &lt;a href=&#34;mailto:Ulrich.Windl@rz.uni-regensburg.de&#34;&gt;Ulrich.Windl@rz.uni-regensburg.de&lt;/a&gt; Corrected and validated HTML documents according to the HTML DTD&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Debugging Hints for Reference Clock Drivers</title>
      <link>/archives/3-5.93e/rdebug/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/rdebug/</guid>
      <description>
        
        
        &lt;p&gt;The &lt;a href=&#34;/archives/3-5.93e/ntpq&#34;&gt;&lt;tt&gt;ntpq&lt;/tt&gt;&lt;/a&gt; and &lt;a href=&#34;/archives/3-5.93e/xntpdc&#34;&gt;&lt;tt&gt;xntpdc&lt;/tt&gt;&lt;/a&gt; utility programs can be used to debug reference clocks, either on the server itself or from another machine elsewhere in the network. The server is compiled, installed and started using the configuration file described in the &lt;a href=&#34;/archives/3-5.93e/xntpd&#34;&gt;&lt;tt&gt;xntpd&lt;/tt&gt;&lt;/a&gt; page. The first thing to look for are error messages on the system log. If none occur, the daemon has started, opened the devices specified and waiting for peers and radios to come up.&lt;/p&gt;
&lt;p&gt;The next step is to be sure the RS232 messages, if used, are getting to and from the clock. The most reliable way to do this is with an RS232 tester and to look for data flashes as the driver polls the clock and/or as data arrive from the clock. Our experience is that the overwhelming fraction of problems occurring during installation are due to problems such as miswired connectors or improperly configured device links at this stage.&lt;/p&gt;
&lt;p&gt;If RS232 messages are getting to and from the clock, the variables of interest can be inspected using the &lt;tt&gt;ntpq&lt;/tt&gt; program and various commands described on the documentation page. First, use the &lt;tt&gt;pe&lt;/tt&gt; and &lt;tt&gt;as&lt;/tt&gt; commands to display billboards showing the peer configuration and association IDs for all peers, including the radio clock peers. The assigned clock address should appear in the &lt;tt&gt;pe&lt;/tt&gt; billboard and the association ID for it at the same relative line position in the &lt;tt&gt;as&lt;/tt&gt; billboard. If things are operating correctly, after a minute or two samples should show up in the &lt;tt&gt;pe&lt;/tt&gt; display line for the clock.&lt;/p&gt;
&lt;p&gt;Additional information is available with the &lt;tt&gt;rv&lt;/tt&gt; and &lt;tt&gt;clockvar&lt;/tt&gt; commands, which take as argument the association ID shown in the &lt;tt&gt;as&lt;/tt&gt; billboard. The &lt;tt&gt;rv&lt;/tt&gt; command with no argument shows the system variables, while the &lt;tt&gt;rv&lt;/tt&gt; command with association ID argument shows the peer variables for the clock, as well as other peers of interest. The &lt;tt&gt;clockvar&lt;/tt&gt; command with argument shows the peer variables specific to reference clock peers, including the clock status, device name, last received timecode (if relevant), and various event counters. In addition, a subset of the &lt;tt&gt;fudge&lt;/tt&gt; parameters is included.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;xntpdc&lt;/tt&gt; utility program can be used for detailed inspection of the clock driver status. The most useful are the &lt;tt&gt;clockstat&lt;/tt&gt; and &lt;tt&gt;clkbug&lt;/tt&gt; commands described in the document page. While these commands permit getting quite personal with the particular driver involved, their use is seldom necessary, unless an implementation bug shows up.&lt;/p&gt;
&lt;p&gt;Most drivers write a message to the &lt;tt&gt;clockstats&lt;/tt&gt; file as each timecode or surrogate is received from the radio clock. By convention, this is the last ASCII timecode (or ASCII gloss of a binary-coded one) received from the radio clock. This file is managed by the &lt;tt&gt;filegen&lt;/tt&gt; facility described in the &lt;tt&gt;xntpd&lt;/tt&gt; page and requires specific commands in the configuration file. This forms a highly useful record to discover anomalies during regular operation of the clock. The scripts included in the &lt;tt&gt;./scripts/stats&lt;/tt&gt; directory can be run from a &lt;tt&gt;cron&lt;/tt&gt; job to collect and summarize these data on a daily or weekly basis. The summary files have proven invaluable to detect infrequent misbehavior due to clock implementation bugs in some radios.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Further Information and Bibliography </title>
      <link>/archives/3-5.93e/biblio/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/biblio/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/biblio/#conformance-statement&#34;&gt;Conformance Statement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/biblio/#selected-bibliography&#34;&gt;Selected Bibliography&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;conformance-statement&#34;&gt;Conformance Statement&lt;/h4&gt;
&lt;p&gt;The Network Time Protocol (NTP) is used to synchronize the time of a computer client or server to another server or reference time source, such as a radio or satellite receiver or modem. It provides accuracies typically within a millisecond on LANs up to a few tens of milliseconds on WANs relative to Coordinated Universal Time (UTC), as provided by a Global Positioning Service (GPS) receiver, for example. Typical NTP configurations utilize multiple redundant servers and diverse network paths, in order to achieve high accuracy and reliability. Some configurations include cryptographic authentication to prevent accidental or malicious protocol attacks. Information on the NTP architecture, protocol and algorithms can be found in the following articles and reports, which are available online:&lt;/p&gt;
&lt;p&gt;Mills, D.L. Internet time synchronization: the Network Time Protocol. &lt;em&gt;IEEE Trans. Communications COM-39, 10&lt;/em&gt; (October 1991), 1482-1493. &lt;a href=&#34;https://www.eecis.udel.edu/~mills/database/papers/trans.pdf&#34;&gt;(PDF)&lt;/a&gt;. Also in: Yang, Z., and T.A. Marsland (Eds.). &lt;em&gt;Global States and Time in Distributed Systems&lt;/em&gt;. IEEE Computer Society Press, Los Alamitos, CA, 1994, 91-102. Condensed from: &lt;em&gt;Ibid&lt;/em&gt;. Network Working Group Report RFC-1129, University of Delaware, October 1989. &lt;a href=&#34;https://www.eecis.udel.edu/~mills/database/rfc/rfc1129/rfc1129a.pdf&#34;&gt;(Abstract: PDF)&lt;/a&gt;, &lt;a href=&#34;https://www.eecis.udel.edu/~mills/database/rfc/rfc1129/rfc1129b.pdf&#34;&gt;(Body: PDF)&lt;/a&gt;. Also published as: Electrical Engineering Department Report 89-9-1, University of Delaware, September 1989.&lt;/p&gt;
&lt;p&gt;The NTP specification and implementation has evolved over the last fifteen years to the current Version 3 of the protocol. This version includes significant enhancements in accuracy and reliability, as determined by experience in an estimated total of well over 100,000 clients and servers in the Internet, while retaining backward compatibility with previous versions. The formal specification of the NTP Version 3 protocol is contained in:&lt;/p&gt;
&lt;p&gt;Mills, D.L. Network Time Protocol (Version 3) specification, implementation and analysis. Network Working Group Report RFC-1305, University of Delaware, March 1992, 113 pp. &lt;a href=&#34;https://www.eecis.udel.edu/~mills/database/reports/ntpv3/ntpv3a.pdf&#34;&gt;(Abstract: PDF)&lt;/a&gt;, &lt;a href=&#34;https://www.eecis.udel.edu/~mills/database/reports/ntpv3/ntpv3b.pdf&#34;&gt;(Body: PDF)&lt;/a&gt;, &lt;a href=&#34;https://www.eecis.udel.edu/~mills/database/reports/ntpv3/ntpv3c.pdf&#34;&gt;(Appendices: PDF)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This software distribution contains a fully compliant implementation of the NTP Version 3 protocol, including an autonomous protocol daemon that disciplines the local host clock, as well as a set of supporting utility programs used to debug and manage one or more NTP servers in a network. It includes complete sources and documentation for well over two dozen Unix-based and Microsoft NT-based workstations and file servers. The implementation is fully compliant with RFC-1305 and, in addition, contains certain extensions compatible with, but not defined by, that document. These extensions include:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Support for precision-time kernel modifications, as described in:
Mills, D.L. Unix kernel modifications for precision time synchronization. Electrical Engineering Department Report 94-10-1, University of Delaware, October 1994, 24 pp. &lt;a href=&#34;https://www.eecis.udel.edu/~mills/database/reports/kern/kerna.pdf&#34;&gt;(Abstract: PDF)&lt;/a&gt;, &lt;a href=&#34;https://www.eecis.udel.edu/~mills/database/reports/kern/kernb.pdf&#34;&gt;(Body: PDF)&lt;/a&gt;. Major revision and update of: Network Working Group Report RFC-1589, University of Delaware, March 1994. 31 pp. &lt;a href=&#34;https://www.eecis.udel.edu/~mills/database/rfc/rfc1589.txt&#34;&gt;(ASCII)&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support for IP Multicasting, as described in:
Mills, D.L, and A. Thyagarajan. Network time protocol version 4 proposed changes. Electrical Engineering Department Report 94-10-2, University of Delaware, October 1994, 32 pp. &lt;a href=&#34;https://www.eecis.udel.edu/~mills/database/reports/acts/actsa.pdf&#34;&gt;(Abstract: PDF)&lt;/a&gt;, &lt;a href=&#34;https://www.eecis.udel.edu/~mills/database/reports/acts/actsb.pdf&#34;&gt;(Body: PDF)&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A new hybrid phase/frequency-lock clock discipline, which replaces the RFC-1305 local clock algorithm, as described in:&lt;/p&gt;
&lt;p&gt;Mills, D.L. Improved algorithms for synchronizing computer network clocks. &lt;em&gt;IEEE/ACM Trans. Networks&lt;/em&gt; (June 1995), 245-254. &lt;a href=&#34;https://www.eecis.udel.edu/~mills/database/papers/tune.pdf&#34;&gt;(PDF)&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Engineered refinements to radio clock drivers and interface code, as described in:
Mills, D.L. Precision synchronization of computer network clocks. &lt;em&gt;ACM Computer Communication Review 24, 2&lt;/em&gt; (April 1994). 28-43. &lt;a href=&#34;https://www.eecis.udel.edu/~mills/database/reports/fine/fineb.pdf&#34;&gt;Body: (PDF)&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support for over two dozen reference clock drivers for all known national and international radio, satellite and modem standard time services known at this time. See the &lt;a href=&#34;/archives/3-5.93e/refclock&#34;&gt;Reference Clock Drivers&lt;/a&gt; page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support for the MD5 cryptographic hash algorithm, in addition to the DES-CBC algorithm described in RFC-1305, as described in the &lt;a href=&#34;/archives/3-5.93e/xntpd&#34;&gt;&lt;tt&gt;xntpd&lt;/tt&gt; - Network Time Protocol (NTP) daemon&lt;/a&gt; page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The prefer-peer scheme, as described in the &lt;a href=&#34;/archives/3-5.93e/prefer&#34;&gt;Mitigation Rules and the &lt;tt&gt;prefer&lt;/tt&gt; Keyword&lt;/a&gt; page.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h4 id=&#34;selected-bibliography&#34;&gt;Selected Bibliography&lt;/h4&gt;
&lt;p&gt;A number of articles and reports have been written on the analysis, design, implementation and performance of NTP. A representative sample is included here, along with a short description of each. Additional information on NTP can be found at the web sites for &lt;a href=&#34;http://www.ntp.org&#34;&gt;NTP&lt;/a&gt; and &lt;a href=&#34;http://www.eecis.udel.edu/~mills&#34;&gt;David L. Mills&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A subset of NTP has been defined suitable for use where some degradation in accuracy and reliability is acceptable, so that the entire suite of specified algorithms need not be implemented. This subset is defined in:&lt;/p&gt;
&lt;p&gt;Mills, D.L. Simple Network Time Protocol (SNTP). Network Working Group Report RFC-1769, University of Delaware, March 1995, 14 pp. &lt;a href=&#34;https://www.eecis.udel.edu/~mills/database/rfc/rfc1769.txt&#34;&gt;(ASCII)&lt;/a&gt;. Major revision and update of: &lt;em&gt;Ibid&lt;/em&gt;. Network Working Group Report &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc1361&#34;&gt;RFC-1361&lt;/a&gt;, University of Delaware, August 1992, 10 pp.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An assessment of the expected accuracy of NTP operating in the Internet is contained in the following:&lt;/p&gt;
&lt;p&gt;Mills, D.L. Measured performance of the Network Time Protocol in the Internet system. Network Working Group Report RFC-1128. University of Delaware, October 1989. &lt;a href=&#34;https://www.eecis.udel.edu/~mills/database/rfc/rfc1128/rfc1128a.pdf&#34;&gt;(Abstract: PDF)&lt;/a&gt;, &lt;a href=&#34;https://www.eecis.udel.edu/~mills/database/rfc/rfc1128/rfc1128b.pdf&#34;&gt;(Body: PDF)&lt;/a&gt;. Also published as: Electrical Engineering Department Report 89-9-3, University of Delaware, September 1989. &lt;a href=&#34;https://www.eecis.udel.edu/~mills/database/reports/glory/glorya.pdf&#34;&gt;(Abstract: PDF)&lt;/a&gt;, &lt;a href=&#34;https://www.eecis.udel.edu/~mills/database/reports/glory/gloryb.pdf&#34;&gt;(Body: PDF)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Mills, D.L. On the accuracy and stability of clocks synchronized by the Network Time Protocol in the Internet system. &lt;em&gt;ACM Computer Communication Review 20, 1&lt;/em&gt; (January 1990), 65-75. &lt;a href=&#34;https://www.eecis.udel.edu/~mills/database/papers/ccr.pdf&#34;&gt;(PDF)&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The following publication explores issues involved in the development of the NTP specification, including the development of its timescale and the treatment of leap seconds:&lt;/p&gt;
&lt;p&gt;Mills, D.L. On the chronology and metrology of computer network timescales and their application to the Network Time Protocol. &lt;em&gt;ACM Computer Communications Review 21, 5&lt;/em&gt; (October 1991), 8-17. &lt;a href=&#34;https://www.eecis.udel.edu/~mills/database/papers/time.pdf&#34;&gt;(PDF)&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A comprehensive analysis of the engineering model used in the NTP algorithms is given in the following report. This includes a performance analysis of the clock filter and selection algorithms, clock discipline feedback loop, and error budget.&lt;/p&gt;
&lt;p&gt;Mills, D.L. Modelling and analysis of computer network clocks. Electrical Engineering Department Report 92-5-2, University of Delaware, May 1992, 29 pp. &lt;a href=&#34;https://www.eecis.udel.edu/~mills/database/reports/time/timea.pdf&#34;&gt;(Abstract: PDF)&lt;/a&gt;, &lt;a href=&#34;https://www.eecis.udel.edu/~mills/database/reports/time/timeb.pdf&#34;&gt;(Body: PDF)&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Gadget Box PPS Level Converter and CHU Modem</title>
      <link>/archives/3-5.93e/gadget/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/gadget/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/gadget/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/gadget/#circuit-description&#34;&gt;Circuit Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/gadget/#files&#34;&gt;Files&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;introduction&#34;&gt;Introduction&lt;/h4&gt;
&lt;p&gt;Many radio clocks used as a primary reference source for NTP servers produce a pulse-per-second (PPS) signal that can be used to improve accuracy to a high degree. However, the signals produced are usually incompatible with the modem interface signals on the serial ports used to connect the signal to the host. The gadget box consists of a handful of electronic components assembled in a small aluminum box. It includes level converters and a optional radio modem designed to decode the radio timecode signals transmitted by the Canadian time and frequency station CHU. A complete set of schematics, PCB artwork, drill templates is in the &lt;a href=&#34;https://www.eecis.udel.edu/~ntp/ntp_spool/hardware/gadget.tar.Z&#34;&gt;gadget.tar.Z&lt;/a&gt; file.&lt;/p&gt;
&lt;p&gt;The gadget box is assembled in a 5&amp;quot;x3&amp;quot;x2&amp;quot; aluminum minibox containing the level converter and modem circuitry. It includes two subcircuits. One of these converts a TTL positive edge into a fixed- width pulse at EIA levels and is for use with a timecode receiver or oscillator including a TTL PPS output. The other converts the timecode modulation broadcast by Canadian time/frequency standard station CHU into a 300-bps serial character stream at EIA levels and is for use with the &lt;tt&gt;tty_clk&lt;/tt&gt; and &lt;tt&gt;chu_tty&lt;/tt&gt; line disciplines in the xntp3 distribution.&lt;/p&gt;
&lt;p&gt;This archive contains complete construction details for the gadget box, including schematic, parts list and artwork for a two-sided, printed-circuit board. All files are in PostScript, with the exception of this file and an information file, which are in ASCII. The artwork is in the 1:1 scale and is suitable for direct printing on photographic resist for each side of the board. While a plated-through-holes process is most convenient, it is possible to bridge the two sides using soldered wires where necessary.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;circuit-description&#34;&gt;Circuit Description&lt;/h4&gt;
&lt;p&gt;Following is a brief functional description of the device. See the schematic diagram gadget.s01 for reference. The audio output of a shortwave radio tuned to CHU at 3330, 7335 or 14670 kHz is connected to J2. A level of at least 30 mV peak-peak is required, such as provided by the recorder output on many receivers. The input level is adjusted by potentiometer R8 so that the timecode modulation broadcast at 31-39 seconds past the minute reliably lights green LED1, but the signals broadcast during other seconds of the minute do not.&lt;/p&gt;
&lt;p&gt;Opamp U4A provides low-impedance drive for the bridged-tee bandpass filter U4B. The filter has a bandpass of about 600 Hz at the 6-dB points and a center frequency of about 2150 Hz. It is designed to avoid aliasing effects with receivers of relatively wide bandpass characteristics. The modem itself is implemented by U2 and its associated circuitry. Resistors R4 and R1 are a 40-dB pad which matches the filter output to the modem input. U2 is a TTL/EIA level converter with integral power supply for bipolar signals. The modem output is available at pin 3 (receive data) of DB25 connector J1.&lt;/p&gt;
&lt;p&gt;The TTL PPS signal is connected via J3 to a retriggerable one-shot U3A, which generates a TTL pulse of width determined by potentiometer R7. The pulse width is determined by the bit rate of the attached serial port. In the common case the width is one bit-time, such as 26 us for 38.4 kbps, for example. This appears to the port as a single start bit of zero followed by eight bits of ones and a stop bit of one. The second one-shot U3B generates a 200-ms pulse suitable for driving the amber LED3 as a visual monitor. The output of U3A is converted to EIA levels by U1 and appears at pin 12 (secondary receive data) of J1.&lt;/p&gt;
&lt;p&gt;If only the PPS circuit is required, U2 and U4 can be deleted and the gadget box powered from the EIA modem-control signal at pin 20 (terminal ready) of J1, assuming this signal is placed in the on (positive voltage) condition by the computer program. J1 is wired to keep most finicky UARTs and terminal-driver programs happy. If the CHU circuit is required, an external 12-volt AC transformer or 9-12-volt DC supply connected to J4 is required. Red LED2 indicates power is supplied to the box.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;files&#34;&gt;Files&lt;/h4&gt;
&lt;p&gt;Following is a list of files included in this archive. All files are in PostScript, except the &lt;tt&gt;README&lt;/tt&gt; and &lt;tt&gt;gadget.lst&lt;/tt&gt; files, which are in ASCII. The files &lt;tt&gt;gadget.s01, gadget.s02&lt;/tt&gt; and &lt;tt&gt;gadget.lst&lt;/tt&gt; were generated using the Schema schematic-capture program from Omation. The printed-circuit files &lt;tt&gt;*.lpr&lt;/tt&gt; were generated using Schema-PCB, also from Omation.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;README&lt;/tt&gt; - helpful information&lt;br&gt;
&lt;tt&gt;gadget.s01&lt;/tt&gt; - circuit schematic&lt;br&gt;
&lt;tt&gt;gadget.s02&lt;/tt&gt; - minibox assembly drawing&lt;br&gt;
&lt;tt&gt;gadget.lst&lt;/tt&gt; - net list, pin list, parts list, etc.&lt;br&gt;
&lt;tt&gt;gen0102.lpr&lt;/tt&gt; - pcb x-ray diagram&lt;br&gt;
&lt;tt&gt;art01.lpr&lt;/tt&gt; - pcb artword side 1&lt;br&gt;
&lt;tt&gt;art02.lpr&lt;/tt&gt; - pcb artwork side 2&lt;br&gt;
&lt;tt&gt;adt0127.lpr&lt;/tt&gt; - pcb assembly drawing&lt;br&gt;
&lt;tt&gt;dd0124.lpr&lt;/tt&gt; - pcb drill drawing&lt;br&gt;
&lt;tt&gt;sm0228.lpr&lt;/tt&gt; - pcb solder mask (side 2)&lt;br&gt;
&lt;tt&gt;sst0126.lpr&lt;/tt&gt; - pcb silkscreen mask (side 1)&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Generic NMEA GPS Receiver</title>
      <link>/archives/3-5.93e/driver20/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/driver20/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver20/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver20/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver20/#setting-up-the-garmin-gps-25xl&#34;&gt;Setting up the Garmin GPS-25XL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver20/#monitor-data&#34;&gt;Monitor Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver20/#fudge-factors&#34;&gt;Fudge Factors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver20/#additional-information&#34;&gt;Additional Information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;Address: 127.127.20.&lt;em&gt;u&lt;/em&gt;&lt;br&gt;
Reference ID: &lt;tt&gt;GPS&lt;/tt&gt;&lt;br&gt;
Driver ID: &lt;tt&gt;GPS_NMEA&lt;/tt&gt;&lt;br&gt;
Serial Port: &lt;tt&gt;/dev/gps_u_&lt;/tt&gt;; 4800 baud, 8-bits, no parity &lt;br&gt;
Features: &lt;tt&gt;tty_clk&lt;/tt&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;This driver supports GPS&amp;rsquo;s with the &lt;tt&gt;$GPRMC&lt;/tt&gt; NMEA output string. The driver expects the GPS to be set up to transmit a &lt;tt&gt;$GPRMC&lt;/tt&gt; message every second.&lt;/p&gt;
&lt;p&gt;The accuracy depends on the GPS used. Inexpensive GPS models are available with a claimed PPS signal accuracy of 1 μs or better relative to the broadcast signal. However, in most cases the actual accuracy is limited by the precision of the timecode and the latencies of the serial interface and operating system.&lt;/p&gt;
&lt;p&gt;The $GPRMC message that the GPS transmits look like this:&lt;/p&gt;
&lt;pre&gt;$GPRMC,POS_UTC,POS_STAT,LAT,LAT_REF,LON,LON_REF,SPD,HDG,DATE,MAG_VAR,MAG_REF*CC&amp;lsaquo;cr&amp;rsaquo;&amp;lsaquo;lf&amp;rsaquo;

  POS_UTC  - UTC of position. Hours, minutes and seconds. (hhmmss)
  POS_STAT - Position status. (A = Data valid, V = Data invalid)
  LAT      - Latitude (llll.ll)
  LAT_REF  - Latitude direction. (N = North, S = South)
  LON      - Longitude (yyyyy.yy)
  LON_REF  - Longitude direction (E = East, W = West)
  SPD      - Speed over ground. (knots) (x.x)
  HDG      - Heading/track made good (degrees True) (x.x)
  DATE     - Date (ddmmyy)
  MAG_VAR  - Magnetic variation (degrees) (x.x)
  MAG_REF  - Magnetic variation (E = East, W = West)
  CC       - Checksum (optional)
  &amp;lsaquo;cr&amp;rsaquo;&amp;lsaquo;lf&amp;rsaquo; - Sentence terminator.
&lt;/pre&gt;
&lt;p&gt;The driver will send a &lt;tt&gt;$PMOTG,RMC,0000*1D‹cr›‹lf›&lt;/tt&gt; message each time a $GPRMC string is needed. This is not needed on most GPS receivers because they automatically send the $GPRMC string every second and will only work on GPS receivers that understand the $PMOTG string. Others will just ignore it.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;setting-up-the-garmin-gps-25xl&#34;&gt;Setting up the Garmin GPS-25XL&lt;/h4&gt;
&lt;p&gt;Switch off all output by sending it the following string.&lt;/p&gt;
&lt;pre&gt;&#34;$PGRMO,,2&amp;lsaquo;cr&amp;rsaquo;&amp;lsaquo;lf&amp;rsaquo;&#34;&lt;/pre&gt;
&lt;p&gt;Now switch only $GPRMC on by sending it the following string.&lt;/p&gt;
&lt;pre&gt;&#34;$PGRMO,GPRMC,1&amp;lsaquo;cr&amp;rsaquo;&amp;lsaquo;lf&amp;rsaquo;&#34;&lt;/pre&gt;
&lt;p&gt;On some systems the PPS signal isn&amp;rsquo;t switched on by default. It can be switched on by sending the following string.&lt;/p&gt;
&lt;pre&gt;&#34;$PGRMC,,,,,,,,,,,,2&amp;lsaquo;cr&amp;rsaquo;&amp;lsaquo;lf&amp;rsaquo;&#34;&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;monitor-data&#34;&gt;Monitor Data&lt;/h4&gt;
&lt;p&gt;The $GPRMC string that is used is written to the clockstats file.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;fudge-factors&#34;&gt;Fudge Factors&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;time1 _time_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the time offset calibration factor, in seconds and fraction, with default 0.0.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;time2 _time_&lt;/tt&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;stratum _number_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the driver stratum, in decimal from 0 to 15, with default 0.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;refid _string_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the driver reference identifier, an ASCII string from one to four characters, with default &lt;tt&gt;GPS&lt;/tt&gt;.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag1 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag2 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag3 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag4 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;additional-information&#34;&gt;Additional Information&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;/archives/3-5.93e/refclock&#34;&gt;Reference Clock Drivers&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Generic Reference Driver</title>
      <link>/archives/3-5.93e/driver8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/driver8/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver8/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver8/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver8/#ntpq-8-timecode-variables&#34;&gt;ntpq (8) Timecode Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver8/#monitor-data&#34;&gt;Monitor Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver8/#fudge-factors&#34;&gt;Fudge Factors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver8/#making-your-own-parse-clocks&#34;&gt;Making your own PARSE clocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver8/#additional-information&#34;&gt;Additional Information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;Address: 127.127.8.&lt;em&gt;u&lt;/em&gt;&lt;br&gt;
Reference ID: PARSE&lt;br&gt;
Driver ID: GENERIC&lt;br&gt;
Serial Port: &lt;tt&gt;/dev/refclock-&lt;em&gt;u&lt;/em&gt;;&lt;/tt&gt; TTY mode according to clock type&lt;br&gt;
Features: &lt;tt&gt;ppsclock&lt;/tt&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;The timecode of these receivers is sampled via a STREAMS module in the kernel (The STREAMS module has been designed for use with SUN Systems under SunOS 4.1.x or Solaris 2.3. It can be linked directly into the kernel or loaded via the loadable driver mechanism). This STREAMS module can be adapted to be able to convert different time code formats. If the daemon is compiled without the STREAM definition synchronization will work without the Sun streams module, though accuracy is significantly degraded. This feature allows to use PARSE also on non Sun machines.&lt;/p&gt;
&lt;p&gt;The actual receiver status is mapped into various synchronization states generally used by receivers. The STREAMS module is configured to interpret the time codes of DCF U/A 31, PZF535, GPS166, Trimble SV6 GPS, ELV DCF7000, Schmid and low cost receivers (see list below).&lt;/p&gt;
&lt;p&gt;The reference clock support in xntp contains the necessary configuration tables for those receivers. In addition to supporting several different clock types and 4 devices, the generation of a PPS signal is also provided as a configuration option. The PPS configuration option uses the receiver generated time stamps for feeding the PPS loopfilter control for much finer clock synchronization.&lt;/p&gt;
&lt;p&gt;CAUTION: The PPS configuration option is different from the hardware PPS signal, which is also supported (see below), as it controls the way xntpd is synchronized to the reference clock, while the hardware PPS signal controls the way time offsets are determined.&lt;/p&gt;
&lt;p&gt;The use of the PPS option requires receivers with an accuracy of better than 1ms.&lt;/p&gt;
&lt;p&gt;Only two fudge factors are utilized. The time1 fudge factor defines the phase offset of the synchronization character to the actual time. On the availability of PPS information the time2 fudge factor defines the skew between the PPS time stamp and the receiver timestamp of the PPS signal. This parameter is usually zero, as usually the PPS signal is believed in time and OS delays should be corrected in the machine specific section of the kernel driver. time2 needs only be set when the actual PPS signal is delayed for some reason. The flag1 enables input filtering. This a median filter with continuous sampling. The flag2 selects averaging of the samples remaining after the filtering. Leap second-handling is controlled with the flag3. When set a leap second will be deleted on receipt of a leap second indication from the receiver. Otherwise the leap second will be added, (which is the default). flag3 should never be set. PPS handling is enabled by adding 128 to the mode parameter in the server/peer command.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;ntpq-8-timecode-variables&#34;&gt;ntpq (8) Timecode Variables&lt;/h4&gt;
&lt;p&gt;The ntpq program can read clock variables command list several variables. These hold the following information: refclock_time is the local time with the offset to UTC (format HHMM). The currently active receiver flags are listed in refclock_status. Additional feature flags of the receiver are optionally listed in parentheses. The actual time code is listed in timecode. A qualification of the decoded time code format is following in refclock_format. The last piece of information is the overall running time and the accumulated times for the clock event states in refclock_states. When PPS information is present additional variable are available. refclock_ppstime lists then the PPS timestamp and refclock_ppsskew lists the difference between RS232 derived timestamp and the PPS timestamp.&lt;/p&gt;
&lt;p&gt;Currently, fourteen clock types (devices /dev/refclock-0 - /dev/refclock-3) are supported by the PARSE driver.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;server 127.127.8.0-3 mode 0&lt;br&gt;
Meinberg PZF535 receiver (FM demodulation/TCXO / 50us)&lt;/li&gt;
&lt;li&gt;server 127.127.8.0-3 mode 1&lt;br&gt;
Meinberg PZF535 receiver (FM demodulation/OCXO / 50us)&lt;/li&gt;
&lt;li&gt;server 127.127.8.0-3 mode 2&lt;br&gt;
Meinberg DCF U/A 31 receiver (AM demodulation / 4ms)&lt;/li&gt;
&lt;li&gt;server 127.127.8.0-3 mode 3&lt;br&gt;
ELV DCF7000 (sloppy AM demodulation / 50ms)&lt;/li&gt;
&lt;li&gt;server 127.127.8.0-3 mode 4&lt;br&gt;
Walter Schmid DCF receiver Kit (AM demodulation / 1ms)&lt;/li&gt;
&lt;li&gt;server 127.127.8.0-3 mode 5&lt;br&gt;
RAW DCF77 100/200ms pulses (Conrad DCF77 receiver module / 5ms)&lt;/li&gt;
&lt;li&gt;server 127.127.8.0-3 mode 6&lt;br&gt;
RAW DCF77 100/200ms pulses (TimeBrick DCF77 receiver module / 5ms)&lt;/li&gt;
&lt;li&gt;server 127.127.8.0-3 mode 7&lt;br&gt;
Meinberg GPS166 receiver (GPS / &amp;laquo;1us)&lt;/li&gt;
&lt;li&gt;server 127.127.8.0-3 mode 8&lt;br&gt;
IGEL clock&lt;/li&gt;
&lt;li&gt;server 127.127.8.0-3 mode 9&lt;br&gt;
Trimble SV6 GPS receiver TAIP protocol (GPS / &amp;laquo;1us)&lt;/li&gt;
&lt;li&gt;server 127.127.8.0-3 mode 10&lt;br&gt;
Trimble SV6 GPS receiver TSIP protocol (GPS / &amp;laquo;1us) (no kernel support yet)&lt;/li&gt;
&lt;li&gt;server 127.127.8.0-3 mode 11&lt;br&gt;
Radiocode Clocks Ltd RCC 8000 Intelligent Off-Air Master Clock support&lt;/li&gt;
&lt;li&gt;server 127.127.8.0-3 mode 12&lt;br&gt;
HOPF Funkuhr 6021&lt;/li&gt;
&lt;li&gt;server 127.127.8.0-3 mode 13&lt;br&gt;
Diem&amp;rsquo;s Computime Radio Clock&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Actual data formats and set-up requirements of the various clocks can be found in &lt;a href=&#34;/archives/3-5.93e/parsedata&#34;&gt;XNTP PARSE clock data formats&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The reference clock support carefully monitors the state transitions of the receiver. All state changes and exceptional events such as loss of time code transmission are logged via the syslog facility. Every hour a summary of the accumulated times for the clock states is listed via syslog.&lt;/p&gt;
&lt;p&gt;PPS support is only available when the receiver is completely synchronized. The receiver is believed to deliver correct time for an additional period of time after losing synchronizations, unless a disruption in time code transmission is detected (possible power loss). The trust period is dependent on the receiver oscillator and thus a function of clock type. This is one of the parameters in the clockinfo field of the reference clock implementation. This parameter cannot be configured by xntpdc.&lt;/p&gt;
&lt;p&gt;In addition to the PPS loopfilter control a true PPS hardware signal can be applied on Sun Sparc stations via the CPU serial ports on the CD pin. This signal is automatically detected and will be used for offset calculation. The input signal must be the time mark for the following time code. (The edge sensitivity can be selected - look into the appropriate kernel/parsestreams.c for details). Meinberg receivers can be connected by feeding the PPS pulse of the receiver via a 1488 level converter to Pin 8 (CD) of a Sun serial zs-port. To select PPS support the STREAMS driver for PARSE must be loaded and the mode parameter is the mode value of above plus 128. If 128 is not added to the mode value PPS will be detected to be available but it will not be used. For PPS to be used you MUST add 128 to the mode parameter.&lt;/p&gt;
&lt;p&gt;There exists a special firmware release for the PZF535 Meinberg receivers. This release (PZFUERL 4.6 (or higher - The UERL is important)) is absolutely recommended for XNTP use, as it provides LEAP warning, time code time zone information and alternate antenna indication. Please check with Meinberg for this firmware release. For the Meinberg GPS166 receiver is also a special firmware release available (Uni-Erlangen). This release must be used for proper operation.&lt;/p&gt;
&lt;p&gt;The raw DCF77 pulses can be fed via a level converter directly into Pin 3 (Rx) of the Sun. The telegrams will be decoded an used for synchronization. AM DCF77 receivers are running as low as $25. The accuracy is dependent on the receiver and is somewhere between 2ms (expensive) to 10ms (cheap). Upon bad signal reception of DCF77 synchronizations will cease as no backup oscillator is available as usually found in other reference clock receivers. So it is important to have a good place for the DCF77 antenna. For transmitter shutdowns you are out of luck unless you have other NTP servers with alternate time sources available.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;monitor-data&#34;&gt;Monitor Data&lt;/h4&gt;
&lt;p&gt;Clock state statistics are written hourly to the syslog service. Online information can be found by examining the clock variables via the ntpq cv command.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;fudge-factors&#34;&gt;Fudge Factors&lt;/h4&gt;
&lt;dt&gt;time1 _time_&lt;/dt&gt;
&lt;p&gt;Specifies the time offset calibration factor, in seconds and fraction, with default depending on clock type.&lt;/p&gt;
&lt;dt&gt;time2 _time_&lt;/dt&gt;
&lt;p&gt;Specifies the offset if the PPS signal to the actual time. (PPS fine tuning).&lt;/p&gt;
&lt;dt&gt;stratum _number_&lt;/dt&gt;
&lt;p&gt;Specifies the driver stratum, in decimal from 0 to 15, with default 0.&lt;/p&gt;
&lt;dt&gt;refid _string_&lt;/dt&gt;
&lt;p&gt;Specifies the driver reference identifier, an ASCII string from one to four characters, with default according to current clock type.&lt;/p&gt;
&lt;dt&gt;flag1 0 | 1&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;flag2 0 | 1&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;flag3 0 | 1&lt;/dt&gt;
&lt;p&gt;Delete next leap second instead of adding it.&lt;/p&gt;
&lt;dt&gt;flag4 0 | 1&lt;/dt&gt;
&lt;p&gt;Delete next leap second instead of adding it - flag will be re-defined soon - so don&amp;rsquo;t use it. Statistics are provided by more common means (syslog, clock variable via ntpq)&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;making-your-own-parse-clocks&#34;&gt;Making your own PARSE clocks&lt;/h4&gt;
&lt;p&gt;The parse clock mechanism is deviated from the way other xntp reference clocks work. For a short description of how to build parse reference clocks, see &lt;a href=&#34;/archives/3-5.93e/parsenew&#34;&gt;making PARSE clocks&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;additional-information&#34;&gt;Additional Information&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;/archives/3-5.93e/refclock&#34;&gt;Reference Clock Drivers&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Heath WWV/WWVH Receiver</title>
      <link>/archives/3-5.93e/driver19/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/driver19/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver19/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver19/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver19/#monitor-data&#34;&gt;Monitor Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver19/#fudge-factors&#34;&gt;Fudge Factors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver19/#additional-information&#34;&gt;Additional Information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;Address: 127.127.19.&lt;em&gt;u&lt;/em&gt;&lt;br&gt;
Reference ID: &lt;tt&gt;WWV&lt;/tt&gt;&lt;br&gt;
Driver ID: &lt;tt&gt;WWV_HEATH&lt;/tt&gt;&lt;br&gt;
Serial Port: &lt;tt&gt;/dev/heath_u_&lt;/tt&gt;; 1200 baud, 8-bits, no parity&lt;br&gt;
Features: &lt;tt&gt;tty_clk&lt;/tt&gt;&lt;br&gt;
Requires: &lt;tt&gt;/usr/include/sys/termios.h&lt;/tt&gt; header file with modem control&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;This driver supports the Heath GC-1000 Most Accurate Clock, with RS232C Output Accessory. This is a WWV/WWVH receiver somewhat less robust than other supported receivers. Its claimed accuracy is 100 ms when actually synchronized to the broadcast signal, but this doesn&amp;rsquo;t happen even most of the time, due to propagation conditions, ambient noise sources, etc. When not synchronized, the accuracy is at the whim of the internal clock oscillator, which can wander into the sunset without warning. Since the indicated precision is 100 ms, expect a host synchronized only to this thing to wander to and fro, occasionally being rudely stepped when the offset exceeds the default CLOCK_MAX of 128 ms.&lt;/p&gt;
&lt;p&gt;The internal DIPswitches should be set to operate at 1200 baud in MANUAL mode and the current year. The external DIPswitches should be set to GMT and 24-hour format. It is very important that the year be set correctly in the DIPswitches; otherwise, the day of year will be incorrect after 28 April of a normal or leap year.&lt;/p&gt;
&lt;p&gt;In MANUAL mode the clock responds to a rising edge of the request to send (RTS) modem control line by sending the timecode. Therefore, it is necessary that the operating system implement the &lt;tt&gt;TIOCMBIC&lt;/tt&gt; and &lt;tt&gt;TIOCMBIS&lt;/tt&gt; ioctl system calls and &lt;tt&gt;TIOCM_RTS&lt;/tt&gt; control bit. Present restrictions require the use of a POSIX-compatible programming interface, although other interfaces may work as well.&lt;/p&gt;
&lt;p&gt;The clock message consists of 23 ASCII printing characters in the following format:&lt;/p&gt;
&lt;pre&gt;hh:mm:ss.f     dd/mm/yr&amp;lsaquo;cr&amp;rsaquo;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;hh:mm:ss.f&lt;/code&gt; = hours, minutes, seconds&lt;/p&gt;
&lt;p&gt;&lt;code&gt;f&lt;/code&gt; = deciseconds (&lt;code&gt;?&lt;/code&gt; when out of spec)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dd/mm/yr&lt;/code&gt; = day, month, year&lt;/p&gt;
&lt;p&gt;The alarm condition is indicated by &lt;code&gt;?&lt;/code&gt;, rather than a digit, at A. Note that &lt;code&gt;0?:??:??.?&lt;/code&gt; is displayed before synchronization is first established and &lt;code&gt;hh:mm:ss.?&lt;/code&gt; once synchronization is established and then lost again for about a day.&lt;/p&gt;
&lt;p&gt;A fudge time1 value of .07 s appears to center the clock offset residuals.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;monitor-data&#34;&gt;Monitor Data&lt;/h4&gt;
&lt;p&gt;When enabled by the &lt;tt&gt;flag4&lt;/tt&gt; fudge flag, every received timecode is written as-is to the &lt;tt&gt;clockstats&lt;/tt&gt; file.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;fudge-factors&#34;&gt;Fudge Factors&lt;/h4&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;tt&gt;time1 _time_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the time offset calibration factor, in seconds and fraction, with default 0.0.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;time2 _time_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;stratum _number_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the driver stratum, in decimal from 0 to 15, with default 0.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;refid _string_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the driver reference identifier, an ASCII string from one to four characters, with default &lt;tt&gt;WWV&lt;/tt&gt;.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag1 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag2 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag3 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enable &lt;tt&gt;ppsclock&lt;/tt&gt; line discipline/streams module if set.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag4 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enable &lt;tt&gt;clockstats&lt;/tt&gt; recording if set.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;additional-information&#34;&gt;Additional Information&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;/archives/3-5.93e/refclock&#34;&gt;Reference Clock Drivers&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Hewlett Packard 58503A GPS Receiver</title>
      <link>/archives/3-5.93e/driver26/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/driver26/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver26/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver26/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver26/#monitor-data&#34;&gt;Monitor Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver26/#fudge-factors&#34;&gt;Fudge Factors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;Address: 127.127.26.&lt;em&gt;u&lt;/em&gt;&lt;br&gt;
Reference ID: &lt;tt&gt;GPS&lt;/tt&gt;&lt;br&gt;
Driver ID: &lt;tt&gt;GPS_HP&lt;/tt&gt;&lt;br&gt;
Serial Port: &lt;tt&gt;/dev/hpgps_u_&lt;/tt&gt;; 9600 baud, 8-bits, no parity&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;This driver supports the HP 58503A Time and Frequency Reference Receiver. It uses HP SmartClock (TM) to implement an Enhanced GPS receiver. The receiver accuracy when locked to GPS in normal operation is better than 1 usec. The accuracy when operating in holdover is typically better than 10 us per day. It receiver should be operated with factory default settings. Initial driver operation: expects the receiver to be already locked to GPS, configured and able to output timecode format 2 messages.&lt;/p&gt;
&lt;p&gt;The driver uses the poll sequence &lt;tt&gt;:PTIME:TCODE?&lt;/tt&gt; to get a response from the receiver. The receiver responds with a timecode string of ASCII printing characters, followed by a ‹cr›‹lf›, followed by a prompt string issued by the receiver, in the following format:&lt;/p&gt;
&lt;pre&gt;T#yyyymmddhhmmssMFLRVcc&amp;lsaquo;cr&amp;rsaquo;&amp;lsaquo;lf&amp;rsaquo;&lt;/pre&gt;
&lt;p&gt;The driver processes the response at the ‹cr› and ‹lf›, so what the driver sees is the prompt from the previous poll, followed by this timecode. The prompt from the current poll is (usually) left unread until the next poll. So (except on the very first poll) the driver sees this:&lt;/p&gt;
&lt;pre&gt;T#yyyymmddhhmmssMFLRVcc&amp;lsaquo;cr&amp;rsaquo;&amp;lsaquo;lf&amp;rsaquo;&lt;/pre&gt;
&lt;p&gt;The T is the on-time character, at 980 msec. before the next 1PPS edge. The # is the timecode format type. We look for format 2. Without any of the CLK or PPS stuff, then, the receiver buffer timestamp at the ‹cr› is 24 characters later, which is about 25 msec. at 9600 bps, so the first approximation for fudge time1 is nominally -0.955 seconds. This number probably needs adjusting for each machine / OS type, so far: -0.955000 on an HP 9000 Model 712/80 HP-UX 9.05 -0.953175 on an HP 9000 Model 370 HP-UX 9.10&lt;/p&gt;
&lt;p&gt;This receiver also provides a 1-PPS signal, but I haven&amp;rsquo;t figured out how to deal with any of the CLK or PPS stuff yet. Stay tuned.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;monitor-data&#34;&gt;Monitor Data&lt;/h4&gt;
&lt;p&gt;When enabled by the &lt;tt&gt;flag4&lt;/tt&gt; fudge flag, every received timecode is written as-is to the &lt;tt&gt;clockstats&lt;/tt&gt; file.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;fudge-factors&#34;&gt;Fudge Factors&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;time1 _time_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the time offset calibration factor, in seconds and fraction, with default 0.0.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;time2 _time_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;stratum _number_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the driver stratum, in decimal from 0 to 15, with default 0.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;refid _string_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the driver reference identifier, an ASCII string from one to four characters, with default &lt;tt&gt;GPS&lt;/tt&gt;.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag1 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag2 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag3 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enable &lt;tt&gt;ppsclock&lt;/tt&gt; line discipline/streams module if set.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag4 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enable &lt;tt&gt;clockstats&lt;/tt&gt; recording if set.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Hints and Kinks</title>
      <link>/archives/3-5.93e/hints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/hints/</guid>
      <description>
        
        
        &lt;p&gt;This is an index for a set of troubleshooting notes contained in individual text files in the &lt;tt&gt;./hints&lt;/tt&gt; directory. They were supplied by various volunteers in the form of mail messages, patches or just plain word of mouth. Each note applies to a specific computer and operating system and gives information found useful in setting up the xntp3 distribution or site configuration. The notes are very informal and subject to errors; no attempt has been made to verify the accuracy of the information contained in them.&lt;/p&gt;
&lt;p&gt;Additions or corrections to this list or the information contained in the notes is solicited. The most useful submissions include the name of the computer manufacturer (and model numbers where appropriate), operating system (specific version(s) where appropriate), problem description, problem solution and submitter&amp;rsquo;s name and electric address. If the submitter is willing to continue debate on the problem, please so advise. Bash &lt;a href=&#34;/archives/hints/toc&#34;&gt;here&lt;/a&gt; for a directory listing.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: How to build new PARSE clocks</title>
      <link>/archives/3-5.93e/parsenew/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/parsenew/</guid>
      <description>
        
        
        &lt;p&gt;Here is an attempt to sketch out what you need to do in order to add another clock to the parse driver: Currently the implementation is being cleaned up - so not all information in here is completely correct. Refer to the included code where in doubt.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Prerequisites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Does the system you want the clock connect to have the include files termio.h or termios.h ? (You need that for the parse driver)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What to do:&lt;/p&gt;
&lt;p&gt;Make a conversion module (&lt;tt&gt;libparse/clk_*.c&lt;/tt&gt;)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What is the time code format ?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Find year, month, day, hour, minute, second, status (synchronised or not), possibly time zone information (you need to give the offset to UTC). You will have to convert the data from a string into a struct clocktime:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;pre&amp;gt;      struct clocktime                /* clock time broken up from time code */
          {
        long day;
        long month;
        long year;
        long hour;
        long minute;
        long second;
        long usecond;
        long utcoffset;       /* in seconds */
        time_t utcoffset;     /* true utc time instead of date/time */
        long flags;           /* current clock status */
          };
    &amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Conversion is usually simple and straight forward. For the flags following values can be OR&amp;rsquo;ed together:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;pre&amp;gt;     PARSEB_ANNOUNCE           switch time zone warning (informational only)
         PARSEB_POWERUP            no synchronisation - clock confused (must set then)
         PARSEB_NOSYNC             timecode currently not confirmed (must set then)
                                   usually on reception error when there is still a
                                   chance the the generated time is still ok.

         PARSEB_DST                DST in effect (informational only)
         PARSEB_UTC                timecode contains UTC time (informational only)
         PARSEB_LEAPADD            LEAP addition warning (prior to leap happening - must set when imminent)
                       also used for time code that do not encode the
                       direction (as this is currently the default).
         PARSEB_LEAPDEL            LEAP deletion warning (prior to leap happening - must set when imminent)
         PARSEB_ALTERNATE          backup transmitter (informational only)
         PARSEB_POSITION           geographic position available (informational only)
         PARSEB_LEAPSECOND         actual leap second (this time code is the leap
                                   second - informational only)
    &amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These are feature flags denoting items that are supported by the clock:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;pre&amp;gt;     PARSEB_S_LEAP             supports LEAP - might set PARSEB_LEAP
         PARSEB_S_ANTENNA          supports ANTENNA - might set PARSEB_ALTERNATE
         PARSEB_S_PPS              supports PPS time stamping
         PARSEB_S_POSITION         supports position information (GPS)
       &amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the utctime field is non zero this value will be take as time code value. This allows for conversion routines that already have the utc time value. The utctime field gives the seconds since Jan 1st 1970, 0:00:00. The useconds field gives the respective usec value. The fields for date and time (down to second resolution) will be ignored.&lt;/p&gt;
&lt;p&gt;Conversion is done in the &lt;tt&gt;cvt_*&lt;/tt&gt; routine in &lt;tt&gt;parse/clk_*.c&lt;/tt&gt; files, look in them for examples. The basic structure is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;pre&amp;gt;     struct clockformat &amp;lt;yourclock&amp;gt;_format = {
           lots of fields for you to fill out (see below)
         };

         static cvt_&amp;lt;yourclock&amp;gt;()
           ...
         {
           if (&amp;lt;I do not recognize my time code&amp;gt;) {
             return CVT_NONE;
           } else {
             if (&amp;lt;conversion into clockformat is ok&amp;gt;) {
               &amp;lt;set all necessary flags&amp;gt;;
               return CVT_OK;
             } else {
               return CVT_FAIL|CVT_BADFMT;
             }
           }
    &amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The struct clockformat is the interface to the rest of the parse driver - it holds all information necessary for finding the clock message and doing the appropriate time stamping.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;pre&amp;gt;struct clockformat
    {
      u_long (*input)();
      /* input routine - your routine - cvt_&amp;lt;yourclock&amp;gt; */
      u_long (*convert)();
      /* conversion routine - your routine - cvt_&amp;lt;yourclock&amp;gt; */
      /* routine for handling RS232 sync events (time stamps) - usually sync_simple */
      u_long (*syncpps)(); 
      /* PPS input routine - usually pps_one */
      void           *data;
      /* local parameters - any parameters/data/configuration info your conversion
         routine might need */
      char           *name;
      /* clock format name - Name of the time code */
      unsigned short  length;
      /* maximum length of data packet for your clock format */
      u_long   flags;
     /* information for the parser what to look for */
    };
    &amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above should have given you some hints on how to build a &lt;tt&gt;clk_*.c&lt;/tt&gt; file with the time code conversion. See the examples and pick a clock closest to yours and tweak the code to match your clock.&lt;/p&gt;
&lt;p&gt;In order to make your &lt;tt&gt;clk_*.c&lt;/tt&gt; file usable a reference to the clockformat structure must be put into &lt;tt&gt;parse_conf.c&lt;/tt&gt;.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;TTY setup and initialisation/configuration will be done in &lt;tt&gt;ntpd/refclock_parse.c&lt;/tt&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Find out the exact tty settings for your clock (baud rate, parity, stop bits, character size, &amp;hellip;) and note them in terms of &lt;tt&gt;termio*.h&lt;/tt&gt; c_cflag macros.&lt;/p&gt;
&lt;p&gt;In &lt;tt&gt;ntpd/refclock_parse.c&lt;/tt&gt; fill out a new the struct clockinfo element (that allocates a new &amp;ldquo;IP&amp;rdquo; address - see comments) (see all the other clocks for example).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;pre&amp;gt;   struct clockinfo
         {
          u_long  cl_flags;             /* operation flags (io modes) */
         PARSE_F_PPSPPS       use loopfilter PPS code (CIOGETEV)
         PARSE_F_PPSONSECOND  PPS pulses are on second
         usually flags stay 0 as they are used only for special setups

        void  (*cl_poll)();           /* active poll routine */
             The routine to call when the clock needs data sent to it in order to
             get a time code from the clock (e.g. Trimble clock)

        int   (*cl_init)();           /* active poll init routine */
             The routine to call for very special initializations.

        void  (*cl_event)();          /* special event handling (e.g. reset clock) */
             What to do, when an event happens - used to re-initialize clocks on timeout.

        void  (*cl_end)();            /* active poll end routine */
             The routine to call to undo any special initialisation (free memory/timers)

        void   *cl_data;              /* local data area for &amp;quot;poll&amp;quot; mechanism */
             local data for polling routines

        u_fp    cl_rootdelay;         /* rootdelay */
             NTP rootdelay estimate (usually 0)

             u_long  cl_basedelay;         /* current offset - unsigned l_fp
                                                  fractional part (fraction) by
                                                  which the RS232 time code is
                                                  delayed from the actual time. */

        u_long  cl_ppsdelay;          /* current PPS offset - unsigned l_fp fractional
             time (fraction) by which the PPS time stamp is delayed (usually 0)
       part */

        char   *cl_id;                /* ID code (usually &amp;quot;DCF&amp;quot;) */
             Refclock id - (max 4 chars)

        char   *cl_description;       /* device name */
             Name of this device.

        char   *cl_format;            /* fixed format */
             If the data format cann not ne detected automatically this is the name
         as in clk_*.c clockformat.

        u_char  cl_type;              /* clock type (ntp control) */
             Type if clock as in clock status word (ntp control messages) - usually 0

        u_long  cl_maxunsync;         /* time to trust oscillator after losing synch
      */
             seconds a clock can be trusted after losing synchronisation.

        u_long  cl_speed;             /* terminal input &amp;amp; output baudrate */
        u_long  cl_cflag;             /* terminal io flags */
        u_long  cl_iflag;             /* terminal io flags */
        u_long  cl_oflag;             /* terminal io flags */
        u_long  cl_lflag;             /* terminal io flags */
             termio*.h tty modes.

        u_long  cl_samples;           /* samples for median filter */
        u_long  cl_keep;              /* samples for median filter to keep */
             median filter parameters - smoothing and rejection of bad samples
      } clockinfo[] = {
      ...,&amp;lt;other clocks&amp;gt;,...
      { &amp;lt; your parameters&amp;gt; },
      };

    &amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well, this is very sketchy, I know. But I hope it helps a little bit. The best way is to look which clock comes closest to your and tweak that code.&lt;/p&gt;
&lt;p&gt;Two sorts of clocks are used with parse. Clocks that automatically send their time code (once a second) do not need entries in the poll routines because they send the data all the time. The second sort are the clocks that need a command sent to them in order to reply with a time code (like the Trimble clock).&lt;/p&gt;
&lt;p&gt;For questions: &lt;a href=&#34;mailto:%20kardel@acm.org&#34;&gt;kardel@acm.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please include an exact description on how your clock works. (initialisation, TTY modes, strings to be sent to it, responses received from the clock).&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: How to Write a Reference Clock Driver</title>
      <link>/archives/3-5.93e/howto/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/howto/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/howto/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/howto/#files-which-need-to-be-changed&#34;&gt;Files Which Need to be Changed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/howto/#interface-routine-overview&#34;&gt;Interface Routine Overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;Reference clock support maintains the fiction that the clock is actually an ordinary peer in the NTP tradition, but operating at a synthetic stratum of zero. The entire suite of algorithms used to filter the received data, select the best clocks or peers and combine them to produce a local clock correction are operative as with ordinary NTP peers. In this way, defective clocks can be detected and removed from the peer population. As no packets are exchanged with a reference clock, however, we replace the transmit, receive and packet procedures with separate code to simulate them.&lt;/p&gt;
&lt;p&gt;Radio and modem reference clocks by convention have addresses in the form &lt;tt&gt;127.127.&lt;em&gt;t&lt;/em&gt;.&lt;em&gt;u&lt;/em&gt;&lt;/tt&gt;, where &lt;em&gt;t&lt;/em&gt; is the clock type and &lt;em&gt;u&lt;/em&gt; in the range 0-3 is used to distinguish multiple instances of clocks of the same type. Most clocks require a serial or parallel port or special bus peripheral. The particular device is normally specified by adding a soft link &lt;tt&gt;/dev/device_d_d&lt;/tt&gt; to the particular hardware device involved, where &lt;tt&gt;&lt;em&gt;d&lt;/em&gt;&lt;/tt&gt; corresponds to the unit number.&lt;/p&gt;
&lt;p&gt;The best way to understand how the clock drivers work is to study the &lt;tt&gt;ntp_refclock.c&lt;/tt&gt; module and one of the drivers already implemented, such as &lt;tt&gt;refclock_wwvb.c&lt;/tt&gt;. Routines &lt;tt&gt;refclock_transmit()&lt;/tt&gt; and &lt;tt&gt;refclock_receive()&lt;/tt&gt; maintain the peer variables in a state analogous to a network peer and pass received data on through the clock filters. Routines &lt;tt&gt;refclock_peer()&lt;/tt&gt; and &lt;tt&gt;refclock_unpeer()&lt;/tt&gt; are called to initialize and terminate reference clock associations, should this ever be necessary. A set of utility routines is included to open serial devices, process sample data, edit input lines to extract embedded timestamps and to perform various debugging functions.&lt;/p&gt;
&lt;p&gt;The main interface used by these routines is the &lt;tt&gt;refclockproc&lt;/tt&gt; structure, which contains for most drivers the decimal equivalents of the year, day, month, hour, second and millisecond/microsecond decoded from the ASCII timecode. Additional information includes the receive timestamp, exception report, statistics tallies, etc. In addition, there may be a driver-specific unit structure used for local control of the device. The support routines are passed a pointer to the &lt;tt&gt;peer&lt;/tt&gt; structure, which is used for all peer-specific processing and contains a pointer to the &lt;tt&gt;refclockproc&lt;/tt&gt; structure, which in turn contains a pointer to the unit structure, if used. A table &lt;tt&gt;typeunit[type][unit]&lt;/tt&gt; contains the peer structure pointer for each configured clock type and unit.&lt;/p&gt;
&lt;p&gt;Many drivers support the &lt;tt&gt;tty_clk&lt;/tt&gt; and/or &lt;tt&gt;ppsclock&lt;/tt&gt; line disciplines or streams modules described in the &lt;a href=&#34;/archives/3-5.93e/ldisc&#34;&gt;Line Disciplines and Streams Modules&lt;/a&gt; page. The &lt;tt&gt;tty_clk&lt;/tt&gt; module reduces latency errors due to the operating system and serial port code in slower systems. The &lt;tt&gt;ppsclock&lt;/tt&gt; module is an interface for the PPS signal provided by some radios. It can be connected via a level converter/pulse generator described in the &lt;a href=&#34;/archives/3-5.93e/gadget&#34;&gt;Gadget Box PPS Level Converter and CHU Modem&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;By convention, reference clock drivers are named in the form &lt;tt&gt;refclock__xxxx_.c&lt;/tt&gt;, where _xxxx_ is a unique string. Each driver is assigned a unique type number, long-form driver name, short-form driver name, and device name. The existing assignments are in the &lt;a href=&#34;/archives/3-5.93e/refclock&#34;&gt;Reference Clock Drivers&lt;/a&gt; page and its dependencies. Drivers are conditionally compiled using a unique flag string in the &lt;tt&gt;CLOCKDEFS&lt;/tt&gt; line described in the &lt;a href=&#34;/archives/3-5.93e/config&#34;&gt;Configuration Options&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;The standard clock driver interface includes a set of common support routines some of which do such things as start and stop the device, open the serial port, and establish special functions such as PPS signal support. Other routines read and write data to the device and process time values. Most drivers need only a little customizing code to, for instance, transform idiosyncratic timecode formats to standard form, poll the device as necessary, and handle exception conditions. A standard interface is available for remote debugging and monitoring programs, such as &lt;tt&gt;ntpq&lt;/tt&gt; and &lt;tt&gt;xntpdc&lt;/tt&gt;, as well as the &lt;tt&gt;filegen&lt;/tt&gt; facility, which can be used to record device status on a continuous basis.&lt;/p&gt;
&lt;p&gt;The interface code and this documentation have been developed over some time and required not a little hard work converting old drivers, etc. Should you find success writing a driver for a new radio or modem service, please consider contributing it to the common good. Send the driver file itself and patches for the other files to Dave Mills (&lt;a href=&#34;mailto:mills@udel.edu&#34;&gt;mills@udel.edu&lt;/a&gt;).&lt;/p&gt;
&lt;h4 id=&#34;files-which-need-to-be-changed&#34;&gt;Files Which Need to be Changed&lt;/h4&gt;
&lt;p&gt;A new reference clock implementation needs to supply, in addition to the driver itself, several changes to existing files.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;./include/ntp.h&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The reference clock type defines are used in many places. Each driver is assigned a unique type number. Unused numbers are clearly marked in the list. A unique &lt;tt&gt;REFCLK__xxxx_&lt;/tt&gt; identification code should be recorded in the list opposite its assigned type number.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;./libntp/clocktypes.c&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The &lt;tt&gt;./libntp/clktype&lt;/tt&gt; array is used by certain display functions. A unique short-form name of the driver should be entered together with its assigned identification code.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;./xntpd/ntp_control.c&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The &lt;tt&gt;clocktypes&lt;/tt&gt; array is used for certain control message displays functions. It should be initialized with the reference clock class assigned to the driver, as per the NTP specification RFC-1305. See the &lt;tt&gt;./include/ntp_control.h&lt;/tt&gt; header file for the assigned classes.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;./xntpd/refclock_conf.c&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This file contains a list of external structure definitions which are conditionally defined. A new set of entries should be installed similar to those already in the table. The &lt;tt&gt;refclock_conf&lt;/tt&gt; array is a set of pointers to transfer vectors in the individual drivers. The external name of the transfer vector should be initialized in correspondence with the type number.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;./acconfig.h&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This is a configuration file used by the autoconfigure scheme. Add two lines in the form:&lt;/p&gt;
&lt;pre&gt;  /* Define if we have a FOO clock */
  #undef FOO
&lt;/pre&gt;
&lt;p&gt;where FOO is the define used to cause the driver to be included in the distribution.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;./configure.in&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This is a configuration file used by the autoconfigure scheme. Add lines similar to the following:&lt;/p&gt;
&lt;pre&gt;  AC_MSG_CHECKING(FOO clock_description)
  AC_ARG_ENABLE(FOO, [  --enable-FOO        clock_description],
      [ntp_ok=$enableval], [ntp_ok=$ntp_eac])
  if test &#34;$ntp_ok&#34; = &#34;yes&#34;; then
      ntp_refclock=yes
      AC_DEFINE(FOO)
  fi
  AC_MSG_RESULT($ntp_ok)
&lt;/pre&gt;
&lt;p&gt;(Note that &lt;tt&gt;$ntp_eac&lt;/tt&gt; is the value from &lt;tt&gt;&amp;ndash; {dis,en}able-all-clocks&lt;/tt&gt; for non-PARSE clocks and &lt;tt&gt;$ntp_eacp&lt;/tt&gt; is the value from &lt;tt&gt;&amp;ndash;{dis,en}able-parse- clocks&lt;/tt&gt; for PARSE clocks. See the documentation on the autoconf and automake tools from the GNU distributions.)&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;./xntpd/Makefile.am&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This is the makefile prototype used by the autoconfigure scheme. Add the driver file name to the entries already in the &lt;tt&gt;xntpd_SOURCES&lt;/tt&gt; list.&lt;/p&gt;
&lt;p&gt;Patches to &lt;tt&gt;automake-1.0&lt;/tt&gt; are required for the autoconfigure scripts to work properly. The file &lt;tt&gt;automake- 1.0.patches&lt;/tt&gt; can be used for this purpose.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;./xntpd/Makefile.am&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Do the following sequence of commands:&lt;/p&gt;
&lt;pre&gt;  automake
  autoconf
  autoheader
  configure
&lt;/pre&gt;
&lt;p&gt;or simply run &lt;tt&gt;make&lt;/tt&gt;, which will do this command sequence automatically.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;interface-routine-overview&#34;&gt;Interface Routine Overview&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;refclock_newpeer&lt;/tt&gt; - initialize and start a reference clock&lt;/dt&gt;
&lt;p&gt;This routine allocates and initializes the interface structure which supports a reference clock in the form of an ordinary NTP peer. A driver-specific support routine completes the initialization, if used. Default peer variables which identify the clock and establish its reference ID and stratum are set here. It returns one if success and zero if the clock address is invalid or already running, insufficient resources are available or the driver declares a bum rap.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;refclock_unpeer&lt;/tt&gt; - shut down a clock&lt;/dt&gt;
&lt;p&gt;This routine is used to shut down a clock and return its resources to the system.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;refclock_transmit&lt;/tt&gt; - simulate the transmit procedure&lt;/dt&gt;
&lt;p&gt;This routine implements the NTP transmit procedure for a reference clock. This provides a mechanism to call the driver at the NTP poll interval, as well as provides a reachability mechanism to detect a broken radio or other madness.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;refclock_sample&lt;/tt&gt; - process a pile of samples from the clock&lt;/dt&gt;
&lt;p&gt;This routine converts the timecode in the form days, hours, minutes, seconds, milliseconds/microseconds to internal timestamp format. It then calculates the difference from the receive timestamp and assembles the samples in a shift register. It implements a recursive median filter to suppress spikes in the data, as well as determine a rough dispersion estimate. A configuration constant time adjustment &lt;tt&gt;fudgetime1&lt;/tt&gt; can be added to the final offset to compensate for various systematic errors. The routine returns one if success and zero if failure due to invalid timecode data or very noisy offsets.&lt;/p&gt;
&lt;p&gt;Note that no provision is included for the year, as provided by some (but not all) radio clocks. Ordinarily, the year is implicit in the Unix file system and hardware/software clock support, so this is ordinarily not a problem. Nevertheless, the absence of the year should be considered more a bug than a feature and may be supported in future.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;refclock_receive&lt;/tt&gt; - simulate the receive and packet procedures&lt;/dt&gt;
&lt;p&gt;This routine simulates the NTP receive and packet procedures for a reference clock. This provides a mechanism in which the ordinary NTP filter, selection and combining algorithms can be used to suppress misbehaving radios and to mitigate between them when more than one is available for backup.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;refclock_gtlin&lt;/tt&gt; - groom next input line and extract timestamp&lt;/dt&gt;
&lt;p&gt;This routine processes the timecode received from the clock and removes the parity bit and control characters. If a timestamp is present in the timecode, as produced by the &lt;tt&gt;tty_clk&lt;/tt&gt; line discipline/streams module, it returns that as the timestamp; otherwise, it returns the buffer timestamp. The routine return code is the number of characters in the line.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;refclock_open&lt;/tt&gt; - open serial port for reference clock&lt;/dt&gt;
&lt;p&gt;This routine opens a serial port for I/O and sets default options. It returns the file descriptor if success and zero if failure.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;refclock_ioctl&lt;/tt&gt; - set serial port control functions&lt;/dt&gt;
&lt;p&gt;This routine attempts to hide the internal, system-specific details of serial ports. It can handle POSIX (&lt;tt&gt;termios&lt;/tt&gt;), SYSV (&lt;tt&gt;termio&lt;/tt&gt;) and BSD (&lt;tt&gt;sgtty&lt;/tt&gt;) interfaces with varying degrees of success. The routine sets up the &lt;tt&gt;tty_clk, chu_clk&lt;/tt&gt; and &lt;tt&gt;ppsclock&lt;/tt&gt; streams module/line discipline, if compiled in the daemon and requested in the call. The routine returns one if success and zero if failure.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;refclock_control&lt;/tt&gt; - set and/or return clock values&lt;/dt&gt;
&lt;p&gt;This routine is used mainly for debugging. It returns designated values from the interface structure that can be displayed using xntpdc and the clockstat command. It can also be used to initialize configuration variables, such as &lt;tt&gt;fudgetimes, fudgevalues,&lt;/tt&gt; reference ID and stratum.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;refclock_buginfo&lt;/tt&gt; - return debugging info&lt;/dt&gt;
&lt;p&gt;This routine is used mainly for debugging. It returns designated values from the interface structure that can be displayed using &lt;tt&gt;xntpdc&lt;/tt&gt; and the &lt;tt&gt;clkbug&lt;/tt&gt; command.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: IRIG Audio Decoder</title>
      <link>/archives/3-5.93e/driver6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/driver6/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver6/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver6/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver6/#monitor-data&#34;&gt;Monitor Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver6/#fudge-factors&#34;&gt;Fudge Factors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver6/#additional-information&#34;&gt;Additional Information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;Address: 127.127.6.&lt;em&gt;u&lt;/em&gt;&lt;br&gt;
Reference ID: &lt;tt&gt;IRIG&lt;/tt&gt;&lt;br&gt;
Driver ID: &lt;tt&gt;IRIG_AUDIO&lt;/tt&gt;&lt;br&gt;
Audio Device: &lt;tt&gt;/dev/irigu&lt;/tt&gt;
Requires: modified SunOS 4.1.3 BSD audio driver and &lt;tt&gt;/usr/include/sys/bsd_audioirig.h&lt;/tt&gt; header file&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;This driver supports the Inter-Range Instrumentation Group standard time-distribution signal IRIG-B using the audio codec native to the Sun SPARCstation. This signal is generated by several radio clocks, including those made by Austron, TrueTime, Odetics and Spectracom, among others, although it is generally an add-on option. The signal is connected via an attenuator box and cable to the audio codec input on a Sun SPARCstation and requires a specially modified kernel audio driver described in the &lt;a href=&#34;/archives/3-5.93e/irig&#34;&gt;IRIG Support Using Sun SPARC Audio&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;The driver requires a modified SunOS 4.1.3 BSD audio driver available from the archive host ftp.udel.edu as the compressed tar archive &lt;tt&gt;pub/ntp/bsd_audio.tar.Z&lt;/tt&gt;. For ordinary audio applications, the audio driver is transparent; for use with the NTP driver, the audio driver decodes the IRIG audio signals and provides a timestamp, raw binary timecode, status byte and decoded ASCII timecode. The data are represented in the structure in the sys/bsd_audioirig.h header file:&lt;/p&gt;
&lt;pre&gt;     struct irig_time {
          struct timeval stamp;    /* timestamp */
          u_char    bits[13];      /* 100 IRIG data bits */
          u_char    status;        /* status byte */
          char      time[14];      /* time string (null terminated) */
&lt;/pre&gt;
&lt;p&gt;where stamp represents a timestamp at the zero crossing of the index marker at the second&amp;rsquo;s epoch, bits is a 13-octet, zero-padded binary- coded string representing code elements 1 through 100 in the IRIG-B code format, and status is a status byte, The decoded timestamp is a 13- octet, null-terminated ASCII string &lt;tt&gt;ddd hh:mm:ss*&lt;/tt&gt;, where ddd is the day of year, hh:mm:ss the time of day and &lt;code&gt;*&lt;/code&gt; is a status indicator, with &#39; &#39; indicating valid time and &lt;code&gt;?&lt;/code&gt; indicating something wrong.&lt;/p&gt;
&lt;p&gt;The timestamp is in Unix timeval format, consisting of two 32-bit words, the first of which is the seconds since 1970 and the second is the fraction of the second in microseconds. The status byte is zero if (a) the input signal is within amplitude tolerances, (b) the raw binary timecode contains only valid code elements, (c) 11 position identifiers have been found at the expected element positions, (d) the clock status byte contained in the timecode is valid, and (e) a time determination has been made since the last read() system call.&lt;/p&gt;
&lt;p&gt;The 100 elements of the IRIG-B timecode are numbered from 0 through 99. Position identifiers occur at elements 0, 9, 19 and every ten thereafter to 99. The control function (CF) elements begin at element 50 (CF 1) and extend to element 78 (CF 27). The straight-binary-seconds (SBS) field, which encodes the seconds of the UTC day, begins at element 80 (CF 28) and extends to element 97 (CF 44). The encoding of elements 50 (CF 1) through 78 (CF 27) is device dependent. This driver presently does not use the CF elements.&lt;/p&gt;
&lt;p&gt;Where feasible, the interface should be operated with signature control, so that, if the IRIG signal is lost or malformed, the interface produces an unmodulated signal, rather than possibly random digits. The driver will declare itself unsynchronized in this case.&lt;/p&gt;
&lt;pre&gt;     Element   CF        Function
     -------------------------------------
     55        6         time sync status
     60-63     10-13     bcd year units
     65-68     15-18     bcd year tens
&lt;/pre&gt;
&lt;p&gt;Timing jitter using the decoder and a Sun IPC is in the order of a few microseconds, although the overall timing accuracy is limited by the wander of the CPU oscillator used for timing purposes to a few hundred microseconds. These figures are comparable with what can be achieved using the PPS discipline as describe elsewhere in this note.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;monitor-data&#34;&gt;Monitor Data&lt;/h4&gt;
&lt;p&gt;The driver writes each timecode as received to the &lt;tt&gt;clockstats&lt;/tt&gt; file.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;fudge-factors&#34;&gt;Fudge Factors&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;time1 _time_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the time offset calibration factor, in seconds and fraction, with default 0.0.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;time2 _time_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;stratum _number_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the driver stratum, in decimal from 0 to 15, with default 0.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;refid _string_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the driver reference identifier, an ASCII string from one to four characters, with default &lt;tt&gt;IRIG&lt;/tt&gt;.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag1 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag2 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag3 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag4 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enable &lt;tt&gt;clockstats&lt;/tt&gt; recording if set.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;additional-information&#34;&gt;Additional Information&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;/archives/3-5.93e/refclock&#34;&gt;Reference Clock Drivers&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: IRIG Support Using Sun SPARC Audio</title>
      <link>/archives/3-5.93e/irig/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/irig/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/#programming-interface&#34;&gt;Programming Interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/#programming-example&#34;&gt;Programming Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/#implementation-and-configuration-notes&#34;&gt;Implementation and Configuration Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;introduction&#34;&gt;Introduction&lt;/h4&gt;
&lt;p&gt;A companion software distribution &lt;a href=&#34;https://www.eecis.udel.edu/~ntp/ntp_spool/depredated/ntp3/bsd_audio.tar.Z&#34;&gt;bsd_audio.tar.Z&lt;/a&gt; includes modifications to the BSD audio driver for the Sun SPARCstation written by Van Jacobson and collaborators at Lawrence Berkeley National Laboratory. The modifications provide for the connection of a standard Inter-Range Instrumentation Group (IRIG) timecode signal generator and the decoding of the signal to produce data sufficient to synchronize a host clock to the IRIG signal. There are several timing receivers now on the market that can produce IRIG signals, including those made by Austron, TrueTime, Odetics and Spectracom, among others. These data can be used to precisely synchronize the host computer clock to within a few microseconds without requiring level converters or pulse generators necessary with the pulse-per-second signals also produced by these receivers. The current implementation of the Network Time Protocol Version 3 supports the modified BSD driver when installed in the SunOS 4.1.x kernel.&lt;/p&gt;
&lt;p&gt;The specific IRIG signal format supported by the driver is designated IRIG-B. It consists of an amplitude-modulated 1000-Hz sinewave, where each symbol is encoded as ten full carrier cycles, or 10 ms in duration. The symbols are distinguished using a pulse-width code, where 2 ms corresponds to logic zero, 5 ms to logic one and 8 ms to a position identifier used for symbol synchronization. The complete IRIG-B message consists of a frame of ten fields, each field consisting of a nine information symbols followed by a position identifier for a total frame duration of one second. The first symbol in the frame is also a position identifier to facilitate frame synchronization.&lt;/p&gt;
&lt;p&gt;The IRIG-B signal encodes the day of year and time of day in binary- coded decimal (BCD) format, together with a set of control functions, which are not used by the driver, but included in the raw binary timecode. Either the BCD timecode or the combined raw timecode and BCD timecode can be returned in response to a &lt;tt&gt;read()&lt;/tt&gt; system call. The BCD timecode is in handy ASCII format: &lt;tt&gt;ddd hh:mm:ss*&lt;/tt&gt; for convenience in client programs. In this format the &lt;code&gt;*&lt;/code&gt; status character is &lt;code&gt;&amp;quot; &amp;quot;&lt;/code&gt; when the driver is operating normally and &lt;code&gt;?&lt;/code&gt; when errors may be present (see below). In order to reduce residual errors to the greatest extent possible, the driver computes a timestamp based on the value of the kernel clock at the on-time epoch of the IRIG-B signal. In addition, the driver automatically adjusts for slowly varying amplitude levels of the IRIG-B signal and suppresses noise transients.&lt;/p&gt;
&lt;p&gt;In operation the IRIG driver interprets the IRIG-B signal in real time, synchronizes to the signal, demodulates the data bits and prepares the data to be read later. At the on-time epoch a timestamp is captured from the kernel clock and adjusted for the phase of the IRIG carrier signal relative to the 8-kHz codec sample clock. When a client program issues a &lt;tt&gt;read()&lt;/tt&gt; request, the most recent timecode data, including a status byte and the corrected timestamp, are stored in a structure and returned to the caller. Depending on the frequency with which the driver is called, this may result in old data or duplicate data or even invalid data, should the driver be called before it has computed its first timestamp.&lt;/p&gt;
&lt;p&gt;In practice, the resulting ambiguity causes few problems. The caller converts the ASCII timecode returned by a &lt;tt&gt;read()&lt;/tt&gt; system call to Unix timeval format and subtracts it from the kernel timestamp provided by the driver. The result is an adjustment that can be subtracted from the kernel time, as returned in a &lt;tt&gt;gettimeofday()&lt;/tt&gt; call, for example, to correct for the deviation between IRIG time and kernel time. The result can always be relied on to within plus/minus 128 microseconds, the audio codec sampling interval, and ordinarily to within a few microseconds, as determined by the interpolation algorithm.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;programming-interface&#34;&gt;Programming Interface&lt;/h4&gt;
&lt;p&gt;The IRIG driver modifications are integrated in the BSD audio driver &lt;tt&gt;bsd_audio.c&lt;/tt&gt; without affecting its usual functions in transmitting and receiving ordinary speech, except when enabled by specific &lt;tt&gt;ioctl()&lt;/tt&gt; system calls. However, the driver cannot be used for both speech and IRIG signals at the same time. Once activated by a designated &lt;tt&gt;ioctl()&lt;/tt&gt; call, the driver remains active until it is explicitly deactivated by another &lt;tt&gt;ioctl()&lt;/tt&gt; call. This allows applications to configure the audio device and pass the pre-configured driver to other applications. Since the driver is currently only a receiver, it does not affect the operation of the BSD audio output driver.&lt;/p&gt;
&lt;p&gt;Data are read using the standard &lt;tt&gt;read()&lt;/tt&gt; system call. Since the output formats have constant lengths, the application receives the data into a fixed-length buffer or structure. The &lt;tt&gt;read()&lt;/tt&gt; call never blocks; it simply returns the most recent IRIG data received during the last second. It may happen that, due to unavoidable race conditions in the kernel, data for other than the most recent second are returned. The driver&amp;rsquo;s internal data structure is updated as an atomic unit; thus, the entire structure is valid, even if it contains old data. This should cause no problems, since in the intended application the driver is called at regular intervals by a time-synchronization daemon such as NTP. The daemon can determine the validity of the time indication by checking the timecode or status byte returned with the data.&lt;/p&gt;
&lt;p&gt;The header file &lt;tt&gt;bsd_audioirig.h&lt;/tt&gt; defines the irig_time structure and &lt;tt&gt;ioctl()&lt;/tt&gt; codes used by the driver. Following are those codes specific to the IRIG function of the driver. Unless indicated otherwise, the (third) argument of the &lt;tt&gt;ioctl()&lt;/tt&gt; system call points to an integer or string.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;audio_IRIG_OPEN&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command activates the IRIG receiver. The audio driver must be opened with this command before other commands can be issued. The argument is ignored. When the IRIG receiver is initialized, all internal data are purged and any buffered data are lost.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;audio_IRIG_CLOSE&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command deactivates the IRIG receiver. The argument is ignored. The buffers are purged and any buffered time data are lost. The original BSD audio driver functions are enabled and it resumes operating normally.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;audio_IRIG_SETFORMAT&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The argument is a pointer to an integer designating the output format for the IRIG data. There are currently two formats defined, 0 (default) and 1. If an invalid format is selected, the default format is used.&lt;/p&gt;
&lt;p&gt;The data returned by a &lt;tt&gt;read()&lt;/tt&gt; system call in format 0 is a character string in the format &lt;code&gt;ddd hh:mm:ss*\n&lt;/code&gt;, which consists of 13 ASCII characters followed by a &lt;code&gt;\n&lt;/code&gt; terminator for a total of 14 characters. The &lt;code&gt;*&lt;/code&gt; status character is an ASCII space if the status byte determined by the driver is zero and &lt;code&gt;?&lt;/code&gt; if not. This format is intended to be used with simple user programs that care only about the time to the nearest second.&lt;/p&gt;
&lt;p&gt;The data returned by a &lt;tt&gt;read()&lt;/tt&gt; system call in format 1 is a structure defined in the &lt;tt&gt;bsd_audioirig.h&lt;/tt&gt; header file:&lt;/p&gt;
&lt;pre&gt;        struct irig_time {
                struct timeval stamp;   /* timestamp */
                u_char bits[13];                /* 100 irig data bits */
                u_char status;                  /* status byte */
                char    time[14];                       /* time string
*/
        };
&lt;/pre&gt;
&lt;p&gt;The &lt;tt&gt;irig_time.stamp&lt;/tt&gt; is a pair of 32-bit longwords in Unix &lt;tt&gt;timeval&lt;/tt&gt; format, as defined in the &lt;tt&gt;/usr/include/sys/time.h&lt;/tt&gt; header file. The first word is the number of seconds since 1 January 1970, while the second is the number of microseconds in the current second. The timestamp is captured at the most recent on-time epoch of the IRIG timecode and applies to all other values returned in the &lt;tt&gt;irig_time&lt;/tt&gt; structure.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;irig_time.bits[13]&lt;/tt&gt; is a vector of 13 bytes to hold the 100-bit, zero-padded raw binary timecode, packed 8 symbols per byte. The symbol encoding maps IRIG one to 1 and both IRIG zero and IRIG position identifier to 0. The order of encoding is illustrated by the following diagram (the padding bits are represented by &lt;code&gt;xxxx&lt;/code&gt;, which are set to zero):&lt;/p&gt;
&lt;pre&gt;IRIG symbol number      00000000001111111111 . . . 8888889999999999xxxx
                                01234567890123456789 . . .
4567890123456789xxxx
                                ----------------------------------------
-------
bits byte       number  &lt;--00--&gt;&lt;--01--&gt;&lt;----     ----
&gt;&lt;--11--&gt;&lt;--12--&gt;
bits bit in byte        01234567012345670123 . . . 45670123456701234567
&lt;/pre&gt;
&lt;p&gt;The &lt;tt&gt;irig_time.status&lt;/tt&gt; is a single byte with bits defined in the &lt;tt&gt;bsd_audioirig.h&lt;/tt&gt; header file. In ordinary operation all bits of the status byte are zero and the ASCII space status character is set in the ASCII timecode. If any of these bits are nonzero, the &lt;code&gt;?&lt;/code&gt; status character is set in the ASCII timecode.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;audio_IRIG_BADSIGNAL&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The signal amplitude is outside tolerance limits, either in amplitude or modulation depth. The indicated time may or may not be in error. If the signal is too high, it may be clipped by the codec, so that the pulse width cannot be reliably determined. If too low, it may be obscured by noise. The nominal expectation is that the peak amplitude of the signal be maintained by the codec AGC at about 10 dB below the clipping level and that the modulation index be at least 0.5 (6 dB).&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;audio_IRIG_BADDATA&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;An invalid hex code (A through F) has been found where BCD data is expected. The ASCII representation of the invalid code is set to &lt;code&gt;?&lt;/code&gt;. Errors of this type are most likely due to noise on the IRIG signal due to ground loops, coupling to other noise sources, etc.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;audio_IRIG_BADSYNC&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;A code element has been found where a position identifier should be or a position identifier has been found where a code element should be. The time is meaningless and should be disregarded. Errors of this type can be due to severe noise on the IRIG signal due to ground loops, coupling to other noise sources, etc., or during initial acquisition of the signal.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;audio_IRIG_BADCLOCK&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Some IRIG timecode generators can indicate whether or not the generator is operating correctly or synchronized to its source of standard time using a designated field in the raw binary timecode. Where such information is available and the IRIG decoder can detect it, this bit is set when the generator reports anything except normal operating conditions.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;audio_IRIG_OLDDATA&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The IRIG time has not changed since the last time it was returned in a &lt;tt&gt;read()&lt;/tt&gt; call. This is not normally considered an error, unless it persists for longer than a few seconds, in which case it probably indicates a hardware problem.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;irig_time.time[14]&lt;/tt&gt; vector is a character string in the format &lt;code&gt;ddd hh:mm:ss*\0&lt;/code&gt;, which consists of 13 ASCII characters followed by a zero terminator. The * status character is an ASCII space if the status byte is zero and &lt;code&gt;?&lt;/code&gt; if not. This format is identical to format 0, except that in format 1 the time string is null-terminated.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;programming-example&#34;&gt;Programming Example&lt;/h4&gt;
&lt;p&gt;The following pseudo-code demonstrates how the IRIG receiver may be used by a simple user program. Of course, real code should include error checking after each call to ensure the driver is communicating properly. It should also verify that the correct fields in the structure are being filled by the &lt;tt&gt;read()&lt;/tt&gt; call.&lt;/p&gt;
&lt;pre&gt;        include &#34;bsd_audioirig.h&#34;

        int format = 1;
        struct irig_time it;

        Audio_fd = open(&#34;/dev/audio&#34;, O_RDONLY);
        ioctl(Audio_fd, AUDIO_IRIG_OPEN, NULL);
        ioctl(Audio_fd, AUDIO_IRIG_SETFORMAT,&amp;format);
        while (condition)
                read(Audio_fd, &amp;it, sizeof(it);
                printf(&#34;%s\n&#34;, it.time);
        ioctl(Audio_fd, AUDIO_IRIG_CLOSE, NULL);
        close(Audio_fd);
&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;implementation-and-configuration-notes&#34;&gt;Implementation and Configuration Notes&lt;/h4&gt;
&lt;p&gt;The signal level produced by most IRIG-equipped radios is on the order of a few volts peak-peak, which is far larger than the audio codec can accept; therefore, an attenuator in the form of a voltage divider is needed. The codec can handle IRIG signals at the microphone input from 4.2 mV to 230 mV peak-peak. A suitable attenuator conists of a series- connected 100K-Ohm resistor at the input and a parallel-connected 1K-Ohm resistor at the output, both contained along with suitable connectors in a small aluminum box. The exact values of these resistors are not critical, since the IRIG driver includes an automatic level-adjustment capability.&lt;/p&gt;
&lt;p&gt;For the most accurate time using the IRIG signal and a particular radio, it may be necessary to adjust the &lt;tt&gt;time1&lt;/tt&gt; parameter of the &lt;tt&gt;fudge&lt;/tt&gt; command to compensate for the codec delay and any additional delay due to IRIG processing in the radio itself. Since the codec samples at an 8-kHz rate, the average delay is about 62 us; however, the delays due to the radios and IRIG signals themselves can vary. For instance, in the Austron recievers the IRIG delay is essentially zero, while in the Spectracom receivers the delay is about 240 usec relative to the PPS signal. In addition, the poll interval can be reduced from the usual 64 seconds to 16 seconds to reduce wander of the local hardware clock. Finally, the &lt;tt&gt;prefer&lt;/tt&gt; keyword can be used to bias the clock-selection algorithm to favor the IRIG time, which is ordinarily the best time available. The &lt;a href=&#34;/archives/3-5.93e/prefer&#34;&gt;Mitigation Rules and the &lt;tt&gt;prefer&lt;/tt&gt; Keyword&lt;/a&gt; page describes the operation of this keyword. For example, the following two lines in the NTP configuration file &lt;tt&gt;ntp.conf&lt;/tt&gt; are appropriate for the Spectracom Netclock/1 WWVB Synchronized Clock with IRIG Option:&lt;/p&gt;
&lt;pre&gt;server 127.127.6.0 prefer minpoll 4 maxpoll 4 # irig audio decoder
fudge 127.127.6.0 time1 0.0005
&lt;/pre&gt;
&lt;p&gt;The &lt;tt&gt;time1&lt;/tt&gt; value of .0005 s (500 us) was determined by actual measurement. Since the IRIG delay in Austron receivers is essentially zero, the &lt;tt&gt;fudge&lt;/tt&gt; command is not necessary with these receivers. The correct value in case of other radios may have to be determined by actual measurement. A convenient way of doing this is to configure the &lt;tt&gt;ppsclock&lt;/tt&gt; streams module. This module can be built from the &lt;a href=&#34;https://www.eecis.udel.edu/~ntp/ntp_spool/software/ppsclock.tar.Z&#34;&gt;ppsclock.tar.Z distribution.&lt;/a&gt; It can be used to adjust &lt;tt&gt;time1&lt;/tt&gt; until the PPS signal and IRIG signal both show the same offset. The &lt;tt&gt;ppsclock&lt;/tt&gt; streams module is described in the &lt;a href=&#34;/archives/3-5.93e/ldisc&#34;&gt;Line Disciplines and Streams Drivers&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;The modified BSD driver includes both the modified driver itself bsd_audio.c and the IRIG header file &lt;tt&gt;bsd_audioirig.h&lt;/tt&gt;, as well as modified header files &lt;tt&gt;bsd_audiovar.h&lt;/tt&gt; and &lt;tt&gt;bsd_audioio.h&lt;/tt&gt;. The driver is installed in the same way as described in the BSD driver documentation, with the addition of the following define in the kernel configuration file:&lt;/p&gt;
&lt;pre&gt;options AUDIO_IRIG              # IRIG driver
&lt;/pre&gt;
&lt;p&gt;This causes the IRIG code to be included in the BSD driver, as well as a C-coded codec interrupt routine which replaces the assembly-coded routine and provides the IRIG functionality. While the C-coded routine is somewhat slower than the assembly-coded routine, the extra overhead is not expected to be significant. Note that the IRIG driver calls the kernel routine &lt;tt&gt;microtime()&lt;/tt&gt; as included in the &lt;tt&gt;ppsclock.tar.Z&lt;/tt&gt; distribution. It is highly recommended that this routine be installed in the kernel configuration as well. The instructions for doing this are contained in the &lt;tt&gt;ppsclock&lt;/tt&gt; directory of the &lt;tt&gt;xntp3&lt;/tt&gt; distribution.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: KSI/Odetics TPRO/S IRIG Interface</title>
      <link>/archives/3-5.93e/driver12/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/driver12/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver12/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver12/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver12/#monitor-data&#34;&gt;Monitor Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver12/#fudge-factors&#34;&gt;Fudge Factors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver12/#additional-information&#34;&gt;Additional Information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;Address: 127.127.12.&lt;em&gt;u&lt;/em&gt;&lt;br&gt;
Reference ID: &lt;tt&gt;IRIG&lt;/tt&gt;&lt;br&gt;
Driver ID: &lt;tt&gt;IRIG_TPRO&lt;/tt&gt;&lt;br&gt;
TPRO Device: &lt;tt&gt;/dev/tpro_u_&lt;/tt&gt;&lt;br&gt;
Requires: KSI/Odetics device driver, &lt;tt&gt;/usr/include/sys/tpro.h&lt;/tt&gt; header file&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;This driver supports the KSI/Odetics TPRO and TPRO-SAT IRIG-B Decoder, which is a module connected directly to the SBus of a Sun workstation. The module works with the IRIG-B signal generated by several radio clocks, including those made by Arbiter, Austron, Odetics, Spectracom and TrueTime, among others, although it is generally an add- on option. In the case of the TPRO-SAT, the module is an integral part of a GPS receiver, which serves as the primary timing source.&lt;/p&gt;
&lt;p&gt;Using the TPRO interface as a NTP reference clock provides precision time only to xntpd and its clients. With suitable kernel modifications, it is possible to use the TPRO as the CPU system clock, avoiding errors introduced by the CPU clock oscillator wander. See the &lt;a href=&#34;/archives/3-5.93e/kern&#34;&gt;A Kernel Model for Precision Timekeeping&lt;/a&gt; page for further details.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;monitor-data&#34;&gt;Monitor Data&lt;/h4&gt;
&lt;p&gt;The driver writes each timecode as received to the &lt;tt&gt;clockstats&lt;/tt&gt; file.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;fudge-factors&#34;&gt;Fudge Factors&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;time1 _time_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the time offset calibration factor, in seconds and fraction, with default 0.0. For a calibrated Sun IPC, the correct value is about .00037.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;time2 _time_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;stratum _number_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the driver stratum, in decimal from 0 to 15, with default 0.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;refid _string_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the driver reference identifier, an ASCII string from one to four characters, with default &lt;tt&gt;IRIG&lt;/tt&gt;.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag1 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag2 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag3 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag4 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;additional-information&#34;&gt;Additional Information&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;/archives/3-5.93e/refclock&#34;&gt;Reference Clock Drivers&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Line Disciplines and Streams Modules</title>
      <link>/archives/3-5.93e/ldisc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/ldisc/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/ldisc/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/ldisc/#how-to-use-the-tttty_clktt-line-discipline&#34;&gt;How to Use the &lt;tt&gt;tty_clk&lt;/tt&gt; Line Discipline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/ldisc/#how-to-use-the-tttty_chutt-line-discipline&#34;&gt;How to Use the &lt;tt&gt;tty_chu&lt;/tt&gt; Line Discipline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/ldisc/#how-to-use-the-ttppsclocktt-stream-module&#34;&gt;How to Use the &lt;tt&gt;ppsclock&lt;/tt&gt; Stream Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/ldisc/#tiocdcdtimestamp-timestamping&#34;&gt;TIOCDCDTIMESTAMP timestamping&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;Most radio and modem clocks used for a primary (stratum-1) NTP server utilize serial ports operating at speeds of 9600 baud or greater. The timing jitter contributed by the serial port hardware and software driver can accumulate to several milliseconds on a typical Unix workstation. In order to reduce these errors, a set of special line disciplines and stream modules can be configured in the Unix kernel. These routines intercept special characters or signals provided by the radio or modem clock and save a local timestamp for later processing.&lt;/p&gt;
&lt;p&gt;The routines can be compiled in the kernel in older BSD-derived systems, or installed as System V streams modules and either compiled in the kernel or dynamically loaded when required. In either case, they require minor changes in some kernel files and in the NTP daemon &lt;tt&gt;xntpd&lt;/tt&gt;. The streams modules can be pushed and popped from the streams stack using conventional System V streams program primitives. Note that not all Unix kernels support line disciplines and of those that do, not all support System V streams. The disciplines here are known to work correctly with SunOS 4.x kernels, but have not been tested for other kernels.&lt;/p&gt;
&lt;p&gt;There are two line disciplines and a special streams module included in the distribution. Support for each in &lt;tt&gt;xntpd&lt;/tt&gt; is enabled by adding flags to the &lt;tt&gt;DEFS_LOCAL&lt;/tt&gt; line of the &lt;tt&gt;xntpd&lt;/tt&gt; configuration file &lt;tt&gt;./Config.local&lt;/tt&gt;. This can be done automatically by the autoconfiguration build procedures, or can be inserted/deleted after the process has completed.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;tty_clk&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This routine intercepts characters received from the serial port and passes unchanged all except a set of designated characters to the generic serial port discipline. For each of the exception characters, the character is inserted in the receiver buffer followed by a local timestamp in Unix &lt;tt&gt;timeval&lt;/tt&gt; format. Both &lt;tt&gt;select()&lt;/tt&gt; and &lt;tt&gt;SIGIO&lt;/tt&gt; are supported by the routine. The &lt;tt&gt;-DTTYCLK&lt;/tt&gt; flag is used to compile support for this discipline in &lt;tt&gt;xntpd&lt;/tt&gt;. This flag is automatically included if the &lt;tt&gt;clkdefs.h&lt;/tt&gt; file is found in the &lt;tt&gt;/usr/include/sys&lt;/tt&gt; directory, or it can be added (or deleted) manually. This module must be configured in the kernel during the kernel build process, as described in the &lt;tt&gt;README&lt;/tt&gt; file in the &lt;tt&gt;./kernel&lt;/tt&gt; directory.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;tty_chu&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This routine is a special purpose line discipline for receiving a special timecode broadcast by Canadian time and frequency standard station CHU. The radio signal is first demodulated by the 300-baud modem included in the gadget box, then processed by the discipline and finally processed by the CHU modem driver (type 7) described in the &lt;a href=&#34;/archives/3-5.93e/refclock&#34;&gt;Reference Clock Drivers&lt;/a&gt; page. This discipline should be used in raw mode. The &lt;tt&gt;-DCHUCLK&lt;/tt&gt; flag is used to compile support for this discipline in &lt;tt&gt;xntpd&lt;/tt&gt;. This flag is automatically included if the &lt;tt&gt;chudefs.h&lt;/tt&gt; file is found in the &lt;tt&gt;/usr/include/sys&lt;/tt&gt; directory, or it can be added (or deleted) manually. This module must be configured in the kernel during the kernel build process, as described in the &lt;tt&gt;README&lt;/tt&gt; file in the &lt;tt&gt;./kernel&lt;/tt&gt; directory.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;ppsclock&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This routine is a special purpose streams module which monitors the state of the data carrier detect (DCD) modem interface signal. It is normally used in connection with a pulse-per-second (PPS) signal generated by some radio clocks, which requires a hardware level converter/pulse generator, such as described in the &lt;a href=&#34;/archives/3-5.93e/gadget&#34;&gt;Gadget Box PPS Level Converter and CHU Modem&lt;/a&gt; page. For each positive-going edge of the DCD signal, the &lt;tt&gt;ppsclock&lt;/tt&gt; module captures a timestamp in Unix &lt;tt&gt;timeval&lt;/tt&gt; format for later retrieval using a special &lt;tt&gt;ioctl()&lt;/tt&gt; system call. The &lt;tt&gt;-DPPS&lt;/tt&gt; flag is used to compile support for this module in &lt;tt&gt;xntpd&lt;/tt&gt;. This flag is automatically included if the &lt;tt&gt;ppsclock.h&lt;/tt&gt; file is found in the &lt;tt&gt;/sys/sys&lt;/tt&gt; directory, or it can be added (or deleted) manually. This module must also be configured in the kernel during the kernel build process, as described in the &lt;tt&gt;README&lt;/tt&gt; file in the &lt;tt&gt;./kernel&lt;/tt&gt; directory.&lt;/p&gt;
&lt;p&gt;There are two versions of both the &lt;tt&gt;tty_clk&lt;/tt&gt; and &lt;tt&gt;chu_clk&lt;/tt&gt; programs. The &lt;tt&gt;tty_clk.c&lt;/tt&gt; and &lt;tt&gt;chu_clk.c&lt;/tt&gt; are designed for use with older BSD systems and are compiled in the kernel. The &lt;tt&gt;tty_clk_STREAMS.c&lt;/tt&gt; and &lt;tt&gt;chu_clk_STREAMS.c&lt;/tt&gt; are designed for use with System V streams, in which case they can be either compiled in the kernel or dynamically loaded. Since these programs are small, unobtrusive, and do nothing unless specifically enabled by an application program, it probably doesn&amp;rsquo;t matter which version is chosen. Instructions on how to configure and build a kernel supporting either or both of these line disciplines is in the &lt;tt&gt;README&lt;/tt&gt; file in the &lt;tt&gt;./kernel&lt;/tt&gt; directory.&lt;/p&gt;
&lt;h4 id=&#34;how-to-use-the-tttty_clktt-line-discipline&#34;&gt;How to Use the &lt;tt&gt;tty_clk&lt;/tt&gt; Line Discipline&lt;/h4&gt;
&lt;p&gt;The tty_clk line discipline defines a new &lt;tt&gt;ioctl(), CLK_SETSTR&lt;/tt&gt;, which takes a pointer to a string of no more than 32 characters. Until the first &lt;tt&gt;CLK_SETSTR&lt;/tt&gt; is performed, the discipline will simply pass through characters. Once it is passed a string by &lt;tt&gt;CLK_SETSTR&lt;/tt&gt;, any character in that string will be immediately followed by a timestamp in Unix &lt;tt&gt;timeval&lt;/tt&gt; format. You can change the string whenever you want by doing another &lt;tt&gt;CLK_SETSTR&lt;/tt&gt;. The character must be an exact, 8 bit match. The character &lt;code&gt;\000&lt;/code&gt; cannot, be used, as it is the string terminator. Passing an empty string to &lt;tt&gt;CLK_SETSTR&lt;/tt&gt; turns off timestamping. Passing &lt;tt&gt;NULL&lt;/tt&gt; will produce undefined results.&lt;/p&gt;
&lt;h4 id=&#34;how-to-use-the-tttty_chutt-line-discipline&#34;&gt;How to Use the &lt;tt&gt;tty_chu&lt;/tt&gt; Line Discipline&lt;/h4&gt;
&lt;p&gt;The tty_chu line discipline translates data received from the CHU modem and returns &lt;tt&gt;chucode&lt;/tt&gt; structures, as defined in chudefs.h, and expected by the Scratchbuilt CHU Receiver reference clock driver. Depending on the settings of &lt;tt&gt;PEDANTIC&lt;/tt&gt; and &lt;tt&gt;ANAL_RETENTIVE&lt;/tt&gt; used when compiling the kernel, some checking of the data may or may not be necessary.&lt;/p&gt;
&lt;h4 id=&#34;how-to-use-the-ttppsclocktt-stream-module&#34;&gt;How to Use the &lt;tt&gt;ppsclock&lt;/tt&gt; Stream Module&lt;/h4&gt;
&lt;p&gt;The ppsclock streams module implements an &lt;tt&gt;ioctl() CIOGETEV&lt;/tt&gt;, which takes a pointer to the structure&lt;/p&gt;
&lt;pre&gt;struct ppsclockev {
     struct timeval tv;
     u_int serial;
};
&lt;/pre&gt;
&lt;p&gt;The ppsclock module is pushed on the streams stack of the serial port connected to the PPS signal. The port must be configured for local operation, rather than remote (modem) operation. At each positive-going edge of the DCD signal, the routine latches the current local timestamp and increments a counter. At each &lt;tt&gt;CIOGETEV ioctl()&lt;/tt&gt; call, the current values of the timestamp and counter are returned in the &lt;tt&gt;ppsclockev&lt;/tt&gt; structure.&lt;/p&gt;
&lt;h4 id=&#34;tiocdcdtimestamp-timestamping&#34;&gt;TIOCDCDTIMESTAMP timestamping&lt;/h4&gt;
&lt;p&gt;On FreeBSD 2.2 and later systems the TIOCDCDTIMESTAMP ioctl is used to read the timestamp when the DCD serial go active. To use this the PPS signal must be tied to the serial port DCD signal through the appropriate level converters and pulse stretch circuitry if necessary. This enhances the accuracy of the driver to a few microseconds. Using FreeBSD 2.2 the measured delay between activation of the PPS signal and the time the timestamp is made on a 66MHz 486DX2 is 19us and on a 100MHz Pentium is 6us. The driver does NOT compensate for this.&lt;/p&gt;
&lt;p&gt;The TIOCDCDTIMESTAMP timestamping ioctl() is used automatically on FreeBSD systems if available. It is integrated into the refclock_gtlin() function so any driver using it will benefit from the enhanced accuracy.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Magnavox MX4200 GPS Receiver</title>
      <link>/archives/3-5.93e/driver9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/driver9/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver9/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver9/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver9/#operating-modes&#34;&gt;Operating Modes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver9/#monitor-data&#34;&gt;Monitor Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver9/#fudge-factors&#34;&gt;Fudge Factors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver9/#additional-information&#34;&gt;Additional Information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;Address: 127.127.9.&lt;em&gt;u&lt;/em&gt;&lt;br&gt;
Reference ID: &lt;tt&gt;GPS&lt;/tt&gt;&lt;br&gt;
Driver ID: &lt;tt&gt;GPS_MX4200&lt;/tt&gt;&lt;br&gt;
Serial Port: &lt;tt&gt;/dev/gps_u_&lt;/tt&gt;; 4800 baud, 8-bits, no parity&lt;br&gt;
Features: &lt;tt&gt;ppsclock&lt;/tt&gt; (required)&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;This driver supports the Magnavox MX 4200 Navigation Receiver adapted to precision timing applications. It requires the &lt;tt&gt;ppsclock&lt;/tt&gt; line discipline or streams module described in the &lt;a href=&#34;/archives/3-5.93e/ldisc&#34;&gt;Line Disciplines and Streams Drivers&lt;/a&gt; page. It also requires a gadget box and 1-PPS level converter, such as described in the &lt;a href=&#34;/archives/3-5.93e/pps&#34;&gt;Pulse-per-second (PPS) Signal Interfacing&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;This driver supports all compatible receivers such as the 6-channel MX 4200, MX 4200D, and the 12-channel MX 9212, MX 9012R, MX 9112.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;operating-modes&#34;&gt;Operating Modes&lt;/h4&gt;
&lt;p&gt;This driver supports two modes of operation, static and mobile, controlled by clock flag 2.&lt;/p&gt;
&lt;p&gt;In static mode (the default) the driver assumes that the GPS antenna is in a fixed location. The receiver is initially placed in a &amp;ldquo;Static, 3D Nav&amp;rdquo; mode, where latitude, longitude, elevation and time are calculated for a fixed station. A DOP-weighted running average position is calculated from this data. After 24 hours, the receiver is placed into a &amp;ldquo;Known Position&amp;rdquo; mode, initialized with the calculated position, and then solves only for time. The position averaging algorithm does not take into account boundary conditions, so this mode of operation very near the international date line or the poles is not recommended.&lt;/p&gt;
&lt;p&gt;In mobile mode, the driver assumes the GPS antenna is mounted on a moving platform such as a car, ship, or aircraft. The receiver is placed in &amp;ldquo;Dynamic, 3D Nav&amp;rdquo; mode and solves for position, altitude and time while moving. No position averaging is performed.&lt;/p&gt;
&lt;h4 id=&#34;monitor-data&#34;&gt;Monitor Data&lt;/h4&gt;
&lt;p&gt;The driver writes each timecode as received to the &lt;tt&gt;clockstats&lt;/tt&gt; file.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;fudge-factors&#34;&gt;Fudge Factors&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;time1 _time_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the time offset calibration factor, in seconds and fraction, with default 0.0.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;time2 _time_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;stratum _number_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the driver stratum, in decimal from 0 to 15, with default 0.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;refid _string_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the driver reference identifier, an ASCII string from one to four characters, with default &lt;tt&gt;GPS&lt;/tt&gt;.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag1 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag2 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Assume GPS receiver is on a mobile platform if set.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag3 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag4 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;additional-information&#34;&gt;Additional Information&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;/archives/3-5.93e/refclock&#34;&gt;Reference Clock Drivers&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: md5 - generate message digest</title>
      <link>/archives/3-5.93e/md5cert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/md5cert/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/md5cert/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/md5cert/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/md5cert/#options&#34;&gt;Options&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;md5 [ -0123456789 ] [ -h] &lt;em&gt;file&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;This program generates the message digest of the given &lt;em&gt;file&lt;/em&gt; using the RSA Message Digest 5 (MD5) and other selected algorithms. If &lt;em&gt;file&lt;/em&gt; is not given, the program uses the standard input.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;options&#34;&gt;Options&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;-0123456789&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Select algorithm from the following list&lt;br&gt;
&lt;tt&gt;-0&lt;/tt&gt; null&lt;br&gt;
&lt;tt&gt;-1&lt;/tt&gt; MD5&lt;br&gt;
&lt;tt&gt;-2&lt;/tt&gt; SNEFRU&lt;br&gt;
&lt;tt&gt;-3&lt;/tt&gt; CRC32&lt;br&gt;
&lt;tt&gt;-4&lt;/tt&gt; CRC16&lt;br&gt;
&lt;tt&gt;-5&lt;/tt&gt; MD4&lt;br&gt;
&lt;tt&gt;-6&lt;/tt&gt; MD2&lt;br&gt;
&lt;tt&gt;-7&lt;/tt&gt; SHA&lt;br&gt;
&lt;tt&gt;-8&lt;/tt&gt; HAVAL&lt;br&gt;
&lt;tt&gt;-9&lt;/tt&gt; null&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-h&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Display the result in hex; the default is base-64.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Miscellaneous Options</title>
      <link>/archives/3-5.93e/miscopt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/miscopt/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/miscopt/#miscellaneous-commands&#34;&gt;Miscellaneous Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/miscopt/#variables&#34;&gt;Variables&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;miscellaneous-commands&#34;&gt;Miscellaneous Commands&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;broadcastdelay _seconds_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The broadcast and multicast modes require a special calibration to determine the network delay between the local and remote servers. Ordinarily, this is done automatically by the initial protocol exchanges between the local and remote servers. In some cases, the calibration procedure may fail due to network or server access controls, for example. This command specifies the default delay to be used under these circumstances. Typically (for Ethernet), a number between 0.003 and 0.007 seconds is appropriate. The default when this command is not used is 0.004 seconds.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;trap _host_address_ [port _port_number_] [interface _interface_address_]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command configures a trap receiver at the given host address and port number for sending messages with the specified local interface address. If the port number is unspecified. a value of 18447 is used. If the interface address is not specified, the message is sent with a source address of the local interface the message is sent through. Note that on a multihomed host the interface used may vary from time to time with routing changes.&lt;/p&gt;
&lt;p&gt;The trap receiver will generally log event messages and other information from the server in a log file. While such monitor programs may also request their own trap dynamically, configuring a trap receiver will ensure that no messages are lost when the server is started.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;setvar _variable_ [default]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command adds an additional system variable. These variables can be used to distribute additional information such as the access policy. If the variable of the form &lt;tt&gt;&lt;em&gt;name&lt;/em&gt; = &lt;em&gt;value&lt;/em&gt;&lt;/tt&gt; is followed by the &lt;tt&gt;default&lt;/tt&gt; keyword, the variable will be listed as part of the default system variables (&lt;tt&gt;ntpq rv&lt;/tt&gt; command). These additional variables serve informational purposes only. They are not related to the protocol other that they can be listed. The known protocol variables will always override any variables defined via the &lt;tt&gt;setvar&lt;/tt&gt; mechanism.&lt;/p&gt;
&lt;p&gt;There are three special variables that contain the names of all variable of the same group. The &lt;tt&gt;sys_var_list&lt;/tt&gt; holds the names of all system variables. The &lt;tt&gt;peer_var_list&lt;/tt&gt; holds the names of all peer variables and the &lt;tt&gt;clock_var_list&lt;/tt&gt; holds the names of the reference clock variables.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;logfile _logfile_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command specifies the location of an alternate log file to be used instead of the default system &lt;tt&gt;syslog&lt;/tt&gt; facility.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;logconfig _configkeyword_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command controls the amount and type of output written to the system &lt;tt&gt;syslog&lt;/tt&gt; facility or the alternate &lt;tt&gt;logfile&lt;/tt&gt; log file. By default, all output is turned on. All &lt;em&gt;&lt;tt&gt;configkeyword&lt;/tt&gt;&lt;/em&gt; keywords can be prefixed with &lt;tt&gt;=&lt;/tt&gt;, &lt;tt&gt;+&lt;/tt&gt; and &lt;tt&gt;-&lt;/tt&gt;, where &lt;tt&gt;=&lt;/tt&gt; sets the &lt;tt&gt;syslogmask&lt;/tt&gt;, &lt;tt&gt;+&lt;/tt&gt; adds and &lt;tt&gt;-&lt;/tt&gt; removes messages. &lt;tt&gt;syslog messages&lt;/tt&gt; can be controlled in four classes (&lt;tt&gt;clock&lt;/tt&gt;, &lt;tt&gt;peer&lt;/tt&gt;, &lt;tt&gt;sys&lt;/tt&gt; and &lt;tt&gt;sync&lt;/tt&gt;). Within these classes four types of messages can be controlled.&lt;/p&gt;
&lt;p&gt;Informational messages (&lt;tt&gt;info&lt;/tt&gt;) control configuration information. Event messages (&lt;tt&gt;events&lt;/tt&gt;) control logging of events (reachability, synchronization, alarm conditions). Statistical output is controlled with the (&lt;tt&gt;statistics&lt;/tt&gt;) keyword. The final message group is the status messages. This describes mainly the synchronizations status. Configuration keywords are formed by concatenating the message class with the event class. The &lt;tt&gt;all&lt;/tt&gt; prefix can be used instead of a message class. A message class may also be followed by the &lt;tt&gt;all&lt;/tt&gt; keyword to enable/disable all messages of the respective message class.&lt;/p&gt;
&lt;p&gt;Thus, a minimal log configuration could look like this:&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;logconfig = syncstatus +sysevents&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    This would just list the synchronizations state of &lt;tt&gt;xntpd&lt;/tt&gt; and the major system events. For a simple reference server, the following minimum message configuration could be useful:&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;logconfig = syncall +clockall&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    This configuration will list all clock information and synchronization information. All other events and messages about peers, system events and so on is suppressed.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;variables&#34;&gt;Variables&lt;/h4&gt;
&lt;p&gt;Most variables used by the NTP protocol can be examined with the &lt;tt&gt;xntpdc&lt;/tt&gt; (mode 7 messages) and the &lt;tt&gt;ntpq&lt;/tt&gt; (mode 6 messages). Currently, very few variables can be modified via mode 6 messages. These variables are either created with the &lt;tt&gt;setvar&lt;/tt&gt; directive or the leap warning bits. The leap warning bits can be set in the &lt;tt&gt;leapwarning&lt;/tt&gt; variable up to one month ahead. Both the &lt;tt&gt;leapwarning&lt;/tt&gt; and &lt;tt&gt;leapindication&lt;/tt&gt; variables have a slightly different encoding than the usual leap bits interpretation:&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;00&lt;/tt&gt;
&lt;p&gt;The daemon passes the leap bits of its synchronization source (usual mode of operation).&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;01/10&lt;/tt&gt;
&lt;p&gt;A leap second is added/deleted (operator forced leap second).&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;11&lt;/tt&gt;
&lt;p&gt;Leap information from the synchronizations source is ignored (thus &lt;tt&gt;LEAP_NOWARNING&lt;/tt&gt; is passed on).&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Mitigation Rules and the prefer Keyword</title>
      <link>/archives/3-5.93e/prefer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/prefer/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/prefer/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/prefer/#the-ttprefertt-peer&#34;&gt;The &lt;tt&gt;prefer&lt;/tt&gt; Peer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/prefer/#peer-classification&#34;&gt;Peer Classification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/prefer/#mitigation-rules&#34;&gt;Mitigation Rules&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/prefer/#using-the-pulse-per-second-pps-signal&#34;&gt;Using the Pulse-per-Second (PPS) Signal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/prefer/#using-the-kernel-discipline&#34;&gt;Using the Kernel Discipline&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;introduction&#34;&gt;Introduction&lt;/h4&gt;
&lt;p&gt;The mechanics of the NTP algorithms which select the best data sample from each available peer and the best subset of the peer population have been finely crafted to resist network jitter, faults in the network or peer operations, and to deliver the best possible accuracy. Most of the time these algorithms do a good job without requiring explicit manual tailoring of the configuration file. However, there are times when the accuracy can be improved by some careful tailoring. The following sections explain how to do this using explicit configuration items and special signals, when available, that are generated by some radio clocks.&lt;/p&gt;
&lt;p&gt;In order to provide robust backup sources, primary (stratum-1) servers are usually operated in a diversity configuration, in which the server operates with a number of remote peers in addition to one or more radio or modem clocks operating as local peers. In these configurations the suite of algorithms used in NTP to refine the data from each peer separately and to select and weight the data from a number of peers are used with the entire ensemble of remote peers and local peers. As the result of these algorithms, a set of &lt;em&gt;survivors&lt;/em&gt; are identified which can presumably provide the most reliable and accurate time. Ordinarily, the individual clock offsets of the survivors are combined on a weighted average basis to produce an offset used to control the system clock.&lt;/p&gt;
&lt;p&gt;However, because of small but significant systematic time offsets between the survivors, it is in general not possible to achieve the lowest jitter and highest stability in these configurations. This happens because the selection algorithm tends to &lt;em&gt;clockhop&lt;/em&gt; between survivors of substantially the same quality, but showing small systematic offsets between them. In addition, there are a number of configurations involving pulse-per-second (PPS) signals, modem backup services and other special cases, so that a set of mitigation rules becomes necessary to select a single peer from among the survivors. These rules are based on a set of special characteristics of the various peers and reference clock drivers specified in the configuration file.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;the-ttprefertt-peer&#34;&gt;The &lt;tt&gt;prefer&lt;/tt&gt; Peer&lt;/h4&gt;
&lt;p&gt;The mitigation rules are designed to provide an intelligent selection between various sources of substantially the same statistical quality. They are designed to provide the best quality time without compromising the normal operation of the NTP algorithms. The mitigation scheme in its present form is not an integral component of the NTP specification RFC- 1305. but is likely to be included in future versions of the specification. The scheme is based on the concept of &lt;em&gt;prefer peer&lt;/em&gt;, which is specified by including the &lt;tt&gt;prefer&lt;/tt&gt; keyword with the associated &lt;tt&gt;server&lt;/tt&gt; or &lt;tt&gt;peer&lt;/tt&gt; command in the configuration file. This keyword can be used with any peer or server, but is most commonly used with a radio clock. While the scheme does not forbid it, it does not seem useful to designate more than one peer as preferred, since the additional complexities to mitigate among them do not seem justified from on the air experience.&lt;/p&gt;
&lt;p&gt;The prefer scheme works on the set of peers that have survived the sanity checks and intersection algorithms of the clock selection procedures. Ordinarily, the members of this set can be considered &lt;em&gt;truechimers&lt;/em&gt;  and any one of them could in principle provide correct time; however, due to various error contributions, not all can provide the most stable time. The job of the clustering algorithm, which is invoked at this point, is to select the best subset of the survivors providing the least variance in the combined ensemble, compared to the variance in each member of the subset. The detailed operation of the clustering algorithm, which is given in the specification, is not important here, other than to point out it operates in rounds, where a survivor, presumably the worst of the lot, is discarded in each round until one of several termination conditions is met.&lt;/p&gt;
&lt;p&gt;In the prefer scheme the clustering algorithm is modified so that the prefer peer is never discarded; on the contrary, its potential removal becomes a termination condition. If the original algorithm were about to toss out the prefer peer, the algorithm terminates right there. The prefer peer can still be discarded by the sanity checks and intersection algorithms, of course, but it will always survive the clustering algorithm. The prefer peer is used as long as it survives the sanity checks and intersection algorithm. If it does not survive or for some reason it fails to provide updates, it will eventually become unreachable and the clock selection will remitigate to select the next best source.&lt;/p&gt;
&lt;p&gt;Along with this behavior, the clock selection procedures are modified so that the combining algorithm is not used when a prefer peer is present. Instead, the offset of the prefer peer is used exclusively as the synchronization source. In the usual case involving a radio clock and a flock of remote stratum-1 peers, and with the radio clock designated a prefer peer, the result is that the high quality radio time disciplines the server clock as long as the radio itself remains operational and with valid time, as determined from the remote peers, sanity checks and intersection algorithm.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;peer-classification&#34;&gt;Peer Classification&lt;/h4&gt;
&lt;p&gt;In order to understand the effects of the various intricate schemes involved, it is necessary to understand some arcane details on how the algorithms decide on a synchronization source, when more than one source is available. This is done on the basis of a set of explicit mitigation rules, which define special classes of remote serves and local peers as a function of configuration declarations and clock driver type:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The prefer peer is designated using the &lt;tt&gt;prefer&lt;/tt&gt; keyword with the &lt;tt&gt;server&lt;/tt&gt; or &lt;tt&gt;peer&lt;/tt&gt; commands. All other things being equal, this peer will be selected for synchronization over all other survivors of the clock selection procedures.&lt;/li&gt;
&lt;li&gt;When a PPS signal is connected via the PPS Clock Discipline driver (type 22), this is called the &lt;em&gt;PPS peer&lt;/em&gt;. This driver provides precision clock corrections only within one second, so is always operated in conjunction with another peer or reference clock driver, which provides the seconds numbering. The PPS peer is active only under conditions explained below.&lt;/li&gt;
&lt;li&gt;When the Undisciplined Local Clock driver (type 1) is configured, this is called the &lt;em&gt;local clock peer&lt;/em&gt;. This is used either as a backup reference source (stratum greater than zero), should all other synchronization sources fail, or as the primary reference source (stratum zero) in cases where the kernel time is disciplined by some other means of synchronization, such as the NIST &lt;tt&gt;lockclock&lt;/tt&gt; scheme, or another synchronization protocol, such as the Digital Time Synchronization Service (DTSS).&lt;/li&gt;
&lt;li&gt;When a modem driver such as the Automated Computer Time Service driver (type 18) is configured, this is called the &lt;em&gt;modem peer&lt;/em&gt;. This is used either as a backup reference source, should all other primary sources fail, or as the (only) primary reference source.&lt;/li&gt;
&lt;li&gt;Where support is available, the PPS signal may be processed directly by the kernel, as described in the &lt;a href=&#34;/archives/3-5.93e/kern&#34;&gt;A Kernel Model for Precision Timekeeping&lt;/a&gt; page. This is called the &lt;em&gt;kernel discipline&lt;/em&gt;. The PPS signal can discipline the kernel in both frequency and time. The frequency discipline is active as long as the PPS signal itself is operating correctly, as determined by the kernel algorithms. The time discipline is active only under conditions explained below.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Reference clock drivers operate in the manner described in the &lt;a href=&#34;/archives/3-5.93e/refclock&#34;&gt;Reference Clock Drivers&lt;/a&gt; page and its dependencies. The drivers are ordinarily operated at stratum zero, so that as the result of ordinary NTP operations, the server itself operates at stratum one, as required by the NTP specification RFC-1305. In some cases described below, the driver is intentionally operated at an elevated stratum, so that it will be selected only if no other survivor is present with a lower stratum. In the case of the PPS peer or kernel time discipline, these sources appear active only if the prefer peer has survived the intersection and clustering algorithms, as described below, and its clock offset relative to the current local clock is less than a specified value, currently +-128 ms.&lt;/p&gt;
&lt;p&gt;The modem clock driver is a special case. Ordinarily, the update interval between modem calls to synchronize the system clock is many times longer than the interval between polls of either the remote or local peers. In order to provide the best stability, the operation of the clock discipline algorithm changes from a phase-lock mode at the shorter update intervals to a frequency-lock mode at the longer update intervals. If both remote or local peers together with a modem peer are operated in the same configuration, what can happen is that first the clock selection algorithm can select one or more remote/local peers and the clock discipline algorithm will optimize for the shorter update intervals. Then, the selection algorithm can select the modem peer, which requires a much different optimization. The intent in the design is to allow the modem peer to control the system clock either when no other source is available or, if the modem peer happens to be marked as prefer, then it always controls the clock, as long as it passes the sanity checks and intersection algorithm. There still is room for suboptimal operation in this scheme, since a noise spike can still cause a clockhop either way. Nevertheless, the optimization function is slow to adapt, so that a clockhop or two does not cause much harm.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;mitigation-rules&#34;&gt;Mitigation Rules&lt;/h4&gt;
&lt;p&gt;The mitigation rules apply in the intersection and clustering algorithms described in the NTP specification. The intersection algorithm first scans all peers with a persistent association and includes only those that satisfy specified sanity checks. In addition to the checks required by the specification, the mitigation rules require either the local-clock peer or modem peer to be included only if marked as the prefer peer. The intersection algorithm operates on the included population to select only those peers believed to represent the correct time. If one or more peers survive the operation, processing continues in the clustering algorithm. Otherwise, if there is a modem peer, it is declared the only survivor; otherwise, if there is a local-clock peer, it is declared the only survivor. Processing then continues in the clustering algorithm.&lt;/p&gt;
&lt;p&gt;The clustering algorithm repeatedly discards outlyers in order to reduce the residual jitter in the survivor population. As required by the NTP specification, these operations continue until either a specified minimum number of survivors remain or the minimum select dispersion of the population is greater than the maximum peer dispersion of any member. The mitigation rules require an additional terminating condition which stops these operations at the point where the prefer peer is about to be discarded.&lt;/p&gt;
&lt;p&gt;The mitigation rules establish the choice of &lt;em&gt;system peer&lt;/em&gt;, which determines the stratum, reference identifier and several other system variables which are visible to clients of the server. In addition, they establish which source or combination of sources control the local clock.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If there is a prefer peer and it is the local-clock peer or the modem peer; or, if there is a prefer peer and the kernel time discipline is active, choose the prefer peer as the system peer and its offset as the system clock offset. If the prefer peer is the local-clock peer, an offset can be calculated by the driver to produce a frequency offset in order to correct for systematic frequency errors. In case a source other than NTP is controlling the system clock, corrections determined by NTP can be ignored by using the &lt;tt&gt;disable pll&lt;/tt&gt; in the configuration file. If the prefer peer is the modem peer, it must be the primary source for the reasons noted above. If the kernel time discipline is active, the system clock offset is ignored and the corrections handled directly by the kernel.&lt;/li&gt;
&lt;li&gt;If the above is not the case and there is a PPS peer, then choose it as the system peer and its offset as the system clock offset.&lt;/li&gt;
&lt;li&gt;If the above is not the case and there is a prefer peer (not the local-clock or modem peer in this case), then choose it as the system peer and its offset as the system clock offset.&lt;/li&gt;
&lt;li&gt;If the above is not the case and the peer previously chosen as the system peer is in the surviving population, then choose it as the system peer and average its offset along with the other survivors to determine the system clock offset. This behavior is designed to avoid excess jitter due to clockhopping, when switching the system peer would not materially improve the time accuracy.&lt;/li&gt;
&lt;li&gt;If the above is not the case, then choose the first candidate in the list of survivors ranked in order of synchronization distance and average its offset along with the other survivors to determine the system clock offset. This is the default case and the only case considered in the current NTP specification.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;using-the-pulse-per-second-pps-signal&#34;&gt;Using the Pulse-per-Second (PPS) Signal&lt;/h4&gt;
&lt;p&gt;Most radio clocks are connected using a serial port operating at speeds of 9600 bps or higher. The accuracy using typical timecode formats, where the on-time epoch is indicated by a designated ASCII character, like carriage-return &lt;tt&gt;‹cr›&lt;/tt&gt;, is limited to a millisecond at best and a few milliseconds in typical cases. However, some radios produce a PPS signal which can be used to improve the accuracy in typical workstation servers to the order of a few tens of microseconds. The details of how this can be accomplished are discussed in the &lt;a href=&#34;/archives/3-5.93e/pps&#34;&gt;Pulse-per-second (PPS) Signal Interfacing&lt;/a&gt; page. The following paragraphs discuss how the PPS signal is affected by the mitigation rules.&lt;/p&gt;
&lt;p&gt;First, it should be pointed out that the PPS signal is inherently ambiguous, in that it provides a precise seconds epoch, but does not provide a way to number the seconds. In principle and most commonly, another source of synchronization, either the timecode from an associated radio clock, or even one or more remote peers, is available to perform that function. In all cases, a specific, configured peer or server must be designated as associated with the PPS signal. This is done using the &lt;tt&gt;prefer&lt;/tt&gt; keyword as described previously. The PPS signal can be associated in this way with any peer, but is most commonly used with the radio clock generating the PPS signal.&lt;/p&gt;
&lt;p&gt;In order to operate, the PPS driver must be enabled by the &lt;tt&gt;enable pps&lt;/tt&gt; command in the configuration file and the signal must be present and within nominal jitter and wander error tolerances. In addition, its associated prefer peer must have survived the sanity checks and intersection algorithms and have become active. This insures that the radio clock hardware is operating correctly and that, presumably, the PPS signal is operating correctly as well. Second, the absolute time offset from that peer must be less than &lt;tt&gt;CLOCK_MAX&lt;/tt&gt;, the gradual-adjustment range, which is ordinarily set at +-128 ms, or well within the +-0.5-s unambiguous range of the PPS signal itself. Finally, the time offsets generated by the PPS peer are propagated via the clock filter to the clock selection procedures just like any other peer. Should these pass the sanity checks and intersection algorithms, they will show up along with the offsets of the prefer peer itself. Note that, unlike the prefer peer, the PPS peer samples are not protected from discard by the clustering algorithm. These complicated procedures insure that the PPS offsets developed in this way are the most accurate, reliable available for synchronization.&lt;/p&gt;
&lt;p&gt;The PPS peer remains active as long as it survives the intersection algorithm and the prefer peer is active; however, like any other clock driver, it runs a reachability algorithm on the PPS signal itself. If for some reason the signal fails or displays gross errors, the PPS peer will either become unreachable or stray out of the survivor population. In this case the clock selection remitigates as described above.&lt;/p&gt;
&lt;h4 id=&#34;using-the-kernel-discipline&#34;&gt;Using the Kernel Discipline&lt;/h4&gt;
&lt;p&gt;Code to implement the kernel discipline is a special feature that can be incorporated in the kernel of some workstations as described in the  &lt;a href=&#34;/archives/3-5.93e/kern&#34;&gt;A Kernel Model for Precision Timekeeping&lt;/a&gt; page. The discipline provides for the control of the local clock oscillator time and/or frequency by means of an external PPS signal interfaced via a modem control lead. As the PPS signal is derived from external equipment, cables, etc., which sometimes fail, a good deal of error checking is done in the kernel to detect signal failure and excessive noise. The way in which the mitigation rules affect the kernel discipline is as follows.&lt;/p&gt;
&lt;p&gt;In order to operate, the kernel discipline must be enabled by the &lt;tt&gt;enable pps&lt;/tt&gt; command in the configuration file and the signal must be present and within nominal jitter and wander error tolerances. In the NTP daemon, the kernel time discipline is active only when the prefer peer is among the survivors of the clustering algorithm, and its offset is within +-128 ms, as in the PPS peer. Under these conditions the kernel disregards updates produced by the NTP daemon and uses its internal PPS source instead. The kernel maintains a watchdog timer for the PPS signal; if the signal has not been heard or is out of tolerance for more than some interval, currently two minutes, the kernel discipline is declared inoperable and operation continues as if it were not present.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Monitoring Options</title>
      <link>/archives/3-5.93e/monopt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/monopt/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/monopt/#monitoring-support&#34;&gt;Monitoring Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/monopt/#monitoring-commands&#34;&gt;Monitoring Commands&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;monitoring-support&#34;&gt;Monitoring Support&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;xntpd&lt;/tt&gt; includes a comprehensive monitoring facility suitable for continuous, long term recording of server and client timekeeping performance. See the &lt;tt&gt;statistics&lt;/tt&gt; command below for a listing and example of each type of statistics currently supported. Statistic files are managed using file generation sets and scripts in the &lt;tt&gt;./scripts&lt;/tt&gt; directory of this distribution. Using these facilities and Unix &lt;tt&gt;cron&lt;/tt&gt; jobs, the data can be automatically summarized and archived for retrospective analysis.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;monitoring-commands&#34;&gt;Monitoring Commands&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;statistics _name_ [...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enables writing of statistics records. Currently, three kinds of &lt;em&gt;&lt;tt&gt;name&lt;/tt&gt;&lt;/em&gt; statistics are supported.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;loopstats&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enables recording of loop filter statistics information. Each update of the local clock outputs a line of the following form to the file generation set named &lt;tt&gt;loopstats&lt;/tt&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;48773 10847.650 0.0001307 17.3478 2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The first two fields show the date (Modified Julian Day) and time (seconds and fraction past UTC midnight). The next three fields show time offset in seconds, frequency offset in parts-per-million and time constant of the clock-discipline algorithm at each update of the clock.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;peerstats&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enables recording of peer statistics information. This includes statistics records of all peers of a NTP server and of special signals, where present and configured. Each valid update appends a line of the following form to the current element of a file generation set named &lt;tt&gt;peerstats&lt;/tt&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;48773 10847.650 127.127.4.1 9714 -0.001605 0.00000 0.00142&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The first two fields show the date (Modified Julian Day) and time (seconds and fraction past UTC midnight). The next two fields show the peer address in dotted-quad notation and status, respectively. The status field is encoded in hex in the format described in Appendix A of the NTP specification RFC 1305. The final three fields show the offset, delay, and dispersion, all in seconds.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;clockstats&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enables recording of clock driver statistics information. Each update received from a clock driver outputs a line of the following form to the file generation set named &lt;tt&gt;clockstats&lt;/tt&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;49213 525.624 127.127.4.1 93 226 00:08:29.606 D&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The first two fields show the date (Modified Julian Day) and time (seconds and fraction past UTC midnight). The next field shows the clock address in dotted-quad notation. The final field shows the last timecode received from the clock in decoded ASCII format, where meaningful. In some clock drivers a good deal of additional information can be gathered and displayed as well. See information specific to each clock for further details.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;statsdir _directory_path_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Indicates the full path of a directory where statistics files should be created (see below). This keyword allows the (otherwise constant) &lt;tt&gt;filegen&lt;/tt&gt; filename prefix to be modified for file generation sets, which is useful for handling statistics logs.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;filegen _name_ [file _filename_] [type _typename_] [ flag _flagval_ ] [link | nolink] [enable | disable]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Configures setting of generation file set &lt;em&gt;name&lt;/em&gt;. Generation file sets provide a means for handling files that are continuously growing during the lifetime of a server. Server statistics are a typical example for such files. Generation file sets provide access to a set of files used to store the actual data. At any time at most one element of the set is being written to. The type given specifies when and how data will be directed to a new element of the set. This way, information stored in elements of a file set that are currently unused are available for administrational operations without the risk of disturbing the operation of &lt;tt&gt;xntpd&lt;/tt&gt;. (Most important: they can be removed to free space for new data produced.)&lt;/p&gt;
&lt;p&gt;Filenames of set members are built from three elements:&lt;/p&gt;
&lt;p&gt;    &lt;em&gt;&lt;tt&gt;prefix&lt;/tt&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;    This is a constant filename path. It is not subject to modifications via the &lt;tt&gt;filegen&lt;/tt&gt; option. It is defined by the server, usually specified as a compile-time constant. It may, however, be configurable for individual file generation sets via other commands. For example, the prefix used with &lt;tt&gt;loopstats&lt;/tt&gt; and &lt;tt&gt;peerstats&lt;/tt&gt; generation can be configured using the &lt;tt&gt;statsdir&lt;/tt&gt; option explained above.&lt;/p&gt;
&lt;p&gt;    &lt;em&gt;&lt;tt&gt;filename&lt;/tt&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;    This string is directly concatenated to the prefix mentioned above (no intervening &lt;code&gt;/&lt;/code&gt; (slash)). This can be modified using the &lt;tt&gt;file&lt;/tt&gt; argument to the &lt;tt&gt;filegen&lt;/tt&gt; statement. No &lt;tt&gt;..&lt;/tt&gt; elements are allowed in this component to prevent filenames referring to parts outside the filesystem hierarchy denoted by &lt;tt&gt;prefix&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;    &lt;em&gt;&lt;tt&gt;suffix&lt;/tt&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;    This part reflects individual elements of a file set. The following types are supported:&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;none&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    The file set is actually a single plain file.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;pid&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    One element of file set is used per incarnation of a &lt;tt&gt;xntpd&lt;/tt&gt; server. This type does not perform any changes to file set members during runtime, however it provides an easy way of separating files belonging to different &lt;tt&gt;xntpd&lt;/tt&gt; server incarnations. The set member filename is built by appending a &lt;tt&gt;.&lt;/tt&gt; (dot) to concatenated &lt;em&gt;prefix&lt;/em&gt; and &lt;em&gt;filename&lt;/em&gt; strings, and appending the decimal representation of the process ID of the &lt;tt&gt;xntpd&lt;/tt&gt; server process.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;day&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    One file generation set element is created per day. A day is defined as the period between 00:00 and 24:00 UTC. The file set member suffix consists of a &lt;tt&gt;.&lt;/tt&gt; (dot) and a day specification in the form &lt;tt&gt;YYYYMMdd. YYYY&lt;/tt&gt; is a 4-digit year number (e.g., 1992). &lt;tt&gt;MM&lt;/tt&gt; is a two digit month number. &lt;tt&gt;dd&lt;/tt&gt; is a two digit day number. Thus, all information written at 10 December 1992 would end up in a file named &lt;tt&gt;&lt;em&gt;prefix filename&lt;/em&gt;.19921210&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;week&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Any file set member contains data related to a certain week of a year. The term week is defined by computing day-of-year modulo 7. Elements of such a file generation set are distinguished by appending the following suffix to the file set filename base: A dot, a 4-digit year number, the letter &lt;tt&gt;W&lt;/tt&gt;, and a 2-digit week number. For example, information from January, 10th 1992 would end up in a file with suffix &lt;tt&gt;.1992W1&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;month&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    One generation file set element is generated per month. The file name suffix consists of a dot, a 4-digit year number, and a 2-digit month.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;year&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    One generation file element is generated per year. The filename suffix consists of a dot and a 4 digit year number.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;age&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    This type of file generation sets changes to a new element of the file set every 24 hours of server operation. The filename suffix consists of a dot, the letter &lt;tt&gt;a&lt;/tt&gt;, and an 8-digit number. This number is taken to be the number of seconds the server is running at the start of the corresponding 24-hour period.&lt;/p&gt;
&lt;p&gt;It is convenient to be able to access the current element of a file generation set by a fixed name. This feature is enabled by specifying &lt;tt&gt;link&lt;/tt&gt; and disabled using &lt;tt&gt;nolink&lt;/tt&gt;. If &lt;tt&gt;link&lt;/tt&gt; is specified, a hard link from the current file set element to a file without suffix is created. When there is already a file with this name and the number of links of this file is one, it is renamed appending a dot, the letter &lt;tt&gt;C&lt;/tt&gt;, and the pid of the
&lt;tt&gt;xntpd&lt;/tt&gt; server process. When the number of links is greater than one, the file is unlinked. This allows the current file to be accessed by a constant name.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: NIST Modem Time Service</title>
      <link>/archives/3-5.93e/driver18/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/driver18/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver18/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver18/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver18/#call-management&#34;&gt;Call Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver18/#monitor-data&#34;&gt;Monitor Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver18/#fudge-factors&#34;&gt;Fudge Factors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver18/#additional-information&#34;&gt;Additional Information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;Address: 127.127.18.&lt;em&gt;u&lt;/em&gt;&lt;br&gt;
Reference ID: &lt;tt&gt;ACTS&lt;/tt&gt;&lt;br&gt;
Driver ID: &lt;tt&gt;NIST_ACTS&lt;/tt&gt;&lt;br&gt;
Serial Port: &lt;tt&gt;/dev/acts_u_&lt;/tt&gt;; 1200 baud, 8-bits, no parity&lt;br&gt;
Features: &lt;tt&gt;tty_clk&lt;/tt&gt;&lt;br&gt;
Requires: &lt;tt&gt;/usr/include/sys/termios.h&lt;/tt&gt; header file with modem control&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;This driver supports the NIST Automated Computer Time Service (ACTS). It periodically dials a prespecified telephone number, receives the NIST timecode data and calculates the local clock correction. It designed primarily for use when neither a radio clock nor connectivity to Internet time servers is available. For the best accuracy, the individual telephone line/modem delay needs to be calibrated using outside sources.&lt;/p&gt;
&lt;p&gt;The ACTS is located at NIST Boulder, CO, telephone 303 494 4774. A toll call from Newark, DE, costs between three and four cents, although it is not clear what carrier and time of day discounts apply. The modem dial string will differ depending on local telephone configuration, etc., and is specified by the phone command in the configuration file. The argument to this command is an AT command for a Hayes compatible modem.&lt;/p&gt;
&lt;p&gt;The driver can operate in either of two modes, as determined by the mode parameter in the server configuration command. In mode 0 the driver operates continuously at intervals determined by the fudge time1 parameter, as described above. In mode 1 the driver is enabled only when no other sources of synchronization are available and when we have gone more than MAXOUTAGE (3600 s) since last synchronized by other sources of synchronization.&lt;/p&gt;
&lt;p&gt;The accuracy produced by this driver should be in the range of a millisecond or two, but may need correction due to the delay characteristics of the individual modem involved. For undetermined reasons, some modems work with the ACTS echo-delay measurement scheme and some don&amp;rsquo;t. This driver tries to do the best it can with what it gets. Initial experiments with a Practical Peripherals 9600SA modem here in Delaware suggest an accuracy of a millisecond or two can be achieved without the scheme by using a fudge time1 value of 65.0 ms. In either case, the dispersion for a single call involving ten samples is about 1.3 ms.&lt;/p&gt;
&lt;p&gt;For reliable call management, this driver requires a 1200-bps modem with a Hayes-compatible command set and control over the modem data terminal ready (DTR) control line. Present restrictions require the use of a POSIX-compatible programming interface, although other interfaces may work as well. The ACTS telephone number and modem setup string are hard-coded in the driver and may require changes for nonstandard modems or special circumstances.&lt;/p&gt;
&lt;p&gt;The fudge time1 parameter represents a propagation-delay correction factor which is added to the value computed by ACTS when the echo-delay scheme is used. This scheme does not work with all modems; for those that don&amp;rsquo;t, fudge flag2 should be set to disable the feature. In this case the fudge time1 parameter represents the total propagation delay due to all causes and must be determined by external calibration.&lt;/p&gt;
&lt;p&gt;The ACTS call interval is determined by a counter initially set to the fudge time2 parameter. At each poll interval, minpoll (usually 64 s) is subtracted from the counter. When the counter is equal to or less than zero, the fudge flag1 is set, which causes up to three call attempts to be made to ACTS. The fudge flag1 is reset after a valid clock update has been determined or by a device fault, timeout or manually using &lt;code&gt;xntpdc&lt;/code&gt;. After a valid clock update, the counter is reset for the next interval. Setting the &lt;code&gt;fudge time2&lt;/code&gt; parameter to zero disables automatic call attempts. Manual call attempts can be made at any time by setting &lt;code&gt;fudge flag1&lt;/code&gt; using xntpdc.&lt;/p&gt;
&lt;p&gt;The NIST timecode message is transmitted at 1200 bps in the following format:&lt;/p&gt;
&lt;pre&gt;
jjjjj yy-mm-dd hh:mm:ss tt l uuu mmmmm UTC(NIST) *

jjjjj = modified Julian day
yy-mm-dd = year, month, day
hh:mm:ss = hours, minutes, seconds
tt = DST indicator (see driver listing)
l = leap-second warning (see driver listing)
uuu = DUT1 correction (see driver listing)
mmmmm = modem calibration (see driver listing)
on-time = &#39;*&#39;
&lt;/pre&gt;
&lt;p&gt;The timecode message is transmitted continuously after a signon banner, which this driver ignores. The driver also ignores all but the yy-mm-dd, hh:mm:ss and on-time character &lt;code&gt;*&lt;/code&gt; fields, although it checks the format of all fields of the message. A timestamp is captured at the &lt;code&gt;*&lt;/code&gt; character, as required by the ACTS specification, and used as the reference time of the timecode. If a message with an on-time character of &lt;code&gt;#&lt;/code&gt; is received, the driver updates the propagation delay. The driver disconnects when (a) ten valid messages have been received, (b) no message has been received for 15 s, (c) an on-time character of &lt;code&gt;#&lt;/code&gt; is received. These messages are processed by a trimmed-mean filter to reduce timing noise and then by the usual NTP algorithms to develop the clock correction.&lt;/p&gt;
&lt;p&gt;Since the accumulated error grows with the interval between calls, it is important that the intrinsic frequency error be minimized. This can be done by observing difference in offsets between two calls placed some hours apart and calculating the uncorrected frequency error. This error, as a fixed-point value in parts-per-million, should be installed in the ntp.drift file before the daemon is started. Some experimentation may be necessary in order to reduce the intrinsic frequency error to the order of 1 ppm.&lt;/p&gt;
&lt;p&gt;The behavior of the clock selection algorithm is modified when this driver is in use. The algorithm is designed so that this driver will never be selected unless no other discipline source is available. This can be overridden with the prefer keyword of the server configuration command, in which case only this driver will be selected for synchronization and all other discipline sources will be ignored.&lt;/p&gt;
&lt;p&gt;Unlike other drivers, each ACTS call generates one clock correction and that correction is processed immediately. There is no wait to allow the clock filter to accumulate samples. In addition, the watchdog timeout of the local clock algorithm is disabled, so that a correction received from this driver that exceeds CLOCK_MAX (128 ms) causes an immediate step/slew.&lt;/p&gt;
&lt;p&gt;Since the interval between updates can be much longer than used with ordinary NTP peers, the local clock procedure has been modified to operate in either of two modes, depending on whether the interval between updates is less than or greater than CLOCK_MAXSEC (1200 s). If less than this value, the local clock procedure operates using the standard NTP phase-lock loop as with other NTP peers. If greater than this value, the procedure operates using a modified frequency-lock loop suggested by Judah Levine in his lockclock algorithm designed specifically for ACTS.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;call-management&#34;&gt;Call Management&lt;/h4&gt;
&lt;p&gt;Since ACTS will be a toll call in most areas of the country, it is necessary to carefully manage the call frequency. This can be done in two ways, by specifying the interval between calls, or by setting a flag bit manually or via a cron job. The call interval is determined by a counter initially set to the fudge time2 parameter. At each poll interval, minpoll (usually 64 s) is subtracted from the counter. When the counter is equal to or less than zero, the fudge flag1 is set, which causes up to three call attempts to be made. The fudge flag1 is reset after ten offset samples have been determined in a single call or by a device fault, timeout or manually using xntpdc. Upon successful completion of a call, the eight samples have been shifted into the clock filter, the local clock updated and the counter reset for the next interval. Setting the fudge time2 parameter to zero disables automatic call attempts.&lt;/p&gt;
&lt;p&gt;Manual call attempts can be made at any time by setting fudge flag1 using xntpdc. For example, the xntpdc command&lt;/p&gt;
&lt;pre&gt;
fudge 127.127.18.1 flags 1
&lt;/pre&gt;
&lt;p&gt;will ask for a key identifier and password and, if authenticated by the server, will set flag1. There may be a short delay until the expiration of the current poll timeout.&lt;/p&gt;
&lt;p&gt;The flag1 can be set from a cron job in the following way. Construct a file with contents&lt;/p&gt;
&lt;pre&gt;keyid 11
passwd dialup
fudge 127.127.18.1 flags 1
quit
&lt;/pre&gt;
&lt;p&gt;Then, run the following program at specified times as required.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/usr/local/bin/xntpdc &amp;lt;file&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;monitor-data&#34;&gt;Monitor Data&lt;/h4&gt;
&lt;p&gt;When enabled by the &lt;tt&gt;flag4&lt;/tt&gt; fudge flag, every received timecode is written as-is to the &lt;tt&gt;clockstats&lt;/tt&gt; file.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;fudge-factors&#34;&gt;Fudge Factors&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;time1 _time_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the time offset calibration factor, in seconds and fraction, with default 0.0.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;time2 _time_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;stratum _number_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the driver stratum, in decimal from 0 to 15, with default 0.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;refid _string_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the driver reference identifier, an ASCII string from one to four characters, with default &lt;tt&gt;ACTS&lt;/tt&gt;.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag1 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag2 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag3 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enable &lt;tt&gt;ppsclock&lt;/tt&gt; line discipline/streams module if set.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag4 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enable &lt;tt&gt;clockstats&lt;/tt&gt; recording if set.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;additional-information&#34;&gt;Additional Information&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;/archives/3-5.93e/refclock&#34;&gt;Reference Clock Drivers&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Notes on Configuring NTP and Setting up a NTP Subnet</title>
      <link>/archives/3-5.93e/notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/notes/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/notes/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/notes/#how-ntp-works&#34;&gt;How NTP Works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/notes/#configuring-your-subnet&#34;&gt;Configuring Your Subnet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/notes/#configuring-your-server-or-client&#34;&gt;Configuring Your Server or Client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/notes/#xntp3-versus-previous-versions&#34;&gt;Xntp3 Versus Previous Versions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/notes/#traffic-monitoring&#34;&gt;Traffic Monitoring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/notes/#address-and-mask-restrictions&#34;&gt;Address-and-Mask Restrictions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/notes/#authentication&#34;&gt;Authentication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/notes/#query-programs&#34;&gt;Query Programs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/notes/#run-time-reconfiguration&#34;&gt;Run-Time Reconfiguration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/notes/#name-resolution&#34;&gt;Name Resolution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/notes/#dealing-with-frequency-tolerance-violations&#34;&gt;Dealing with Frequency Tolerance Violations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/notes/#tuning-your-subnet&#34;&gt;Tuning Your Subnet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/notes/#provisions-for-leap-seconds-and-accuracy-metrics&#34;&gt;Provisions for Leap Seconds and Accuracy Metrics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/notes/#clock-support-overview&#34;&gt;Clock Support Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/notes/#towards-the-ultimate-tick&#34;&gt;Towards the Ultimate Tick&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/notes/#parting-shots&#34;&gt;Parting Shots&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;introduction&#34;&gt;Introduction&lt;/h4&gt;
&lt;p&gt;This document is a collection of notes concerning the use of xntpd and related programs, and on coping with the Network Time Protocol (NTP) in general. It is a major rewrite and update of an earlier document written by Dennis Ferguson of the University of Toronto and includes many changes and additions resulting from the NTP Version 3 specification and new implementation features. It supersedes the earlier document, which should no longer be used for new configurations.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;xntpd&lt;/tt&gt; is a complete implementation of the NTP Version 3 specification, as defined in:
Mills, D.L. Network Time Protocol (Version 3) specification, implementation and analysis. Network Working Group Report RFC-1305, University of Delaware, March 1992, 113 pp. &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/database/rfc/rfc1305/rfc1305a.ps&#34;&gt;(Abstract: PostScript)&lt;/a&gt;, &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/database/rfc/rfc1305/rfc1305b.ps&#34;&gt;(Body: PostScript)&lt;/a&gt;, &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/database/rfc/rfc1305/rfc1305c.ps&#34;&gt;(Appendices: PostScript)&lt;/a&gt;, with additional features planned for future versions. It also retains compatibility with both NTP Version 2, as defined in RFC-1119, and NTP Version 1, as defined in RFC-1059, although this compatibility is sometimes strained and only semiautomatic. In order to support in principle the ultimate precision of about 232 picoseconds in the NTP specification, &lt;tt&gt;xntpd&lt;/tt&gt; uses no floating-point arithmetic and instead manipulates the 64-bit NTP timestamps as unsigned 64-bit integers. &lt;tt&gt;xntpd&lt;/tt&gt; fully implements NTP Versions 2 and 3 authentication and a mode-6 control- message facility. As extensions to the specification, a flexible address-and-mask restriction facility has been included, along with a private mode-7 control-message facility used to remotely reconfigure the system and monitor a considerable amount of internal detail.&lt;/p&gt;
&lt;p&gt;The code is biased towards the needs of a busy time server with numerous, often hundreds, of clients and other servers. Tables are hashed to allow efficient handling of many associations, though at the expense of additional overhead when the number of associations is small. Many fancy features have been included to permit efficient management and monitoring of a busy primary server, features which are probably excess baggage for a high stratum client. In such cases, a stripped-down version of the protocol, the Simple Network Time Protocol (SNTP) can be used. SNTP and NTP servers and clients can interwork in most situations, as described in: Mills, D.L. Simple Network Time Protocol (SNTP). Network Working Group Report RFC-2030, University of Delaware, October 1996, 14 pp. &lt;a href=&#34;https://www.eecis.udel.edu/~mills/database/rfc/rfc2030.txt&#34;&gt;(ASCII)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The code was written with near demonic attention to details which can affect precision and as a consequence should be able to make good use of high performance, special purpose hardware such as precision oscillators and radio clocks. The present code supports a number of radio clocks, including those for the WWV, CHU, WWVB, MSF, DCF77, GOES and GPS radio and satellite time services and USNO, ACTS and PTB modem time services. The server methodically avoids the use of Unix-specific library routines where possible by implementing local versions, in order to aid in porting the code to perverse Unix and non-Unix platforms.&lt;/p&gt;
&lt;p&gt;While this implementation conforms in most respects to the NTP Version 3 specification RFC-1305, a number of improvements have been made which are described in the conformance statement in the &lt;a href=&#34;/archives/3-5.93e/biblio&#34;&gt;Further Information and Bibliography&lt;/a&gt; page. It has been specifically tuned to achieve the highest accuracy possible on whatever hardware and operating-system platform is available. In general, its precision and stability are limited only by the characteristics of the onboard clock source used by the hardware and operating system, usually an uncompensated crystal oscillator. On modern RISC-based processors connected directly to radio clocks via serial- asynchronous interfaces, the accuracy is usually limited by the radio clock and interface to the order of a millisecond or two. The code includes special features to support a pulse-per-second (PPS) signal generated by some radio clocks. When used in conjunction with a suitable hardware level converter, the accuracy can be improved to a few tens of microseconds. Further improvement is possible using an outboard, stabilized frequency source, in which the accuracy and stability are limited only by the characteristics of that source.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;xntp3&lt;/tt&gt; distribution includes, in addition to the daemon itself (&lt;tt&gt;&lt;a href=&#34;/archives/3-5.93e/xntpd&#34;&gt;xntpd&lt;/a&gt;&lt;/tt&gt;), several utility programs, including two remote-monitoring programs (&lt;a href=&#34;/archives/3-5.93e/ntpq&#34;&gt;&lt;tt&gt;ntpq&lt;/tt&gt;&lt;/a&gt;, &lt;tt&gt;&lt;a href=&#34;/archives/3-5.93e/xntpdc&#34;&gt;xntpdc&lt;/a&gt;&lt;/tt&gt;), a remote clock-setting program similar to the Unix rdate program (&lt;tt&gt;ntpdate&lt;/tt&gt;), a traceback utility useful to discover suitable synchronization sources (&lt;tt&gt;ntptrace&lt;/tt&gt;), and various programs used to configure the local platform and calibrate the intrinsic errors. NTP has been ported to a large number of platforms, including most RISC and CISC workstations and mainframes manufactured today. Example configuration files for many models of these machines are included in the &lt;tt&gt;xntp3&lt;/tt&gt; distribution. While in most cases the standard version of the implementation runs with no hardware or operating system modifications, not all features of the distribution are available on all platforms. For instance, a special feature allowing Sun workstations to achieve accuracies in the order of 100 microseconds requires some minor changes and additions to the kernel and input/output support.&lt;/p&gt;
&lt;p&gt;There are, however, several drawbacks to all of this. &lt;tt&gt;xntpd&lt;/tt&gt; is quite fat. This is rotten if your intended platform for the daemon is memory limited. &lt;tt&gt;xntpd&lt;/tt&gt; uses &lt;tt&gt;SIGIO&lt;/tt&gt; for all input, a facility which appears to not enjoy universal support and whose use seems to exercise the parts of your vendors&#39; kernels which are most likely to have been done poorly. The code is unforgiving in the face of kernel problems which affect performance, and generally requires that you repair the problems in order to achieve acceptable performance. The code has a distinctly experimental flavour and contains features which could charitably be termed failed experiments, but which have not been completely hacked out. Much was learned from the addition of support for a variety of radio clocks, with the result that some radio clock drivers could use some rewriting.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;how-ntp-works&#34;&gt;How NTP Works&lt;/h4&gt;
&lt;p&gt;The approach used by NTP to achieve reliable time synchronization from a set of possibly unreliable remote time servers is somewhat different than other protocols. In particular, NTP does not attempt to synchronize clocks to each other. Rather, each server attempts to synchronize to Universal Coordinated Time (UTC) using the best available source and available transmission paths to that source. This is a fine point which is worth understanding. A group of NTP-synchronized clocks may be close to each other in time, but this is not a consequence of the clocks in the group having synchronized to each other, but rather because each clock has synchronized closely to UTC via the best source it has access to. As such, trying to synchronize a set of clocks to a set of servers whose time is not in mutual agreement may not result in any sort of useful synchronization of the clocks, even if you don&amp;rsquo;t care about UTC. However, in networks isolated from UTC sources, provisions can made to nominate one of them as a phantom UTC source.&lt;/p&gt;
&lt;p&gt;NTP operates on the premise that there is one true standard time, and that if several servers which claim synchronization to standard time disagree about what that time is, then one or more of them must be broken. There is no attempt to resolve differences more gracefully since the premise is that substantial differences cannot exist. In essence, NTP expects that the time being distributed from the root of the synchronization subnet will be derived from some external source of UTC (e.g., a radio clock). This makes it somewhat inconvenient (though by no means impossible) to synchronize hosts together without a reliable source of UTC to synchronize them to. If your network is isolated and you cannot access other people&amp;rsquo;s servers across the Internet, a radio clock may make a good investment.&lt;/p&gt;
&lt;p&gt;Time is distributed through a hierarchy of NTP servers, with each server adopting a &lt;em&gt;stratum&lt;/em&gt; which indicates how far away from an external source of UTC it is operating at. Stratum-1 servers, which are at the top of the pile (or bottom, depending on your point of view), have access to some external time source, usually a radio clock synchronized to time signal broadcasts from radio stations which explicitly provide a standard time service. A stratum-2 server is one which is currently obtaining time from a stratum-1 server, a stratum-3 server gets its time from a stratum-2 server, and so on. To avoid long lived synchronization loops the number of strata is limited to 15.&lt;/p&gt;
&lt;p&gt;Each client in the synchronization subnet (which may also be a server for other, higher stratum clients) chooses exactly one of the available servers to synchronize to, usually from among the lowest stratum servers it has access to. This is, however, not always an optimal configuration, for indeed NTP operates under another premise as well, that each server&amp;rsquo;s time should be viewed with a certain amount of distrust. NTP really prefers to have access to several sources of lower stratum time (at least three) since it can then apply an agreement algorithm to detect insanity on the part of any one of these. Normally, when all servers are in agreement, NTP will choose the best of these, where &amp;ldquo;best&amp;rdquo; is defined in terms of lowest stratum, closest (in terms of network delay) and claimed precision, along with several other considerations. The implication is that, while one should aim to provide each client with three or more sources of lower stratum time, several of these will only be providing backup service and may be of lesser quality in terms of network delay and stratum (i.e., a same-stratum peer which receives time from lower stratum sources the local server doesn&amp;rsquo;t access directly can also provide good backup service).&lt;/p&gt;
&lt;p&gt;Finally, there is the issue of association modes. There are a number of modes in which NTP servers can associate with each other, with the mode of each server in the pair indicating the behaviour the other server can expect from it. In particular, when configuring a server to obtain time from other servers, there is a choice of two modes which may be used. Configuring an association in symmetric-active mode (usually indicated by a &lt;tt&gt;peer&lt;/tt&gt; declaration in the configuration file) indicates to the remote server that one wishes to obtain time from the remote server and that one is also willing to supply time to the remote server if need be. This mode is appropriate in configurations involving a number of redundant time servers interconnected via diverse network paths, which is presently the case for most stratum-1 and stratum-2 servers on the Internet today. Configuring an association in client mode (usually indicated by a &lt;tt&gt;server&lt;/tt&gt; declaration in the configuration file) indicates that one wishes to obtain time from the remote server, but that one is not willing to provide time to the remote server. This mode is appropriate for file-server and workstation clients that do not provide synchronization to other local clients. Client mode is also useful for boot-date-setting programs and the like, which really have no time to provide and which don&amp;rsquo;t retain state about associations over the longer term.&lt;/p&gt;
&lt;p&gt;Where the requirements in accuracy and reliability are modest, clients can be configured to use broadcast and/or multicast modes. These modes are not normally utilized by servers with dependent clients. The advantage of these modes is that clients do not need to be configured for a specific server, so that all clients operating can use the same configuration file. Broadcast mode requires a broadcast server on the same subnet, while multicast mode requires support for IP multicast on the client machine, as well as connectivity via the MBONE to a multicast server. Since broadcast messages are not propagated by routers, only those broadcast servers on the same subnet will be used. There is at present no way to select which of possibly many multicast servers will be used, since all operate on the same group address.&lt;/p&gt;
&lt;p&gt;Where the maximum accuracy and reliability provided by NTP are needed, clients and servers operate in either client/server or symmetric modes. Symmetric modes are most often used between two or more servers operating as a mutually redundant group. In these modes, the servers in the group members arrange the synchronization paths for maximum performance, depending on network jitter and propagation delay. If one or more of the group members fail, the remaining members automatically reconfigure as required. Dependent clients and servers normally operate in client/server mode, in which a client or dependent server can be synchronized to a group member, but no group member can synchronize to the client or dependent server. This provides protection against malfunctions or protocol attacks.&lt;/p&gt;
&lt;p&gt;Servers that provide synchronization to a sizeable population of clients normally operate as a group of three or more mutually redundant servers, each operating with three or more stratum-one or stratum-two servers in client-server modes, as well as all other members of the group in symmetric modes. This provides protection against malfunctions in which one or more servers fail to operate or provide incorrect time. The NTP algorithms have been specifically engineered to resist attacks where some fraction of the configured synchronization sources accidently or purposely provide incorrect time. In these cases a special voting procedure is used to identify spurious sources and discard their data.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;configuring-your-subnet&#34;&gt;Configuring Your Subnet&lt;/h4&gt;
&lt;p&gt;At startup time the &lt;tt&gt;xntpd&lt;/tt&gt; daemon running on a host reads the initial configuration information from a file, usually &lt;tt&gt;/etc/ntp.conf&lt;/tt&gt;, unless a different name has been specified at compile time. Putting something in this file which will enable the host to obtain time from somewhere else is usually the first big hurdle after installation of the software itself, which is described in the &lt;a href=&#34;/archives/3-5.93e/build&#34;&gt;Building and Installing the Distribution&lt;/a&gt; page. At its simplest, what you need to do in the configuration file is declare the servers that the daemon should poll for time synchronization. In principle, no such list is needed if some other time server operating in broadcast/multicast mode is available, which requires the client to operate in a broadcastclient mode.&lt;/p&gt;
&lt;p&gt;In the case of a workstation operating in an enterprise network for a public or private organization, there is often an administrative department that coordinates network services, including NTP. Where available, the addresses of appropriate servers can be provided by that department. However, if this infrastructure is not available, it is necessary to explore some portion of the existing NTP subnet now running in the Internet. There are at present many thousands of time servers running NTP in the Internet, a significant number of which are willing to provide a public time-synchronization service. Some of these are listed in the &lt;a href=&#34;https://support.ntp.org/bin/view/Servers/WebHome&#34;&gt;list of public time servers&lt;/a&gt;. This page is updated on a regular basis using information provided voluntarily by various site administrators. There are other ways to explore the nearby subnet using the &lt;tt&gt;&lt;a href=&#34;/archives/3-5.93e/ntptrace&#34;&gt;ntptrace&lt;/a&gt;&lt;/tt&gt; and &lt;tt&gt;&lt;a href=&#34;/archives/3-5.93e/xntpdc&#34;&gt;xntpdc&lt;/a&gt;&lt;/tt&gt; programs.&lt;/p&gt;
&lt;p&gt;It is vital to carefully consider the issues of robustness and reliability when selecting the sources of synchronization. Normally, not less than three sources should be available, preferably selected to avoid common points of failure. It is usually better to choose sources which are likely to be &amp;ldquo;close&amp;rdquo; to you in terms of network topology, though you shouldn&amp;rsquo;t worry overly about this if you are unable to determine who is close and who isn&amp;rsquo;t. Normally, it is much more serious when a server becomes faulty and delivers incorrect time than when it simply stops operating, since an NTP-synchronized host normally can coast for hours or even days without its clock accumulating serious error approaching a second, for instance. Selecting at least three sources from different operating administrations, where possible, is the minimum recommended, although a lesser number could provide acceptable service with a degraded degree of robustness.&lt;/p&gt;
&lt;p&gt;Normally, it is not considered good practice for a single workstation to request synchronization from a primary (stratum-1) time server. At present, these servers provide synchronization for hundreds of clients in many cases and could, along with the network access paths, become seriously overloaded if large numbers of workstation clients requested synchronization directly. Therefore, workstations located in sparsely populated administrative domains with no local synchronization infrastructure should request synchronization from nearby stratum-2 servers instead. In most cases the keepers of those servers listed in the NTP page provide unrestricted access without prior permission; however, in all cases it is considered polite to notify the administrator listed in the file upon commencement of regular service. In all cases the access mode and notification requirements listed in the file must be respected.&lt;/p&gt;
&lt;p&gt;In the case of a gateway or file server providing service to a significant number of workstations or file servers in an enterprise network it is even more important to provide multiple, redundant sources of synchronization and multiple, diversity-routed, network access paths. The preferred configuration is at least three administratively coordinated time servers providing service throughout the administrative domain including campus networks and subnetworks. Each of these should obtain service from at least two different outside sources of synchronization, preferably via different gateways and access paths. These sources should all operate at the same stratum level, which is one less than the stratum level to be used by the local time servers themselves. In addition, each of these time servers should peer with all of the other time servers in the local administrative domain at the stratum level used by the local time servers, as well as at least one (different) outside source at this level. This configuration results in the use of six outside sources at a lower stratum level (toward the primary source of synchronization, usually a radio clock), plus three outside sources at the same stratum level, for a total of nine outside sources of synchronization. While this may seem excessive, the actual load on network resources is minimal, since the interval between polling messages exchanged between peers usually ratchets back to no more than one message every 17 minutes.&lt;/p&gt;
&lt;p&gt;The stratum level to be used by the local time servers is an engineering choice. As a matter of policy, and in order to reduce the load on the primary servers, it is desirable to use the highest stratum consistent with reliable, accurate time synchronization throughout the administrative domain. In the case of enterprise networks serving hundreds or thousands of client file servers and workstations, conventional practice is to obtain service from stratum-1 primary servers such as listed in the NTP page. When choosing sources away from the primary sources, the particular synchronization path in use at any time can be verified using the &lt;tt&gt;ntptrace&lt;/tt&gt; program included in the &lt;tt&gt;xntp3&lt;/tt&gt; distribution. It is important to avoid loops and possible common points of failure when selecting these sources. Note that, while NTP detects and rejects loops involving neighboring servers, it does not detect loops involving intervening servers. In the unlikely case that all primary sources of synchronization are lost throughout the subnet, the remaining servers on that subnet can form temporary loops and, if the loss continues for an interval of many hours, the servers will drop off the subnet and free-run with respect to their internal (disciplined) timing sources. After some period with no outside timing source (currently one day), a host will declare itself unsynchronized and provide this information to local application programs.&lt;/p&gt;
&lt;p&gt;In many cases the purchase of one or more radio clocks is justified, in which cases good engineering practice is to use the configurations described above anyway and connect the radio clock to one of the local servers. This server is then encouraged to participate in a special primary-server subnetwork in which each radio-equipped server peers with several other similarly equipped servers. In this way the radio-equipped server may provide synchronization, as well as receive synchronization, should the local or remote radio clock(s) fail or become faulty. xntpd treats attached radio clock(s) in the same way as other servers and applies the same criteria and algorithms to the time indications, so can detect when the radio fails or becomes faulty and switch to alternate sources of synchronization. It is strongly advised, and in practice for most primary servers today, to employ the authentication or access-control features of the NTP specification in order to protect against hostile intruders and possible destabilization of the time service. Using this or similar strategies, the remaining hosts in the same administrative domain can be synchronized to the three (or more) selected time servers. Assuming these servers are synchronized directly to stratum-1 sources and operate normally as stratum-2, the next level away from the primary source of synchronization, for instance various campus file servers, will operate at stratum 3 and dependent workstations at stratum 4. Engineered correctly, such a subnet will survive all but the most exotic failures or even hostile penetrations of the various, distributed timekeeping resources.&lt;/p&gt;
&lt;p&gt;The above arrangement should provide very good, robust time service with a minimum of traffic to distant servers and with manageable loads on the local servers. While it is theoretically possible to extend the synchronization subnet to even higher strata, this is seldom justified and can make the maintenance of configuration files unmanageable. Serving time to a higher stratum peer is very inexpensive in terms of the load on the lower stratum server if the latter is located on the same concatenated LAN. When justified by the accuracy expectations, NTP can be operated in broadcast and multicast modes, so that clients need only listen for periodic broadcasts and do not need to send anything.&lt;/p&gt;
&lt;p&gt;When planning your network you might, beyond this, keep in mind a few generic don&amp;rsquo;ts, in particular:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Don&amp;rsquo;t synchronize a local time server to another peer at the same stratum, unless the latter is receiving time from lower stratum sources the former doesn&amp;rsquo;t talk to directly. This minimizes the occurrence of common points of failure, but does not eliminate them in cases where the usual chain of associations to the primary sources of synchronization are disrupted due to failures.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don&amp;rsquo;t configure peer associations with higher stratum servers. Let the higher strata configure lower stratum servers, but not the reverse. This greatly simplifies configuration file maintenance, since there is usually much greater configuration churn in the high stratum clients such as personal workstations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don&amp;rsquo;t synchronize more than one time server in a particular administrative domain to the same time server outside that domain. Such a practice invites common points of failure, as well as raises the possibility of massive abuse, should the configuration file be automatically distributed to a large number of clients.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are many useful exceptions to these rules. When in doubt, however, follow them.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;configuring-your-server-or-client&#34;&gt;Configuring Your Server or Client&lt;/h4&gt;
&lt;p&gt;As mentioned previously, the configuration file is usually called /etc/ntp.conf. This is an ASCII file conforming to the usual comment and whitespace conventions. A working configuration file might look like (in this and other examples, do not copy this directly):&lt;/p&gt;
&lt;pre&gt;     # peer configuration for host whimsy
     # (expected to operate at stratum 2)

     server rackety.udel.edu
     server umd1.umd.edu
     server lilben.tn.cornell.edu

     driftfile /etc/ntp.drift
&lt;/pre&gt;
&lt;p&gt;(Note the use of host names, although host addresses in dotted-quad notation can also be used. It is always preferable to use names rather than addresses, since over time the addresses can change, while the names seldom change.)&lt;/p&gt;
&lt;p&gt;This particular host is expected to operate as a client at stratum 2 by virtue of the &lt;tt&gt;server&lt;/tt&gt; keyword and the fact that two of the three servers declared (the first two) have radio clocks and usually run at stratum 1. The third server in the list has no radio clock, but is known to maintain associations with a number of stratum 1 peers and usually operates at stratum 2. Of particular importance with the last host is that it maintains associations with peers besides the two stratum 1 peers mentioned. This can be verified using the &lt;tt&gt;ntpq&lt;/tt&gt; program mentioned above. When configured using the &lt;tt&gt;server&lt;/tt&gt; keyword, this host can receive synchronization from any of the listed servers, but can never provide synchronization to them.&lt;/p&gt;
&lt;p&gt;Unless restricted using facilities described later, this host can provide synchronization to dependent clients, which do not have to be listed in the configuration file. Associations maintained for these clients are transitory and result in no persistent state in the host. These clients are normally not visible using the &lt;tt&gt;ntpq&lt;/tt&gt; program included in the distribution; however, &lt;tt&gt;xntpd&lt;/tt&gt; includes a monitoring feature (described later) which caches a minimal amount of client information useful for debugging administrative purposes.&lt;/p&gt;
&lt;p&gt;A time server expected to both receive synchronization from another server, as well as to provide synchronization to it, is declared using the &lt;tt&gt;peer&lt;/tt&gt; keyword instead of the &lt;tt&gt;server&lt;/tt&gt; keyword. In all other aspects the server operates the same in either mode and can provide synchronization to dependent clients or other peers. If a local source of UTC time is available, it is considered good engineering practice to declare time servers outside the administrative domain as &lt;tt&gt;peer&lt;/tt&gt; and those inside as &lt;tt&gt;server&lt;/tt&gt; in order to provide redundancy in the global Internet, while minimizing the possibility of instability within the domain itself. A time server in one domain can in principle heal another domain temporarily isolated from all other sources of synchronization. However, it is probably unwise for a casual workstation to bridge fragments of the local domain which have become temporarily isolated.&lt;/p&gt;
&lt;p&gt;Note the inclusion of a &lt;tt&gt;driftfile&lt;/tt&gt; declaration. One of the things the NTP daemon does when it is first started is to compute the error in the intrinsic frequency of the clock on the computer it is running on. It usually takes about a day or so after the daemon is started to compute a good estimate of this (and it needs a good estimate to synchronize closely to its server). Once the initial value is computed, it will change only by relatively small amounts during the course of continued operation. The &lt;tt&gt;driftfile&lt;/tt&gt; declaration indicates to the daemon the name of a file where it may store the current value of the frequency error so that, if the daemon is stopped and restarted, it can reinitialize itself to the previous estimate and avoid the day&amp;rsquo;s worth of time it will take to recompute the frequency estimate. Since this is a desirable feature, a &lt;tt&gt;driftfile&lt;/tt&gt; declaration should always be included in the configuration file.&lt;/p&gt;
&lt;p&gt;An implication in the above is that, should &lt;tt&gt;xntpd&lt;/tt&gt; be stopped for some reason, the local platform time will diverge from UTC by an amount that depends on the intrinsic error of the clock oscillator and the time since last synchronized. In view of the length of time necessary to refine the frequency estimate, every effort should be made to operate the daemon on a continuous basis and minimize the intervals when for some reason it is not running.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;xntp3-versus-previous-versions&#34;&gt;Xntp3 Versus Previous Versions&lt;/h4&gt;
&lt;p&gt;There are several items of note when dealing with a mixture of &lt;tt&gt;xntp3&lt;/tt&gt; and previous distributions of NTP Version 2 (&lt;tt&gt;xntpd&lt;/tt&gt;) and NTP Version 1 (&lt;tt&gt;ntp3.4&lt;/tt&gt;). The &lt;tt&gt;xntp3&lt;/tt&gt; implementation conforms to the NTP Version 3 specification. As such, by default when no additional information is available concerning the preferences of the peer, &lt;tt&gt;xntpd&lt;/tt&gt; claims to be version 3 in the packets that it sends.&lt;/p&gt;
&lt;p&gt;An NTP implementation conforming to a previous version specification ordinarily discards packets from a later version. However, in most respects documented in RFC-1305, The version 2 implementation is compatible with the version 3 algorithms and protocol. The version 1 implementation contains most of the version 2 algorithms, but without important features for clock selection and robustness. Nevertheless, in most respects the NTP versions are backwards compatible. The sticky part here is that, when either version 2 or version 1 implementation receives a packet claiming to be from a version-3 server, it discards it without further processing. Hence there is a danger that in some situations synchronization with previous versions will fail.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;xntpd&lt;/tt&gt; is aware of this problem. In particular, when &lt;tt&gt;xntpd&lt;/tt&gt; is polled first by a host claiming to be a previous version 1 or version 2 implementation, &lt;tt&gt;xntpd&lt;/tt&gt; claims to be a version 1 or 2 implementation, respectively, in packets returned to the poller. This allows &lt;tt&gt;xntpd&lt;/tt&gt; to serve previous version clients transparently. The trouble occurs when an previous version is to be included in an xntpd configuration file. With no further indication, &lt;tt&gt;xntpd&lt;/tt&gt; will send packets claiming to be version 3 when it polls. To get around this, &lt;tt&gt;xntpd&lt;/tt&gt; allows a qualifier to be added to configuration entries to indicate which version to use when polling. Hence the entries&lt;/p&gt;
&lt;pre&gt;     # specify NTP version 1

     server mimsy.mil version 1     # server running ntpd version 1
     server apple.com version 2     # server running ntpd version 2
&lt;/pre&gt;
&lt;p&gt;will cause version 1 packets to be sent to the host mimsy.mil and version 2 packets to be sent to apple.com. If you are testing &lt;tt&gt;xntpd&lt;/tt&gt; against previous version servers you will need to be careful about this. Note that, as indicated in the RFC-1305 specification, there is no longer support for the original NTP specification, popularly called NTP Version 0.&lt;/p&gt;
&lt;h4 id=&#34;traffic-monitoring&#34;&gt;Traffic Monitoring&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;xntpd&lt;/tt&gt; handles peers whose stratum is higher than the stratum of the local server and pollers using client mode by a fast path which minimizes the work done in responding to their polls, and normally retains no memory of these pollers. Sometimes, however, it is interesting to be able to determine who is polling the server, and how often, as well as who has been sending other types of queries to the server.&lt;/p&gt;
&lt;p&gt;To allow this, &lt;tt&gt;xntpd&lt;/tt&gt; implements a traffic monitoring facility which records the source address and a minimal amount of other information from each packet which is received by the server. This feature is normally enabled, but can be disabled if desired using the configuration file entry:&lt;/p&gt;
&lt;pre&gt;     # disable monitoring feature
     disable monitor
&lt;/pre&gt;
&lt;p&gt;The recorded information can be displayed using the &lt;tt&gt;xntpdc&lt;/tt&gt; query program, described briefly below.&lt;/p&gt;
&lt;h4 id=&#34;address-and-mask-restrictions&#34;&gt;Address-and-Mask Restrictions&lt;/h4&gt;
&lt;p&gt;The address-and-mask configuration facility supported by &lt;tt&gt;xntpd&lt;/tt&gt; is quite flexible and general, but is not an integral part of the NTP Version 3 specification. The major drawback is that, while the internal implementation is very nice, the user interface is not. For this reason it is probably worth doing an example here. Briefly, the facility works as follows. There is an internal list, each entry of which holds an address, a mask and a set of flags. On receipt of a packet, the source address of the packet is compared to each entry in the list, with a match being posted when the following is true:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(source_addr &amp;amp; mask) == (address &amp;amp; mask)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A particular source address may match several list entries. In this case the entry with the most one bits in the mask is chosen. The flags associated with this entry are used to control the access.&lt;/p&gt;
&lt;p&gt;In the current implementation the flags always add restrictions. In effect, an entry with no flags set leaves matching hosts unrestricted. An entry can be added to the internal list using a &lt;tt&gt;restrict&lt;/tt&gt; declaration. The flags associated with the entry are specified textually. For example, the &lt;tt&gt;notrust&lt;/tt&gt; flag indicates that hosts matching this entry, while treated normally in other respects, shouldn&amp;rsquo;t be trusted to provide synchronization even if otherwise so enabled. The &lt;tt&gt;nomodify&lt;/tt&gt; flag indicates that hosts matching this entry should not be allowed to do run-time configuration. There are many more flags, see the &lt;a href=&#34;/archives/3-5.93e/xntpd&#34;&gt;&lt;tt&gt;xntpd&lt;/tt&gt; - Network Time Protocol (NTP) daemon&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;Now the example. Suppose you are running the server on a host whose address is 128.100.100.7. You would like to ensure that run time reconfiguration requests can only be made from the local host and that the server only ever synchronizes to one of a pair of off-campus servers or, failing that, a time source on net 128.100. The following entries in the configuration file would implement this policy:&lt;/p&gt;
&lt;pre&gt;     # by default, don&#39;t trust and don&#39;t allow modifications

     restrict default notrust nomodify

     # these guys are trusted for time, but no modifications allowed

     restrict 128.100.0.0 mask 255.255.0.0 nomodify
     restrict 128.8.10.1 nomodify
     restrict 192.35.82.50 nomodify

     # the local addresses are unrestricted

     restrict 128.100.100.7
     restrict 127.0.0.1
&lt;/pre&gt;
&lt;p&gt;The first entry is the default entry, which all hosts match and hence which provides the default set of flags. The next three entries indicate that matching hosts will only have the &lt;tt&gt;nomodify&lt;/tt&gt; flag set and hence will be trusted for time. If the mask isn&amp;rsquo;t specified in the &lt;tt&gt;restrict&lt;/tt&gt; keyword, it defaults to 255.255.255.255. Note that the address 128.100.100.7 matches three entries in the table, the default entry (mask 0.0.0.0), the entry for net 128.100 (mask 255.255.0.0) and the entry for the host itself (mask 255.255.255.255). As expected, the flags for the host are derived from the last entry since the mask has the most bits set.&lt;/p&gt;
&lt;p&gt;The only other thing worth mentioning is that the &lt;tt&gt;restrict&lt;/tt&gt; declarations apply to packets from all hosts, including those that are configured elsewhere in the configuration file and even including your clock pseudopeer(s), if any. Hence, if you specify a default set of restrictions which you don&amp;rsquo;t wish to be applied to your configured peers, you must remove those restrictions for the configured peers with additional &lt;tt&gt;restrict&lt;/tt&gt; declarations mentioning each peer separately.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;authentication&#34;&gt;Authentication&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;xntpd&lt;/tt&gt; supports the optional authentication procedure specified in the NTP Version 2 and 3 specifications. Briefly, when an association runs in authenticated mode, each packet transmitted has appended to it a 32-bit key ID and a 64/128-bit cryptographic checksum of the packet contents computed using either the Data Encryption Standard (DES) or Message Digest (MD5) algorithms. Note that, while either of these algorithms provide sufficient protection from message- modification attacks, distribution of the former algorithm implementation is restricted to the U.S. and Canada, while the latter presently is free from such restrictions. With either algorithm the receiving peer recomputes the checksum and compares it with the one included in the packet. For this to work, the peers must share at least one encryption key and, furthermore, must associate the shared key with the same key ID.&lt;/p&gt;
&lt;p&gt;This facility requires some minor modifications to the basic packet processing procedures, as required by the specification. These modifications are enabled by the &lt;tt&gt;enable authenticate&lt;/tt&gt; configuration declaration. In particular, in authenticated mode, peers which send unauthenticated packets, peers which send authenticated packets which the local server is unable to decrypt and peers which send authenticated packets encrypted using a key we don&amp;rsquo;t trust are all marked untrustworthy and unsuitable for synchronization. Note that, while the server may know many keys (identified by many key IDs), it is possible to declare only a subset of these as trusted. This allows the server to share keys with a client which requires authenticated time and which trusts the server, but which is not trusted by the server. Also, some additional configuration language is required to specify the key ID to be used to authenticate each configured peer association. Hence, for a server running in authenticated mode, the configuration file might look similar to the following:&lt;/p&gt;
&lt;pre&gt;     # peer configuration for 128.100.100.7
     # (expected to operate at stratum 2)
     # fully authenticated this time

     peer 128.100.49.105 key 22 #suzuki.ccie.utoronto.ca
     peer 128.8.10.1 key 4    #umd1.umd.edu
     peer 192.35.82.50 key 6  #lilben.tn.cornell.edu

     keys /usr/local/etc/ntp.keys  # path forkey file
     trustedkey 1 2 14 15     # define trusted keys
     requestkey 15            # key (7) for accessing server variables
     controlkey 15            # key (6) for accessing server variables

     authdelay 0.000094       # authentication delay (Sun4c/50 IPX)
&lt;/pre&gt;
&lt;p&gt;There are a couple of previously unmentioned things in here. The &lt;tt&gt;authenticate yes&lt;/tt&gt; line enables authentication processing, while the &lt;tt&gt;keys /usr/local/etc/ntp.keys&lt;/tt&gt; specifies the path to the keys file (see below and the &lt;tt&gt;xntpd&lt;/tt&gt; document page for details of the file format). The &lt;tt&gt;trustedkey&lt;/tt&gt; declaration identifies those keys that are known to be uncompromised; the remainder presumably represent the expired or possibly compromised keys. Both sets of keys must be declared by key identifier in the ntp.keys file described below. This provides a way to retire old keys while minimizing the frequency of delicate key-distribution procedures. The &lt;tt&gt;requestkey 15&lt;/tt&gt; line establishes the key to be used for mode- 6 control messages as specified in RFC-1305 and used by the ntpq utility program, while the &lt;tt&gt;controlkey 15&lt;/tt&gt; establishes the key to be used for mode-7 private control messages used by the &lt;tt&gt;xntpdc&lt;/tt&gt; utility program. These keys are used to prevent unauthorized modification of daemon variables.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;authdelay&lt;/tt&gt; declaration is an estimate of the amount of processing time taken between the freezing of a transmit timestamp and the actual transmission of the packet when authentication is enabled (i.e. more or less the time it takes for the DES or MD5 routine to encrypt a single block), and is used as a correction for the transmit timestamp. This can be computed for your CPU by the &lt;a href=&#34;/archives/3-5.93e/authspeed&#34;&gt;authspeed&lt;/a&gt; program included in the distribution. The usage is illustrated by the following:&lt;/p&gt;
&lt;pre&gt;     # for DES keys

     authspeed -n 30000 auth.samplekeys
     # for MD5 keys

     authspeed -mn 30000 auth.samplekeys&lt;/pre&gt;
&lt;p&gt;Additional utility programs included in the &lt;tt&gt;./authstuff&lt;/tt&gt; directory can be used to generate random keys, certify implementation correctness and display sample keys. As a general rule, keys should be chosen randomly, except possibly the request and control keys, which must be entered by the user as a password.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;ntp.keys&lt;/tt&gt; file contains the list of keys and associated key IDs the server knows about (for obvious reasons this file is better left unreadable by anyone except root). The contents of this file might look like:&lt;/p&gt;
&lt;pre&gt;     # ntp keys file (ntp.keys)
     1    N   29233E0461ECD6AE    # DES key in NTP format
     2    M   RIrop8KPPvQvYotM    # md5 key as an ASCII random string
     14   M   sundial             # md5 key as an ASCII string
     15   A   sundial             # DES key as an ASCII string

     # the following 3 keys are identical

     10   A    SeCReT
     10   N    d3e54352e5548080
     10   S    a7cb86a4cba80101
&lt;/pre&gt;
&lt;p&gt;In the keys file the first token on each line indicates the key ID, the second token the format of the key and the third the key itself. There are four key formats. An &lt;tt&gt;A&lt;/tt&gt; indicates a DES key written as a 1- to-8 character string in 7-bit ASCII representation, with each character standing for a key octet (like a Unix password). An &lt;tt&gt;S&lt;/tt&gt; indicates a DES key written as a hex number in the DES standard format, with the low order bit (LSB) of each octet being the (odd) parity bit. An &lt;tt&gt;N&lt;/tt&gt; indicates a DES key again written as a hex number, but in NTP standard format with the high order bit of each octet being the (odd) parity bit (confusing enough?). An &lt;tt&gt;M&lt;/tt&gt; indicates an MD5 key written as a 1-to-31 character ASCII string in the &lt;tt&gt;A&lt;/tt&gt; format. Note that, because of the simple tokenizing routine, the characters &lt;tt&gt;&lt;code&gt;&#39; &#39;&lt;/code&gt;, &lt;code&gt;#&lt;/code&gt;, &lt;code&gt;\t&lt;/code&gt;, &lt;code&gt;\n&lt;/code&gt;&lt;/tt&gt; and &lt;tt&gt;&lt;code&gt;\0&lt;/code&gt;&lt;/tt&gt; can&amp;rsquo;t be used in either a DES or MD5 ASCII key. Everything else is fair game, though. Key 0 (zero) is used for special purposes and should not appear in this file.&lt;/p&gt;
&lt;p&gt;The big trouble with the authentication facility is the keys file. It is a maintenance headache and a security problem. This should be fixed some day. Presumably, this whole bag of worms goes away if/when a generic security regime for the Internet is established.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;query-programs&#34;&gt;Query Programs&lt;/h4&gt;
&lt;p&gt;Three utility query programs are included with the distribution, &lt;tt&gt;ntpq&lt;/tt&gt;, &lt;tt&gt;ntptrace&lt;/tt&gt; and &lt;tt&gt;xntpdc&lt;/tt&gt;. &lt;tt&gt;ntpq&lt;/tt&gt; is a handy program which sends queries and receives responses using NTP standard mode-6 control messages. Since it uses the standard control protocol specified in RFC-1305, it may be used with NTP Version 2 and Version 3 implementations for both Unix and Fuzzball, but not Version 1 implementations. It is most useful to query remote NTP implementations to assess timekeeping accuracy and expose bugs in configuration or operation.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;ntptrace&lt;/tt&gt; can be used to display the current synchronization path from a selected host through possibly intervening servers to the primary source of synchronization, usually a radio clock. It works with both version 2 and version 3 servers, but not version 1.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;xntpdc&lt;/tt&gt; is a horrid program which uses NTP private mode-7 control messages to query local or remote servers. The format and contents of these messages are specific to this version of &lt;tt&gt;xntpd&lt;/tt&gt; and some older versions. The program does allow inspection of a wide variety of internal counters and other state data, and hence does make a pretty good debugging tool, even if it is frustrating to use. The other thing of note about &lt;tt&gt;xntpdc&lt;/tt&gt; is that it provides a user interface to the run time reconfiguration facility. See the respective document pages for details on the use of these programs.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;run-time-reconfiguration&#34;&gt;Run-Time Reconfiguration&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;xntpd&lt;/tt&gt; was written specifically to allow its configuration to be fully modifiable at run time. Indeed, the only way to configure the server is at run time. The configuration file is read only after the rest of the server has been initialized into a running default-configured state. This facility was included not so much for the benefit of Unix, where it is handy but not strictly essential, but rather for dedicated platforms where the feature is more important for maintenance. Nevertheless, run time configuration works very nicely for Unix servers as well.&lt;/p&gt;
&lt;p&gt;Nearly all of the things it is possible to configure in the configuration file may be altered via NTP mode-7 messages using the &lt;tt&gt;ntpdc&lt;/tt&gt; program. Mode-6 messages may also provide some limited configuration functionality (though the only thing you can currently do with mode-6 messages is set the leap-second warning bits) and the &lt;tt&gt;ntpq&lt;/tt&gt; program provides generic support for the latter. The leap bits that can be set in the &lt;tt&gt;leap_warning&lt;/tt&gt; variable (up to one month ahead) and in the &lt;tt&gt;leap_indication&lt;/tt&gt; variable have a slightly different encoding than the usual interpretation:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Action&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;00&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The daemon passes the leap bits of its synchronisation source (usual mode of operation)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;01/10&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A leap second is added/deleted&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;11&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Leap information from the synchronization source is ignored (thus LEAP_NOWARNING is passed on)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Mode-6 and mode-7 messages which would modify the configuration of the server are required to be authenticated using standard NTP authentication. To enable the facilities one must, in addition to specifying the location of a keys file, indicate in the configuration file the key IDs to be used for authenticating reconfiguration commands. Hence the following fragment might be added to a configuration file to enable the mode-6 (ntpq) and mode-7 (xntpdc) facilities in the daemon:&lt;/p&gt;
&lt;pre&gt;     # specify mode-6 and mode-7 trusted keys

     requestkey 65535    # for mode-7 requests
     controlkey 65534    # for mode-6 requests
&lt;/pre&gt;
&lt;p&gt;If the &lt;tt&gt;requestkey&lt;/tt&gt; and/or the &lt;tt&gt;controlkey&lt;/tt&gt; configuration declarations are omitted from the configuration file, the corresponding run-time reconfiguration facility is disabled.&lt;/p&gt;
&lt;p&gt;The query programs require the user to specify a key ID and a key to use for authenticating requests to be sent. The key ID provided should be the same as the one mentioned in the configuration file, while the key should match that corresponding to the key ID in the keys file. As the query programs prompt for the key as a password, it is useful to make the request and control authentication keys typeable (in ASCII format) from the keyboard.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;name-resolution&#34;&gt;Name Resolution&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;xntpd&lt;/tt&gt; includes the capability to specify host names requiring resolution in &lt;tt&gt;peer&lt;/tt&gt; and &lt;tt&gt;server&lt;/tt&gt; declarations in the configuration file. However, in some outposts of the Internet, name resolution is unreliable and the interface to the Unix resolver routines is synchronous. The hangups and delays resulting from name-resolver clanking can be unacceptable once the NTP server is running (and remember it is up and running before the configuration file is read). However, it is advantageous to resolve time server names, since their addresses are occasionally changed.&lt;/p&gt;
&lt;p&gt;In order to prevent configuration delays due to the name resolver, the daemon runs the name resolution process in parallel with the main daemon code. When the daemon comes across a &lt;tt&gt;peer&lt;/tt&gt; or &lt;tt&gt;server&lt;/tt&gt; entry with a non-numeric host address, it records the relevant information in a temporary file and continues on. When the end of the configuration file has been reached and one or more entries requiring name resolution have been found, the server runs the name resolver from the temporary file. The server then continues on normally but with the offending peers/servers omitted from its configuration.&lt;/p&gt;
&lt;p&gt;As each name is resolved, it configures the associated entry into the server using the same mode-7 run time reconfiguration facility that &lt;tt&gt;xntpdc&lt;/tt&gt; uses. If temporary resolver failures occur, the resolver will periodically retry the requests until a definite response is received. The program will continue to run until all entries have been resolved.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;dealing-with-frequency-tolerance-violations&#34;&gt;Dealing with Frequency Tolerance Violations&lt;/h4&gt;
&lt;p&gt;The NTP Version 3 specification RFC-1305 calls for a maximum oscillator frequency tolerance of +-100 parts-per-million (PPM), which is representative of those components suitable for use in relatively inexpensive workstation platforms. For those platforms meeting this tolerance, NTP will automatically compensate for the frequency errors of the individual oscillator and no further adjustments are required, either to the configuration file or to various kernel variables.&lt;/p&gt;
&lt;p&gt;However, in the case of certain notorious platforms, in particular Sun 4.1.1 systems, the 100-ppm tolerance is routinely violated. In such cases it may be necessary to adjust the values of certain kernel variables; in particular,  &lt;tt&gt;tick&lt;/tt&gt; and &lt;tt&gt;tickadj&lt;/tt&gt;. The variable &lt;tt&gt;tick&lt;/tt&gt; is the increment in microseconds added to the system time on each interval- timer interrupt, while the variable &lt;tt&gt;tickadj&lt;/tt&gt; is used by the time adjustment code as a slew rate, in microseconds per tick. When the time is being adjusted via a call to the system routine &lt;tt&gt;adjtime()&lt;/tt&gt;, the kernel increases or reduces tick by &lt;tt&gt;tickadj&lt;/tt&gt; microseconds per tick until the specified adjustment has been completed. Unfortunately, in most Unix implementations the tick increment must be either zero or plus/minus exactly &lt;tt&gt;tickadj&lt;/tt&gt; microseconds, meaning that adjustments are truncated to be an integral multiple of &lt;tt&gt;tickadj&lt;/tt&gt; (this latter behaviour is a misfeature, and is the only reason the &lt;tt&gt;tickadj&lt;/tt&gt; code needs to concern itself with the internal implementation of &lt;tt&gt;tickadj&lt;/tt&gt; at all). In addition, the stock Unix implementation considers it an error to request another adjustment before a prior one has completed.&lt;/p&gt;
&lt;p&gt;Thus, to make very sure it avoids problems related to the roundoff, the xntpd daemon reads the values of &lt;tt&gt;tick&lt;/tt&gt; and &lt;tt&gt;tickadj&lt;/tt&gt; from the kernel when it starts. It then ensures that all adjustments given to &lt;tt&gt;adjtime()&lt;/tt&gt; are an even multiple of &lt;tt&gt;tickadj&lt;/tt&gt; microseconds and computes the largest adjustment that can be completed in the adjustment interval (using both the value of &lt;tt&gt;tick&lt;/tt&gt; and the value of &lt;tt&gt;tickadj&lt;/tt&gt;) so it can avoid exceeding this limit.&lt;/p&gt;
&lt;p&gt;Unfortunately, the value of &lt;tt&gt;tickadj&lt;/tt&gt; set by default is almost always too large for &lt;tt&gt;xntpd&lt;/tt&gt;. NTP operates by continuously making small adjustments to the clock, usually at one-second intervals. If &lt;tt&gt;tickadj&lt;/tt&gt; is set too large, the adjustments will disappear in the roundoff; while, if &lt;tt&gt;tickadj&lt;/tt&gt; is too small, NTP will have difficulty if it needs to make an occasional large adjustment. While the daemon itself will read the kernel&amp;rsquo;s values of these variables, it will not change the values, even if they are unsuitable. You must do this yourself before the daemon is started using the &lt;tt&gt;tickadj&lt;/tt&gt; program included in the &lt;tt&gt;./util&lt;/tt&gt; directory of the distribution. Note that the latter program will also compute an optimal value of &lt;tt&gt;tickadj&lt;/tt&gt; for NTP use based on the kernel&amp;rsquo;s value of &lt;tt&gt;tick&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;tickadj&lt;/tt&gt; program can reset several other kernel variables if asked. It can change the value of &lt;tt&gt;tick&lt;/tt&gt; if asked. This is handy to compensate for kernel bugs which cause the clock to run with a very large frequency error, as with SunOS 4.1.1 systems. It can also be used to set the value of the kernel &lt;tt&gt;dosynctodr&lt;/tt&gt; variable to zero. This variable controls whether to synchronize the system clock to the time-of-day clock, something you really don&amp;rsquo;t want to be happen when &lt;tt&gt;xntpd&lt;/tt&gt; is trying to keep it under control.&lt;/p&gt;
&lt;p&gt;In order to maintain reasonable correctness bounds, as well as reasonably good accuracy with acceptable polling intervals, &lt;tt&gt;ntpd&lt;/tt&gt; will complain if the frequency error is greater than 500 PPM. For machines with a value of &lt;tt&gt;tick&lt;/tt&gt; in the 10-ms range, a change of one in the value of &lt;tt&gt;tick&lt;/tt&gt; will change the frequency by about 100 PPM. In order to determine the value of &lt;tt&gt;tick&lt;/tt&gt; for a particular CPU, disconnect the machine from all sources of time (&lt;tt&gt;dosynctodr&lt;/tt&gt; = 0) and record its actual time compared to an outside source (eyeball-and-wristwatch will do) over a day or more. Multiply the time change over the day by 0.116 and add or subtract the result to tick, depending on whether the CPU is fast or slow. An example call to &lt;tt&gt;tickadj&lt;/tt&gt; useful on SunOS 4.1.1 is:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tickadj -t 9999 -a 5 -s&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;which sets tick 100 PPM fast, &lt;tt&gt;tickadj&lt;/tt&gt; to 5 microseconds and turns off the clock/calendar chip fiddle. This line can be added to the &lt;tt&gt;rc.local&lt;/tt&gt; configuration file to automatically set the kernel variables at boot time.&lt;/p&gt;
&lt;p&gt;All this stuff about diddling kernel variables so the NTP daemon will work is really silly. If vendors would ship machines with clocks that kept reasonable time and would make their &lt;tt&gt;adjtime()&lt;/tt&gt; system call apply the slew it is given exactly, independent of the value of &lt;tt&gt;tickadj&lt;/tt&gt;, all this could go away. This is in fact the case on current SunOS 5.3 systems.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;tuning-your-subnet&#34;&gt;Tuning Your Subnet&lt;/h4&gt;
&lt;p&gt;There are several parameters available for tuning the NTP subnet for maximum accuracy and minimum jitter. One of these is the &lt;tt&gt;prefer&lt;/tt&gt; configuration declaration described in &lt;a href=&#34;/archives/3-5.93e/prefer&#34;&gt;Mitigation Rules and the &lt;tt&gt;prefer&lt;/tt&gt; Keyword&lt;/a&gt; documentation page. When more than one eligible server exists, the NTP clock-selection and combining algorithms act to winnow out all except the &amp;ldquo;best&amp;rdquo; set of servers using several criteria based on differences between the readings of different servers and between successive readings of the same server. The result is usually a set of surviving servers that are apparently statistically equivalent in accuracy, jitter and stability. The population of survivors remaining in this set depends on the individual server characteristics measured during the selection process and may vary from time to time as the result of normal statistical variations. In LANs with high speed RISC-based time servers, the population can become somewhat unstable, with individual servers popping in and out of the surviving population, generally resulting in a regime called &lt;em&gt;clockhopping&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;When only the smallest residual jitter can be tolerated, it may be convenient to elect one of the servers at each stratum level as the preferred one using the keyword &lt;tt&gt;prefer&lt;/tt&gt; on the configuration declaration for the selected server:&lt;/p&gt;
&lt;pre&gt;     # preferred server declaration

     peer rackety.udel.edu prefer   # preferred server
&lt;/pre&gt;
&lt;p&gt;The preferred server will always be included in the surviving population, regardless of its characteristics and as long as it survives preliminary sanity checks and validation procedures.&lt;/p&gt;
&lt;p&gt;The most useful application of the &lt;tt&gt;prefer&lt;/tt&gt; keyword is in high speed LANs equipped with precision radio clocks, such as a GPS receiver. In order to insure robustness, the hosts need to include outside peers as well as the GPS-equipped server; however, as long as that server is running, the synchronization preference should be that server. The keyword should normally be used in all cases in order to prefer an attached radio clock. It is probably inadvisable to use this keyword for peers outside the LAN, since it interferes with the carefully crafted judgement of the selection and combining algorithms.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;provisions-for-leap-seconds-and-accuracy-metrics&#34;&gt;Provisions for Leap Seconds and Accuracy Metrics&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;xntpd&lt;/tt&gt; understands leap seconds and will attempt to take appropriate action when one occurs. In principle, every host running ntpd will insert a leap second in the local timescale in precise synchronization with UTC. This requires that the leap-warning bits be activated some time prior to the occurrence of a leap second at the primary (stratum 1) servers. Subsequently, these bits are propagated throughout the subnet depending on these servers by the NTP protocol itself and automatically implemented by &lt;tt&gt;xntpd&lt;/tt&gt; and the time-conversion routines of each host. The implementation is independent of the idiosyncrasies of the particular radio clock, which vary widely among the various devices, as long as the idiosyncratic behavior does not last for more than about 20 minutes following the leap. Provisions are included to modify the behavior in cases where this cannot be guaranteed. While provisions for leap seconds have been carefully crafted so that correct timekeeping immediately before, during and after the occurrence of a leap second is scrupulously correct, stock Unix systems are mostly inept in responding to the available information. This caveat goes also for the maximum-error and statistical-error bounds carefully calculated for all clients and servers, which could be very useful for application programs needing to calibrate the delays and offsets to achieve a near- simultaneous commit procedure, for example. While this information is maintained in the &lt;tt&gt;xntpd&lt;/tt&gt; data structures, there is at present no way for application programs to access it. This may be a topic for further development.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;clock-support-overview&#34;&gt;Clock Support Overview&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;xntpd&lt;/tt&gt; was designed to support radio (and other external) clocks and does some parts of this function with utmost care. Clocks are treated by the protocol as ordinary NTP peers, even to the point of referring to them with an (invalid) IP host address. Clock addresses are of the form 127.127.&lt;em&gt;t.u&lt;/em&gt;, where &lt;em&gt;t&lt;/em&gt; specifies the particular type of clock (i.e., refers to a particular clock driver) and &lt;em&gt;u&lt;/em&gt; is a unit number whose interpretation is clock-driver dependent. This is analogous to the use of major and minor device numbers by Unix and permits multiple instantiations of clocks of the same type on the same server, should such magnificent redundancy be required.&lt;/p&gt;
&lt;p&gt;Because clocks look much like peers, both configuration file syntax and run time reconfiguration commands can be used to control clocks in the same way as ordinary peers. Clocks are configured via &lt;tt&gt;server&lt;/tt&gt; declarations in the configuration file, can be started and stopped using ntpdc and are subject to address-and-mask restrictions much like a normal peer, should this stretch of imagination ever be useful. As a concession to the need to sometimes transmit additional information to clock drivers, an additional configuration file is available: the &lt;tt&gt;fudge&lt;/tt&gt; statement. This enables one to specify the values of two time quantities, two integral values and two flags, the use of which is dependent on the particular clock driver. For example, to configure a PST radio clock which can be accessed through the serial device &lt;tt&gt;/dev/pst1&lt;/tt&gt;, with propagation delays to WWV and WWVH of 7.5 and 26.5 milliseconds, respectively, on a machine with an imprecise system clock and with the driver set to disbelieve the radio clock once it has gone 30 minutes without an update, one might use the following configuration file entries:&lt;/p&gt;
&lt;pre&gt;     # radio clock fudge fiddles
     server 127.127.3.1
     fudge 127.127.3.1 time1 0.0075 time2 0.0265
     fudge 127.127.3.1 value2 30 flag1 1
&lt;/pre&gt;
&lt;p&gt;Additional information on the interpretation of these data with respect to various radio clock drivers is given in the &lt;a href=&#34;/archives/3-5.93e/refclock&#34;&gt;Reference Clock Drivers&lt;/a&gt; document page and in the individual driver documents accessible via that page.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;towards-the-ultimate-tick&#34;&gt;Towards the Ultimate Tick&lt;/h4&gt;
&lt;p&gt;This section considers issues in providing precision time synchronization in NTP subnets which need the highest quality time available in the present technology. These issues are important in subnets supporting real-time services such as distributed multimedia conferencing and wide-area experiment control and monitoring.&lt;/p&gt;
&lt;p&gt;In the Internet of today synchronization paths often span continents and oceans with moderate to high variations in delay due to traffic spasms. NTP is specifically designed to minimize timekeeping jitter due to delay variations using intricately crafted filtering and selection algorithms; however, in cases where these variations are as much as a second or more, the residual jitter following these algorithms may still be excessive. Sometimes, as in the case of some isolated NTP subnets where a local source of precision time is available, such as a PPS signal produced by a calibrated cesium clock, it is possible to remove the jitter and retime the local clock oscillator of the NTP server. This has turned out to be a useful feature to improve the synchronization quality of time distributed in remote places where radio clocks are not available. In these cases special features of the distribution are used together with the PPS signal to provide a jitter-free timing signal, while NTP itself is used to provide the coarse timing and resolve the seconds numbering.&lt;/p&gt;
&lt;p&gt;Most available radio clocks can provide time to an accuracy in the order of milliseconds, depending on propagation conditions, local noise levels and so forth. However, as a practical matter, all clocks can occasionally display errors significantly exceeding nominal specifications. Usually, the algorithms used by NTP for ordinary network peers, as well as radio clock peers will detect and discard these errors as discrepancies between the disciplined local clock oscillator and the decoded time message produced by the radio clock. Some radio clocks can produce a special PPS signal which can be interfaced to the server platform in a number of ways and used to substantially improve the (disciplined) clock oscillator jitter and wander characteristics by at least an order of magnitude. Using these features it is possible to achieve accuracies in the order of a few tens of microseconds with a fast RISC-based platform.&lt;/p&gt;
&lt;p&gt;There are three ways to implement PPS support, depending on the radio clock model, platform model and serial line interface. These are described in detail in the application notes mentioned in the &lt;a href=&#34;/archives/3-5.93e/&#34;&gt;The Network Time Protocol (NTP) Distribution&lt;/a&gt; document page. Each of these requires circuitry to convert the TTL signal produced by most clocks to the EIA levels used by most serial interfaces. The &lt;a href=&#34;/archives/3-5.93e/gadget&#34;&gt;Gadget Box PPS Level Converter and CHU Modem&lt;/a&gt; page describes a device designed to do this. Besides being useful for this purpose, this device includes an inexpensive modem designed for use with the Canadian CHU time/frequency radio station.&lt;/p&gt;
&lt;p&gt;In order to select the appropriate implementation, it is important to understand the underlying PPS mechanism used by ntpd. The PPS support depends on a continuous source of PPS pulses used to calculate an offset within +-500 milliseconds relative to the local clock. The serial timecode produced by the radio or the time determined by NTP in absence of the radio is used to adjust the local clock within +-128 milliseconds of the actual time. As long as the local clock is within this interval the PPS support is used to discipline the local clock and the timecode used only to verify that the local clock is in fact within the interval. Outside this interval the PPS support is disabled and the timecode used directly to control the local clock.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;parting-shots&#34;&gt;Parting Shots&lt;/h4&gt;
&lt;p&gt;There are several undocumented programs which can be useful in unusual cases. They can be found in the &lt;tt&gt;./clockstuff&lt;/tt&gt; and &lt;tt&gt;./authstuff&lt;/tt&gt; directories of the distribution. One of these is the &lt;tt&gt;propdelay&lt;/tt&gt; program, which can compute high frequency radio propagation delays between any two points whose latitude and longitude are known. The program understands something about the phenomena which allow high frequency radio propagation to occur, and will generally provide a better estimate than a calculation based on the great circle distance. Other programs of interest include &lt;tt&gt;clktest&lt;/tt&gt;, which allows one to exercise the generic clock line discipline, and &lt;tt&gt;chutest&lt;/tt&gt;, which runs the basic reduction algorithms used by the daemon on data received from a serial port.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: NTP Debugging Techniques</title>
      <link>/archives/3-5.93e/debug/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/debug/</guid>
      <description>
        
        
        &lt;p&gt;Once the NTP software distribution has been compiled and installed and the configuration file constructed, the next step is to verify correct operation and fix any bugs that may result. Usually, the command line that starts the daemon is included in the system startup file, so it is executed only at system boot time; however, the daemon can be stopped and restarted from root at any time. Usually, no command-line arguments are required, unless special actions described in the xntpd.8 man page are required. Once started, the daemon will begin sending messages, as specified in the configuration file, and interpreting received messages.&lt;/p&gt;
&lt;p&gt;The best way to verify correct operation is using the &lt;a href=&#34;/archives/3-5.93e/ntpq&#34;&gt;&lt;tt&gt;ntpq&lt;/tt&gt; - standard NTP query program&lt;/a&gt; and &lt;a href=&#34;/archives/3-5.93e/xntpdc&#34;&gt;&lt;tt&gt;xntpdc&lt;/tt&gt; - special NTP query program&lt;/a&gt; utility programs, either on the server itself or from another machine elsewhere in the network. The &lt;tt&gt;ntpq&lt;/tt&gt; program implements the management functions specified in Appendix A of the NTP specification &lt;a href=&#34;http://www.eecis.udel.edu/%7emills/database/rfc/rfc1305/rfc1305c.ps&#34;&gt;RFC-1305, Appendix A&lt;/a&gt;. The &lt;tt&gt;xntpdc&lt;/tt&gt; program implements additional functions not provided in the standard. Both programs can be used to inspect the state variables defined in the specification and, in the case of &lt;tt&gt;xntpdc&lt;/tt&gt;, additional ones of interest. In addition, the &lt;tt&gt;xntpdc&lt;/tt&gt; program can be used to selectively enable and disable some functions of the daemon while the daemon is running.&lt;/p&gt;
&lt;p&gt;In extreme cases with elusive bugs, the daemon can operate in two modes, depending on the presence of the &lt;tt&gt;-d&lt;/tt&gt; command-line debug switch. If not present, the daemon detaches from the controlling terminal and proceeds autonomously. If one or more &lt;tt&gt;-d&lt;/tt&gt; switches are present, the daemon does not detach and generates special output useful for debugging. In general, interpretation of this output requires reference to the sources.&lt;/p&gt;
&lt;p&gt;Some problems are immediately apparent when the daemon first starts running. The most common of these are the lack of a ntp (UDP port 123) in the host &lt;tt&gt;/etc/services&lt;/tt&gt; file. Note that NTP does not use TCP in any form. Other problems are apparent in the system log file. The log file should show the startup banner, some cryptic initialization data, and the computed precision value. The next most common problem is incorrect DNS names. Check that each DNS name used in the configuration file responds to the Unix &lt;tt&gt;ping&lt;/tt&gt; command.&lt;/p&gt;
&lt;p&gt;When first started, the daemon normally polls the servers listed in the configuration file at 64-second intervals. In order to allow a sufficient number of samples for the NTP algorithms to reliably discriminate between correctly operating servers and possible intruders, at least four valid messages from at least one server is required before the daemon can not set the local clock. However, if the current local time is greater than 1000 seconds in error from the server time, the daemon will not set the local clock; instead, it will plant a message in the system log and shut down. It is necessary to set the local clock to within 1000 seconds first, either by a time-of-year hardware clock, by first using the &lt;a href=&#34;/archives/3-5.93e/ntpdate&#34;&gt;ntpdate&lt;/a&gt; program or manually be eyeball and wristwatch.&lt;/p&gt;
&lt;p&gt;After starting the daemon, run the &lt;tt&gt;ntpq&lt;/tt&gt; program using the &lt;tt&gt;-n&lt;/tt&gt; switch, which will avoid possible distractions due to name resolution problems. Use the &lt;tt&gt;pe&lt;/tt&gt; command to display a billboard showing the status of configured peers and possibly other clients poking the daemon. After operating for a few minutes, the display should be something like:&lt;/p&gt;
&lt;pre&gt;ntpq&gt; pe
  remote           refid      st when poll reach   delay  offset    disp
========================================================================
+128.4.2.6    132.249.16.1     2  131  256  373     9.89   16.28   23.25
*128.4.1.20   .WWVB.           1  137  256  377   280.62   21.74   20.23
-128.8.2.88   128.8.10.1       2   49  128  376   294.14    5.94   17.47
+128.4.2.17   .WWVB.           1  173  256  377   279.95   20.56   16.40
&lt;/pre&gt;
&lt;p&gt;The host addresses shown in the &lt;tt&gt;remote&lt;/tt&gt; column should agree with the DNS entries in the configuration file, plus any peers not mentioned in the file at the same or lower than your stratum that happen to be configured to peer with you. Be prepared for surprises in cases where the peer has multiple addresses or multiple names. The &lt;tt&gt;refid&lt;/tt&gt; entry shows the current source of synchronization for each peer, while the st reveals its stratum and the &lt;tt&gt;poll&lt;/tt&gt; entry the polling interval, in seconds. The &lt;tt&gt;when&lt;/tt&gt; entry shows the time since the peer was last heard, normally in seconds, while the &lt;tt&gt;reach&lt;/tt&gt; entry shows the status of the reachability register (see RFC-1305), which is in octal format. The remaining entries show the latest delay, offset and dispersion computed for the peer, in milliseconds.&lt;/p&gt;
&lt;p&gt;The tattletale character at the left margin displays the synchronization status of each peer. The currently selected peer is marked &lt;code&gt;*&lt;/code&gt;, while additional peers designated acceptable for synchronization are marked &lt;code&gt;+&lt;/code&gt;. Peers marked &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;+&lt;/code&gt; are included in the weighted average computation to set the local clock; the data produced by peers marked with other symbols are discarded. See the &lt;tt&gt;ntpq&lt;/tt&gt; page for the meaning of these symbols.&lt;/p&gt;
&lt;p&gt;Additional details for each peer separately can be determined by the following procedure. First, use the &lt;tt&gt;as&lt;/tt&gt; command to display an index of association identifiers, such as&lt;/p&gt;
&lt;pre&gt;ntpq&gt; as
ind assID status  conf reach auth condition  last_event cnt
===========================================================
  1 11670  7414    no   yes   ok    synchr.   reachable  1
  2 11673  7614    no   yes   ok   sys.peer   reachable  1
  3 11833  7314    no   yes   ok    outlyer   reachable  1
  4 11868  7414    no   yes   ok    synchr.   reachable  1
&lt;/pre&gt;
&lt;p&gt;Each line in this billboard is associated with the corresponding line in the &lt;tt&gt;pe&lt;/tt&gt; billboard above. Next, use the &lt;tt&gt;rv&lt;/tt&gt; command and the respective identifier to display a detailed synopsis for the selected peer, such as&lt;/p&gt;
&lt;pre&gt;ntpq&gt; rv 11670
status=7414 reach, auth, sel_sync, 1 event, event_reach
srcadr=128.4.2.6, srcport=123, dstadr=128.4.2.7, dstport=123, keyid=1,
stratum=2, precision=-10, rootdelay=362.00, rootdispersion=21.99,
refid=132.249.16.1,
reftime=af00bb44.849b0000  Fri, Jan 15 1993  4:25:40.517,
delay=    9.89, offset=   16.28, dispersion=23.25, reach=373, valid=8,
hmode=2, pmode=1, hpoll=8, ppoll=10, leap=00, flash=0x0,
org=af00bb48.31a90000  Fri, Jan 15 1993  4:25:44.193,
rec=af00bb48.305e3000  Fri, Jan 15 1993  4:25:44.188,
xmt=af00bb1e.16689000  Fri, Jan 15 1993  4:25:02.087,
filtdelay=  16.40   9.89 140.08   9.63   9.72   9.22  10.79 122.99,
filtoffset= 13.24  16.28 -49.19  16.04  16.83  16.49  16.95 -39.43,
filterror=  16.27  20.17  27.98  31.89  35.80  39.70  43.61  47.52
&lt;/pre&gt;
&lt;p&gt;A detailed explanation of the fields in this billboard are beyond the scope of this discussion; however, most variables defined in the specification RFC-1305 can be found. The most useful portion for debugging is the last three lines, which give the roundtrip delay, clock offset and dispersion for each of the last eight measurement rounds, all in milliseconds. Note that the dispersion, which is an estimate of the error, increases as the age of the sample increases. From these data, it is usually possible to determine the incidence of severe packet loss, network congestion, and unstable local clock oscillators. There are no hard and fast rules here, since every case is unique; however, if one or more of the rounds show zeros, or if the clock offset changes dramatically in the same direction for each round, cause for alarm exists.&lt;/p&gt;
&lt;p&gt;Finally, the state of the local clock can be determined using the &lt;tt&gt;rv&lt;/tt&gt; command (without the argument), such as&lt;/p&gt;
&lt;pre&gt;ntpq&gt; rv
status=0664 leap_none, sync_ntp, 6 events, event_peer/strat_chg
system=&#34;UNIX&#34;, leap=00, stratum=2, rootdelay=280.62,
rootdispersion=45.26, peer=11673, refid=128.4.1.20,
reftime=af00bb42.56111000  Fri, Jan 15 1993  4:25:38.336, poll=8,
clock=af00bbcd.8a5de000  Fri, Jan 15 1993  4:27:57.540, phase=21.147,
freq=13319.46, compliance=2
&lt;/pre&gt;
&lt;p&gt;The most useful data in this billboard show when the clock was last adjusted &lt;tt&gt;reftime&lt;/tt&gt;, together with its status and most recent exception event. An explanation of these data is in the specification RFC-1305.&lt;/p&gt;
&lt;p&gt;When nothing seems to happen in the &lt;tt&gt;pe&lt;/tt&gt; billboard after some minutes, there may be a network problem. The most common network problem is an access controlled router on the path to the selected peer. No known public NTP time server selectively restricts access at this time, although this may change in future; however, many private networks do. It also may be the case that the server is down or running in unsynchronized mode due to a local problem. Use thee &lt;tt&gt;ntpq&lt;/tt&gt; program to spy on its own variables in the same way you can spy on your own.&lt;/p&gt;
&lt;p&gt;Once the daemon has set the local clock, it will continuously track the discrepancy between local time and NTP time and adjust the local clock accordingly. There are two components of this adjustment, time and frequency. These adjustments are automatically determined by the clock discipline algorithm, which functions as a hybrid phase/frequency feedback loop. The behavior of this algorithm is carefully controlled to minimize residual errors due to network jitter and frequency variations of the local clock hardware oscillator that normally occur in practice. However, when started for the first time, the algorithm may take some time to converge on the intrinsic frequency error of the host machine.&lt;/p&gt;
&lt;p&gt;It has sometimes been the experience that the local clock oscillator frequency error is too large for the NTP discipline algorithm, which can correct frequency errors as large as 30 seconds per day. There are two possibilities that may result in this problem. First, the hardware time- of-year clock chip must be disabled when using NTP, since this can destabilize the discipline process. This is usually done using the &lt;a href=&#34;/archives/3-5.93e/tickadj&#34;&gt;tickadj&lt;/a&gt; program and the &lt;tt&gt;-s&lt;/tt&gt; command line argument, but other means may be necessary. For instance, in the Sun Solaris kernel, this must be done using a command in the system startup file.&lt;/p&gt;
&lt;p&gt;Normally, the daemon will adjust the local clock in small steps in such a way that system and user programs are unaware of its operation. The adjustment process operates continuously as long as the apparent clock error exceeds 128 milliseconds, which for most Internet paths is a quite rare event. If the event is simply an outlyer due to an occasional network delay spike, the correction is simply discarded; however, if the apparent time error persists for an interval of about 20 minutes, the local clock is stepped to the new value (as an option, the daemon can be compiled to slew at an accelerated rate to the new value, rather than be stepped). This behavior is designed to resist errors due to severely congested network paths, as well as errors due to confused radio clocks upon the epoch of a leap second.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;debugging-checklist&#34;&gt;Debugging Checklist&lt;/h4&gt;
&lt;p&gt;If the &lt;tt&gt;ntpq&lt;/tt&gt; or &lt;tt&gt;xntpdc&lt;/tt&gt; programs do not show that messages are being received by the daemon or that received messages do not result in correct synchronization, verify the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Verify the &lt;tt&gt;/etc/services&lt;/tt&gt; file host machine is configured to accept UDP packets on the NTP port 123. NTP is specifically designed to use UDP and does not respond to TCP.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check the system log for &lt;tt&gt;xntpd&lt;/tt&gt; messages about configuration errors, name-lookup failures or initialization problems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using the &lt;tt&gt;xntpdc&lt;/tt&gt; program and &lt;tt&gt;iostats&lt;/tt&gt; command, verify that the received packets and packets sent counters are incrementing. If the packets send counter does not increment and the configuration file includes designated servers, something may be wrong in the network configuration of the xntpd host. If this counter does increment and packets are actually being sent to the network, but the received packets counter does not increment, something may be wrong in the network or the server may not be responding.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If both the packets sent counter and received packets counter do increment, but the &lt;tt&gt;rec&lt;/tt&gt; timestamp in the &lt;tt&gt;pe&lt;/tt&gt; billboard shows a date in 1972, received packets are probably being discarded for some reason. There is a handy, undocumented state variable flash visible in the pebillboard. The value is in hex and normally has the value zero (OK). However, if something is wrong, the bits of this variable, reading from the right, correspond to the sanity checks listed in Section 3.4.3 of the NTP specification RFC-1305. A bit other than zero indicates the associated sanity check failed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the &lt;tt&gt;org&lt;/tt&gt;, &lt;tt&gt;rec&lt;/tt&gt; and &lt;tt&gt;xmt&lt;/tt&gt; timestamps in the &lt;tt&gt;pe&lt;/tt&gt; billboard appear current, but the local clock is not set, as indicated by a stratum number less than 16 in the &lt;tt&gt;rv&lt;/tt&gt; command without arguments, verify that valid clock offset, roundtrip delay and dispersion are displayed for at least one peer. The clock offset should be less than 1000 seconds, the roundtrip delay less than one second and the dispersion less than one second.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;While the algorithm can tolerate a relatively large frequency error (over 350 parts per million or 30 seconds per day), various configuration errors (and in some cases kernel bugs) can exceed this tolerance, leading to erratic behavior. This can result in frequent loss of synchronization, together with wildly swinging offsets. Use the &lt;tt&gt;xntpdc&lt;/tt&gt; program (or temporary configuration file) and &lt;tt&gt;disable pll&lt;/tt&gt; command to prevent the &lt;tt&gt;xntpd&lt;/tt&gt; daemon from setting the clock. Using the &lt;tt&gt;ntpq&lt;/tt&gt; or &lt;tt&gt;xntpdc&lt;/tt&gt; programs, watch the apparent offset as it varies over time to determine the intrinsic frequency error. If the error increases by more than 22 milliseconds per 64-second poll interval, the intrinsic frequency must be reduced by some means. The easiest way to do this is with the &lt;a href=&#34;/archives/3-5.93e/tickadj&#34;&gt;tickadj&lt;/a&gt; program and the &lt;tt&gt;-t&lt;/tt&gt; command line argument.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: NTP PARSE clock data formats</title>
      <link>/archives/3-5.93e/parsedata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/parsedata/</guid>
      <description>
        
        
        &lt;p&gt;The parse driver currently supports several clocks with different query mechanisms. In order for you to find a sample that might be similar to a clock you might want to integrate into parse I&amp;rsquo;ll sum up the major features of the clocks (this information is distributed in the &lt;tt&gt;parse/clk_*.c&lt;/tt&gt; and &lt;tt&gt;ntpd/refclock_parse.c&lt;/tt&gt; files).&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/parsedata/#meinberg-clocks&#34;&gt;Meinberg clocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/parsedata/#raw-dcf77-data-via-serial-line&#34;&gt;Raw DCF77 Data via serial line&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/parsedata/#dcf77-raw-time-code&#34;&gt;DCF77 raw time code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/parsedata/#schmid-clock&#34;&gt;Schmid clock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/parsedata/#trimble-sv6-ascii-time-code-taip&#34;&gt;Trimble SV6 ASCII time code (TAIP)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/parsedata/#elv-dcf7000&#34;&gt;ELV DCF7000&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/parsedata/#hopf-6021-und-kompatible&#34;&gt;HOPF 6021 und Kompatible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/parsedata/#diem-computime-clock&#34;&gt;Diem Computime Clock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/parsedata/#wharton-400a-series-clock-with-a-4042-serial-interface&#34;&gt;WHARTON 400A Series Clock with a 404.2 Serial interface&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;meinberg-clocks&#34;&gt;Meinberg clocks&lt;/h4&gt;
&lt;pre&gt;Meinberg: start=&lt;STX&gt;, end=&lt;ETX&gt;, sync on start
      pattern=&#34;\2D:  .  .  ;T: ;U:  .  .  ;    \3&#34;
      pattern=&#34;\2  .  .  ;  ;   :  :  ;        \3&#34;
      pattern=&#34;\2  .  .  ;  ;   :  :  ;    :  ;        ;   .         .       &#34;
&lt;/pre&gt;
&lt;p&gt;Meinberg is a German manufacturer of time code receivers. Those clocks have a pretty common output format in the stock version. In order to support NTP Meinberg was so kind to produce some special versions of the firmware for the use with NTP. So, if you are going to use a Meinberg clock please ask whether there is a special Uni Erlangen version. You can reach &lt;a href=&#34;http://www.meinberg.de/&#34;&gt;Meinberg&lt;/a&gt; via the Web. Information can also be ordered via eMail from &lt;a href=&#34;mailto:%20info@meinberg.de&#34;&gt;info@meinberg.de&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;General characteristics:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Meinberg clocks primarily output pulse per second and a describing ASCII string. This string can be produced in two modes: either upon the reception of a question mark or every second. NTP uses the latter mechanism. DCF77 AM clocks have a limited accuracy of a few milliseconds. The DCF77 PZF5xx variants provide higher accuracy and have a pretty good relationship between RS232 time code and the PPS signal. Except for early versions of the old GPS166 receiver type, Meinberg GPS receivers have a very good timing relationship between the datagram and the pulse. The beginning of the start bit of the first character has basically the same accuracy as the PPS signal, plus a jitter of up to 1 bit time depending on the selected baud rate, i.e. 52 μs @ 19200. PPS support should always be used, if possible, in order to yield the highest possible accuracy.&lt;/p&gt;
&lt;p&gt;The preferred tty setting for Meinberg DCF77 receivers is 9600/7E2:&lt;/p&gt;
&lt;pre&gt;		CFLAG		(B9600|CS7|PARENB|CREAD|HUPCL)
		IFLAG		(IGNBRK|IGNPAR|ISTRIP)
		OFLAG		0
		LFLAG		0
        &lt;/pre&gt;
&lt;p&gt;The tty setting for Meinberg GPS16x/17x receivers is 19200/8N1:&lt;/p&gt;
&lt;pre&gt;		CFLAG		(B19200|CS8|PARENB|CREAD|HUPCL)
		IFLAG		(IGNBRK|IGNPAR|ISTRIP)
		OFLAG		0
		LFLAG		0
        &lt;/pre&gt;
&lt;p&gt;All clocks should be run at datagram once per second.&lt;/p&gt;
&lt;p&gt;Format of the Meinberg standard time string:&lt;/p&gt;
&lt;pre&gt;        **_&lt;STX&gt;_D:_dd.mm.yy_;T:_w_;U:_hh.mm.ss_;_uvxy__&lt;ETX&gt;_**
    pos:  0  000000001111111111222222222233  3
          1  234567890123456789012345678901  2

    _&lt;STX&gt;_         = start-of-text, ASCII code 0x02
    _dd.mm.yy_      = day of month, month, year of the century, separated by dots
    _w_             = day of week (1..7, Monday = 1)
    _hh:mm:ss_      = hour, minute, second, separated by dots
    _u_             = &#39;#&#39; for GPS receivers: time is **not** synchronized
                           &#39;#&#39; for older PZF5xx receivers: no correlation, not synchronized
                           &#39;#&#39; for other devices: never sync&#39;ed since powerup
                           &#39; &#39; if nothing of the above applies
    _v_             = &#39;*&#39; for GPS receivers: position has **not** been verified
                           &#39;*&#39; for other devices: freewheeling based on internal quartz
                           &#39; &#39; if nothing of the above applies
    _x_             = &#39;U&#39; if UTC time is transmitted
                           &#39;S&#39; if daylight saving time is active
                           &#39; &#39; if nothing of the above applies
    _y_             = &#39;!&#39; during the hour preceding start or end of daylight saving time
                           &#39;A&#39; during the hour preceding a leap second
                           &#39; &#39; if nothing of the above applies
    _&lt;ETX&gt;_         = end-of-text, ASCII code 0x03
&lt;/pre&gt;
&lt;p&gt;Format of the Uni Erlangen time string for PZF5xx receivers:&lt;/p&gt;
&lt;pre&gt;        **_&lt;STX&gt;__dd.mm.yy_; _w_; _hh:mm:ss_; _tuvxyza__&lt;ETX&gt;_**
    pos:  0  000000001111111111222222222233  3
          1  234567890123456789012345678901  2

    _&lt;STX&gt;_         = start-of-text, ASCII code 0x02
    _dd.mm.yy_      = day of month, month, year of the century, separated by dots
    _w_             = day of week (1..7, Monday = 1)
    _hh:mm:ss_      = hour, minute, second, separated by colons

    _t_             = &#39;U&#39; if UTC time is transmitted, else &#39; &#39;
    _u_             = &#39;#&#39; for older PZF5xx receivers: no correlation, not synchronized
                           &#39;#&#39; for PZF511 and newer: never sync&#39;ed since powerup
                           &#39; &#39; if nothing of the above applies
    _v_             = &#39;*&#39; if freewheeling based on internal quartz, else &#39; &#39;
    _x_             = &#39;S&#39; if daylight saving time is active, else &#39; &#39;
    _y_             = &#39;!&#39; during the hour preceding start or end of daylight saving time, else &#39; &#39;
    _z_             = &#39;A&#39; during the hour preceding a leap second, else &#39; &#39;
    _a_             = &#39;R&#39; alternate antenna (reminiscent of PZF5xx), usually &#39; &#39; for GPS receivers
    _&lt;ETX&gt;_         = end-of-text, ASCII code 0x03
&lt;/pre&gt;
&lt;p&gt;Format of the Uni Erlangen time string for GPS16x/GPS17x receivers:&lt;/p&gt;
&lt;pre&gt;        **_&lt;STX&gt;__dd.mm.yy_; _w_; _hh:mm:ss_; _+uu:uu_; _uvxyzab_; _ll.lllln_ _lll.lllle_ _hhhh_m_&lt;ETX&gt;_**
    pos:  0  0000000011111111112222222222333333333344444444445555555555666666  6
          1  2345678901234567890123456789012345678901234567890123456789012345  6

    _&lt;STX&gt;_         = start-of-text, ASCII code 0x02
    _dd.mm.yy_      = day of month, month, year of the century, separated by dots
    _w_             = day of week (1..7, Monday = 1)
    _hh:mm:ss_      = hour, minute, second, separated by colons
    _+uu:uu_        = offset to UTC in hours and minutes, preceded by + or -
    _u_             = &#39;#&#39; if time is **not** synchronized, else &#39; &#39;
    _v_             = &#39;*&#39; if position has **not** been verified, else &#39; &#39;
    _x_             = &#39;S&#39; if daylight saving time is active, else &#39; &#39;
    _y_             = &#39;!&#39; during the hour preceding start or end of daylight saving time, else &#39; &#39;
    _z_             = &#39;A&#39; during the hour preceding a leap second, else &#39; &#39;
    _a_             = &#39;R&#39; alternate antenna (reminiscent of PZF5xx), usually &#39; &#39; for GPS receivers
    _b_             = &#39;L&#39; during a leap second, i.e. if the seconds field is 60, else &#39; &#39;
    _ll.lllln_      = position latitude in degrees, &#39;n&#39; can actually be &#39;N&#39; or &#39;S&#39;, i.e. North or South
    _lll.lllle_     = position longitude in degrees, &#39;e&#39; can actually be &#39;E&#39; or &#39;W&#39;, i.e. East or West
    _hhhh_          = position altitude in meters, always followed by &#39;m&#39;
    _&lt;ETX&gt;_         = end-of-text, ASCII code 0x03
&lt;/pre&gt;
&lt;p&gt;Examples for Uni Erlangen strings from GPS receivers:&lt;/p&gt;
&lt;pre&gt;        \x02 09.07.93; 5; 08:48:26; +00:00;        ; 49.5736N  11.0280E  373m \x03
        \x02 08.11.06; 3; 14:39:39; +00:00;        ; 51.9828N   9.2258E  176m \x03
&lt;/pre&gt;
&lt;p&gt;The Uni Erlangen formats should be used preferably. Newer Meinberg GPS receivers can be configured to transmit that format, for older devices there may be a special firmware version available.&lt;/p&gt;
&lt;p&gt;For the Meinberg parse look into &lt;tt&gt;clk_meinberg.c&lt;/tt&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;raw-dcf77-data-via-serial-line&#34;&gt;Raw DCF77 Data via serial line&lt;/h4&gt;
&lt;p&gt;RAWDCF: end=TIMEOUT&amp;gt;1.5s, sync each char (any char),generate pseudo time codes, fixed format&lt;/p&gt;
&lt;p&gt;direct DCF77 code input&lt;/p&gt;
&lt;p&gt;In Europe it is relatively easy/cheap the receive the german time code transmitter DCF77. The simplest version to process its signal is to feed the 100/200ms pulse of the demodulated AM signal via a level converter to an RS232 port at 50Baud. parse/clk_rawdcf.c holds all necessary decoding logic for the time code which is transmitted each minute for one minute. A bit of the time code is sent once a second.&lt;/p&gt;
&lt;pre&gt;	The preferred tty setting is:
		CFLAG           (B50|CS8|CREAD|CLOCAL)
		IFLAG		0
		OFLAG		0
 		LFLAG		0
&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;dcf77-raw-time-code&#34;&gt;DCF77 raw time code&lt;/h4&gt;
&lt;p&gt;From &amp;ldquo;Zur Zeit&amp;rdquo;, Physikalisch-Technische Bundesanstalt (PTB), Braunschweig und Berlin, März 1989&lt;/p&gt;
&lt;p&gt;Timecode transmission:&lt;/p&gt;
&lt;pre&gt;	AM:

	time marks are send every second except for the second before the
	next minute mark
	time marks consist of a reduction of transmitter power to 25%
	of the nominal level
	the falling edge is the time indication (on time)
	time marks of a 100ms duration constitute a logical 0
	time marks of a 200ms duration constitute a logical 1
&lt;/pre&gt;
&lt;p&gt;see the spec. (basically a (non-)inverted pseudo random phase shift) encoding:&lt;/p&gt;
&lt;pre&gt;	FM:

	Second	Contents
	0  - 10	AM: free, FM: 0
	11 - 14	free
	15		R     - alternate antenna
	16		A1    - expect zone change (1 hour before)
	17 - 18	Z1,Z2 - time zone
		 0  0 illegal
		 0  1 MEZ  (MET)
		 1  0 MESZ (MED, MET DST)
		 1  1 illegal
	19	A2    - expect leap insertion/deletion (1 hour before)
	20	S     - start of time code (1)
	21 - 24	M1    - BCD (lsb first) Minutes
	25 - 27	M10   - BCD (lsb first) 10 Minutes
	28	P1    - Minute Parity (even)
	29 - 32	H1    - BCD (lsb first) Hours
	33 - 34	H10   - BCD (lsb first) 10 Hours
	35	P2    - Hour Parity (even)
	36 - 39	D1    - BCD (lsb first) Days
	40 - 41	D10   - BCD (lsb first) 10 Days
	42 - 44	DW    - BCD (lsb first) day of week (1: Monday -&gt; 7: Sunday)
	45 - 49	MO1   - BCD (lsb first) Month
	50	MO10  - 10 Months
	51 - 53	Y1    - BCD (lsb first) Years
	54 - 57	Y10   - BCD (lsb first) 10 Years
	58 	P3    - Date Parity (even)
	59	      - usually missing (minute indication), except for leap insertion
&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;schmid-clock&#34;&gt;Schmid clock&lt;/h4&gt;
&lt;p&gt;Schmid clock: needs poll, binary input, end=&#39;\xFC&#39;, sync start&lt;/p&gt;
&lt;p&gt;The Schmid clock is a DCF77 receiver that sends a binary time code at the reception of a flag byte. The contents if the flag byte determined the time code format. The binary time code is delimited by the byte 0xFC.&lt;/p&gt;
&lt;pre&gt;	TTY setup is:
		CFLAG		(B1200|CS8|CREAD|CLOCAL)
		IFLAG		0
		OFLAG		0
 		LFLAG		0

&lt;/pre&gt;
&lt;p&gt;The command to Schmid&amp;rsquo;s DCF77 clock is a single byte; each bit allows the user to select some part of the time string, as follows (the output for the lsb is sent first).&lt;/p&gt;
&lt;pre&gt;	Bit 0:	time in MEZ, 4 bytes *binary, not BCD*; hh.mm.ss.tenths
	Bit 1:	date 3 bytes *binary, not BCD: dd.mm.yy
	Bit 2:	week day, 1 byte (unused here)
	Bit 3:	time zone, 1 byte, 0=MET, 1=MEST. (unused here)
	Bit 4:	clock status, 1 byte,	0=time invalid,
					1=time from crystal backup,
					3=time from DCF77
	Bit 5:	transmitter status, 1 byte,
					bit 0: backup antenna
					bit 1: time zone change within 1h
					bit 3,2: TZ 01=MEST, 10=MET
					bit 4: leap second will be
						added within one hour
					bits 5-7: Zero
	Bit 6:	time in backup mode, units of 5 minutes (unused here)
&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;trimble-sv6-ascii-time-code-taip&#34;&gt;Trimble SV6 ASCII time code (TAIP)&lt;/h4&gt;
&lt;p&gt;Trimble SV6: needs poll, ascii timecode, start=&#39;&amp;gt;&#39;, end=&#39;&amp;lt;&#39;, query=&#39;&amp;gt;QTM&amp;lt;&#39;, eol=&#39;&amp;lt;&#39;&lt;/p&gt;
&lt;p&gt;Trimble SV6 is a GPS receiver with PPS output. It needs to be polled. It also need a special tty mode setup (EOL=&#39;&amp;lt;&#39;).&lt;/p&gt;
&lt;pre&gt;	TTY setup is:
		CFLAG            (B4800|CS8|CREAD)
		IFLAG            (BRKINT|IGNPAR|ISTRIP|ICRNL|IXON)
		OFLAG            (OPOST|ONLCR)
		LFLAG            (ICANON|ECHOK)
&lt;/pre&gt;
&lt;p&gt;Special flags are:&lt;/p&gt;
&lt;pre&gt;		PARSE_F_PPSPPS	    - use CIOGETEV for PPS time stamping
		PARSE_F_PPSONSECOND - the time code is not related to
				      the PPS pulse (so use the time code
				      only for the second epoch)

	Timecode
	0000000000111111111122222222223333333	/ char
	0123456789012345678901234567890123456	\ posn
	&gt;RTMhhmmssdddDDMMYYYYoodnnvrrrrr;*xx&lt;	Actual
	----33445566600112222BB7__-_____--99-	Parse
	&gt;RTM                      1     ;*  &lt; 	Check
&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;elv-dcf7000&#34;&gt;ELV DCF7000&lt;/h4&gt;
&lt;p&gt;ELV DCF7000: end=&#39;\r&#39;, pattern=&amp;quot; - - - - - - - \r&amp;quot;&lt;/p&gt;
&lt;p&gt;The ELV DCF7000 is a cheap DCF77 receiver sending each second a time code (though not very precise!) delimited by &amp;lsquo;`r&amp;rsquo;&lt;/p&gt;
&lt;pre&gt;	Timecode
	  YY-MM-DD-HH-MM-SS-FF\r

		FF&amp;0x1	- DST
		FF&amp;0x2	- DST switch warning
		FF&amp;0x4  - unsynchronised
&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;hopf-6021-und-kompatible&#34;&gt;HOPF 6021 und Kompatible&lt;/h4&gt;
&lt;p&gt;HOPF Funkuhr 6021 mit serieller Schnittstelle Created by F.Schnekenbuehl &lt;a href=&#34;mailto:frank@comsys.dofn.de&#34;&gt;frank@comsys.dofn.de&lt;/a&gt; from clk_rcc8000.c Nortel DASA Network Systems GmbH, Department: ND250 A Joint venture of Daimler-Benz Aerospace and Nortel.&lt;/p&gt;
&lt;pre&gt; hopf Funkuhr 6021 
      used with 9600,8N1,
      UTC via serial line
      &#34;Sekundenvorlauf&#34; ON
      ETX zum Sekundenvorlauf ON
      dataformat 6021
      output time and date
      transmit with control characters
      transmit evry second
 &lt;/pre&gt;
&lt;p&gt;Type 6021 Serial Output format&lt;/p&gt;
&lt;pre&gt;      000000000011111111 / char
      012345678901234567 \ position
      sABHHMMSSDDMMYYnre  Actual
       C4110046231195     Parse
      s              enr  Check

  s = STX (0x02), e = ETX (0x03)
  n = NL  (0x0A), r = CR  (0x0D)

  A B - Status and weekday

  A - Status

      8 4 2 1
      x x x 0  - no announcement
      x x x 1  - Summertime - wintertime - summertime announcement
      x x 0 x  - Wintertime
      x x 1 x  - Summertime
      0 0 x x  - Time/Date invalid
      0 1 x x  - Internal clock used 
      1 0 x x  - Radio clock
      1 1 x x  - Radio clock highprecision

  B - 8 4 2 1
      0 x x x  - MESZ/MEZ
      1 x x x  - UTC
      x 0 0 1  - Monday
      x 0 1 0  - Tuesday
      x 0 1 1  - Wednesday
      x 1 0 0  - Thursday
      x 1 0 1  - Friday
      x 1 1 0  - Saturday
      x 1 1 1  - Sunday
&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;diem-computime-clock&#34;&gt;Diem Computime Clock&lt;/h4&gt;
&lt;p&gt;The Computime receiver sends a datagram in the following format every minute&lt;/p&gt;
&lt;pre&gt;   
   Timestamp	T:YY:MM:MD:WD:HH:MM:SSCRLF 
   Pos          0123456789012345678901 2 3
		0000000000111111111122 2 2
   Parse        T:  :  :  :  :  :  :  \r\n

   T	Startcharacter &#34;T&#34; specifies start of the timestamp 
   YY	Year MM	Month 1-12 
   MD	Day of the month 
   WD	Day of week 
   HH	Hour 
   MM   Minute 
   SS   Second
   CR   Carriage return 
   LF   Linefeed
&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;wharton-400a-series-clock-with-a-4042-serial-interface&#34;&gt;WHARTON 400A Series Clock with a 404.2 Serial interface&lt;/h4&gt;
&lt;p&gt;The WHARTON 400A Series clock is able to send date/time serial messages in 7 output formats. We use format 1 here because it is the shortest. We set up the clock to send a datagram every second. For use with this driver, the WHARTON 400A Series clock must be set-up as follows :&lt;/p&gt;
&lt;pre&gt;  					Programmable	Selected
  					Option No	Option
	BST or CET display		3		9 or 11
	No external controller		7		0
	Serial Output Format 1		9		1
	Baud rate 9600 bps		10		96
	Bit length 8 bits		11		8
	Parity even			12		E
&lt;/pre&gt;
&lt;p&gt;WHARTON 400A Series output format 1 is as follows :&lt;/p&gt;
&lt;pre&gt;   Timestamp	STXssmmhhDDMMYYSETX
   Pos		0  12345678901234
  		0  00000000011111

   STX	start transmission (ASCII 0x02)
   ETX	end transmission (ASCII 0x03)
   ss	Second expressed in reversed decimal (units then tens)
   mm	Minute expressed in reversed decimal
   hh	Hour expressed in reversed decimal
   DD	Day of month expressed in reversed decimal
   MM	Month expressed in reversed decimal (January is 1)
   YY	Year (without century) expressed in reversed decimal
   S	Status byte : 0x30 +
		bit 0	0 = MSF source		1 = DCF source
		bit 1	0 = Winter time		1 = Summer time
		bit 2	0 = not synchronised	1 = synchronised
		bit 3	0 = no early warning	1 = early warning
&lt;/pre&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: ntpdate - set the date and time via NTP</title>
      <link>/archives/3-5.93e/ntpdate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/ntpdate/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/ntpdate/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/ntpdate/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/ntpdate/#command-line-options&#34;&gt;Command Line Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/ntpdate/#files&#34;&gt;Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/ntpdate/#bugs&#34;&gt;Bugs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntpdate [ -bBdoqsuv ] [ -a &lt;em&gt;key&lt;/em&gt; ] [ -e &lt;em&gt;authdelay&lt;/em&gt; ] [ -k &lt;em&gt;keyfile&lt;/em&gt; ] [ -o &lt;em&gt;version&lt;/em&gt; ] [ -p &lt;em&gt;samples&lt;/em&gt; ] [ -t &lt;em&gt;timeout&lt;/em&gt; ] &lt;em&gt;server&lt;/em&gt; [ &amp;hellip; ]&lt;/tt&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntpdate&lt;/tt&gt; sets the local date and time by polling the Network Time Protocol (NTP) server(s) given as the &lt;em&gt;server&lt;/em&gt; arguments to determine the correct time. It must be run as root on the local host. A number of samples are obtained from each of the servers specified and a subset of the NTP clock filter and selection algorithms are applied to select the best of these. Note that the accuracy and reliability of &lt;tt&gt;ntpdate&lt;/tt&gt; depends on the number of servers, the number of polls each time it is run and the interval between runs.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;ntpdate&lt;/tt&gt; can be run manually as necessary to set the host clock, or it can be run from the host startup script to set the clock at boot time. This is useful in some cases to set the clock initially before starting the NTP daemon &lt;tt&gt;xntpd&lt;/tt&gt;. It is also possible to run &lt;tt&gt;ntpdate&lt;/tt&gt; from a &lt;tt&gt;cron&lt;/tt&gt; script. However, it is important to note that &lt;tt&gt;ntpdate&lt;/tt&gt; with contrived &lt;tt&gt;cron&lt;/tt&gt; scripts is no substitute for the NTP daemon, which uses sophisticated algorithms to maximize accuracy and reliability while minimizing resource use. Finally, since &lt;tt&gt;ntpdate&lt;/tt&gt; does not discipline the host clock frequency as does &lt;tt&gt;ntpd&lt;/tt&gt;, the accuracy using &lt;tt&gt;ntpdate&lt;/tt&gt; is limited.&lt;/p&gt;
&lt;p&gt;Time adjustments are made by &lt;tt&gt;ntpdate&lt;/tt&gt; in one of two ways. If &lt;tt&gt;ntpdate&lt;/tt&gt; determines the clock is in error more than 0.5 second it will simply step the time by calling the system &lt;tt&gt;settimeofday()&lt;/tt&gt; routine. If the error is less than 0.5 seconds, it will slew the time by calling the system &lt;tt&gt;adjtime()&lt;/tt&gt; routine. The latter technique is less disruptive and more accurate when the error is small, and works quite well when &lt;tt&gt;ntpdate&lt;/tt&gt; is run by &lt;tt&gt;cron&lt;/tt&gt; every hour or two.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;ntpdate&lt;/tt&gt; will decline to set the date if an NTP server daemon (e.g., &lt;tt&gt;xntpd&lt;/tt&gt;) is running on the same host. When running &lt;tt&gt;ntpdate&lt;/tt&gt; on a regular basis from &lt;tt&gt;cron&lt;/tt&gt; as an alternative to running a daemon, doing so once every hour or two will result in precise enough timekeeping to avoid stepping the clock.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;command-line-options&#34;&gt;Command Line Options&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;-a _key_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enable the authentication function and specify the key identifier to be used for authentication as the argument &lt;em&gt;key&lt;/em&gt; &lt;tt&gt;ntpdate&lt;/tt&gt;. The keys and key identifiers must match in both the client and server key files. The default is to disable the authentication function.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-B&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Force the time to always be slewed using the adjtime() system call, even if the measured offset is greater than +-128 ms. The default is to step the time using settimeofday() if the offset is greater than +-128 ms. Note that, if the offset is much greater than +-128 ms in this case, that it can take a long time (hours) to slew the clock to the correct value. During this time, the host should not be used to synchronize clients.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-b&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Force the time to be stepped using the settimeofday() system call, rather than slewed (default) using the adjtime() system call. This option should be used when called from a startup file at boot time.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-d&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enable the debugging mode, in which &lt;tt&gt;ntpdate&lt;/tt&gt; will go through all the steps, but not adjust the local clock. Information useful for general debugging will also be printed.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-e _authdelay_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify the processing delay to perform an authentication function as the value &lt;em&gt;authdelay&lt;/em&gt;, in seconds and fraction (see &lt;tt&gt;xntpd&lt;/tt&gt; for details). This number is usually small enough to be negligible for most purposes, though specifying a value may improve timekeeping on very slow CPUs.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-k _keyfile_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify the path for the authentication key file as the string &lt;em&gt;keyfile&lt;/em&gt;. The default is &lt;tt&gt;/etc/ntp.keys&lt;/tt&gt;. This file should be in the format described in &lt;tt&gt;xntpd&lt;/tt&gt;.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-o _version_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify the NTP version for outgoing packets as the integer &lt;em&gt;version&lt;/em&gt;, which can be 1 or 2. The default is 3. This allows &lt;tt&gt;ntpdate&lt;/tt&gt; to be used with older NTP versions.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-p _samples_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify the number of samples to be acquired from each server as the integer &lt;em&gt;samples&lt;/em&gt;, with values from 1 to 8 inclusive. The default is 4.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-q&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Query only - don&amp;rsquo;t set the clock.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-s&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Divert logging output from the standard output (default) to the system &lt;tt&gt;syslog&lt;/tt&gt; facility. This is designed primarily for convenience of &lt;tt&gt;cron&lt;/tt&gt; scripts.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-t _timeout_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify the maximum time waiting for a server response as the value &lt;em&gt;timeout&lt;/em&gt;, in seconds and fraction. The value is rounded to a multiple of 0.2 seconds. The default is 1 second, a value suitable for polling across a LAN.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-u&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Direct &lt;tt&gt;ntpdate&lt;/tt&gt; to use an unprivileged port for outgoing packets. This is most useful when behind a firewall that blocks incoming traffic to privileged ports, and you want to synchronize with hosts beyond the firewall. Note that the &lt;tt&gt;-d&lt;/tt&gt; option always uses unprivileged ports.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-v&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Be verbose. This option will cause &lt;tt&gt;ntpdate&lt;/tt&gt;&amp;rsquo;s version identification string to be logged.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;files&#34;&gt;Files&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;/etc/ntp.keys&lt;/tt&gt; - encryption keys used by &lt;tt&gt;ntpdate&lt;/tt&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;bugs&#34;&gt;Bugs&lt;/h4&gt;
&lt;p&gt;The slew adjustment is actually 50% larger than the measured offset, since this (it is argued) will tend to keep a badly drifting clock more accurate. This is probably not a good idea and may cause a troubling hunt for some values of the kernel variables &lt;tt&gt;tick&lt;/tt&gt; and &lt;tt&gt;tickadj&lt;/tt&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: ntpq - standard NTP query program</title>
      <link>/archives/3-5.93e/ntpq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/ntpq/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/ntpq/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/ntpq/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/ntpq/#internal-commands&#34;&gt;Internal Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/ntpq/#control-message-commands&#34;&gt;Control Message Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/ntpq/#bugs&#34;&gt;Bugs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntpq [-inp] [-c &lt;em&gt;command&lt;/em&gt;] [&lt;em&gt;host&lt;/em&gt;] [&amp;hellip;]&lt;/tt&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntpq&lt;/tt&gt; is used to query NTP servers which implement the recommended NTP mode 6 control message format about current state and to request changes in that state. The program may be run either in interactive mode or controlled using command line arguments. Requests to read and write arbitrary variables can be assembled, with raw and pretty-printed output options being available. &lt;tt&gt;ntpq&lt;/tt&gt; can also obtain and print a list of peers in a common format by sending multiple queries to the server.&lt;/p&gt;
&lt;p&gt;If one or more request options is included on the command line when &lt;tt&gt;ntpq&lt;/tt&gt; is executed, each of the requests will be sent to the NTP servers running on each of the hosts given as command line arguments, or on localhost by default. If no request options are given, &lt;tt&gt;ntpq&lt;/tt&gt; will attempt to read commands from the standard input and execute these on the NTP server running on the first host given on the command line, again defaulting to localhost when no other host is specified. &lt;tt&gt;ntpq&lt;/tt&gt; will prompt for commands if the standard input is a terminal device.&lt;/p&gt;
&lt;p&gt;&lt;tt&gt;ntpq&lt;/tt&gt; uses NTP mode 6 packets to communicate with the NTP server, and hence can be used to query any compatible server on the network which permits it. Note that since NTP is a UDP protocol this communication will be somewhat unreliable, especially over large distances in terms of network topology. &lt;tt&gt;ntpq&lt;/tt&gt; makes one attempt to retransmit requests, and will time requests out if the remote host is not heard from within a suitable timeout time.&lt;/p&gt;
&lt;p&gt;Command line options are described following. Specifying a command line option other than &lt;tt&gt;-i&lt;/tt&gt; or &lt;tt&gt;-n&lt;/tt&gt; will cause the specified query (queries) to be sent to the indicated host(s) immediately. Otherwise, &lt;tt&gt;ntpq&lt;/tt&gt; will attempt to read interactive format commands from the standard input.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-c&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The following argument is interpreted as an interactive format command and is added to the list of commands to be executed on the specified host(s). Multiple &lt;tt&gt;-c&lt;/tt&gt; options may be given.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-i&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Force &lt;tt&gt;ntpq&lt;/tt&gt; to operate in interactive mode. Prompts will be written to the standard output and commands read from the standard input.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-n&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Output all host addresses in dotted-quad numeric format rather than converting to the canonical host names.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-p&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Print a list of the peers known to the server as well as a summary of their state. This is equivalent to the &lt;tt&gt;peers&lt;/tt&gt; interactive command.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;internal-commands&#34;&gt;Internal Commands&lt;/h4&gt;
&lt;p&gt;Interactive format commands consist of a keyword followed by zero to four arguments. Only enough characters of the full keyword to uniquely identify the command need be typed. The output of a command is normally sent to the standard output, but optionally the output of individual commands may be sent to a file by appending a &lt;code&gt;&amp;lt;&lt;/code&gt;, followed by a file name, to the command line. A number of interactive format commands are executed entirely within the &lt;tt&gt;ntpq&lt;/tt&gt; program itself and do not result in NTP mode 6 requests being sent to a server. These are described following.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;? [_command_keyword_]&lt;/tt&gt;  
&lt;tt&gt;help [_command_keyword_]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;A &lt;tt&gt;?&lt;/tt&gt; by itself will print a list of all the command keywords known to this incarnation of &lt;tt&gt;ntpq&lt;/tt&gt;. A &lt;tt&gt;?&lt;/tt&gt; followed by a command keyword will print function and usage information about the command. This command is probably a better source of information about &lt;tt&gt;ntpq&lt;/tt&gt; than this manual page.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;addvars _variable_name_ [ = _value_] [...]&lt;/tt&gt;  
&lt;tt&gt;rmvars _variable_name_ [...]&lt;/tt&gt;  
&lt;tt&gt;clearvars&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;The data carried by NTP mode 6 messages consists of a list of items of the form &lt;tt&gt;&lt;em&gt;variable_name&lt;/em&gt; = &lt;em&gt;value&lt;/em&gt;&lt;/tt&gt;, where the &lt;tt&gt;= &lt;em&gt;value&lt;/em&gt;&lt;/tt&gt; is ignored, and can be omitted, in requests to the server to read variables. &lt;tt&gt;ntpq&lt;/tt&gt; maintains an internal list in which data to be included in control messages can be assembled, and sent using the &lt;tt&gt;readlist&lt;/tt&gt; and &lt;tt&gt;writelist&lt;/tt&gt; commands described below. The &lt;tt&gt;addvars&lt;/tt&gt; command allows variables and their optional values to be added to the list. If more than one variable is to be added, the list should be comma-separated and not contain white space. The &lt;tt&gt;rmvars&lt;/tt&gt; command can be used to remove individual variables from the list, while the &lt;tt&gt;clearlist&lt;/tt&gt; command removes all variables from the list.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;authenticate yes | no&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Normally &lt;tt&gt;ntpq&lt;/tt&gt; does not authenticate requests unless they are write requests. The command &lt;tt&gt;authenticate yes&lt;/tt&gt; causes &lt;tt&gt;ntpq&lt;/tt&gt; to send authentication with all requests it makes. Authenticated requests causes some servers to handle requests slightly differently, and can occasionally melt the CPU in fuzzballs if you turn authentication on before doing a &lt;tt&gt;peer&lt;/tt&gt; display.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;cooked&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Causes output from query commands to be &amp;ldquo;cooked&amp;rdquo;. Variables which are recognized by the server will have their values reformatted for human consumption. Variables which &lt;tt&gt;ntpq&lt;/tt&gt; thinks should have a decodable value but didn&amp;rsquo;t are marked with a trailing &lt;tt&gt;?&lt;/tt&gt;.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;debug more | less | off&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Turns internal query program debugging on and off.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;delay _milliseconds_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify a time interval to be added to timestamps included in requests which require authentication. This is used to enable (unreliable) server reconfiguration over long delay network paths or between machines whose clocks are unsynchronized. Actually the server does not now require timestamps in authenticated requests, so this command may be obsolete.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;host _hostname_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Set the host to which future queries will be sent. Hostname may be either a host name or a numeric address.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;hostnames [yes | no]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;If &lt;tt&gt;yes&lt;/tt&gt; is specified, host names are printed in information displays. If &lt;tt&gt;no&lt;/tt&gt; is specified, numeric addresses are printed instead. The default is &lt;tt&gt;yes&lt;/tt&gt;, unless modified using the command line &lt;tt&gt;-n&lt;/tt&gt; switch.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;keyid _keyid_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command allows the specification of a key number to be used to authenticate configuration requests. This must correspond to a key number the server has been configured to use for this purpose.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;ntpversion 1 | 2 | 3 &lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Sets the NTP version number which &lt;tt&gt;ntpq&lt;/tt&gt; claims in packets. Defaults to 3. Note that mode 6 control messages (and modes, for that matter) didn&amp;rsquo;t exist in NTP version 1. There appear to be no servers left which demand version 1.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;quit&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Exit &lt;tt&gt;ntpq&lt;/tt&gt;.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;passwd&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command prompts you to type in a password (which will not be echoed) which will be used to authenticate configuration requests. The password must correspond to the key configured for use by the NTP server for this purpose if such requests are to be successful.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;raw&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Causes all output from query commands is printed as received from the remote server. The only formating/interpretation done on the data is to transform nonascii data into a printable (but barely understandable) form.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;timeout _millseconds_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify a timeout period for responses to server queries. The default is about 5000 milliseconds. Note that since &lt;tt&gt;ntpq&lt;/tt&gt; retries each query once after a timeout, the total waiting time for a timeout will be twice the timeout value set.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;control-message-commands&#34;&gt;Control Message Commands&lt;/h4&gt;
&lt;p&gt;Each peer known to an NTP server has a 16 bit integer association identifier assigned to it. NTP control messages which carry peer variables must identify the peer the values correspond to by including its association ID. An association ID of 0 is special, and indicates the variables are system variables, whose names are drawn from a separate name space.&lt;/p&gt;
&lt;p&gt;Control message commands result in one or more NTP mode 6 messages being sent to the server, and cause the data returned to be printed in some format. Most commands currently implemented send a single message and expect a single response. The current exceptions are the peers command, which will send a preprogrammed series of messages to obtain the data it needs, and the mreadlist and mreadvar commands, which will iterate over a range of associations.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;associations&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Obtains and prints a list of association identifiers and peer statuses for in-spec peers of the server being queried. The list is printed in columns. The first of these is an index numbering the associations from 1 for internal use, the second the actual association identifier returned by the server and the third the status word for the peer. This is followed by a number of columns containing data decoded from the status word. Note that the data returned by the &lt;tt&gt;associations&lt;/tt&gt; command is cached internally in &lt;tt&gt;ntpq&lt;/tt&gt;. The index is then of use when dealing with stupid servers which use association identifiers which are hard for humans to type, in that for any subsequent commands which require an association identifier as an argument, the form and index may be used as an alternative.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;clockvar [_assocID_] [_variable_name_ [ = _value_ [...]] [...]&lt;/tt&gt;&lt;/dt&gt;
&lt;dt&gt;&lt;tt&gt;cv [_assocID_] [_variable_name_ [ = _value_ [...] ][...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Requests that a list of the server&amp;rsquo;s clock variables be sent. Servers which have a radio clock or other external synchronization will respond positively to this. If the association identifier is omitted or zero the request is for the variables of the &lt;tt&gt;system clock&lt;/tt&gt; and will generally get a positive response from all servers with a clock. If the server treats clocks as pseudo-peers, and hence can possibly have more than one clock connected at once, referencing the appropriate peer association ID will show the variables of a particular clock. Omitting the variable list will cause the server to return a default variable display.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;lassociations&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Obtains and prints a list of association identifiers and peer statuses for all associations for which the server is maintaining state. This command differs from the &lt;tt&gt;associations&lt;/tt&gt; command only for servers which retain state for out-of-spec client associations (i.e., fuzzballs). Such associations are normally omitted from the display when the &lt;tt&gt;associations&lt;/tt&gt; command is used, but are included in the output of &lt;tt&gt;lassociations&lt;/tt&gt;.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;lpassociations&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Print data for all associations, including out-of-spec client associations, from the internally cached list of associations. This command differs from &lt;tt&gt;passociations&lt;/tt&gt; only when dealing with fuzzballs.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;lpeers&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Like R peers, except a summary of all associations for which the server is maintaining state is printed. This can produce a much longer list of peers from fuzzball servers.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;mreadlist _assocID_ _assocID_&lt;/tt&gt;  
&lt;tt&gt;mrl _assocID_ _assocID_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Like the &lt;tt&gt;readlist&lt;/tt&gt; command, except the query is done for each of a range of (nonzero) association IDs. This range is determined from the association list cached by the most recent &lt;tt&gt;associations&lt;/tt&gt; command.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;mreadvar _assocID_ _assocID_ [ _variable_name_ [ = _value_[ ... ]&lt;/tt&gt;  
&lt;tt&gt;mrv _assocID_ _assocID_ [ _variable_name_ [ = _value_[ ... ]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Like the &lt;tt&gt;readvar&lt;/tt&gt; command, except the query is done for each of a range of (nonzero) association IDs. This range is determined from the association list cached by the most recent &lt;tt&gt;associations&lt;/tt&gt; command.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;opeers&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;An old form of the &lt;tt&gt;peers&lt;/tt&gt; command with the reference ID replaced by the local interface address.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;passociations&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Prints association data concerning in-spec peers from the internally cached list of associations. This command performs identically to the &lt;tt&gt;associations&lt;/tt&gt; except that it displays the internally stored data rather than making a new query.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;peers&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Obtains a list of in-spec peers of the server, along with a summary of each peer&amp;rsquo;s state. Summary information includes the address of the remote peer, the reference ID (0.0.0.0 if the refID is unknown), the stratum of the remote peer, the type of the peer (local, unicast, multicast or broadcast), when the last packet was received, the polling interval, in seconds, the reachability register, in octal, and the current estimated delay, offset and dispersion of the peer, all in seconds.&lt;/p&gt;
&lt;p&gt;The character in the left margin indicates the fate of this peer in the clock selection process. The codes mean: &lt;tt&gt;space&lt;/tt&gt; discarded due to high stratum and/or failed sanity checks; &lt;code&gt;x&lt;/code&gt; designated falsticker by the intersection algorithm; &lt;code&gt;.&lt;/code&gt; culled from the end of the candidate list; &lt;code&gt;-&lt;/code&gt; discarded by the clustering algorithm; &lt;code&gt;+&lt;/code&gt; included in the final selection set; &lt;code&gt;#&lt;/code&gt; selected for synchronization but distance exceeds maximum; &lt;code&gt;*&lt;/code&gt; selected for synchronization; and &lt;code&gt;o&lt;/code&gt; selected for synchronization, PPS signal in use.&lt;/p&gt;
&lt;p&gt;Note that since the peers command depends on the ability to parse the values in the responses it gets it may fail to work from time to time with servers which poorly control the data formats.&lt;/p&gt;
&lt;p&gt;The contents of the host field may be one of four forms. It may be a host name, an IP address, a reference clock implementation name with its parameter or &lt;code&gt;REFCLK(&amp;lt;implementation number&amp;gt;, &amp;lt;parameter&amp;gt;)&lt;/code&gt;. On &lt;tt&gt;hostnames no&lt;/tt&gt; only IP addresses will be displayed.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;pstatus _assocID_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Sends a read status request to the server for the given association. The names and values of the peer variables returned will be printed. Note that the status word from the header is displayed preceding the variables, both in hexadecimal and in pidgeon English.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;readlist [ _assocID_ ]&lt;/tt&gt;  
&lt;tt&gt;rl [ _assocID_ ]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Requests that the values of the variables in the internal variable list be returned by the server. If the association ID is omitted or is 0 the variables are assumed to be system variables. Otherwise they are treated as peer variables. If the internal variable list is empty a request is sent without data, which should induce the remote server to return a default display.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;readvar _assocID_ _variable_name_ [ = _value_ ] [ ...]&lt;/tt&gt;  
&lt;tt&gt;rv _assocID_ [ _variable_name_ [ = _value_ ] [...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Requests that the values of the specified variables be returned by the server by sending a read variables request. If the association ID is omitted or is given as zero the variables are system variables, otherwise they are peer variables and the values returned will be those of the corresponding peer. Omitting the variable list will send a request with no data which should induce the server to return a default display.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;writevar _assocID_ _variable_name_ [ = _value_ [ ...]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Like the readvar request, except the specified variables are written instead of read.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;writelist [ _assocID_ ]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Like the readlist request, except the internal list variables are written instead of read.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;bugs&#34;&gt;Bugs&lt;/h4&gt;
&lt;p&gt;The peers command is non-atomic and may occasionally result in spurious error messages about invalid associations occurring and terminating the command. The timeout time is a fixed constant, which means you wait a long time for timeouts since it assumes sort of a worst case. The program should improve the timeout estimate as it sends queries to a particular host, but doesn&amp;rsquo;t.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: ntptime - read kernel time variables</title>
      <link>/archives/3-5.93e/ntptime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/ntptime/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/ntptime/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/ntptime/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/ntptime/#options&#34;&gt;Options&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntptime [ -chr ] [ -e &lt;em&gt;est_error&lt;/em&gt; ] [ -f &lt;em&gt;frequency&lt;/em&gt; ] [ -m &lt;em&gt;max_error&lt;/em&gt; ] [ -o &lt;em&gt;offset&lt;/em&gt; ] [ -s &lt;em&gt;status&lt;/em&gt; ] [ -t &lt;em&gt;time_constant&lt;/em&gt;]&lt;/tt&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;This program is useful only with special kernels described in the &lt;a href=&#34;/archives/3-5.93e/kern&#34;&gt;A Kernel Model for Precision Timekeeping&lt;/a&gt; page. It reads and displays time-related kernel variables using the &lt;tt&gt;ntp_gettime()&lt;/tt&gt; system call. A similar display can be obtained using the &lt;tt&gt;xntpdc&lt;/tt&gt; program and &lt;tt&gt;kerninfo&lt;/tt&gt; command.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;options&#34;&gt;Options&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;-c&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Display the execution time of &lt;tt&gt;ntptime&lt;/tt&gt; itself.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-e _est_error_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify estimated error, in microseconds.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-f _frequency_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify frequency offset, in parts per million.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-h&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Display times in Unix timeval format. Default is NTP format.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-l&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify the leap bits as a code from 0 to 3.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-m _max_error_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Display help information.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-o _offset_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify clock offset, in microseconds.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-r&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Display Unix and NTP times in raw format.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-s _status_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify clock status. Better know what you are doing.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-t _time_constant_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specify time constant, an integer in the range 0-10.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: ntptrace - trace a chain of NTP servers back to the primary source</title>
      <link>/archives/3-5.93e/ntptrace/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/ntptrace/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/ntptrace/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/ntptrace/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/ntptrace/#options&#34;&gt;Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/ntptrace/#bugs&#34;&gt;Bugs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntptrace [ -vdn ] [ -r &lt;em&gt;retries&lt;/em&gt; ] [ -t &lt;em&gt;timeout&lt;/em&gt; ] [ &lt;em&gt;server&lt;/em&gt; ]&lt;/tt&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;&lt;tt&gt;ntptrace&lt;/tt&gt; determines where a given Network Time Protocol (NTP) server gets its time from, and follows the chain of NTP servers back to their master time source. If given no arguments, it starts with &lt;tt&gt;localhost&lt;/tt&gt;. Here is an example of the output from &lt;tt&gt;ntptrace&lt;/tt&gt;:&lt;/p&gt;
&lt;pre&gt;% ntptrace
localhost: stratum 4, offset 0.0019529, synch distance 0.144135
server2ozo.com: stratum 2, offset 0.0124263, synch distance 0.115784
usndh.edu: stratum 1, offset 0.0019298, synch distance 0.011993, refid &#39;WWVB&#39;
&lt;/pre&gt;
&lt;p&gt;On each line, the fields are (left to right): the host name, the host stratum, the time offset between that host and the local host (as measured by &lt;tt&gt;ntptrace&lt;/tt&gt;; this is why it is not always zero for &amp;ldquo;&lt;tt&gt;localhost&lt;/tt&gt;&amp;quot;), the host synchronization distance, and (only for stratum-1 servers) the reference clock ID. All times are given in seconds. Note that the stratum is the server hop count to the primary source, while the synchronization distance is the estimated error relative to the primary source. These terms are precisely defined in RFC-1305.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;options&#34;&gt;Options&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;-d&lt;/tt&gt;
&lt;p&gt;Turns on some debugging output.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-n&lt;/tt&gt;
&lt;p&gt;Turns off the printing of host names; instead, host IP addresses are given. This may be useful if a nameserver is down.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-r &lt;i&gt;retries&lt;/i&gt;&lt;/tt&gt;
&lt;p&gt;Sets the number of retransmission attempts for each host (default = 5).&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-t &lt;i&gt;timeout&lt;/i&gt;&lt;/tt&gt;
&lt;p&gt;Sets the retransmission timeout (in seconds) (default = 2).&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;-v&lt;/tt&gt;
&lt;p&gt;Prints verbose information about the NTP servers.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;bugs&#34;&gt;Bugs&lt;/h4&gt;
&lt;p&gt;This program makes no attempt to improve accuracy by doing multiple samples.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Patching Procedures</title>
      <link>/archives/3-5.93e/patches/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/patches/</guid>
      <description>
        
        
        &lt;p&gt;A distribution so widely used as this one eventually develops numerous barnacles as the result of &lt;a href=&#34;/archives/3-5.93e/porting&#34;&gt;porting&lt;/a&gt; to new systems, idiosyncratic new features and just plain bugs. In order to help keep order and make maintenance bearable, we ask that proposed changes to the distribution be submitted in the following form.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Please submit patches to &lt;a href=&#34;mailto:mills@udel.edu&#34;&gt;David L. Mills&lt;/a&gt; in the form of either unified-diffs (&lt;tt&gt;diff -u&lt;/tt&gt;) or context-diffs (&lt;tt&gt;diff -c&lt;/tt&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Please include the &lt;strong&gt;output&lt;/strong&gt; from &lt;tt&gt;config.guess&lt;/tt&gt; in the description of your patch. If &lt;tt&gt;config.guess&lt;/tt&gt; does not produce any output for your machine, please fix that, too!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Please base the patch on the root directory of the distribution. The preferred procedure here is to copy your patch to the root directory and mumble&lt;/p&gt;
&lt;p&gt;&lt;code&gt;patch -p &amp;lt;your_patch&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Please avoid patching the RCS subdirectories; better yet, clean them out before submitting patches.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you have whole new files, as well as patches, wrap the files and patches in a shell script. If you need to compress it, use either GNU &lt;tt&gt;gzip&lt;/tt&gt; or the stock Unix &lt;tt&gt;compress&lt;/tt&gt; utility.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don&amp;rsquo;t forget the documentation that may be affected by the patch. Send us patches for the &lt;tt&gt;./htm&lt;/tt&gt; files as well.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We would be glad to include your name, electric address and descriptive phrase in the &lt;a href=&#34;/archives/3-5.93e/copyright&#34;&gt;Copyright&lt;/a&gt; page, if you wish.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Prior to xntp3-5.83 (releases up to and including xntp3.5f) a complete patch history back to the dark ages was kept in the &lt;tt&gt;./patches&lt;/tt&gt; directory, which might have been helpful to see if the same problem occurred in another port, etc. Patches were saved in that directory with file name in the form &lt;tt&gt;patch.&lt;em&gt;nnn&lt;/em&gt;&lt;/tt&gt;, where &lt;em&gt;nnn&lt;/em&gt; was approaching 200. All patches in that directory have been made; so, if yours was there, it was in the distribution.&lt;/p&gt;
&lt;p&gt;Since we have been getting multiple patches for some bugs, plus many changes are implemented locally, no two maintainers here use the same tools, and since we&amp;rsquo;re not using any bug-tracking software or even source code control, there is currently no tracking of specific changes.&lt;/p&gt;
&lt;p&gt;The best way to see what&amp;rsquo;s changed between two distributions is to run a &lt;tt&gt;diff&lt;/tt&gt; against them.&lt;/p&gt;
&lt;p&gt;Thanks for your contribution and happy chime.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Porting Hints</title>
      <link>/archives/3-5.93e/porting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/porting/</guid>
      <description>
        
        
        

&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;NOTE&lt;/h4&gt;

    The following procedures have been replaced by GNU &lt;tt&gt;automake&lt;/tt&gt; and &lt;tt&gt;autoconfigure&lt;/tt&gt;. This page is to be updated in the next release.

&lt;/div&gt;

&lt;p&gt;Porting to a new machine or operating system ordinarily requires updating the &lt;tt&gt;./machines&lt;/tt&gt; directory and the &lt;tt&gt;./compilers&lt;/tt&gt; directories in order to define the build environment and autoconfigure means. You will probably have to modify the &lt;tt&gt;ntp_machines.h&lt;/tt&gt; file and &lt;tt&gt;l_stdlib.h&lt;/tt&gt; files as well. The two most famous trouble spots are the I/O code in &lt;tt&gt;./xntpd/ntp_io.c&lt;/tt&gt; and the clock adjustment code in &lt;tt&gt;./xntpd/ntp_unixclock.c&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;These are the rules so that older bsd systems and the POSIX standard system can coexist together.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If you use &lt;tt&gt;select&lt;/tt&gt; then include &lt;tt&gt;ntp_select.h&lt;/tt&gt;. &lt;tt&gt;select&lt;/tt&gt; is not standard, since it is very system dependent as to where it is defined. The logic to include the right system dependent include file is in &lt;tt&gt;ntp_select.h&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Always use POSIX definition of strings. Include &lt;tt&gt;ntp_string.h&lt;/tt&gt; instead of &lt;tt&gt;&amp;lt;string.h&amp;gt;&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Always include &lt;tt&gt;ntp_malloc.h&lt;/tt&gt; if you use &lt;tt&gt;malloc&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Always include &lt;tt&gt;ntp_io.h&lt;/tt&gt; instead of &lt;tt&gt;&amp;lt;sys/file.h&amp;gt;&lt;/tt&gt; or &lt;tt&gt;&amp;lt;fnctl.h&amp;gt;&lt;/tt&gt; to get &lt;tt&gt;O_*&lt;/tt&gt; flags.&lt;/li&gt;
&lt;li&gt;Always include &lt;tt&gt;ntp_if.h&lt;/tt&gt; instead of &lt;tt&gt;&amp;lt;net/if.h&amp;gt;&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Always include &lt;tt&gt;ntp_stdlib.h&lt;/tt&gt; instead of &lt;tt&gt;&amp;lt;stdlib.h&amp;gt;&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Define any special defines needed for a system in &lt;tt&gt;./include/ntp_machine.h&lt;/tt&gt; based on system identifier. This file is included by the &lt;tt&gt;ntp_types.h&lt;/tt&gt; file and should always be placed first after the &lt;tt&gt;&amp;lt;&amp;gt;&lt;/tt&gt; defines.&lt;/li&gt;
&lt;li&gt;Define any special library prototypes left over from the system library and include files in the &lt;tt&gt;l_stdlib.h&lt;/tt&gt; file. This file is included by the &lt;tt&gt;ntp_stdlib.h&lt;/tt&gt; file and should ordinarily be placed last in the includes list.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t define a include file by the same name as a system include file.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;tt&gt;l_stdlib.h&lt;/tt&gt; can contain any extra definitions that are needed so that &lt;tt&gt;gcc&lt;/tt&gt; will shut up. They should be controlled by a system identifier and there should be a separate section for each system. Really this will make it easier to maintain.&lt;/p&gt;
&lt;p&gt;See &lt;tt&gt;include/ntp_machines.h&lt;/tt&gt; for the various compile time options.&lt;/p&gt;
&lt;p&gt;When you are satisfied the port works and that other ports are not adversely affected, please send &lt;a href=&#34;/archives/3-5.93e/patches&#34;&gt;patches&lt;/a&gt; for the system files you have changed, as well as any documentation that should be updated, including the advice herein.&lt;/p&gt;
&lt;p&gt;Good luck.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: PPS Clock Discipline</title>
      <link>/archives/3-5.93e/driver22/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/driver22/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver22/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver22/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver22/#fudge-factors&#34;&gt;Fudge Factors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver22/#additional-information&#34;&gt;Additional Information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;Address: 127.127.22.&lt;em&gt;u&lt;/em&gt;&lt;br&gt;
Reference ID: &lt;tt&gt;ATOM&lt;/tt&gt;&lt;br&gt;
Driver ID: &lt;tt&gt;ATOM-PPS&lt;/tt&gt;&lt;br&gt;
Serial Port: &lt;tt&gt;/dev/pps_u_&lt;/tt&gt;; 9600 baud, 8-bits, no parity&lt;br&gt;
Features: &lt;tt&gt;tty_clk&lt;/tt&gt;, &lt;tt&gt;ppsclock&lt;/tt&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;This driver furnishes an interface for pulse-per-second (PPS) signals produced by a cesium clock, radio clock or related equipment. It can be used to remove accumulated jitter and retime a secondary server when synchronized to a primary server over a congested, wide-area network and before redistributing the time to local clients.&lt;/p&gt;
&lt;p&gt;In order for this driver to work, the local clock must be set to within +-500 ms by another means, such as a radio clock or NTP itself. The PPS signal is connected via a serial port and &lt;a href=&#34;/archives/3-5.93e/gadget&#34;&gt;gadget box&lt;/a&gt; consisting of a one-shot and RS232 level converter. When operated at 38.4 kbps with a SPARCstation IPC, this arrangement has a worst-case jitter less than 26 us.&lt;/p&gt;
&lt;p&gt;There are three ways in which this driver can be used. The first way uses the &lt;tt&gt;LDISC_CLKPPS&lt;/tt&gt; line discipline and works only for the baseboard serial ports of the Sun SPARCstation running SunOS 4.x. In order to use this option, the -DPPS flag must be included in the &lt;tt&gt;DEFS_LOCAL&lt;/tt&gt; line of the distribution configuration file &lt;tt&gt;./Config.local&lt;/tt&gt;. The PPS signal is connected via the gadget box to the carrier detect (DCD) line of a serial port. The signal is activated by a &lt;tt&gt;fudge flag3 1&lt;/tt&gt; command following the &lt;tt&gt;server&lt;/tt&gt; command in the configuration file. This causes the &lt;tt&gt;ppsclock&lt;/tt&gt; streams module to be configured for that port and to capture a timestamp at the on-time transition of the PPS signal. This driver then reads the timestamp directly by a designated &lt;tt&gt;ioctl()&lt;/tt&gt; system call. This provides the most accurate time and least jitter of any other scheme. There is no need to configure a dedicated device for this purpose, which ordinarily is the device used for the associated radio clock.&lt;/p&gt;
&lt;p&gt;The second way uses the &lt;tt&gt;LDISC_CLKPPS&lt;/tt&gt; line discipline and works for any architecture supporting a serial port. In order to use this option, the -DCLK flag must be included in the &lt;tt&gt;DEFS_LOCAL&lt;/tt&gt; line of the distribution configuration file &lt;tt&gt;./Config.local&lt;/tt&gt;. If after a few seconds this driver finds no &lt;tt&gt;ppsclock&lt;/tt&gt; module configured, it attempts to open a serial port device &lt;tt&gt;/dev/pps%d&lt;/tt&gt;, where &lt;tt&gt;%d&lt;/tt&gt; is the unit number, and assign the LDISC_CLKPPS line discipline to it. If the line discipline fails, no harm is done except the accuracy is reduced somewhat. The pulse generator in the gadget box must be adjusted to produce a start bit of length 26 usec at 38400 bps. Used with the &lt;tt&gt;LDISC_CLKPPS&lt;/tt&gt; line discipline, this produces an ASCII DEL character (&lt;code&gt;\377&lt;/code&gt;) followed by a timestamp at the on-time transition of the PPS signal.&lt;/p&gt;
&lt;p&gt;The third way involves an auxiliary radio clock driver which calls the PPS driver with a timestamp captured by that driver. This use is documented in the source code for the driver(s) involved.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;fudge-factors&#34;&gt;Fudge Factors&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;time1 _time_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the time offset calibration factor, in seconds and fraction, with default 0.0. This parameter can be used to compensate for the UART and OS delays. Allow about 247 us for UART delays at 38400 bps and about 1 ms for SunOS streams nonsense.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;time2 _time_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;stratum _number_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the driver stratum, in decimal from 0 to 15, with default 0.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;refid _string_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the driver reference identifier, an ASCII string from one to four characters, with default &lt;tt&gt;ATOM&lt;/tt&gt;.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag1 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag2 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag3 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enables &lt;tt&gt;ppsclock&lt;/tt&gt; line discipline/streams module if set.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag4 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;additional-information&#34;&gt;Additional Information&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;/archives/3-5.93e/refclock&#34;&gt;Reference Clock Drivers&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: PTB Modem Time Service</title>
      <link>/archives/3-5.93e/driver23/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/driver23/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver23/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver23/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver23/#monitor-data&#34;&gt;Monitor Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver23/#fudge-factors&#34;&gt;Fudge Factors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver23/#additional-information&#34;&gt;Additional Information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;Address: &lt;tt&gt;127.127.23.&lt;em&gt;u&lt;/em&gt;&lt;/tt&gt;&lt;br&gt;
Reference ID: &lt;tt&gt;TPTB&lt;/tt&gt;&lt;br&gt;
Driver ID: &lt;tt&gt;PTP-ACTS&lt;/tt&gt;&lt;br&gt;
Serial Port: &lt;tt&gt;/dev/ptb_u_&lt;/tt&gt;; 1200 baud, 8-bits, no parity&lt;br&gt;
Features: none
Requires: &lt;tt&gt;/usr/include/sys/termios.h&lt;/tt&gt; header file with modem control&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;No further information available.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;monitor-data&#34;&gt;Monitor Data&lt;/h4&gt;
&lt;p&gt;When enabled by the &lt;tt&gt;flag4&lt;/tt&gt; fudge flag, every received timecode is written as-is to the &lt;tt&gt;clockstats&lt;/tt&gt; file.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;fudge-factors&#34;&gt;Fudge Factors&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;time1 _time_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the time offset calibration factor, in seconds and fraction, with default 0.0.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;time2 _time_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;stratum _number_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the driver stratum, in decimal from 0 to 15, with default 0.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;refid _string_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the driver reference identifier, an ASCII string from one to four characters, with default USNO.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag1 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag2 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag3 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enable &lt;tt&gt;ppsclock&lt;/tt&gt; line discipline/streams module if set.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag4 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enable &lt;tt&gt;clockstats&lt;/tt&gt; recording if set.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;additional-information&#34;&gt;Additional Information&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;/archives/3-5.93e/refclock&#34;&gt;Reference Clock Drivers&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Pulse-Per-Second (PPS) Signal Interfacing</title>
      <link>/archives/3-5.93e/pps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/pps/</guid>
      <description>
        
        
        &lt;p&gt;Some radio clocks and related timekeeping gear have a pulse-per-second (PPS) signal that can be used to discipline the local clock oscillator to a high degree of precision, typically to the order less than 50 us in time and 0.1 PPM in frequency. The PPS signal can be connected in either of two ways: via the data leads of a serial port or via the modem control leads. Either way requires conversion of the PPS signal, usually at TTL levels, to RS232 levels, which can be done using a circuit such as described in the &lt;a href=&#34;/archives/3-5.93e/gadget&#34;&gt;Gadget Box PPS Level Converter and CHU Modem&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;The data leads interface requires regenerating the PPS pulse and converting to RS232 signal levels, so that the pulse looks like a legitimate ASCII character. The optional &lt;tt&gt;tty_clk&lt;/tt&gt; line discipline/streams module inserts a timestamp following this character in the input data stream. The driver uses this timestamp to determine the time of arrival of the PPS pulse to within 26 us at 38.4 kbps while eliminating error due to operating system queues and service times. In order to use the kernel PPS signal, the &lt;tt&gt;xntp3&lt;/tt&gt; distribution must be compiled with &lt;tt&gt;TTYCLK&lt;/tt&gt; defined.&lt;/p&gt;
&lt;p&gt;The modem control leads interface requires converting to RS232 levels and connecting to the data carrier detect (DCD) lead of a serial port. The optional &lt;tt&gt;ppsclock&lt;/tt&gt; streams module captures a timestamp upon transition of the DCD signal. This module can be built from the &lt;a href=&#34;https://www.eecis.udel.edu/~ntp/ntp_spool/software/ppsclock.tar.Z&#34;&gt;&lt;tt&gt;ppsclock.tar.Z&lt;/tt&gt; distribution.&lt;/a&gt; The driver reads the latest timestamp with a designated &lt;tt&gt;ioctl()&lt;/tt&gt; system call to determine the time of arrival of the PPS pulse to within a few tens of microseconds. In order to use the kernel PPS signal, the &lt;tt&gt;xntp3&lt;/tt&gt; distribution must be compiled with &lt;tt&gt;PPS&lt;/tt&gt; defined.&lt;/p&gt;
&lt;p&gt;Both the &lt;tt&gt;tty_clk&lt;/tt&gt; and &lt;tt&gt;ppsclock&lt;/tt&gt; modules are described in the &lt;a href=&#34;/archives/3-5.93e/ldisc&#34;&gt;Line Disciplines and Streams Drivers&lt;/a&gt; page. Directions for building the modules themselves are in the &lt;tt&gt;./kernel&lt;/tt&gt; directory. Directions on how to configure &lt;tt&gt;xntpd&lt;/tt&gt; to operate with these modules is described in &lt;a href=&#34;/archives/3-5.93e/build&#34;&gt;Building and Installing the Distribution&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;Both of these mechanisms are supported by the &lt;tt&gt;ATOM_PPS&lt;/tt&gt; reference clock driver described in the &lt;a href=&#34;/archives/3-5.93e/refclock&#34;&gt;Reference Clock Drivers&lt;/a&gt; page and its dependencies. This driver is ordinarily used in conjunction with another clock driver that supports the radio clock that produces the PPS pulse, as described in the &lt;a href=&#34;/archives/3-5.93e/prefer&#34;&gt;Mitigation Rules and the &lt;tt&gt;prefer&lt;/tt&gt; Keyword&lt;/a&gt; page. This driver furnishes the coarse timecode used to disambiguate the seconds numbering of the PPS pulse itself. The NTP daemon mitigates between the radio clock driver and &lt;tt&gt;ATOM_PPS&lt;/tt&gt; driver as described in that page in order to provide the most accurate time, while respecting the various types of equipment failures that could happen.&lt;/p&gt;
&lt;p&gt;For the utmost time quality, a number of Unix system kernel modifications can be made as described in the &lt;a href=&#34;/archives/3-5.93e/kern&#34;&gt;A Kernel Model for Precision Timekeeping&lt;/a&gt; page. Specifically, the ppsclock module can be used to interface the PPS signal directly to the kernel for use as discipline sources for both time and frequency. These sources can be separately enabled and monitored using the &lt;tt&gt;ntp_adjtime()&lt;/tt&gt; system call described in that page and the &lt;tt&gt;./include/sys/timex.h&lt;/tt&gt; header file in the &lt;tt&gt;xntp3&lt;/tt&gt; distribution. In order to use the kernel PPS signal, the &lt;tt&gt;xntp3&lt;/tt&gt; distribution must be compiled with &lt;tt&gt;KERNEL_PLL&lt;/tt&gt; defined.&lt;/p&gt;
&lt;p&gt;In some configurations may have multiple radio clocks, each with PPS outputs, as well as a kernel modified to use the PPS signal. In order to provide the highest degree of redundancy and survivability, the kernel PPS discipline, &lt;tt&gt;tty_clk&lt;/tt&gt; module, &lt;tt&gt;ppsclock&lt;/tt&gt; module and kernel modifications may all be in use at the same time, each backing up the other. The sometimes complicated mitigation rules are described in the Mitigation Rules and the &lt;tt&gt;prefer&lt;/tt&gt; Keyword page.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Reference Clock Drivers</title>
      <link>/archives/3-5.93e/refclock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/refclock/</guid>
      <description>
        
        
        &lt;h4 id=&#34;reference-clock-drivers&#34;&gt;Reference Clock Drivers&lt;/h4&gt;
&lt;p&gt;Support for most of the commonly available radio and modem clocks is included in the default configuration of the NTP daemon for Unix &lt;tt&gt;xntpd&lt;/tt&gt;. Individual clocks can be activated by configuration file commands, specifically the &lt;tt&gt;server&lt;/tt&gt; and &lt;tt&gt;fudge&lt;/tt&gt; commands described in the &lt;a href=&#34;/archives/3-5.93e/xntpd&#34;&gt;&lt;tt&gt;xntpd&lt;/tt&gt; program manual page&lt;/a&gt;. The following discussion presents Information on how to select and configure the device drivers in a running Unix system.&lt;/p&gt;
&lt;p&gt;Radio and modem clocks by convention have addresses in the form 127.127.&lt;em&gt;t.u&lt;/em&gt;, where &lt;em&gt;t&lt;/em&gt; is the clock type and &lt;em&gt;u&lt;/em&gt; is a unit number in the range 0-3 used to distinguish multiple instances of clocks of the same type. Most of these clocks require support in the form of a serial port or special bus peripheral. The particular device is normally specified by adding a soft link &lt;tt&gt;/dev/device_u_&lt;/tt&gt; to the particular hardware device involved, where _&lt;tt&gt;u&lt;/tt&gt;_ correspond to the unit number above.&lt;/p&gt;
&lt;p&gt;Following is a list showing the type and title of each driver currently implemented. The compile-time identifier for each is shown in parentheses. Click on a selected type for specific description and configuration documentation, including the clock address, reference ID, driver ID, serial port device name and speed, and features (line disciplines, etc.). For those drivers without specific documentation, please contact the author listed in the &lt;a href=&#34;/archives/3-5.93e/copyright&#34;&gt;Copyright Notice&lt;/a&gt; page.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver1&#34;&gt;Type 1&lt;/a&gt; Local Clock Driver (&lt;tt&gt;LOCAL_CLOCK&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver2&#34;&gt;Type 2&lt;/a&gt; Trak 8820 GPS Receiver (&lt;tt&gt;TRAK&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/drivers/driver3&#34;&gt;Type 3&lt;/a&gt; PSTI/Traconex 1020 WWV/WWVH Receiver (&lt;tt&gt;PST&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver4&#34;&gt;Type 4&lt;/a&gt; Spectracom 8170 and Netclock/2 WWVB Receivers (&lt;tt&gt;WWVB&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver5&#34;&gt;Type 5&lt;/a&gt; TrueTime GPS/GOES/OMEGA Receivers (&lt;tt&gt;TRUETIME&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver6&#34;&gt;Type 6&lt;/a&gt; IRIG Audio Decoder (Sun only) (&lt;tt&gt;IRIG&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver7&#34;&gt;Type 7&lt;/a&gt; Scratchbuilt CHU Receiver (&lt;tt&gt;CHU&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver8&#34;&gt;Type 8&lt;/a&gt; Generic Reference Driver (&lt;tt&gt;PARSE&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver9&#34;&gt;Type 9&lt;/a&gt; Magnavox MX4200 GPS Receiver (&lt;tt&gt;MX4200&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver10&#34;&gt;Type 10&lt;/a&gt; Austron 2200A/2201A GPS Receivers (&lt;tt&gt;GPS_AS2201&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver11&#34;&gt;Type 11&lt;/a&gt; Arbiter 1088A/B GPS Receiver (&lt;tt&gt;ARBITER&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver12&#34;&gt;Type 12&lt;/a&gt; KSI/Odetics TPRO/S IRIG Interface (Sun only) (&lt;tt&gt;TPRO&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;Type 13 Leitch CSD 5300 Master Clock Controller (&lt;tt&gt;LEITCH&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;Type 14 EES M201 MSF Receiver (&lt;tt&gt;MSFEES&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver5&#34;&gt;Type 15&lt;/a&gt; * TrueTime TM-TMD GPS Receiver&lt;/li&gt;
&lt;li&gt;Type 16 Bancomm GPS/IRIG Receiver (HP only) (&lt;tt&gt;BANC&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;Type 17 Datum Precision Time System (&lt;tt&gt;DATUM&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver18&#34;&gt;Type 18&lt;/a&gt; NIST Modem Time Services (&lt;tt&gt;ACTS&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver19&#34;&gt;Type 19&lt;/a&gt; Heath WWV/WWVH Receiver (&lt;tt&gt;WWV_HEATH&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver20&#34;&gt;Type 20&lt;/a&gt; Generic NMEA GPS Receiver (&lt;tt&gt;NMEA&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;Type 21 TrueTime GPS-VME Interface (HP only) (&lt;tt&gt;GPSVME&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver22&#34;&gt;Type 22&lt;/a&gt; PPS Clock Discipline (&lt;tt&gt;ATOM&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver23&#34;&gt;Type 23&lt;/a&gt; PTB Modem Time Service (&lt;tt&gt;PTBACTS&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver24&#34;&gt;Type 24&lt;/a&gt; USNO Modem Time Service (&lt;tt&gt;USNO&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver5&#34;&gt;Type 25&lt;/a&gt; * TrueTime generic receivers&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver26&#34;&gt;Type 26&lt;/a&gt; Hewlett Packard 58503A GPS Receiver (&lt;tt&gt;HPGPS&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver27&#34;&gt;Type 27&lt;/a&gt; Arcron MSF Receiver (&lt;tt&gt;ARCRON_MSF&lt;/tt&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver28&#34;&gt;Type 28&lt;/a&gt; Shared Memory Driver (&lt;tt&gt;SHM&lt;/tt&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;* All TrueTime receivers are now supported by one driver, type 5. Types 15 and 25 will be retained only for a limited time and may be reassigned in future.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Reference Clock Options</title>
      <link>/archives/3-5.93e/clockopt/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/clockopt/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/clockopt/#reference-clock-support&#34;&gt;Reference Clock Support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/clockopt/#reference-clock-commands&#34;&gt;Reference Clock Commands&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;reference-clock-support&#34;&gt;Reference Clock Support&lt;/h4&gt;
&lt;p&gt;The NTP Version 3 daemon currently supports several different radio, satellite and modem reference clocks plus a special pseudo-clock used for backup or when no other clock source is available. Detailed descriptions of individual device drivers and options can be found in the &lt;a href=&#34;/archives/3-5.93e/refclock&#34;&gt;Reference Clock Drivers&lt;/a&gt; page. Additional information can be found in the pages referenced there, including the &lt;a href=&#34;/archives/3-5.93e/rdebug&#34;&gt;Debugging Hints for Reference Clock Drivers&lt;/a&gt; and &lt;a href=&#34;/archives/3-5.93e/howto&#34;&gt;How To Write a Reference Clock Driver&lt;/a&gt; pages. In many drivers, support for a PPS signal is available as described in &lt;a href=&#34;/archives/3-5.93e/pps&#34;&gt;Pulse-per-second (PPS) Signal Interfacing&lt;/a&gt; page. Many drivers support special line discipline/streams modules which can significantly improve the accuracy using the driver. These are described in the &lt;a href=&#34;/archives/3-5.93e/ldisc&#34;&gt;Line Disciplines and Streams Drivers&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;A reference clock will generally (though not always) be a radio timecode receiver which is synchronized to a source of standard time such as the services offered by the NRC in Canada and NIST and USNO in the U.S. The interface between the computer and the timecode receiver is device dependent and will vary, but is often a serial port. A device driver specific to each clock must be selected and compiled in the distribution; however, most common radio, satellite and modem clocks are included by default. Note that an attempt to configure a reference clock when the driver has not been included or the hardware port has not been appropriately configured results in a scalding remark to the system log file, but is otherwise non hazardous.&lt;/p&gt;
&lt;p&gt;For the purposes of configuration, &lt;tt&gt;xntpd&lt;/tt&gt; treats reference clocks in a manner analogous to normal NTP peers as much as possible. Reference clocks are identified by a syntactically correct but invalid IP address, in order to distinguish them from normal NTP peers. Reference clock addresses are of the form &lt;tt&gt;127.127.t.u&lt;/tt&gt;, where &lt;tt&gt;t&lt;/tt&gt; is an integer denoting the clock type and &lt;tt&gt;u&lt;/tt&gt; indicates the type-specific unit number. The &lt;tt&gt;server&lt;/tt&gt; command is used to configure a reference clock, where the &lt;tt&gt;address&lt;/tt&gt; argument in that command is the clock address. The &lt;tt&gt;key&lt;/tt&gt;, &lt;tt&gt;version&lt;/tt&gt; and &lt;tt&gt;ttl&lt;/tt&gt; options are not used for reference clock support. The &lt;tt&gt;mode&lt;/tt&gt; option is added for reference clock support, as described below. The &lt;tt&gt;prefer&lt;/tt&gt; option can be useful to persuade the server to cherish a reference clock with somewhat more enthusiasm than other reference clocks or peers. Further information on this option can be found in the &lt;a href=&#34;/archives/3-5.93e/prefer&#34;&gt;Mitigation Rules and the prefer Keyword&lt;/a&gt; page. The &lt;tt&gt;minpoll&lt;/tt&gt; and &lt;tt&gt;maxpoll&lt;/tt&gt; options have meaning only for selected clock drivers. See the individual clock driver document pages for additional information.&lt;/p&gt;
&lt;p&gt;The stratum number of a reference clock is by default zero. Since the &lt;tt&gt;xntpd&lt;/tt&gt; daemon adds one to the stratum of each peer, a primary server ordinarily displays an external stratum of one. In order to provide engineered backups, it is often useful to specify the reference clock stratum as greater than zero. The &lt;tt&gt;stratum&lt;/tt&gt; option is used for this purpose. Also, in cases involving both a reference clock and a pulse-per-second (PPS) discipline signal, it is useful to specify the reference clock identifier as other than the default, depending on the driver. The &lt;tt&gt;refid&lt;/tt&gt; option is used for this purpose. Except where noted, these options apply to all clock drivers.&lt;/p&gt;
&lt;h4 id=&#34;reference-clock-commands&#34;&gt;Reference Clock Commands&lt;/h4&gt;
&lt;dt id=&#34;server&#34;&gt;&lt;tt&gt;server 127.127._t.u_ [prefer] [mode _int_]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command can be used to configure reference clocks in special ways. The options are interpreted as follows:&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;prefer&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Marks the reference clock as preferred. All other things being equal, this host will be chosen for synchronization among a set of correctly operating hosts. See the &lt;a href=&#34;/archives/3-5.93e/prefer&#34;&gt;Mitigation Rules and the &lt;tt&gt;prefer&lt;/tt&gt; Keyword&lt;/a&gt; page for further information.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;mode &lt;em&gt;int&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Specifies a mode number which is interpreted in a device-specific fashion. For instance, it selects a dialing protocol in the ACTS driver and a device subtype in the &lt;tt&gt;parse&lt;/tt&gt; drivers.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;minpoll &lt;em&gt;minpoll&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;This option specifies the minimum polling interval for NTP messages, in seconds to the power of two. The allowable range is 4 (16 s to 14 (16384 s) inclusive. The default is 6 (64 s) for all except modem reference clocks, where the default is 10 (1024 s).&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;maxpoll &lt;em&gt;maxpoll&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;This option specifies the maximum polling interval for NTP messages, in seconds to the power of two. The allowable range is 4 (16 s to 14 (16384 s) inclusive. The default is 6 (64 s) for all except modem reference clocks, where the default is 14 (16384 s).&lt;/p&gt;
&lt;dt id=&#34;fudge&#34;&gt;&lt;tt&gt;fudge 127.127._t.u_ [time1 _sec_] [time2 _sec_] [stratum _int_] [refid _string_] [mode _int_] [flag1 0|1] [flag2 0|1] [flag3 0|1] [flag4 0|1]&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;This command can be used to configure reference clocks in special ways. It must immediately follow the &lt;tt&gt;server&lt;/tt&gt; command which configures the driver. Note that the same capability is possible at run time using the &lt;tt&gt;&lt;a href=&#34;/archives/3-5.93e/xntpdc&#34;&gt;xntpdc&lt;/a&gt;&lt;/tt&gt; program. The options are interpreted as follows:&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;time1 &lt;em&gt;secs&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Specifies a constant to be added to the time offset produced by the driver, a fixed-point decimal number in seconds. This is used as a calibration constant to adjust the nominal time offset of a particular clock to agree with an external standard, such as a precision PPS signal. It also provides a way to correct a systematic error or bias due to serial port latencies, different cable lengths or receiver internal delay. The specified offset is in addition to the propagation delay provided by other means, such as internal DIPswitches. Where a calibration for an individual system and driver is available, an approximate correction is noted in the driver documentation pages.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;time2 &lt;em&gt;secs&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Specifies a fixed-point decimal number in seconds, which is interpreted in a driver-dependent way. See the descriptions of specific drivers in the &lt;a href=&#34;/archives/3-5.93e/refclock&#34;&gt;reference clock drivers&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;stratum &lt;em&gt;int&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Specifies the stratum number assigned to the driver, an integer between 0 and 15. This number overrides the default stratum number ordinarily assigned by the driver itself, usually zero.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;refid &lt;em&gt;string&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Specifies an ASCII string of from one to four characters which defines the reference identifier used by the driver. This string overrides the default identifier ordinarily assigned by the driver itself.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;mode &lt;em&gt;int&lt;/em&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    Specifies a mode number which is interpreted in a device-specific fashion. For instance, it selects a dialing protocol in the ACTS driver and a device subtype in the &lt;tt&gt;parse&lt;/tt&gt; drivers.&lt;/p&gt;
&lt;p&gt;    &lt;tt&gt;flag1 flag2 flag3 flag4&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;    These four flags are used for customizing the clock driver. The interpretation of these values, and whether they are used at all, is a function of the particular clock driver. However, by convention, and unless indicated otherwise, &lt;tt&gt;flag3&lt;/tt&gt; is used to attach the &lt;tt&gt;ppsclock&lt;/tt&gt; streams module to the configured driver, while &lt;tt&gt;flag4&lt;/tt&gt; is used to enable recording verbose monitoring data to the clockstats file configured with the &lt;tt&gt;filegen&lt;/tt&gt; command. Further information on the &lt;tt&gt;ppsclock&lt;/tt&gt; streams module can be found in the &lt;a href=&#34;/archives/3-5.93e/pps&#34;&gt;Pulse-per-second (PPS) Signal Interfacing&lt;/a&gt; page. Further information on the &lt;tt&gt;filegen&lt;/tt&gt; command can be found in the &lt;a href=&#34;/archives/3-5.93e/monopt&#34;&gt;Monitoring Options&lt;/a&gt; page.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Release Notes</title>
      <link>/archives/3-5.93e/release/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/release/</guid>
      <description>
        
        
        &lt;p&gt;The following changes are in the version 3-5.85 distribution relative to the previous 3.5f version.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The automatic build procedure has been replaced with GNU &lt;tt&gt;autoconfigure&lt;/tt&gt;. This should make porting to nonstandard machines and operating systems much easier and should simplify the maintenance for multi-architecture sites. See the &lt;tt&gt;./WHERE-TO- START/&lt;/tt&gt;, &lt;tt&gt;./INSTALL&lt;/tt&gt; and &lt;tt&gt;./README&lt;/tt&gt; files for a brief overview of the new building and installing procedures. See the building and installing pages in the HTML documentation for further information.&lt;/li&gt;
&lt;li&gt;A clock driver (type 11) is included for the Arbiter 1088A/B GPS Receiver.&lt;/li&gt;
&lt;li&gt;The Windows NT build procedure is changed. See the &lt;tt&gt;./util/wininstall&lt;/tt&gt; directory for further information.&lt;/li&gt;
&lt;li&gt;A clock driver (type 11) is included for the Arbiter 1088A/B GPS Receiver.&lt;/li&gt;
&lt;li&gt;The HTML documentation has been edited and updated to correct outdated information and minor typographical errors. A new page has been added for the Arbiter 1088A/B GPS Receiver.&lt;/li&gt;
&lt;li&gt;The &lt;tt&gt;xntpd&lt;/tt&gt; daemon now calculates the authentication delay automatically, so it no longer needs to be specified for each architecture and operating system. The &lt;tt&gt;-e&lt;/tt&gt; command-line switch has been removed from the &lt;tt&gt;xntpd&lt;/tt&gt; program. The &lt;tt&gt;authdelay&lt;/tt&gt; configuration option has been removed.&lt;/li&gt;
&lt;li&gt;The &lt;tt&gt;auth&lt;/tt&gt;, &lt;tt&gt;monitor&lt;/tt&gt;, &lt;tt&gt;pll&lt;/tt&gt; and &lt;tt&gt;stats&lt;/tt&gt; flags are enabled by default. The &lt;tt&gt;bclient&lt;/tt&gt; and &lt;tt&gt;pps&lt;/tt&gt; flags are disabled by default.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The following changes are in the version 3.5f distribution relative to the previous 3.4y version.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Please note the scripts for configuring radio clock drivers do not work. See the building and installing documentation for specific information.&lt;/li&gt;
&lt;li&gt;The documentation has been completely reworked in HTML format suitable for web browsing.&lt;/li&gt;
&lt;li&gt;The automatic build procedure has been improved to
&lt;ul&gt;
&lt;li&gt;support the line disciplines, streams modules and precision time kernel modifications. These are controlled by the presence of certain system-dependent header files in the &lt;tt&gt;/usr/include/sys&lt;/tt&gt; directory.&lt;/li&gt;
&lt;li&gt;include by default all reference clock drivers known to work with each combination of hardware and operating system. (The particular defaults are specified in the &lt;tt&gt;../machines&lt;/tt&gt; files for each machine.)&lt;/li&gt;
&lt;li&gt;activate precision time kernel modifications by default if detected by the build procedure. (Previous versions required an undocumented addition to the &lt;tt&gt;ntp.drift&lt;/tt&gt; file in order to activate these modifications.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Three TrueTime reference clock drivers, which did slightly different things with each model, have been replaced with one driver (type 5) that works with all models. Two new reference clock drivers have been added, one for the Bancomm IRIG interface, the other for the TrueTime GPS-VME interface. Both of these work only with the HP architecture.&lt;/li&gt;
&lt;li&gt;There is a new &lt;tt&gt;pps&lt;/tt&gt; option to the &lt;tt&gt;xntpdc&lt;/tt&gt; program and configuration file &lt;tt&gt;enable/disable&lt;/tt&gt; command, which enables or disables the PPS precision time control signal for both the PPS clock driver and kernel PPS interface, where available. This is primarily intended for situations where external equipment has malfunctioned or the signal has become excessively noisy.&lt;/li&gt;
&lt;li&gt;The &lt;tt&gt;precision&lt;/tt&gt; configuration file command and &lt;tt&gt;xntpdc&lt;/tt&gt; command have been removed; the precision variable quantity is now determined automatically and cannot be changed.&lt;/li&gt;
&lt;li&gt;The &lt;tt&gt;authenticate&lt;/tt&gt; and &lt;tt&gt;monitor&lt;/tt&gt; commands in &lt;tt&gt;xntpdc&lt;/tt&gt; have been removed; the functions formerly provided by these commands are now provided by the &lt;tt&gt;enable&lt;/tt&gt; and &lt;tt&gt;disable&lt;/tt&gt; commands.&lt;/li&gt;
&lt;li&gt;Fixed minor problems peculiar to different machines and system environments. Fixed minor problem in the PPS interfaces and mitigation rules. See the ./patches directory for details.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Version 3.5 has been compiled and run on at least the following machines, operating systems and compilers. In all known cases, if the gcc compiler eats it with some success, the cc compiler also enjoys the meal; the converse is not always true. Note that, while all clock drivers have been compiled, only certain ones have been tested with each machine and operating system.&lt;/p&gt;
&lt;p&gt;Previous versions have been compiled and run on at least the following machines, operating systems and compilers.&lt;/p&gt;
&lt;pre&gt;Machine   OS             Comp Notes
------------------------------------------------------------
A/UX      2.0.1, 3.x.x   gcc  LOCAL_CLOCK    (jmj (94/01/26 see hints)
AIX       3.2            ?    ?
Alpha     OSF/1 1.2a     gcc  no REFCLOCK         (dm 93/11/20)
Alpha     OSF/1 1.3      gcc  no REFCLOCK         (pb 93/10/25)
Alpha     OSF/1 2.0      gcc  no REFCLOCK         (dm 94/10/10)
Alpha     OSF/1 3.0      gcc  no REFCLOCK         (dm 95/07/15)
Alpha     OSF/1 3.2      gcc  all clock drivers (dm 96/02/07)
Convex    Convex OS 10.1 ?    ?
HP3xx     HPUX 9.01      cc   no REFCLOCK         (pb 93/10/25)
HP3xx     HPUX 8.0       cc   no REFCLOCK         (pb 93/10/25)
HP7xx     HPUX 9.0       cc   no REFCLOCK
hp7xx     HPUX 9.01      cc   local + PARSE       (kd 93/10/26)
hp7xx     HPUX 9.03      cc   all REFCLOCK drivers (dm 95/07/15)
HP7xx     HPUX 9.04      gcc  all clock drivers   (uw 96/02/21)
PC        Linux 1.3.59   gcc  (pb1 96/02/10)
MIPS      Ultrix 3a      gcc  green               (pb 93/10/26)
MIPS      Ultrix 4.3a    gcc  all REFCLOCK drivers (dm 93/11/20)
MIPS      Ultrix 4.4     gcc  all clock drivers (dm 96/02/07)
MX500     Sinix-m V5.40  cc   PARSE REFCLOCK
NCR3445   NCR SVR4       cc   LOCAL_CLOCK         (tm 93/11/29)
PC        BSD/386 1.0    gcc  possibly see &#34;build problems&#34;
PC        BSDI 2.0.1     gcc  (pb 96/02/18)
PC        Dell SVR4 v2.2 gcc  ?                   (tl 93/12/30)
PC        FreeBSD        gcc  LOCAL_CLOCK         see &#34;build problems&#34;
PC        NetBSD?        gcc  possibly see &#34;build problems&#34;
PC        Linux (pl14)   gcc  LOCAL_CLOCK         (dw 93/10/30)
PC        Unixware1/SVR4 cc   no tickadj, ?       (ras 93/04/11)
PC        WindowsNT 3.5  VisualC++2.0 no REFCLOCK (vb 95/04/11)
RS6000    AIX 3.2        gcc  no REFCLOCK
S2000     Sequent PTX 1.4 cc  LOCAL_CLOCK         (kd 93/11/10)
S2000     Sequent PTX 1.4 gcc LOCAL_CLOCK         (kd 93/11/10)
SGI       IRIX 4.0.5F    gcc  no REFCLOCK         (pb 93/11/10)
SGI       IRIX 5.3       cc   all clock drivers (dm 96/02/20)
Sun3      SunOS 4.1.1    gcc  no REFCLOCK         (pb 93/10/25)
Sun4      SunOS 4.1.1    gcc  all clock drivers   (dm 96/02/07)
Sun4      SunOS 4.1.3    gcc  all clock drivers   (dm 96/02/07)
Sun4      SunOS 5.1      gcc  no REFCLOCK         (pb 93/10/25)
Sun4      SunOS 5.2      gcc  no REFCLOCK         (dm 93/11/20)
Sun4      SunOS 5.3      gcc  all clock drivers   (dm 96/02/07)
Sun4      SunOS 5.4      gcc  all clock drivers   (dm 96/02/07)
Sun4      SunOS 5.5      ?    all clock drivers   (ao 96/02/16)
VAX-11    4.3 Tahoe      cc   all clock drivers   (dm 96/02/20)

vb: Viraj Bais &lt;vbais@mailman1.intel.com&gt;
pb1: Paolo Bevilacqua &lt;pab@uni.net&gt;
pb: Piete Brooks
dw: Torsten Duwe &lt;duwe@informatik.uni-erlangen.de&gt;
bf: Bill Foster &lt;bill@kryten.kryten.com&gt;
jmj: Jim Jagielski &lt;jim@jagubox.gsfc.nasa.gov&gt;
kd: Frank Kardel
tl: Tony Lill &lt;ajlill@tlill.hookup.net&gt;
dm: David Mills &lt;mills@udel.edu&gt;
tm: Tom Moore &lt;Tom.Moore@DaytonOH.NCR.COM&gt;
ao: Alexandre Oliva &lt;oliva@dcc.unicamp.br&gt;
ras: Ray Schnitzler &lt;schnitz@unipress.com&gt;
uw: Ulrich Windl &lt;Ulrich.Windl@rz.uni-regensburg.de&gt;
&lt;/pre&gt;&lt;blockquote&gt;
&lt;/blockquote&gt;

      </description>
    </item>
    
    <item>
      <title>Archives: Scratchbuilt CHU Receiver</title>
      <link>/archives/3-5.93e/driver7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/archives/3-5.93e/driver7/</guid>
      <description>
        
        
        &lt;h4 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver7/#synopsis&#34;&gt;Synopsis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver7/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver7/#monitor-data&#34;&gt;Monitor Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver7/#fudge-factors&#34;&gt;Fudge Factors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/archives/3-5.93e/driver7/#additional-information&#34;&gt;Additional Information&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h4&gt;
&lt;p&gt;Address: 127.127.7.&lt;em&gt;u&lt;/em&gt;&lt;br&gt;
Reference ID: &lt;tt&gt;CHU&lt;/tt&gt;&lt;br&gt;
Driver ID: &lt;tt&gt;CHU&lt;/tt&gt;&lt;br&gt;
Modem Port: &lt;tt&gt;/dev/chu_u_&lt;/tt&gt;; 300 baud, 8-bits, no parity&lt;br&gt;
Features: &lt;tt&gt;chu_clk&lt;/tt&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;description&#34;&gt;Description&lt;/h4&gt;
&lt;p&gt;This driver supports a shortwave receiver and special modem circuitry described in the ./gadget directory of the xntp3 distribution. It requires the &lt;tt&gt;chu_clk&lt;/tt&gt; line discipline or streams module described in the &lt;a href=&#34;/archives/3-5.93e/ldisc&#34;&gt;Line Disciplines and Streams Drivers&lt;/a&gt; page. It also requires a gadget box and 300-bps modem, such as described in the &lt;a href=&#34;/archives/3-5.93e/pps&#34;&gt;Pulse-per-second (PPS) Signal Interfacing&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;Unlike the NIST time services, whose timecode requires quite specialized hardware to interpret, the CHU timecode can be received directly via a serial port after demodulation. While there are currently no known commercial CHU receivers, the hardware required to receive the CHU timecode is fairly simple to build. While it is possible to configure several CHU units simultaneously, this is in general not useful.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;time1&lt;/tt&gt; fudge option can be used to set the CHU propagation delay, compensate for inherent latencies in the serial port hardware and operating system. The default value is 0.0025 seconds, which is about right for Toronto. Values for other locations can be calculated using the propdelay program in the util directory of the xntp3 distribution or equivalent means.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;time2&lt;/tt&gt; fudge option can also be used to compensate for inherent latencies in the serial port hardware and operating system. The value, which defaults to zero, is in addition to the propagation delay provided by the time1 option. The default value is 0.0002 seconds, which is about right for typical telephone modem chips.&lt;/p&gt;
&lt;p&gt;The &lt;tt&gt;flag1&lt;/tt&gt; option can be used to modify the averaging algorithm used to smooth the clock indications. Ordinarily, the algorithm picks the median of a set of samples, which is appropriate under conditions of poor to fair radio propagation conditions. If the clock is located relatively close to the WWV or WWVH transmitters, setting this flag will cause the algorithm to average the set of samples, which can reduce the residual jitter and improve accuracy.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;monitor-data&#34;&gt;Monitor Data&lt;/h4&gt;
&lt;p&gt;When enabled by the &lt;tt&gt;flag4&lt;/tt&gt; fudege flag, every received timecode is written to the &lt;tt&gt;clockstats&lt;/tt&gt; file.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;fudge-factors&#34;&gt;Fudge Factors&lt;/h4&gt;
&lt;dt&gt;&lt;tt&gt;time1 _time_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the ime offset calibration factor, in seconds and fraction, with default 0.0.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;time2 _time_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;stratum _number_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the driver stratum, in decimal from 0 to 15, with default 0.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;refid _string_&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Specifies the driver reference identifier, an ASCII string from one to four characters, with default &lt;tt&gt;CHU&lt;/tt&gt;.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag1 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;See above.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag2 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Not used by this driver.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag3 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enable &lt;tt&gt;ppsclock&lt;/tt&gt; line discipline/streams module if set.&lt;/p&gt;
&lt;dt&gt;&lt;tt&gt;flag4 0 | 1&lt;/tt&gt;&lt;/dt&gt;
&lt;p&gt;Enable &lt;tt&gt;clockstats&lt;/tt&gt; recording if set.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;additional-information&#34;&gt;Additional Information&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;/archives/3-5.93e/refclock&#34;&gt;Reference Clock Drivers&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
